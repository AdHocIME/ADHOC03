
ADHOC03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011184  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  08011324  08011324  00021324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011634  08011634  00021634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801163c  0801163c  0002163c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011640  08011640  00021640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000003a4  20000000  08011644  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006654  200003a8  080119e8  000303a8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  200069fc  080119e8  000369fc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000303a4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003479f  00000000  00000000  000303d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000064d4  00000000  00000000  00064b73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001da8  00000000  00000000  0006b048  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001b90  00000000  00000000  0006cdf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000fd68  00000000  00000000  0006e980  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000a037  00000000  00000000  0007e6e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0008871f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007db0  00000000  00000000  0008879c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003a8 	.word	0x200003a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801130c 	.word	0x0801130c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200003ac 	.word	0x200003ac
 80001dc:	0801130c 	.word	0x0801130c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <HAL_Init+0x40>)
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_Init+0x40>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000522:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000524:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <HAL_Init+0x40>)
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <HAL_Init+0x40>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800052e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000530:	4a08      	ldr	r2, [pc, #32]	; (8000554 <HAL_Init+0x40>)
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <HAL_Init+0x40>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800053a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f917 	bl	8000770 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f010 fc36 	bl	8010db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f010 fbe2 	bl	8010d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40023c00 	.word	0x40023c00

08000558 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <HAL_IncTick+0x20>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	461a      	mov	r2, r3
 8000562:	4b06      	ldr	r3, [pc, #24]	; (800057c <HAL_IncTick+0x24>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4413      	add	r3, r2
 8000568:	4a04      	ldr	r2, [pc, #16]	; (800057c <HAL_IncTick+0x24>)
 800056a:	6013      	str	r3, [r2, #0]
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	20000000 	.word	0x20000000
 800057c:	2000577c 	.word	0x2000577c

08000580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  return uwTick;
 8000584:	4b03      	ldr	r3, [pc, #12]	; (8000594 <HAL_GetTick+0x14>)
 8000586:	681b      	ldr	r3, [r3, #0]
}
 8000588:	4618      	mov	r0, r3
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	2000577c 	.word	0x2000577c

08000598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005a0:	f7ff ffee 	bl	8000580 <HAL_GetTick>
 80005a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005b0:	d005      	beq.n	80005be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005b2:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <HAL_Delay+0x40>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	461a      	mov	r2, r3
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4413      	add	r3, r2
 80005bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005be:	bf00      	nop
 80005c0:	f7ff ffde 	bl	8000580 <HAL_GetTick>
 80005c4:	4602      	mov	r2, r0
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	1ad2      	subs	r2, r2, r3
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d3f7      	bcc.n	80005c0 <HAL_Delay+0x28>
  {
  }
}
 80005d0:	bf00      	nop
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000000 	.word	0x20000000

080005dc <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f003 0307 	and.w	r3, r3, #7
 80005ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <NVIC_SetPriorityGrouping+0x44>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f2:	68ba      	ldr	r2, [r7, #8]
 80005f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005f8:	4013      	ands	r3, r2
 80005fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800060e:	4a04      	ldr	r2, [pc, #16]	; (8000620 <NVIC_SetPriorityGrouping+0x44>)
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	60d3      	str	r3, [r2, #12]
}
 8000614:	bf00      	nop
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <NVIC_GetPriorityGrouping+0x18>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	0a1b      	lsrs	r3, r3, #8
 800062e:	f003 0307 	and.w	r3, r3, #7
}
 8000632:	4618      	mov	r0, r3
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <NVIC_EnableIRQ+0x30>)
 800064c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000650:	095b      	lsrs	r3, r3, #5
 8000652:	79fa      	ldrb	r2, [r7, #7]
 8000654:	f002 021f 	and.w	r2, r2, #31
 8000658:	2001      	movs	r0, #1
 800065a:	fa00 f202 	lsl.w	r2, r0, r2
 800065e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e000e100 	.word	0xe000e100

08000674 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	6039      	str	r1, [r7, #0]
 800067e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000684:	2b00      	cmp	r3, #0
 8000686:	da0b      	bge.n	80006a0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000688:	490d      	ldr	r1, [pc, #52]	; (80006c0 <NVIC_SetPriority+0x4c>)
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	f003 030f 	and.w	r3, r3, #15
 8000690:	3b04      	subs	r3, #4
 8000692:	683a      	ldr	r2, [r7, #0]
 8000694:	b2d2      	uxtb	r2, r2
 8000696:	0112      	lsls	r2, r2, #4
 8000698:	b2d2      	uxtb	r2, r2
 800069a:	440b      	add	r3, r1
 800069c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800069e:	e009      	b.n	80006b4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a0:	4908      	ldr	r1, [pc, #32]	; (80006c4 <NVIC_SetPriority+0x50>)
 80006a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	0112      	lsls	r2, r2, #4
 80006ac:	b2d2      	uxtb	r2, r2
 80006ae:	440b      	add	r3, r1
 80006b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	e000ed00 	.word	0xe000ed00
 80006c4:	e000e100 	.word	0xe000e100

080006c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b089      	sub	sp, #36	; 0x24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	f003 0307 	and.w	r3, r3, #7
 80006da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006dc:	69fb      	ldr	r3, [r7, #28]
 80006de:	f1c3 0307 	rsb	r3, r3, #7
 80006e2:	2b04      	cmp	r3, #4
 80006e4:	bf28      	it	cs
 80006e6:	2304      	movcs	r3, #4
 80006e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	3304      	adds	r3, #4
 80006ee:	2b06      	cmp	r3, #6
 80006f0:	d902      	bls.n	80006f8 <NVIC_EncodePriority+0x30>
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	3b03      	subs	r3, #3
 80006f6:	e000      	b.n	80006fa <NVIC_EncodePriority+0x32>
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006fc:	2201      	movs	r2, #1
 80006fe:	69bb      	ldr	r3, [r7, #24]
 8000700:	fa02 f303 	lsl.w	r3, r2, r3
 8000704:	1e5a      	subs	r2, r3, #1
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	401a      	ands	r2, r3
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800070e:	2101      	movs	r1, #1
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	fa01 f303 	lsl.w	r3, r1, r3
 8000716:	1e59      	subs	r1, r3, #1
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	4313      	orrs	r3, r2
         );
}
 800071e:	4618      	mov	r0, r3
 8000720:	3724      	adds	r7, #36	; 0x24
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
	...

0800072c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3b01      	subs	r3, #1
 8000738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800073c:	d301      	bcc.n	8000742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800073e:	2301      	movs	r3, #1
 8000740:	e00f      	b.n	8000762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000742:	4a0a      	ldr	r2, [pc, #40]	; (800076c <SysTick_Config+0x40>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3b01      	subs	r3, #1
 8000748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800074a:	210f      	movs	r1, #15
 800074c:	f04f 30ff 	mov.w	r0, #4294967295
 8000750:	f7ff ff90 	bl	8000674 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <SysTick_Config+0x40>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075a:	4b04      	ldr	r3, [pc, #16]	; (800076c <SysTick_Config+0x40>)
 800075c:	2207      	movs	r2, #7
 800075e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000760:	2300      	movs	r3, #0
}
 8000762:	4618      	mov	r0, r3
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	e000e010 	.word	0xe000e010

08000770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f7ff ff2f 	bl	80005dc <NVIC_SetPriorityGrouping>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000786:	b580      	push	{r7, lr}
 8000788:	b086      	sub	sp, #24
 800078a:	af00      	add	r7, sp, #0
 800078c:	4603      	mov	r3, r0
 800078e:	60b9      	str	r1, [r7, #8]
 8000790:	607a      	str	r2, [r7, #4]
 8000792:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000798:	f7ff ff44 	bl	8000624 <NVIC_GetPriorityGrouping>
 800079c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	68b9      	ldr	r1, [r7, #8]
 80007a2:	6978      	ldr	r0, [r7, #20]
 80007a4:	f7ff ff90 	bl	80006c8 <NVIC_EncodePriority>
 80007a8:	4602      	mov	r2, r0
 80007aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ae:	4611      	mov	r1, r2
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ff5f 	bl	8000674 <NVIC_SetPriority>
}
 80007b6:	bf00      	nop
 80007b8:	3718      	adds	r7, #24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	4603      	mov	r3, r0
 80007c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ff37 	bl	8000640 <NVIC_EnableIRQ>
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f7ff ffa2 	bl	800072c <SysTick_Config>
 80007e8:	4603      	mov	r3, r0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b04      	cmp	r3, #4
 8000800:	d106      	bne.n	8000810 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000802:	4a09      	ldr	r2, [pc, #36]	; (8000828 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800080e:	e005      	b.n	800081c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000810:	4a05      	ldr	r2, [pc, #20]	; (8000828 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f023 0304 	bic.w	r3, r3, #4
 800081a:	6013      	str	r3, [r2, #0]
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	e000e010 	.word	0xe000e010

0800082c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800082c:	b480      	push	{r7}
 800082e:	b089      	sub	sp, #36	; 0x24
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
 8000846:	e159      	b.n	8000afc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000848:	2201      	movs	r2, #1
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	fa02 f303 	lsl.w	r3, r2, r3
 8000850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	4013      	ands	r3, r2
 800085a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800085c:	693a      	ldr	r2, [r7, #16]
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	429a      	cmp	r2, r3
 8000862:	f040 8148 	bne.w	8000af6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	2b02      	cmp	r3, #2
 800086c:	d003      	beq.n	8000876 <HAL_GPIO_Init+0x4a>
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	2b12      	cmp	r3, #18
 8000874:	d123      	bne.n	80008be <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	08da      	lsrs	r2, r3, #3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	3208      	adds	r2, #8
 800087e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000882:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	f003 0307 	and.w	r3, r3, #7
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	220f      	movs	r2, #15
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	43db      	mvns	r3, r3
 8000894:	69ba      	ldr	r2, [r7, #24]
 8000896:	4013      	ands	r3, r2
 8000898:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	691a      	ldr	r2, [r3, #16]
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	f003 0307 	and.w	r3, r3, #7
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	69ba      	ldr	r2, [r7, #24]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	08da      	lsrs	r2, r3, #3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3208      	adds	r2, #8
 80008b8:	69b9      	ldr	r1, [r7, #24]
 80008ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	2203      	movs	r2, #3
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	43db      	mvns	r3, r3
 80008d0:	69ba      	ldr	r2, [r7, #24]
 80008d2:	4013      	ands	r3, r2
 80008d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	f003 0203 	and.w	r2, r3, #3
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	69ba      	ldr	r2, [r7, #24]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	69ba      	ldr	r2, [r7, #24]
 80008f0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d00b      	beq.n	8000912 <HAL_GPIO_Init+0xe6>
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	2b02      	cmp	r3, #2
 8000900:	d007      	beq.n	8000912 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000906:	2b11      	cmp	r3, #17
 8000908:	d003      	beq.n	8000912 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	2b12      	cmp	r3, #18
 8000910:	d130      	bne.n	8000974 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	2203      	movs	r2, #3
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	43db      	mvns	r3, r3
 8000924:	69ba      	ldr	r2, [r7, #24]
 8000926:	4013      	ands	r3, r2
 8000928:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	68da      	ldr	r2, [r3, #12]
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	4313      	orrs	r3, r2
 800093a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	69ba      	ldr	r2, [r7, #24]
 8000940:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000948:	2201      	movs	r2, #1
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	43db      	mvns	r3, r3
 8000952:	69ba      	ldr	r2, [r7, #24]
 8000954:	4013      	ands	r3, r2
 8000956:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	091b      	lsrs	r3, r3, #4
 800095e:	f003 0201 	and.w	r2, r3, #1
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	4313      	orrs	r3, r2
 800096c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	69ba      	ldr	r2, [r7, #24]
 8000972:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	2203      	movs	r2, #3
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	43db      	mvns	r3, r3
 8000986:	69ba      	ldr	r2, [r7, #24]
 8000988:	4013      	ands	r3, r2
 800098a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	689a      	ldr	r2, [r3, #8]
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	4313      	orrs	r3, r2
 800099c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	69ba      	ldr	r2, [r7, #24]
 80009a2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	f000 80a2 	beq.w	8000af6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4a56      	ldr	r2, [pc, #344]	; (8000b10 <HAL_GPIO_Init+0x2e4>)
 80009b8:	4b55      	ldr	r3, [pc, #340]	; (8000b10 <HAL_GPIO_Init+0x2e4>)
 80009ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c0:	6453      	str	r3, [r2, #68]	; 0x44
 80009c2:	4b53      	ldr	r3, [pc, #332]	; (8000b10 <HAL_GPIO_Init+0x2e4>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009ce:	4a51      	ldr	r2, [pc, #324]	; (8000b14 <HAL_GPIO_Init+0x2e8>)
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	089b      	lsrs	r3, r3, #2
 80009d4:	3302      	adds	r3, #2
 80009d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	f003 0303 	and.w	r3, r3, #3
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	220f      	movs	r2, #15
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	43db      	mvns	r3, r3
 80009ec:	69ba      	ldr	r2, [r7, #24]
 80009ee:	4013      	ands	r3, r2
 80009f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a48      	ldr	r2, [pc, #288]	; (8000b18 <HAL_GPIO_Init+0x2ec>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d019      	beq.n	8000a2e <HAL_GPIO_Init+0x202>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a47      	ldr	r2, [pc, #284]	; (8000b1c <HAL_GPIO_Init+0x2f0>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d013      	beq.n	8000a2a <HAL_GPIO_Init+0x1fe>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a46      	ldr	r2, [pc, #280]	; (8000b20 <HAL_GPIO_Init+0x2f4>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d00d      	beq.n	8000a26 <HAL_GPIO_Init+0x1fa>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a45      	ldr	r2, [pc, #276]	; (8000b24 <HAL_GPIO_Init+0x2f8>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d007      	beq.n	8000a22 <HAL_GPIO_Init+0x1f6>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a44      	ldr	r2, [pc, #272]	; (8000b28 <HAL_GPIO_Init+0x2fc>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d101      	bne.n	8000a1e <HAL_GPIO_Init+0x1f2>
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	e008      	b.n	8000a30 <HAL_GPIO_Init+0x204>
 8000a1e:	2307      	movs	r3, #7
 8000a20:	e006      	b.n	8000a30 <HAL_GPIO_Init+0x204>
 8000a22:	2303      	movs	r3, #3
 8000a24:	e004      	b.n	8000a30 <HAL_GPIO_Init+0x204>
 8000a26:	2302      	movs	r3, #2
 8000a28:	e002      	b.n	8000a30 <HAL_GPIO_Init+0x204>
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e000      	b.n	8000a30 <HAL_GPIO_Init+0x204>
 8000a2e:	2300      	movs	r3, #0
 8000a30:	69fa      	ldr	r2, [r7, #28]
 8000a32:	f002 0203 	and.w	r2, r2, #3
 8000a36:	0092      	lsls	r2, r2, #2
 8000a38:	4093      	lsls	r3, r2
 8000a3a:	69ba      	ldr	r2, [r7, #24]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a40:	4934      	ldr	r1, [pc, #208]	; (8000b14 <HAL_GPIO_Init+0x2e8>)
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	089b      	lsrs	r3, r3, #2
 8000a46:	3302      	adds	r3, #2
 8000a48:	69ba      	ldr	r2, [r7, #24]
 8000a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a4e:	4b37      	ldr	r3, [pc, #220]	; (8000b2c <HAL_GPIO_Init+0x300>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	43db      	mvns	r3, r3
 8000a58:	69ba      	ldr	r2, [r7, #24]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d003      	beq.n	8000a72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a6a:	69ba      	ldr	r2, [r7, #24]
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a72:	4a2e      	ldr	r2, [pc, #184]	; (8000b2c <HAL_GPIO_Init+0x300>)
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a78:	4b2c      	ldr	r3, [pc, #176]	; (8000b2c <HAL_GPIO_Init+0x300>)
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	43db      	mvns	r3, r3
 8000a82:	69ba      	ldr	r2, [r7, #24]
 8000a84:	4013      	ands	r3, r2
 8000a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d003      	beq.n	8000a9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a94:	69ba      	ldr	r2, [r7, #24]
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a9c:	4a23      	ldr	r2, [pc, #140]	; (8000b2c <HAL_GPIO_Init+0x300>)
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aa2:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <HAL_GPIO_Init+0x300>)
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	69ba      	ldr	r2, [r7, #24]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d003      	beq.n	8000ac6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000abe:	69ba      	ldr	r2, [r7, #24]
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ac6:	4a19      	ldr	r2, [pc, #100]	; (8000b2c <HAL_GPIO_Init+0x300>)
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <HAL_GPIO_Init+0x300>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	69ba      	ldr	r2, [r7, #24]
 8000ad8:	4013      	ands	r3, r2
 8000ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d003      	beq.n	8000af0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ae8:	69ba      	ldr	r2, [r7, #24]
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000af0:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <HAL_GPIO_Init+0x300>)
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	3301      	adds	r3, #1
 8000afa:	61fb      	str	r3, [r7, #28]
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	2b0f      	cmp	r3, #15
 8000b00:	f67f aea2 	bls.w	8000848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b04:	bf00      	nop
 8000b06:	3724      	adds	r7, #36	; 0x24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40013800 	.word	0x40013800
 8000b18:	40020000 	.word	0x40020000
 8000b1c:	40020400 	.word	0x40020400
 8000b20:	40020800 	.word	0x40020800
 8000b24:	40020c00 	.word	0x40020c00
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	40013c00 	.word	0x40013c00

08000b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	807b      	strh	r3, [r7, #2]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b40:	787b      	ldrb	r3, [r7, #1]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d003      	beq.n	8000b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b46:	887a      	ldrh	r2, [r7, #2]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b4c:	e003      	b.n	8000b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b4e:	887b      	ldrh	r3, [r7, #2]
 8000b50:	041a      	lsls	r2, r3, #16
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	619a      	str	r2, [r3, #24]
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	695a      	ldr	r2, [r3, #20]
 8000b72:	887b      	ldrh	r3, [r7, #2]
 8000b74:	405a      	eors	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	615a      	str	r2, [r3, #20]
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8000b86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b88:	b08f      	sub	sp, #60	; 0x3c
 8000b8a:	af0a      	add	r7, sp, #40	; 0x28
 8000b8c:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d101      	bne.n	8000b9c <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	e0f7      	b.n	8000d8c <HAL_PCD_Init+0x206>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2203      	movs	r2, #3
 8000ba0:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f003 f951 	bl	8003e4c <HAL_PCD_MspInit>

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f001 ff68 	bl	8002a84 <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	603b      	str	r3, [r7, #0]
 8000bba:	687e      	ldr	r6, [r7, #4]
 8000bbc:	466d      	mov	r5, sp
 8000bbe:	f106 0410 	add.w	r4, r6, #16
 8000bc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bce:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bd2:	1d33      	adds	r3, r6, #4
 8000bd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bd6:	6838      	ldr	r0, [r7, #0]
 8000bd8:	f001 fef2 	bl	80029c0 <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 ff5f 	bl	8002aa6 <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	e04c      	b.n	8000c88 <HAL_PCD_Init+0x102>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8000bee:	6879      	ldr	r1, [r7, #4]
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	00db      	lsls	r3, r3, #3
 8000bf6:	1a9b      	subs	r3, r3, r2
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	440b      	add	r3, r1
 8000bfc:	3339      	adds	r3, #57	; 0x39
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	b2d8      	uxtb	r0, r3
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	68fa      	ldr	r2, [r7, #12]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	1a9b      	subs	r3, r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	440b      	add	r3, r1
 8000c14:	3338      	adds	r3, #56	; 0x38
 8000c16:	4602      	mov	r2, r0
 8000c18:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	b298      	uxth	r0, r3
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	4613      	mov	r3, r2
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	1a9b      	subs	r3, r3, r2
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	440b      	add	r3, r1
 8000c2c:	333e      	adds	r3, #62	; 0x3e
 8000c2e:	4602      	mov	r2, r0
 8000c30:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	68fa      	ldr	r2, [r7, #12]
 8000c36:	4613      	mov	r3, r2
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	1a9b      	subs	r3, r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	440b      	add	r3, r1
 8000c40:	333b      	adds	r3, #59	; 0x3b
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket = 0U;
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	1a9b      	subs	r3, r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	440b      	add	r3, r1
 8000c54:	3340      	adds	r3, #64	; 0x40
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0U;
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	68fa      	ldr	r2, [r7, #12]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	1a9b      	subs	r3, r3, r2
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	440b      	add	r3, r1
 8000c68:	3344      	adds	r3, #68	; 0x44
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0U;
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	68fa      	ldr	r2, [r7, #12]
 8000c72:	4613      	mov	r3, r2
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	1a9b      	subs	r3, r3, r2
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	334c      	adds	r3, #76	; 0x4c
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < 15U; i++)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	3301      	adds	r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2b0e      	cmp	r3, #14
 8000c8c:	d9af      	bls.n	8000bee <HAL_PCD_Init+0x68>
 }
 
 for (i = 0U; i < 15U; i++)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	e05a      	b.n	8000d4a <HAL_PCD_Init+0x1c4>
 {
   hpcd->OUT_ep[i].is_in = 0U;
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	1a9b      	subs	r3, r3, r2
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	f203 13f9 	addw	r3, r3, #505	; 0x1f9
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	b2d8      	uxtb	r0, r3
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	68fa      	ldr	r2, [r7, #12]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	1a9b      	subs	r3, r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	440b      	add	r3, r1
 8000cbc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	b298      	uxth	r0, r3
 8000cc8:	6879      	ldr	r1, [r7, #4]
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	1a9b      	subs	r3, r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	333e      	adds	r3, #62	; 0x3e
 8000cd8:	4602      	mov	r2, r0
 8000cda:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000cdc:	6879      	ldr	r1, [r7, #4]
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	1a9b      	subs	r3, r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	440b      	add	r3, r1
 8000cea:	f203 13fb 	addw	r3, r3, #507	; 0x1fb
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0U;
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	68fa      	ldr	r2, [r7, #12]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	1a9b      	subs	r3, r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	440b      	add	r3, r1
 8000d00:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d08:	6879      	ldr	r1, [r7, #4]
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	1a9b      	subs	r3, r3, r2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	440b      	add	r3, r1
 8000d16:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0U;
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	68fa      	ldr	r2, [r7, #12]
 8000d22:	4613      	mov	r3, r2
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	1a9b      	subs	r3, r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	3340      	adds	r3, #64	; 0x40
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	4413      	add	r3, r2
 8000d40:	2200      	movs	r2, #0
 8000d42:	605a      	str	r2, [r3, #4]
 for (i = 0U; i < 15U; i++)
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	3301      	adds	r3, #1
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	2b0e      	cmp	r3, #14
 8000d4e:	d9a1      	bls.n	8000c94 <HAL_PCD_Init+0x10e>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	603b      	str	r3, [r7, #0]
 8000d56:	687e      	ldr	r6, [r7, #4]
 8000d58:	466d      	mov	r5, sp
 8000d5a:	f106 0410 	add.w	r4, r6, #16
 8000d5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d6e:	1d33      	adds	r3, r6, #4
 8000d70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d72:	6838      	ldr	r0, [r7, #0]
 8000d74:	f001 febe 	bl	8002af4 <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f002 fedf 	bl	8003b48 <USB_DevDisconnect>
 return HAL_OK;
 8000d8a:	2300      	movs	r3, #0
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d94 <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd); 
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d101      	bne.n	8000daa <HAL_PCD_Start+0x16>
 8000da6:	2302      	movs	r3, #2
 8000da8:	e012      	b.n	8000dd0 <HAL_PCD_Start+0x3c>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2201      	movs	r2, #1
 8000dae:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f002 feaf 	bl	8003b1a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f001 fe4e 	bl	8002a62 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8000dce:	2300      	movs	r3, #0
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08c      	sub	sp, #48	; 0x30
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	623b      	str	r3, [r7, #32]
  uint32_t i = 0U, ep_intr = 0U, epint = 0U, epnum = 0U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dea:	2300      	movs	r3, #0
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
 8000df2:	2300      	movs	r3, #0
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk = 0U, temp = 0U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61bb      	str	r3, [r7, #24]
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
 8000dfe:	4b7c      	ldr	r3, [pc, #496]	; (8000ff0 <HAL_PCD_IRQHandler+0x218>)
 8000e00:	613b      	str	r3, [r7, #16]
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f002 ff40 	bl	8003c8c <USB_GetMode>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8468 	bne.w	80016e4 <HAL_PCD_IRQHandler+0x90c>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f002 feac 	bl	8003b76 <USB_ReadInterrupts>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f000 845e 	beq.w	80016e2 <HAL_PCD_IRQHandler+0x90a>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f002 fea3 	bl	8003b76 <USB_ReadInterrupts>
 8000e30:	4603      	mov	r3, r0
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d107      	bne.n	8000e4a <HAL_PCD_IRQHandler+0x72>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	6812      	ldr	r2, [r2, #0]
 8000e42:	6952      	ldr	r2, [r2, #20]
 8000e44:	f002 0202 	and.w	r2, r2, #2
 8000e48:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f002 fe91 	bl	8003b76 <USB_ReadInterrupts>
 8000e54:	4603      	mov	r3, r0
 8000e56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e5a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000e5e:	f040 80b2 	bne.w	8000fc6 <HAL_PCD_IRQHandler+0x1ee>
    {
      epnum = 0U;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f002 fe98 	bl	8003ba0 <USB_ReadDevAllOutEpInterrupt>
 8000e70:	62b8      	str	r0, [r7, #40]	; 0x28
      
      while ( ep_intr )
 8000e72:	e0a4      	b.n	8000fbe <HAL_PCD_IRQHandler+0x1e6>
      {
        if (ep_intr & 0x1U)
 8000e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f000 8099 	beq.w	8000fb2 <HAL_PCD_IRQHandler+0x1da>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	4611      	mov	r1, r2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f002 feb8 	bl	8003c00 <USB_ReadDevOutEPInterrupt>
 8000e90:	61f8      	str	r0, [r7, #28]
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d06b      	beq.n	8000f74 <HAL_PCD_IRQHandler+0x19c>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9e:	015a      	lsls	r2, r3, #5
 8000ea0:	6a3b      	ldr	r3, [r7, #32]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	2301      	movs	r3, #1
 8000eac:	6093      	str	r3, [r2, #8]
            
            if(hpcd->Init.dma_enable == 1U)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	691b      	ldr	r3, [r3, #16]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d13c      	bne.n	8000f30 <HAL_PCD_IRQHandler+0x158>
            {
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eba:	4613      	mov	r3, r2
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	1a9b      	subs	r3, r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ecc:	0159      	lsls	r1, r3, #5
 8000ece:	6a3b      	ldr	r3, [r7, #32]
 8000ed0:	440b      	add	r3, r1
 8000ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000ed6:	691b      	ldr	r3, [r3, #16]
 8000ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000edc:	1ad1      	subs	r1, r2, r3
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	1a9b      	subs	r3, r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4403      	add	r3, r0
 8000eec:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000ef0:	6019      	str	r1, [r3, #0]
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	1a9b      	subs	r3, r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	440b      	add	r3, r1
 8000f00:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000f04:	6819      	ldr	r1, [r3, #0]
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	1a9b      	subs	r3, r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	4403      	add	r3, r0
 8000f14:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4419      	add	r1, r3
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f20:	4613      	mov	r3, r2
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	1a9b      	subs	r3, r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4403      	add	r3, r0
 8000f2a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000f2e:	6019      	str	r1, [r3, #0]
            }
            
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8000f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	4619      	mov	r1, r3
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f002 ffe6 	bl	8003f08 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	691b      	ldr	r3, [r3, #16]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d117      	bne.n	8000f74 <HAL_PCD_IRQHandler+0x19c>
            {
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8000f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d114      	bne.n	8000f74 <HAL_PCD_IRQHandler+0x19c>
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f4e:	4613      	mov	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	1a9b      	subs	r3, r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	440b      	add	r3, r1
 8000f58:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d108      	bne.n	8000f74 <HAL_PCD_IRQHandler+0x19c>
              {
                 /* this is ZLP, so prepare EP0 for next setup */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6818      	ldr	r0, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	2101      	movs	r1, #1
 8000f70:	f002 fed0 	bl	8003d14 <USB_EP0_OutStart>
              }              
            }
          }
          
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d00b      	beq.n	8000f96 <HAL_PCD_IRQHandler+0x1be>
          {
            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f002 ffb0 	bl	8003ee4 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f86:	015a      	lsls	r2, r3, #5
 8000f88:	6a3b      	ldr	r3, [r7, #32]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f90:	461a      	mov	r2, r3
 8000f92:	2308      	movs	r3, #8
 8000f94:	6093      	str	r3, [r2, #8]
          }
          
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	f003 0310 	and.w	r3, r3, #16
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d008      	beq.n	8000fb2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa2:	015a      	lsls	r2, r3, #5
 8000fa4:	6a3b      	ldr	r3, [r7, #32]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fac:	461a      	mov	r2, r3
 8000fae:	2310      	movs	r3, #16
 8000fb0:	6093      	str	r3, [r2, #8]
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
          }
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        }
        epnum++;
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8000fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fba:	085b      	lsrs	r3, r3, #1
 8000fbc:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 8000fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	f47f af57 	bne.w	8000e74 <HAL_PCD_IRQHandler+0x9c>
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f002 fdd3 	bl	8003b76 <USB_ReadInterrupts>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000fda:	f040 80c5 	bne.w	8001168 <HAL_PCD_IRQHandler+0x390>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f002 fdf4 	bl	8003bd0 <USB_ReadDevAllInEpInterrupt>
 8000fe8:	62b8      	str	r0, [r7, #40]	; 0x28
      
      epnum = 0U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
      
      while ( ep_intr )
 8000fee:	e0b7      	b.n	8001160 <HAL_PCD_IRQHandler+0x388>
 8000ff0:	0aba9500 	.word	0x0aba9500
      {
        if (ep_intr & 0x1U) /* In ITR */
 8000ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f000 80aa 	beq.w	8001154 <HAL_PCD_IRQHandler+0x37c>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	4611      	mov	r1, r2
 800100a:	4618      	mov	r0, r3
 800100c:	f002 fe14 	bl	8003c38 <USB_ReadDevInEPInterrupt>
 8001010:	61f8      	str	r0, [r7, #28]

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	2b00      	cmp	r3, #0
 800101a:	d05a      	beq.n	80010d2 <HAL_PCD_IRQHandler+0x2fa>
          {
            fifoemptymsk = 0x1U << epnum;
 800101c:	2201      	movs	r2, #1
 800101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	61bb      	str	r3, [r7, #24]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001026:	6a3b      	ldr	r3, [r7, #32]
 8001028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800102c:	4619      	mov	r1, r3
 800102e:	6a3b      	ldr	r3, [r7, #32]
 8001030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	43db      	mvns	r3, r3
 800103a:	4013      	ands	r3, r2
 800103c:	634b      	str	r3, [r1, #52]	; 0x34
            
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001040:	015a      	lsls	r2, r3, #5
 8001042:	6a3b      	ldr	r3, [r7, #32]
 8001044:	4413      	add	r3, r2
 8001046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800104a:	461a      	mov	r2, r3
 800104c:	2301      	movs	r3, #1
 800104e:	6093      	str	r3, [r2, #8]
            
            if (hpcd->Init.dma_enable == 1U)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	691b      	ldr	r3, [r3, #16]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d11b      	bne.n	8001090 <HAL_PCD_IRQHandler+0x2b8>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800105c:	4613      	mov	r3, r2
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	1a9b      	subs	r3, r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	3344      	adds	r3, #68	; 0x44
 8001068:	6819      	ldr	r1, [r3, #0]
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800106e:	4613      	mov	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	1a9b      	subs	r3, r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4403      	add	r3, r0
 8001078:	3340      	adds	r3, #64	; 0x40
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4419      	add	r1, r3
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001082:	4613      	mov	r3, r2
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	1a9b      	subs	r3, r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4403      	add	r3, r0
 800108c:	3344      	adds	r3, #68	; 0x44
 800108e:	6019      	str	r1, [r3, #0]
            }
                                      
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	b2db      	uxtb	r3, r3
 8001094:	4619      	mov	r1, r3
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f002 ff51 	bl	8003f3e <HAL_PCD_DataInStageCallback>

            if (hpcd->Init.dma_enable == 1U)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d116      	bne.n	80010d2 <HAL_PCD_IRQHandler+0x2fa>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80010a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d113      	bne.n	80010d2 <HAL_PCD_IRQHandler+0x2fa>
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ae:	4613      	mov	r3, r2
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	1a9b      	subs	r3, r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	440b      	add	r3, r1
 80010b8:	334c      	adds	r3, #76	; 0x4c
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d108      	bne.n	80010d2 <HAL_PCD_IRQHandler+0x2fa>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80010ca:	461a      	mov	r2, r3
 80010cc:	2101      	movs	r1, #1
 80010ce:	f002 fe21 	bl	8003d14 <USB_EP0_OutStart>
              }
            }           
          }
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	f003 0308 	and.w	r3, r3, #8
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d008      	beq.n	80010ee <HAL_PCD_IRQHandler+0x316>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	015a      	lsls	r2, r3, #5
 80010e0:	6a3b      	ldr	r3, [r7, #32]
 80010e2:	4413      	add	r3, r2
 80010e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010e8:	461a      	mov	r2, r3
 80010ea:	2308      	movs	r3, #8
 80010ec:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	f003 0310 	and.w	r3, r3, #16
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d008      	beq.n	800110a <HAL_PCD_IRQHandler+0x332>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fa:	015a      	lsls	r2, r3, #5
 80010fc:	6a3b      	ldr	r3, [r7, #32]
 80010fe:	4413      	add	r3, r2
 8001100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001104:	461a      	mov	r2, r3
 8001106:	2310      	movs	r3, #16
 8001108:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001110:	2b00      	cmp	r3, #0
 8001112:	d008      	beq.n	8001126 <HAL_PCD_IRQHandler+0x34e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001116:	015a      	lsls	r2, r3, #5
 8001118:	6a3b      	ldr	r3, [r7, #32]
 800111a:	4413      	add	r3, r2
 800111c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001120:	461a      	mov	r2, r3
 8001122:	2340      	movs	r3, #64	; 0x40
 8001124:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d008      	beq.n	8001142 <HAL_PCD_IRQHandler+0x36a>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001132:	015a      	lsls	r2, r3, #5
 8001134:	6a3b      	ldr	r3, [r7, #32]
 8001136:	4413      	add	r3, r2
 8001138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800113c:	461a      	mov	r2, r3
 800113e:	2302      	movs	r3, #2
 8001140:	6093      	str	r3, [r2, #8]
          }       
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_PCD_IRQHandler+0x37c>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
 800114c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 fcf1 	bl	8001b36 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001156:	3301      	adds	r3, #1
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800115a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115c:	085b      	lsrs	r3, r3, #1
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 8001160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001162:	2b00      	cmp	r3, #0
 8001164:	f47f af46 	bne.w	8000ff4 <HAL_PCD_IRQHandler+0x21c>
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f002 fd02 	bl	8003b76 <USB_ReadInterrupts>
 8001172:	4603      	mov	r3, r0
 8001174:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001178:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800117c:	d115      	bne.n	80011aa <HAL_PCD_IRQHandler+0x3d2>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800117e:	6a3b      	ldr	r3, [r7, #32]
 8001180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001184:	461a      	mov	r2, r3
 8001186:	6a3b      	ldr	r3, [r7, #32]
 8001188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f023 0301 	bic.w	r3, r3, #1
 8001192:	6053      	str	r3, [r2, #4]
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f002 ff4b 	bl	8004030 <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	6952      	ldr	r2, [r2, #20]
 80011a4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80011a8:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f002 fce1 	bl	8003b76 <USB_ReadInterrupts>
 80011b4:	4603      	mov	r3, r0
 80011b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011be:	d112      	bne.n	80011e6 <HAL_PCD_IRQHandler+0x40e>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d102      	bne.n	80011d6 <HAL_PCD_IRQHandler+0x3fe>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f002 ff05 	bl	8003fe0 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	6812      	ldr	r2, [r2, #0]
 80011de:	6952      	ldr	r2, [r2, #20]
 80011e0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80011e4:	615a      	str	r2, [r3, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 fcc3 	bl	8003b76 <USB_ReadInterrupts>
 80011f0:	4603      	mov	r3, r0
 80011f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011fa:	f040 8091 	bne.w	8001320 <HAL_PCD_IRQHandler+0x548>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 80011fe:	6a3b      	ldr	r3, [r7, #32]
 8001200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001204:	461a      	mov	r2, r3
 8001206:	6a3b      	ldr	r3, [r7, #32]
 8001208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f023 0301 	bic.w	r3, r3, #1
 8001212:	6053      	str	r3, [r2, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2110      	movs	r1, #16
 800121a:	4618      	mov	r0, r3
 800121c:	f001 fd9c 	bl	8002d58 <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001220:	2300      	movs	r3, #0
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001224:	e014      	b.n	8001250 <HAL_PCD_IRQHandler+0x478>
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8001226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001228:	015a      	lsls	r2, r3, #5
 800122a:	6a3b      	ldr	r3, [r7, #32]
 800122c:	4413      	add	r3, r2
 800122e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001232:	461a      	mov	r2, r3
 8001234:	23ff      	movs	r3, #255	; 0xff
 8001236:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 8001238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123a:	015a      	lsls	r2, r3, #5
 800123c:	6a3b      	ldr	r3, [r7, #32]
 800123e:	4413      	add	r3, r2
 8001240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001244:	461a      	mov	r2, r3
 8001246:	23ff      	movs	r3, #255	; 0xff
 8001248:	6093      	str	r3, [r2, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800124a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124c:	3301      	adds	r3, #1
 800124e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	429a      	cmp	r2, r3
 8001258:	d8e5      	bhi.n	8001226 <HAL_PCD_IRQHandler+0x44e>
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 800125a:	6a3b      	ldr	r3, [r7, #32]
 800125c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001260:	461a      	mov	r2, r3
 8001262:	f04f 33ff 	mov.w	r3, #4294967295
 8001266:	6193      	str	r3, [r2, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001268:	6a3b      	ldr	r3, [r7, #32]
 800126a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800126e:	461a      	mov	r2, r3
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800127c:	61d3      	str	r3, [r2, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	2b00      	cmp	r3, #0
 8001284:	d018      	beq.n	80012b8 <HAL_PCD_IRQHandler+0x4e0>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8001286:	6a3b      	ldr	r3, [r7, #32]
 8001288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800128c:	461a      	mov	r2, r3
 800128e:	6a3b      	ldr	r3, [r7, #32]
 8001290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001298:	f043 030b 	orr.w	r3, r3, #11
 800129c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 80012a0:	6a3b      	ldr	r3, [r7, #32]
 80012a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012a6:	461a      	mov	r2, r3
 80012a8:	6a3b      	ldr	r3, [r7, #32]
 80012aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b0:	f043 030b 	orr.w	r3, r3, #11
 80012b4:	6453      	str	r3, [r2, #68]	; 0x44
 80012b6:	e015      	b.n	80012e4 <HAL_PCD_IRQHandler+0x50c>
      else
      {
#ifdef USB_OTG_DOEPINT_OTEPSPR
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
#else
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 80012b8:	6a3b      	ldr	r3, [r7, #32]
 80012ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012be:	461a      	mov	r2, r3
 80012c0:	6a3b      	ldr	r3, [r7, #32]
 80012c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	f043 030b 	orr.w	r3, r3, #11
 80012cc:	6153      	str	r3, [r2, #20]
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012d4:	461a      	mov	r2, r3
 80012d6:	6a3b      	ldr	r3, [r7, #32]
 80012d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	f043 030b 	orr.w	r3, r3, #11
 80012e2:	6113      	str	r3, [r2, #16]
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80012e4:	6a3b      	ldr	r3, [r7, #32]
 80012e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012ea:	461a      	mov	r2, r3
 80012ec:	6a3b      	ldr	r3, [r7, #32]
 80012ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80012f8:	6013      	str	r3, [r2, #0]
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	b2d9      	uxtb	r1, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 800130a:	461a      	mov	r2, r3
 800130c:	f002 fd02 	bl	8003d14 <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	6812      	ldr	r2, [r2, #0]
 8001318:	6952      	ldr	r2, [r2, #20]
 800131a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800131e:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f002 fc26 	bl	8003b76 <USB_ReadInterrupts>
 800132a:	4603      	mov	r3, r0
 800132c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001334:	f040 80da 	bne.w	80014ec <HAL_PCD_IRQHandler+0x714>
    {
      USB_ActivateSetup(hpcd->Instance);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f002 fcb3 	bl	8003ca8 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	6812      	ldr	r2, [r2, #0]
 800134a:	68d2      	ldr	r2, [r2, #12]
 800134c:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8001350:	60da      	str	r2, [r3, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f001 fd5e 	bl	8002e18 <USB_GetDevSpeed>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d10f      	bne.n	8001382 <HAL_PCD_IRQHandler+0x5aa>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800136e:	615a      	str	r2, [r3, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6812      	ldr	r2, [r2, #0]
 8001378:	68d2      	ldr	r2, [r2, #12]
 800137a:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	e0a9      	b.n	80014d6 <HAL_PCD_IRQHandler+0x6fe>
      }
      else
      {
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2203      	movs	r2, #3
 8001386:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2240      	movs	r2, #64	; 0x40
 800138c:	615a      	str	r2, [r3, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */
        
        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 800138e:	f001 f8ad 	bl	80024ec <HAL_RCC_GetHCLKFreq>
 8001392:	6138      	str	r0, [r7, #16]
        
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4a7b      	ldr	r2, [pc, #492]	; (8001584 <HAL_PCD_IRQHandler+0x7ac>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d90c      	bls.n	80013b6 <HAL_PCD_IRQHandler+0x5de>
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4a7a      	ldr	r2, [pc, #488]	; (8001588 <HAL_PCD_IRQHandler+0x7b0>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d808      	bhi.n	80013b6 <HAL_PCD_IRQHandler+0x5de>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	6812      	ldr	r2, [r2, #0]
 80013ac:	68d2      	ldr	r2, [r2, #12]
 80013ae:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	e08f      	b.n	80014d6 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4a73      	ldr	r2, [pc, #460]	; (8001588 <HAL_PCD_IRQHandler+0x7b0>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d90c      	bls.n	80013d8 <HAL_PCD_IRQHandler+0x600>
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	4a72      	ldr	r2, [pc, #456]	; (800158c <HAL_PCD_IRQHandler+0x7b4>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d808      	bhi.n	80013d8 <HAL_PCD_IRQHandler+0x600>
        {
          /* hclk Clock Range between 15-16 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	6812      	ldr	r2, [r2, #0]
 80013ce:	68d2      	ldr	r2, [r2, #12]
 80013d0:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	e07e      	b.n	80014d6 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4a6c      	ldr	r2, [pc, #432]	; (800158c <HAL_PCD_IRQHandler+0x7b4>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d90c      	bls.n	80013fa <HAL_PCD_IRQHandler+0x622>
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	4a6b      	ldr	r2, [pc, #428]	; (8001590 <HAL_PCD_IRQHandler+0x7b8>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d808      	bhi.n	80013fa <HAL_PCD_IRQHandler+0x622>
        {
          /* hclk Clock Range between 16-17.2 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	6812      	ldr	r2, [r2, #0]
 80013f0:	68d2      	ldr	r2, [r2, #12]
 80013f2:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 80013f6:	60da      	str	r2, [r3, #12]
 80013f8:	e06d      	b.n	80014d6 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4a64      	ldr	r2, [pc, #400]	; (8001590 <HAL_PCD_IRQHandler+0x7b8>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d90c      	bls.n	800141c <HAL_PCD_IRQHandler+0x644>
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4a63      	ldr	r2, [pc, #396]	; (8001594 <HAL_PCD_IRQHandler+0x7bc>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d808      	bhi.n	800141c <HAL_PCD_IRQHandler+0x644>
        {
          /* hclk Clock Range between 17.2-18.5 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6812      	ldr	r2, [r2, #0]
 8001412:	68d2      	ldr	r2, [r2, #12]
 8001414:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	e05c      	b.n	80014d6 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4a5d      	ldr	r2, [pc, #372]	; (8001594 <HAL_PCD_IRQHandler+0x7bc>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d90c      	bls.n	800143e <HAL_PCD_IRQHandler+0x666>
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4a5c      	ldr	r2, [pc, #368]	; (8001598 <HAL_PCD_IRQHandler+0x7c0>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d808      	bhi.n	800143e <HAL_PCD_IRQHandler+0x666>
        {
          /* hclk Clock Range between 18.5-20 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	6812      	ldr	r2, [r2, #0]
 8001434:	68d2      	ldr	r2, [r2, #12]
 8001436:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	e04b      	b.n	80014d6 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4a55      	ldr	r2, [pc, #340]	; (8001598 <HAL_PCD_IRQHandler+0x7c0>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d90c      	bls.n	8001460 <HAL_PCD_IRQHandler+0x688>
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	4a54      	ldr	r2, [pc, #336]	; (800159c <HAL_PCD_IRQHandler+0x7c4>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d808      	bhi.n	8001460 <HAL_PCD_IRQHandler+0x688>
        {
          /* hclk Clock Range between 20-21.8 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	6812      	ldr	r2, [r2, #0]
 8001456:	68d2      	ldr	r2, [r2, #12]
 8001458:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	e03a      	b.n	80014d6 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4a4e      	ldr	r2, [pc, #312]	; (800159c <HAL_PCD_IRQHandler+0x7c4>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d90c      	bls.n	8001482 <HAL_PCD_IRQHandler+0x6aa>
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4a4d      	ldr	r2, [pc, #308]	; (80015a0 <HAL_PCD_IRQHandler+0x7c8>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d808      	bhi.n	8001482 <HAL_PCD_IRQHandler+0x6aa>
        {
          /* hclk Clock Range between 21.8-24 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	6812      	ldr	r2, [r2, #0]
 8001478:	68d2      	ldr	r2, [r2, #12]
 800147a:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	e029      	b.n	80014d6 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	4a46      	ldr	r2, [pc, #280]	; (80015a0 <HAL_PCD_IRQHandler+0x7c8>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d90c      	bls.n	80014a4 <HAL_PCD_IRQHandler+0x6cc>
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4a45      	ldr	r2, [pc, #276]	; (80015a4 <HAL_PCD_IRQHandler+0x7cc>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d808      	bhi.n	80014a4 <HAL_PCD_IRQHandler+0x6cc>
        {
          /* hclk Clock Range between 24-27.7 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	6812      	ldr	r2, [r2, #0]
 800149a:	68d2      	ldr	r2, [r2, #12]
 800149c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	e018      	b.n	80014d6 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	4a3f      	ldr	r2, [pc, #252]	; (80015a4 <HAL_PCD_IRQHandler+0x7cc>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d90c      	bls.n	80014c6 <HAL_PCD_IRQHandler+0x6ee>
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4a3e      	ldr	r2, [pc, #248]	; (80015a8 <HAL_PCD_IRQHandler+0x7d0>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d808      	bhi.n	80014c6 <HAL_PCD_IRQHandler+0x6ee>
        {
          /* hclk Clock Range between 27.7-32 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	68d2      	ldr	r2, [r2, #12]
 80014be:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	e007      	b.n	80014d6 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	6812      	ldr	r2, [r2, #0]
 80014ce:	68d2      	ldr	r2, [r2, #12]
 80014d0:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 80014d4:	60da      	str	r2, [r3, #12]
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f002 fd59 	bl	8003f8e <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	6812      	ldr	r2, [r2, #0]
 80014e4:	6952      	ldr	r2, [r2, #20]
 80014e6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80014ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f002 fb40 	bl	8003b76 <USB_ReadInterrupts>
 80014f6:	4603      	mov	r3, r0
 80014f8:	f003 0310 	and.w	r3, r3, #16
 80014fc:	2b10      	cmp	r3, #16
 80014fe:	d174      	bne.n	80015ea <HAL_PCD_IRQHandler+0x812>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6812      	ldr	r2, [r2, #0]
 8001508:	6992      	ldr	r2, [r2, #24]
 800150a:	f022 0210 	bic.w	r2, r2, #16
 800150e:	619a      	str	r2, [r3, #24]
      
      temp = USBx->GRXSTSP;
 8001510:	6a3b      	ldr	r3, [r7, #32]
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	617b      	str	r3, [r7, #20]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f003 020f 	and.w	r2, r3, #15
 800151c:	4613      	mov	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	1a9b      	subs	r3, r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	4413      	add	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	0c5b      	lsrs	r3, r3, #17
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	2b02      	cmp	r3, #2
 8001538:	d138      	bne.n	80015ac <HAL_PCD_IRQHandler+0x7d4>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001540:	4013      	ands	r3, r2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d049      	beq.n	80015da <HAL_PCD_IRQHandler+0x802>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	68d9      	ldr	r1, [r3, #12]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	091b      	lsrs	r3, r3, #4
 800154e:	b29b      	uxth	r3, r3
 8001550:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001554:	b29b      	uxth	r3, r3
 8001556:	461a      	mov	r2, r3
 8001558:	6a38      	ldr	r0, [r7, #32]
 800155a:	f002 f9b3 	bl	80038c4 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	091b      	lsrs	r3, r3, #4
 8001566:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800156a:	441a      	add	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	699a      	ldr	r2, [r3, #24]
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	091b      	lsrs	r3, r3, #4
 8001578:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800157c:	441a      	add	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	619a      	str	r2, [r3, #24]
 8001582:	e02a      	b.n	80015da <HAL_PCD_IRQHandler+0x802>
 8001584:	00d8acbf 	.word	0x00d8acbf
 8001588:	00e4e1bf 	.word	0x00e4e1bf
 800158c:	00f423ff 	.word	0x00f423ff
 8001590:	0106737f 	.word	0x0106737f
 8001594:	011a499f 	.word	0x011a499f
 8001598:	01312cff 	.word	0x01312cff
 800159c:	014ca43f 	.word	0x014ca43f
 80015a0:	016e35ff 	.word	0x016e35ff
 80015a4:	01a6ab1f 	.word	0x01a6ab1f
 80015a8:	01e847ff 	.word	0x01e847ff
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	0c5b      	lsrs	r3, r3, #17
 80015b0:	f003 030f 	and.w	r3, r3, #15
 80015b4:	2b06      	cmp	r3, #6
 80015b6:	d110      	bne.n	80015da <HAL_PCD_IRQHandler+0x802>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80015be:	2208      	movs	r2, #8
 80015c0:	4619      	mov	r1, r3
 80015c2:	6a38      	ldr	r0, [r7, #32]
 80015c4:	f002 f97e 	bl	80038c4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	699a      	ldr	r2, [r3, #24]
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	091b      	lsrs	r3, r3, #4
 80015d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015d4:	441a      	add	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	619a      	str	r2, [r3, #24]
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	6992      	ldr	r2, [r2, #24]
 80015e4:	f042 0210 	orr.w	r2, r2, #16
 80015e8:	619a      	str	r2, [r3, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f002 fac1 	bl	8003b76 <USB_ReadInterrupts>
 80015f4:	4603      	mov	r3, r0
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d10a      	bne.n	8001614 <HAL_PCD_IRQHandler+0x83c>
    {
      HAL_PCD_SOFCallback(hpcd);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f002 fcb7 	bl	8003f72 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	6812      	ldr	r2, [r2, #0]
 800160c:	6952      	ldr	r2, [r2, #20]
 800160e:	f002 0208 	and.w	r2, r2, #8
 8001612:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f002 faac 	bl	8003b76 <USB_ReadInterrupts>
 800161e:	4603      	mov	r3, r0
 8001620:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001628:	d10d      	bne.n	8001646 <HAL_PCD_IRQHandler+0x86e>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	b2db      	uxtb	r3, r3
 800162e:	4619      	mov	r1, r3
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f002 fd1d 	bl	8004070 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6812      	ldr	r2, [r2, #0]
 800163e:	6952      	ldr	r2, [r2, #20]
 8001640:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001644:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f002 fa93 	bl	8003b76 <USB_ReadInterrupts>
 8001650:	4603      	mov	r3, r0
 8001652:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001656:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800165a:	d10d      	bne.n	8001678 <HAL_PCD_IRQHandler+0x8a0>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	b2db      	uxtb	r3, r3
 8001660:	4619      	mov	r1, r3
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f002 fcf2 	bl	800404c <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	6952      	ldr	r2, [r2, #20]
 8001672:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001676:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f002 fa7a 	bl	8003b76 <USB_ReadInterrupts>
 8001682:	4603      	mov	r3, r0
 8001684:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800168c:	d10a      	bne.n	80016a4 <HAL_PCD_IRQHandler+0x8cc>
    {
      HAL_PCD_ConnectCallback(hpcd);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f002 fd00 	bl	8004094 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	6952      	ldr	r2, [r2, #20]
 800169e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80016a2:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f002 fa64 	bl	8003b76 <USB_ReadInterrupts>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	d115      	bne.n	80016e4 <HAL_PCD_IRQHandler+0x90c>
    {
      temp = hpcd->Instance->GOTGINT;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	617b      	str	r3, [r7, #20]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d002      	beq.n	80016d0 <HAL_PCD_IRQHandler+0x8f8>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f002 fcf0 	bl	80040b0 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	6851      	ldr	r1, [r2, #4]
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	430a      	orrs	r2, r1
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	e000      	b.n	80016e4 <HAL_PCD_IRQHandler+0x90c>
      return;
 80016e2:	bf00      	nop
    }
  }
}
 80016e4:	3730      	adds	r7, #48	; 0x30
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop

080016ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd); 
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d101      	bne.n	8001706 <HAL_PCD_SetAddress+0x1a>
 8001702:	2302      	movs	r3, #2
 8001704:	e00f      	b.n	8001726 <HAL_PCD_SetAddress+0x3a>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	78fa      	ldrb	r2, [r7, #3]
 8001714:	4611      	mov	r1, r2
 8001716:	4618      	mov	r0, r3
 8001718:	f002 f9d9 	bl	8003ace <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	4608      	mov	r0, r1
 8001738:	4611      	mov	r1, r2
 800173a:	461a      	mov	r2, r3
 800173c:	4603      	mov	r3, r0
 800173e:	70fb      	strb	r3, [r7, #3]
 8001740:	460b      	mov	r3, r1
 8001742:	803b      	strh	r3, [r7, #0]
 8001744:	4613      	mov	r3, r2
 8001746:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 800174c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001750:	2b00      	cmp	r3, #0
 8001752:	da0b      	bge.n	800176c <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800175a:	4613      	mov	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	1a9b      	subs	r3, r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	3338      	adds	r3, #56	; 0x38
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	4413      	add	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	e00b      	b.n	8001784 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001772:	4613      	mov	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	1a9b      	subs	r3, r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800178a:	b2da      	uxtb	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8001790:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	09db      	lsrs	r3, r3, #7
 8001798:	b2db      	uxtb	r3, r3
 800179a:	461a      	mov	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 80017a0:	883a      	ldrh	r2, [r7, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	78ba      	ldrb	r2, [r7, #2]
 80017aa:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	785b      	ldrb	r3, [r3, #1]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d004      	beq.n	80017be <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
 80017be:	78bb      	ldrb	r3, [r7, #2]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d102      	bne.n	80017ca <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	711a      	strb	r2, [r3, #4]
  }
  
  __HAL_LOCK(hpcd); 
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d101      	bne.n	80017d8 <HAL_PCD_EP_Open+0xaa>
 80017d4:	2302      	movs	r3, #2
 80017d6:	e00e      	b.n	80017f6 <HAL_PCD_EP_Open+0xc8>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68f9      	ldr	r1, [r7, #12]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f001 fb4b 	bl	8002e82 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return ret;
 80017f4:	7afb      	ldrb	r3, [r7, #11]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 80017fe:	b580      	push	{r7, lr}
 8001800:	b084      	sub	sp, #16
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	460b      	mov	r3, r1
 8001808:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 800180a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800180e:	2b00      	cmp	r3, #0
 8001810:	da0b      	bge.n	800182a <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001812:	78fb      	ldrb	r3, [r7, #3]
 8001814:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001818:	4613      	mov	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	1a9b      	subs	r3, r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	3338      	adds	r3, #56	; 0x38
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	e00b      	b.n	8001842 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001830:	4613      	mov	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	1a9b      	subs	r3, r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	4413      	add	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8001842:	78fb      	ldrb	r3, [r7, #3]
 8001844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001848:	b2da      	uxtb	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800184e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	09db      	lsrs	r3, r3, #7
 8001856:	b2db      	uxtb	r3, r3
 8001858:	461a      	mov	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001864:	2b01      	cmp	r3, #1
 8001866:	d101      	bne.n	800186c <HAL_PCD_EP_Close+0x6e>
 8001868:	2302      	movs	r3, #2
 800186a:	e00e      	b.n	800188a <HAL_PCD_EP_Close+0x8c>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68f9      	ldr	r1, [r7, #12]
 800187a:	4618      	mov	r0, r3
 800187c:	f001 fb8a 	bl	8002f94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer   
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b086      	sub	sp, #24
 8001896:	af00      	add	r7, sp, #0
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	607a      	str	r2, [r7, #4]
 800189c:	603b      	str	r3, [r7, #0]
 800189e:	460b      	mov	r3, r1
 80018a0:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80018a2:	7afb      	ldrb	r3, [r7, #11]
 80018a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80018a8:	4613      	mov	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	1a9b      	subs	r3, r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	4413      	add	r3, r2
 80018b8:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	2200      	movs	r2, #0
 80018d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 80018d2:	7afb      	ldrb	r3, [r7, #11]
 80018d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d102      	bne.n	80018ec <HAL_PCD_EP_Receive+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	611a      	str	r2, [r3, #16]
  }
  
  if ((ep_addr & 0x7F) == 0)
 80018ec:	7afb      	ldrb	r3, [r7, #11]
 80018ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d109      	bne.n	800190a <HAL_PCD_EP_Receive+0x78>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6818      	ldr	r0, [r3, #0]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	461a      	mov	r2, r3
 8001902:	6979      	ldr	r1, [r7, #20]
 8001904:	f001 fe4a 	bl	800359c <USB_EP0StartXfer>
 8001908:	e008      	b.n	800191c <HAL_PCD_EP_Receive+0x8a>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6818      	ldr	r0, [r3, #0]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	461a      	mov	r2, r3
 8001916:	6979      	ldr	r1, [r7, #20]
 8001918:	f001 fbfe 	bl	8003118 <USB_EPStartXfer>
  }
  
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	460b      	mov	r3, r1
 8001930:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8001932:	78fb      	ldrb	r3, [r7, #3]
 8001934:	f003 020f 	and.w	r2, r3, #15
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	1a9b      	subs	r3, r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	440b      	add	r3, r1
 8001944:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	b29b      	uxth	r3, r3
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer   
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	460b      	mov	r3, r1
 8001966:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001968:	7afb      	ldrb	r3, [r7, #11]
 800196a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800196e:	4613      	mov	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	1a9b      	subs	r3, r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	3338      	adds	r3, #56	; 0x38
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	4413      	add	r3, r2
 800197c:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	2201      	movs	r2, #1
 8001994:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8001996:	7afb      	ldrb	r3, [r7, #11]
 8001998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800199c:	b2da      	uxtb	r2, r3
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d102      	bne.n	80019b0 <HAL_PCD_EP_Transmit+0x58>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	611a      	str	r2, [r3, #16]
  }
  
  if ((ep_addr & 0x7F) == 0)
 80019b0:	7afb      	ldrb	r3, [r7, #11]
 80019b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d109      	bne.n	80019ce <HAL_PCD_EP_Transmit+0x76>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	461a      	mov	r2, r3
 80019c6:	6979      	ldr	r1, [r7, #20]
 80019c8:	f001 fde8 	bl	800359c <USB_EP0StartXfer>
 80019cc:	e008      	b.n	80019e0 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6818      	ldr	r0, [r3, #0]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	6979      	ldr	r1, [r7, #20]
 80019dc:	f001 fb9c 	bl	8003118 <USB_EPStartXfer>
  }
  
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b084      	sub	sp, #16
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	460b      	mov	r3, r1
 80019f4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 80019f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	da0b      	bge.n	8001a16 <HAL_PCD_EP_SetStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80019fe:	78fb      	ldrb	r3, [r7, #3]
 8001a00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a04:	4613      	mov	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	1a9b      	subs	r3, r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	3338      	adds	r3, #56	; 0x38
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	e009      	b.n	8001a2a <HAL_PCD_EP_SetStall+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a16:	78fa      	ldrb	r2, [r7, #3]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	1a9b      	subs	r3, r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	4413      	add	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8001a30:	78fb      	ldrb	r3, [r7, #3]
 8001a32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001a3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	09db      	lsrs	r3, r3, #7
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	461a      	mov	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	705a      	strb	r2, [r3, #1]
  
  
  __HAL_LOCK(hpcd); 
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_PCD_EP_SetStall+0x70>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e01e      	b.n	8001a98 <HAL_PCD_EP_SetStall+0xae>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68f9      	ldr	r1, [r7, #12]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f001 ff52 	bl	8003912 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8001a6e:	78fb      	ldrb	r3, [r7, #3]
 8001a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10a      	bne.n	8001a8e <HAL_PCD_EP_SetStall+0xa4>
  {
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6818      	ldr	r0, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	b2d9      	uxtb	r1, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001a88:	461a      	mov	r2, r3
 8001a8a:	f002 f943 	bl	8003d14 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 8001aac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	da0b      	bge.n	8001acc <HAL_PCD_EP_ClrStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001aba:	4613      	mov	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	1a9b      	subs	r3, r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	3338      	adds	r3, #56	; 0x38
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	e009      	b.n	8001ae0 <HAL_PCD_EP_ClrStall+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001acc:	78fa      	ldrb	r2, [r7, #3]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	1a9b      	subs	r3, r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8001ae6:	78fb      	ldrb	r3, [r7, #3]
 8001ae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001af2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	09db      	lsrs	r3, r3, #7
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	461a      	mov	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d101      	bne.n	8001b10 <HAL_PCD_EP_ClrStall+0x70>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	e00e      	b.n	8001b2e <HAL_PCD_EP_ClrStall+0x8e>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68f9      	ldr	r1, [r7, #12]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f001 ff68 	bl	80039f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum  endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b08a      	sub	sp, #40	; 0x28
 8001b3a:	af02      	add	r7, sp, #8
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  int32_t len = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]

  ep = &hpcd->IN_ep[epnum];
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	4613      	mov	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	1a9b      	subs	r3, r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	3338      	adds	r3, #56	; 0x38
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]
  len = ep->xfer_len - ep->xfer_count;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	695a      	ldr	r2, [r3, #20]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	61fb      	str	r3, [r7, #28]
  
  if (len > ep->maxpacket)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d202      	bcs.n	8001b7c <PCD_WriteEmptyTxFifo+0x46>
  {
    len = ep->maxpacket;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	61fb      	str	r3, [r7, #28]
  }
  
  
  len32b = (len + 3U) / 4U;
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	3303      	adds	r3, #3
 8001b80:	089b      	lsrs	r3, r3, #2
 8001b82:	61bb      	str	r3, [r7, #24]
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001b84:	e02b      	b.n	8001bde <PCD_WriteEmptyTxFifo+0xa8>
          (ep->xfer_count < ep->xfer_len) &&
            (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	695a      	ldr	r2, [r3, #20]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	61fb      	str	r3, [r7, #28]
    
    if (len > ep->maxpacket)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d202      	bcs.n	8001ba2 <PCD_WriteEmptyTxFifo+0x6c>
    {
      len = ep->maxpacket;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3303      	adds	r3, #3
 8001ba6:	089b      	lsrs	r3, r3, #2
 8001ba8:	61bb      	str	r3, [r7, #24]
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	68d9      	ldr	r1, [r3, #12]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	b298      	uxth	r0, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	6978      	ldr	r0, [r7, #20]
 8001bc2:	f001 fe4a 	bl	800385a <USB_WritePacket>
    
    ep->xfer_buff  += len;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	441a      	add	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	699a      	ldr	r2, [r3, #24]
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	441a      	add	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	619a      	str	r2, [r3, #24]
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	015a      	lsls	r2, r3, #5
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	4413      	add	r3, r2
 8001be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d909      	bls.n	8001c08 <PCD_WriteEmptyTxFifo+0xd2>
          (ep->xfer_count < ep->xfer_len) &&
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	699a      	ldr	r2, [r3, #24]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	695b      	ldr	r3, [r3, #20]
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d203      	bcs.n	8001c08 <PCD_WriteEmptyTxFifo+0xd2>
            (ep->xfer_len != 0U))
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	695b      	ldr	r3, [r3, #20]
          (ep->xfer_count < ep->xfer_len) &&
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1be      	bne.n	8001b86 <PCD_WriteEmptyTxFifo+0x50>
  }
  
  if(len <= 0U)
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d110      	bne.n	8001c30 <PCD_WriteEmptyTxFifo+0xfa>
  {
    fifoemptymsk = 0x1U << epnum;
 8001c0e:	2201      	movs	r2, #1
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	613b      	str	r3, [r7, #16]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c1e:	4619      	mov	r1, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	634b      	str	r3, [r1, #52]	; 0x34
    
  }
  
  return HAL_OK;  
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3720      	adds	r7, #32
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b085      	sub	sp, #20
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	460b      	mov	r3, r1
 8001c44:	70fb      	strb	r3, [r7, #3]
 8001c46:	4613      	mov	r3, r2
 8001c48:	803b      	strh	r3, [r7, #0]
  uint8_t i = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t Tx_Offset = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60bb      	str	r3, [r7, #8]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	60bb      	str	r3, [r7, #8]
  
  if(fifo == 0)
 8001c5a:	78fb      	ldrb	r3, [r7, #3]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d107      	bne.n	8001c70 <HAL_PCDEx_SetTxFiFo+0x36>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	883a      	ldrh	r2, [r7, #0]
 8001c66:	0411      	lsls	r1, r2, #16
 8001c68:	68ba      	ldr	r2, [r7, #8]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	629a      	str	r2, [r3, #40]	; 0x28
 8001c6e:	e028      	b.n	8001cc2 <HAL_PCDEx_SetTxFiFo+0x88>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c76:	0c1b      	lsrs	r3, r3, #16
 8001c78:	68ba      	ldr	r2, [r7, #8]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	73fb      	strb	r3, [r7, #15]
 8001c82:	e00d      	b.n	8001ca0 <HAL_PCDEx_SetTxFiFo+0x66>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	3340      	adds	r3, #64	; 0x40
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	0c1b      	lsrs	r3, r3, #16
 8001c94:	68ba      	ldr	r2, [r7, #8]
 8001c96:	4413      	add	r3, r2
 8001c98:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
 8001ca0:	7bfa      	ldrb	r2, [r7, #15]
 8001ca2:	78fb      	ldrb	r3, [r7, #3]
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	dbec      	blt.n	8001c84 <HAL_PCDEx_SetTxFiFo+0x4a>
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6819      	ldr	r1, [r3, #0]
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	883a      	ldrh	r2, [r7, #0]
 8001cb4:	0410      	lsls	r0, r2, #16
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	4302      	orrs	r2, r0
 8001cba:	3340      	adds	r3, #64	; 0x40
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	887a      	ldrh	r2, [r7, #2]
 8001ce2:	625a      	str	r2, [r3, #36]	; 0x24
  
  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e22d      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d075      	beq.n	8001dfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d12:	4ba3      	ldr	r3, [pc, #652]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 030c 	and.w	r3, r3, #12
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d00c      	beq.n	8001d38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d1e:	4ba0      	ldr	r3, [pc, #640]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d112      	bne.n	8001d50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d2a:	4b9d      	ldr	r3, [pc, #628]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d36:	d10b      	bne.n	8001d50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d38:	4b99      	ldr	r3, [pc, #612]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d05b      	beq.n	8001dfc <HAL_RCC_OscConfig+0x108>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d157      	bne.n	8001dfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e208      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d58:	d106      	bne.n	8001d68 <HAL_RCC_OscConfig+0x74>
 8001d5a:	4a91      	ldr	r2, [pc, #580]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001d5c:	4b90      	ldr	r3, [pc, #576]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	e01d      	b.n	8001da4 <HAL_RCC_OscConfig+0xb0>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d70:	d10c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x98>
 8001d72:	4a8b      	ldr	r2, [pc, #556]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001d74:	4b8a      	ldr	r3, [pc, #552]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	4a88      	ldr	r2, [pc, #544]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001d80:	4b87      	ldr	r3, [pc, #540]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	e00b      	b.n	8001da4 <HAL_RCC_OscConfig+0xb0>
 8001d8c:	4a84      	ldr	r2, [pc, #528]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001d8e:	4b84      	ldr	r3, [pc, #528]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	4a81      	ldr	r2, [pc, #516]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001d9a:	4b81      	ldr	r3, [pc, #516]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d013      	beq.n	8001dd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dac:	f7fe fbe8 	bl	8000580 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db4:	f7fe fbe4 	bl	8000580 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b64      	cmp	r3, #100	; 0x64
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e1cd      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc6:	4b76      	ldr	r3, [pc, #472]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f0      	beq.n	8001db4 <HAL_RCC_OscConfig+0xc0>
 8001dd2:	e014      	b.n	8001dfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd4:	f7fe fbd4 	bl	8000580 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ddc:	f7fe fbd0 	bl	8000580 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b64      	cmp	r3, #100	; 0x64
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e1b9      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dee:	4b6c      	ldr	r3, [pc, #432]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0xe8>
 8001dfa:	e000      	b.n	8001dfe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d063      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e0a:	4b65      	ldr	r3, [pc, #404]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 030c 	and.w	r3, r3, #12
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00b      	beq.n	8001e2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e16:	4b62      	ldr	r3, [pc, #392]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e1e:	2b08      	cmp	r3, #8
 8001e20:	d11c      	bne.n	8001e5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e22:	4b5f      	ldr	r3, [pc, #380]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d116      	bne.n	8001e5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2e:	4b5c      	ldr	r3, [pc, #368]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d005      	beq.n	8001e46 <HAL_RCC_OscConfig+0x152>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d001      	beq.n	8001e46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e18d      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e46:	4956      	ldr	r1, [pc, #344]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001e48:	4b55      	ldr	r3, [pc, #340]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	4313      	orrs	r3, r2
 8001e58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5a:	e03a      	b.n	8001ed2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d020      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e64:	4b4f      	ldr	r3, [pc, #316]	; (8001fa4 <HAL_RCC_OscConfig+0x2b0>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6a:	f7fe fb89 	bl	8000580 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e72:	f7fe fb85 	bl	8000580 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e16e      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e84:	4b46      	ldr	r3, [pc, #280]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f0      	beq.n	8001e72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e90:	4943      	ldr	r1, [pc, #268]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001e92:	4b43      	ldr	r3, [pc, #268]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	600b      	str	r3, [r1, #0]
 8001ea4:	e015      	b.n	8001ed2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ea6:	4b3f      	ldr	r3, [pc, #252]	; (8001fa4 <HAL_RCC_OscConfig+0x2b0>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7fe fb68 	bl	8000580 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb4:	f7fe fb64 	bl	8000580 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e14d      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec6:	4b36      	ldr	r3, [pc, #216]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d030      	beq.n	8001f40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d016      	beq.n	8001f14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ee6:	4b30      	ldr	r3, [pc, #192]	; (8001fa8 <HAL_RCC_OscConfig+0x2b4>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eec:	f7fe fb48 	bl	8000580 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef4:	f7fe fb44 	bl	8000580 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e12d      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f06:	4b26      	ldr	r3, [pc, #152]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x200>
 8001f12:	e015      	b.n	8001f40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f14:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <HAL_RCC_OscConfig+0x2b4>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1a:	f7fe fb31 	bl	8000580 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f22:	f7fe fb2d 	bl	8000580 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e116      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f34:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1f0      	bne.n	8001f22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 80a0 	beq.w	800208e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f52:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10f      	bne.n	8001f7e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	4a0f      	ldr	r2, [pc, #60]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001f64:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6e:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <HAL_RCC_OscConfig+0x2b8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d121      	bne.n	8001fce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f8a:	4a08      	ldr	r2, [pc, #32]	; (8001fac <HAL_RCC_OscConfig+0x2b8>)
 8001f8c:	4b07      	ldr	r3, [pc, #28]	; (8001fac <HAL_RCC_OscConfig+0x2b8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f96:	f7fe faf3 	bl	8000580 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9c:	e011      	b.n	8001fc2 <HAL_RCC_OscConfig+0x2ce>
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	42470000 	.word	0x42470000
 8001fa8:	42470e80 	.word	0x42470e80
 8001fac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb0:	f7fe fae6 	bl	8000580 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e0cf      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc2:	4b6a      	ldr	r3, [pc, #424]	; (800216c <HAL_RCC_OscConfig+0x478>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d106      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x2f0>
 8001fd6:	4a66      	ldr	r2, [pc, #408]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8001fd8:	4b65      	ldr	r3, [pc, #404]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8001fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe2:	e01c      	b.n	800201e <HAL_RCC_OscConfig+0x32a>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b05      	cmp	r3, #5
 8001fea:	d10c      	bne.n	8002006 <HAL_RCC_OscConfig+0x312>
 8001fec:	4a60      	ldr	r2, [pc, #384]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8001fee:	4b60      	ldr	r3, [pc, #384]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8001ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff2:	f043 0304 	orr.w	r3, r3, #4
 8001ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff8:	4a5d      	ldr	r2, [pc, #372]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8001ffa:	4b5d      	ldr	r3, [pc, #372]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8001ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6713      	str	r3, [r2, #112]	; 0x70
 8002004:	e00b      	b.n	800201e <HAL_RCC_OscConfig+0x32a>
 8002006:	4a5a      	ldr	r2, [pc, #360]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8002008:	4b59      	ldr	r3, [pc, #356]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 800200a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200c:	f023 0301 	bic.w	r3, r3, #1
 8002010:	6713      	str	r3, [r2, #112]	; 0x70
 8002012:	4a57      	ldr	r2, [pc, #348]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8002014:	4b56      	ldr	r3, [pc, #344]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8002016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002018:	f023 0304 	bic.w	r3, r3, #4
 800201c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d015      	beq.n	8002052 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002026:	f7fe faab 	bl	8000580 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202c:	e00a      	b.n	8002044 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800202e:	f7fe faa7 	bl	8000580 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	f241 3288 	movw	r2, #5000	; 0x1388
 800203c:	4293      	cmp	r3, r2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e08e      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002044:	4b4a      	ldr	r3, [pc, #296]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8002046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0ee      	beq.n	800202e <HAL_RCC_OscConfig+0x33a>
 8002050:	e014      	b.n	800207c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002052:	f7fe fa95 	bl	8000580 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002058:	e00a      	b.n	8002070 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800205a:	f7fe fa91 	bl	8000580 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	f241 3288 	movw	r2, #5000	; 0x1388
 8002068:	4293      	cmp	r3, r2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e078      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002070:	4b3f      	ldr	r3, [pc, #252]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8002072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1ee      	bne.n	800205a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800207c:	7dfb      	ldrb	r3, [r7, #23]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d105      	bne.n	800208e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002082:	4a3b      	ldr	r2, [pc, #236]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8002084:	4b3a      	ldr	r3, [pc, #232]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800208c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d064      	beq.n	8002160 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002096:	4b36      	ldr	r3, [pc, #216]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d05c      	beq.n	800215c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d141      	bne.n	800212e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020aa:	4b32      	ldr	r3, [pc, #200]	; (8002174 <HAL_RCC_OscConfig+0x480>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b0:	f7fe fa66 	bl	8000580 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b8:	f7fe fa62 	bl	8000580 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e04b      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ca:	4b29      	ldr	r3, [pc, #164]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020d6:	4926      	ldr	r1, [pc, #152]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69da      	ldr	r2, [r3, #28]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	431a      	orrs	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	019b      	lsls	r3, r3, #6
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ee:	085b      	lsrs	r3, r3, #1
 80020f0:	3b01      	subs	r3, #1
 80020f2:	041b      	lsls	r3, r3, #16
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fa:	061b      	lsls	r3, r3, #24
 80020fc:	4313      	orrs	r3, r2
 80020fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002100:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <HAL_RCC_OscConfig+0x480>)
 8002102:	2201      	movs	r2, #1
 8002104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002106:	f7fe fa3b 	bl	8000580 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800210e:	f7fe fa37 	bl	8000580 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e020      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002120:	4b13      	ldr	r3, [pc, #76]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f0      	beq.n	800210e <HAL_RCC_OscConfig+0x41a>
 800212c:	e018      	b.n	8002160 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <HAL_RCC_OscConfig+0x480>)
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002134:	f7fe fa24 	bl	8000580 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800213c:	f7fe fa20 	bl	8000580 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e009      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800214e:	4b08      	ldr	r3, [pc, #32]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0x448>
 800215a:	e001      	b.n	8002160 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40007000 	.word	0x40007000
 8002170:	40023800 	.word	0x40023800
 8002174:	42470060 	.word	0x42470060

08002178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0ca      	b.n	8002322 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800218c:	4b67      	ldr	r3, [pc, #412]	; (800232c <HAL_RCC_ClockConfig+0x1b4>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 020f 	and.w	r2, r3, #15
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d20c      	bcs.n	80021b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219a:	4b64      	ldr	r3, [pc, #400]	; (800232c <HAL_RCC_ClockConfig+0x1b4>)
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a2:	4b62      	ldr	r3, [pc, #392]	; (800232c <HAL_RCC_ClockConfig+0x1b4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 020f 	and.w	r2, r3, #15
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0b6      	b.n	8002322 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d020      	beq.n	8002202 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021cc:	4a58      	ldr	r2, [pc, #352]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80021ce:	4b58      	ldr	r3, [pc, #352]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e4:	4a52      	ldr	r2, [pc, #328]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80021e6:	4b52      	ldr	r3, [pc, #328]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f0:	494f      	ldr	r1, [pc, #316]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80021f2:	4b4f      	ldr	r3, [pc, #316]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	4313      	orrs	r3, r2
 8002200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d044      	beq.n	8002298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d107      	bne.n	8002226 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002216:	4b46      	ldr	r3, [pc, #280]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d119      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e07d      	b.n	8002322 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d003      	beq.n	8002236 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002232:	2b03      	cmp	r3, #3
 8002234:	d107      	bne.n	8002246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002236:	4b3e      	ldr	r3, [pc, #248]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d109      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e06d      	b.n	8002322 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002246:	4b3a      	ldr	r3, [pc, #232]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e065      	b.n	8002322 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002256:	4936      	ldr	r1, [pc, #216]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 8002258:	4b35      	ldr	r3, [pc, #212]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f023 0203 	bic.w	r2, r3, #3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4313      	orrs	r3, r2
 8002266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002268:	f7fe f98a 	bl	8000580 <HAL_GetTick>
 800226c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226e:	e00a      	b.n	8002286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002270:	f7fe f986 	bl	8000580 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f241 3288 	movw	r2, #5000	; 0x1388
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e04d      	b.n	8002322 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002286:	4b2a      	ldr	r3, [pc, #168]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 020c 	and.w	r2, r3, #12
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	429a      	cmp	r2, r3
 8002296:	d1eb      	bne.n	8002270 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002298:	4b24      	ldr	r3, [pc, #144]	; (800232c <HAL_RCC_ClockConfig+0x1b4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 020f 	and.w	r2, r3, #15
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d90c      	bls.n	80022c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a6:	4b21      	ldr	r3, [pc, #132]	; (800232c <HAL_RCC_ClockConfig+0x1b4>)
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ae:	4b1f      	ldr	r3, [pc, #124]	; (800232c <HAL_RCC_ClockConfig+0x1b4>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 020f 	and.w	r2, r3, #15
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e030      	b.n	8002322 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022cc:	4918      	ldr	r1, [pc, #96]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80022ce:	4b18      	ldr	r3, [pc, #96]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	4313      	orrs	r3, r2
 80022dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d009      	beq.n	80022fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ea:	4911      	ldr	r1, [pc, #68]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80022ec:	4b10      	ldr	r3, [pc, #64]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4313      	orrs	r3, r2
 80022fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022fe:	f000 f81d 	bl	800233c <HAL_RCC_GetSysClockFreq>
 8002302:	4601      	mov	r1, r0
 8002304:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	091b      	lsrs	r3, r3, #4
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	4a09      	ldr	r2, [pc, #36]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 8002310:	5cd3      	ldrb	r3, [r2, r3]
 8002312:	fa21 f303 	lsr.w	r3, r1, r3
 8002316:	4a08      	ldr	r2, [pc, #32]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 8002318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800231a:	2000      	movs	r0, #0
 800231c:	f00e fd4a 	bl	8010db4 <HAL_InitTick>

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40023c00 	.word	0x40023c00
 8002330:	40023800 	.word	0x40023800
 8002334:	08011510 	.word	0x08011510
 8002338:	200001d0 	.word	0x200001d0

0800233c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800233c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002340:	b08f      	sub	sp, #60	; 0x3c
 8002342:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002348:	2300      	movs	r3, #0
 800234a:	637b      	str	r3, [r7, #52]	; 0x34
 800234c:	2300      	movs	r3, #0
 800234e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002354:	4b62      	ldr	r3, [pc, #392]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 030c 	and.w	r3, r3, #12
 800235c:	2b04      	cmp	r3, #4
 800235e:	d007      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0x34>
 8002360:	2b08      	cmp	r3, #8
 8002362:	d008      	beq.n	8002376 <HAL_RCC_GetSysClockFreq+0x3a>
 8002364:	2b00      	cmp	r3, #0
 8002366:	f040 80b2 	bne.w	80024ce <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800236a:	4b5e      	ldr	r3, [pc, #376]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800236c:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 800236e:	e0b1      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002370:	4b5d      	ldr	r3, [pc, #372]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002372:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002374:	e0ae      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002376:	4b5a      	ldr	r3, [pc, #360]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800237e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002380:	4b57      	ldr	r3, [pc, #348]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d04e      	beq.n	800242a <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800238c:	4b54      	ldr	r3, [pc, #336]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	099b      	lsrs	r3, r3, #6
 8002392:	f04f 0400 	mov.w	r4, #0
 8002396:	f240 11ff 	movw	r1, #511	; 0x1ff
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	ea01 0103 	and.w	r1, r1, r3
 80023a2:	ea02 0204 	and.w	r2, r2, r4
 80023a6:	460b      	mov	r3, r1
 80023a8:	4614      	mov	r4, r2
 80023aa:	0160      	lsls	r0, r4, #5
 80023ac:	6278      	str	r0, [r7, #36]	; 0x24
 80023ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023b0:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80023b4:	6278      	str	r0, [r7, #36]	; 0x24
 80023b6:	015b      	lsls	r3, r3, #5
 80023b8:	623b      	str	r3, [r7, #32]
 80023ba:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80023be:	1a5b      	subs	r3, r3, r1
 80023c0:	eb64 0402 	sbc.w	r4, r4, r2
 80023c4:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80023c8:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80023cc:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80023d0:	ebb8 0803 	subs.w	r8, r8, r3
 80023d4:	eb69 0904 	sbc.w	r9, r9, r4
 80023d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023dc:	61fb      	str	r3, [r7, #28]
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80023ea:	61bb      	str	r3, [r7, #24]
 80023ec:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80023f0:	eb18 0801 	adds.w	r8, r8, r1
 80023f4:	eb49 0902 	adc.w	r9, r9, r2
 80023f8:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002410:	4640      	mov	r0, r8
 8002412:	4649      	mov	r1, r9
 8002414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002416:	f04f 0400 	mov.w	r4, #0
 800241a:	461a      	mov	r2, r3
 800241c:	4623      	mov	r3, r4
 800241e:	f7fd fef1 	bl	8000204 <__aeabi_uldivmod>
 8002422:	4603      	mov	r3, r0
 8002424:	460c      	mov	r4, r1
 8002426:	637b      	str	r3, [r7, #52]	; 0x34
 8002428:	e043      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800242a:	4b2d      	ldr	r3, [pc, #180]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	099b      	lsrs	r3, r3, #6
 8002430:	f04f 0400 	mov.w	r4, #0
 8002434:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	ea01 0103 	and.w	r1, r1, r3
 8002440:	ea02 0204 	and.w	r2, r2, r4
 8002444:	460b      	mov	r3, r1
 8002446:	4614      	mov	r4, r2
 8002448:	0160      	lsls	r0, r4, #5
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	015b      	lsls	r3, r3, #5
 8002456:	60bb      	str	r3, [r7, #8]
 8002458:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800245c:	1a5b      	subs	r3, r3, r1
 800245e:	eb64 0402 	sbc.w	r4, r4, r2
 8002462:	01a6      	lsls	r6, r4, #6
 8002464:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8002468:	019d      	lsls	r5, r3, #6
 800246a:	1aed      	subs	r5, r5, r3
 800246c:	eb66 0604 	sbc.w	r6, r6, r4
 8002470:	00f3      	lsls	r3, r6, #3
 8002472:	607b      	str	r3, [r7, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800247a:	607b      	str	r3, [r7, #4]
 800247c:	00eb      	lsls	r3, r5, #3
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	e897 0060 	ldmia.w	r7, {r5, r6}
 8002484:	186d      	adds	r5, r5, r1
 8002486:	eb46 0602 	adc.w	r6, r6, r2
 800248a:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 800248e:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8002492:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8002496:	4655      	mov	r5, sl
 8002498:	465e      	mov	r6, fp
 800249a:	4628      	mov	r0, r5
 800249c:	4631      	mov	r1, r6
 800249e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a0:	f04f 0400 	mov.w	r4, #0
 80024a4:	461a      	mov	r2, r3
 80024a6:	4623      	mov	r3, r4
 80024a8:	f7fd feac 	bl	8000204 <__aeabi_uldivmod>
 80024ac:	4603      	mov	r3, r0
 80024ae:	460c      	mov	r4, r1
 80024b0:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024b2:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	0c1b      	lsrs	r3, r3, #16
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	3301      	adds	r3, #1
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 80024c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024cc:	e002      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024ce:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80024d0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	373c      	adds	r7, #60	; 0x3c
 80024da:	46bd      	mov	sp, r7
 80024dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024e0:	40023800 	.word	0x40023800
 80024e4:	00f42400 	.word	0x00f42400
 80024e8:	007a1200 	.word	0x007a1200

080024ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024f0:	4b03      	ldr	r3, [pc, #12]	; (8002500 <HAL_RCC_GetHCLKFreq+0x14>)
 80024f2:	681b      	ldr	r3, [r3, #0]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	200001d0 	.word	0x200001d0

08002504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002508:	f7ff fff0 	bl	80024ec <HAL_RCC_GetHCLKFreq>
 800250c:	4601      	mov	r1, r0
 800250e:	4b05      	ldr	r3, [pc, #20]	; (8002524 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	0b5b      	lsrs	r3, r3, #13
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	4a03      	ldr	r2, [pc, #12]	; (8002528 <HAL_RCC_GetPCLK2Freq+0x24>)
 800251a:	5cd3      	ldrb	r3, [r2, r3]
 800251c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002520:	4618      	mov	r0, r3
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40023800 	.word	0x40023800
 8002528:	08011520 	.word	0x08011520

0800252c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	220f      	movs	r2, #15
 800253a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800253c:	4b12      	ldr	r3, [pc, #72]	; (8002588 <HAL_RCC_GetClockConfig+0x5c>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0203 	and.w	r2, r3, #3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002548:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <HAL_RCC_GetClockConfig+0x5c>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002554:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <HAL_RCC_GetClockConfig+0x5c>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002560:	4b09      	ldr	r3, [pc, #36]	; (8002588 <HAL_RCC_GetClockConfig+0x5c>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	08db      	lsrs	r3, r3, #3
 8002566:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800256e:	4b07      	ldr	r3, [pc, #28]	; (800258c <HAL_RCC_GetClockConfig+0x60>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 020f 	and.w	r2, r3, #15
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	601a      	str	r2, [r3, #0]
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40023800 	.word	0x40023800
 800258c:	40023c00 	.word	0x40023c00

08002590 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e01d      	b.n	80025de <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d106      	bne.n	80025bc <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f815 	bl	80025e6 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3304      	adds	r3, #4
 80025cc:	4619      	mov	r1, r3
 80025ce:	4610      	mov	r0, r2
 80025d0:	f000 f95e 	bl	8002890 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_TIM_Base_MspInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6812      	ldr	r2, [r2, #0]
 800260a:	68d2      	ldr	r2, [r2, #12]
 800260c:	f042 0201 	orr.w	r2, r2, #1
 8002610:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	f042 0201 	orr.w	r2, r2, #1
 8002620:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b02      	cmp	r3, #2
 8002644:	d122      	bne.n	800268c <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b02      	cmp	r3, #2
 8002652:	d11b      	bne.n	800268c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0202 	mvn.w	r2, #2
 800265c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f8ee 	bl	8002854 <HAL_TIM_IC_CaptureCallback>
 8002678:	e005      	b.n	8002686 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f8e0 	bl	8002840 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f8f1 	bl	8002868 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	2b04      	cmp	r3, #4
 8002698:	d122      	bne.n	80026e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d11b      	bne.n	80026e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0204 	mvn.w	r2, #4
 80026b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2202      	movs	r2, #2
 80026b6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f8c4 	bl	8002854 <HAL_TIM_IC_CaptureCallback>
 80026cc:	e005      	b.n	80026da <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f8b6 	bl	8002840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f8c7 	bl	8002868 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d122      	bne.n	8002734 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d11b      	bne.n	8002734 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f06f 0208 	mvn.w	r2, #8
 8002704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2204      	movs	r2, #4
 800270a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f89a 	bl	8002854 <HAL_TIM_IC_CaptureCallback>
 8002720:	e005      	b.n	800272e <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f88c 	bl	8002840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f89d 	bl	8002868 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	f003 0310 	and.w	r3, r3, #16
 800273e:	2b10      	cmp	r3, #16
 8002740:	d122      	bne.n	8002788 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	f003 0310 	and.w	r3, r3, #16
 800274c:	2b10      	cmp	r3, #16
 800274e:	d11b      	bne.n	8002788 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f06f 0210 	mvn.w	r2, #16
 8002758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2208      	movs	r2, #8
 800275e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f870 	bl	8002854 <HAL_TIM_IC_CaptureCallback>
 8002774:	e005      	b.n	8002782 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f862 	bl	8002840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f873 	bl	8002868 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b01      	cmp	r3, #1
 8002794:	d10e      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d107      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f06f 0201 	mvn.w	r2, #1
 80027ac:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f00e fa96 	bl	8010ce0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027be:	2b80      	cmp	r3, #128	; 0x80
 80027c0:	d10e      	bne.n	80027e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027cc:	2b80      	cmp	r3, #128	; 0x80
 80027ce:	d107      	bne.n	80027e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027d8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f8e6 	bl	80029ac <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ea:	2b40      	cmp	r3, #64	; 0x40
 80027ec:	d10e      	bne.n	800280c <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f8:	2b40      	cmp	r3, #64	; 0x40
 80027fa:	d107      	bne.n	800280c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002804:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f838 	bl	800287c <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f003 0320 	and.w	r3, r3, #32
 8002816:	2b20      	cmp	r3, #32
 8002818:	d10e      	bne.n	8002838 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f003 0320 	and.w	r3, r3, #32
 8002824:	2b20      	cmp	r3, #32
 8002826:	d107      	bne.n	8002838 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f06f 0220 	mvn.w	r2, #32
 8002830:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f8b0 	bl	8002998 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8002838:	bf00      	nop
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a35      	ldr	r2, [pc, #212]	; (800297c <TIM_Base_SetConfig+0xec>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d00f      	beq.n	80028cc <TIM_Base_SetConfig+0x3c>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b2:	d00b      	beq.n	80028cc <TIM_Base_SetConfig+0x3c>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a32      	ldr	r2, [pc, #200]	; (8002980 <TIM_Base_SetConfig+0xf0>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d007      	beq.n	80028cc <TIM_Base_SetConfig+0x3c>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a31      	ldr	r2, [pc, #196]	; (8002984 <TIM_Base_SetConfig+0xf4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d003      	beq.n	80028cc <TIM_Base_SetConfig+0x3c>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a30      	ldr	r2, [pc, #192]	; (8002988 <TIM_Base_SetConfig+0xf8>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d101      	bne.n	80028d0 <TIM_Base_SetConfig+0x40>
 80028cc:	2301      	movs	r3, #1
 80028ce:	e000      	b.n	80028d2 <TIM_Base_SetConfig+0x42>
 80028d0:	2300      	movs	r3, #0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d008      	beq.n	80028e8 <TIM_Base_SetConfig+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a24      	ldr	r2, [pc, #144]	; (800297c <TIM_Base_SetConfig+0xec>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d01b      	beq.n	8002928 <TIM_Base_SetConfig+0x98>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f6:	d017      	beq.n	8002928 <TIM_Base_SetConfig+0x98>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a21      	ldr	r2, [pc, #132]	; (8002980 <TIM_Base_SetConfig+0xf0>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d013      	beq.n	8002928 <TIM_Base_SetConfig+0x98>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a20      	ldr	r2, [pc, #128]	; (8002984 <TIM_Base_SetConfig+0xf4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d00f      	beq.n	8002928 <TIM_Base_SetConfig+0x98>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a1f      	ldr	r2, [pc, #124]	; (8002988 <TIM_Base_SetConfig+0xf8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d00b      	beq.n	8002928 <TIM_Base_SetConfig+0x98>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a1e      	ldr	r2, [pc, #120]	; (800298c <TIM_Base_SetConfig+0xfc>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d007      	beq.n	8002928 <TIM_Base_SetConfig+0x98>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a1d      	ldr	r2, [pc, #116]	; (8002990 <TIM_Base_SetConfig+0x100>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d003      	beq.n	8002928 <TIM_Base_SetConfig+0x98>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a1c      	ldr	r2, [pc, #112]	; (8002994 <TIM_Base_SetConfig+0x104>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d101      	bne.n	800292c <TIM_Base_SetConfig+0x9c>
 8002928:	2301      	movs	r3, #1
 800292a:	e000      	b.n	800292e <TIM_Base_SetConfig+0x9e>
 800292c:	2300      	movs	r3, #0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d008      	beq.n	8002944 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	4313      	orrs	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a07      	ldr	r2, [pc, #28]	; (800297c <TIM_Base_SetConfig+0xec>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d103      	bne.n	800296a <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	691a      	ldr	r2, [r3, #16]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	615a      	str	r2, [r3, #20]
}
 8002970:	bf00      	nop
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	40010000 	.word	0x40010000
 8002980:	40000400 	.word	0x40000400
 8002984:	40000800 	.word	0x40000800
 8002988:	40000c00 	.word	0x40000c00
 800298c:	40014000 	.word	0x40014000
 8002990:	40014400 	.word	0x40014400
 8002994:	40014800 	.word	0x40014800

08002998 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80029c0:	b084      	sub	sp, #16
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b082      	sub	sp, #8
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
 80029ca:	f107 0014 	add.w	r0, r7, #20
 80029ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80029d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d120      	bne.n	8002a1a <USB_CoreInit+0x5a>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80029ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	60d3      	str	r3, [r2, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1U)
 8002a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d105      	bne.n	8002a12 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f001 f9c4 	bl	8003da0 <USB_CoreReset>
 8002a18:	e00c      	b.n	8002a34 <USB_CoreInit+0x74>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f001 f9ba 	bl	8003da0 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a32:	639a      	str	r2, [r3, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d10b      	bne.n	8002a52 <USB_CoreInit+0x92>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f043 0206 	orr.w	r2, r3, #6
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	609a      	str	r2, [r3, #8]
  }  

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a5e:	b004      	add	sp, #16
 8002a60:	4770      	bx	lr

08002a62 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f043 0201 	orr.w	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f023 0201 	bic.w	r2, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	60da      	str	r2, [r3, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d106      	bne.n	8002ad2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	60da      	str	r2, [r3, #12]
 8002ad0:	e008      	b.n	8002ae4 <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 8002ad2:	78fb      	ldrb	r3, [r7, #3]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d105      	bne.n	8002ae4 <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50U);
 8002ae4:	2032      	movs	r0, #50	; 0x32
 8002ae6:	f7fd fd57 	bl	8000598 <HAL_Delay>
  
  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002af4:	b084      	sub	sp, #16
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b084      	sub	sp, #16
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	f107 001c 	add.w	r0, r7, #28
 8002b02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i = 0U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	60fb      	str	r3, [r7, #12]
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
 8002b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d106      	bne.n	8002b1e <USB_DevInit+0x2a>
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b14:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	639a      	str	r2, [r3, #56]	; 0x38
 8002b1c:	e005      	b.n	8002b2a <USB_DevInit+0x36>
  }
  else
  {
    /* Enable VBUS */
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b22:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002b30:	461a      	mov	r2, r3
 8002b32:	2300      	movs	r3, #0
 8002b34:	6013      	str	r3, [r2, #0]
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6013      	str	r3, [r2, #0]
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8002b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d10c      	bne.n	8002b68 <USB_DevInit+0x74>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d104      	bne.n	8002b5e <USB_DevInit+0x6a>
    {      
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 8002b54:	2100      	movs	r1, #0
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f946 	bl	8002de8 <USB_SetDevSpeed>
 8002b5c:	e008      	b.n	8002b70 <USB_DevInit+0x7c>
    }
    else 
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8002b5e:	2101      	movs	r1, #1
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f941 	bl	8002de8 <USB_SetDevSpeed>
 8002b66:	e003      	b.n	8002b70 <USB_DevInit+0x7c>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8002b68:	2103      	movs	r1, #3
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f93c 	bl	8002de8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 8002b70:	2110      	movs	r1, #16
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f8f0 	bl	8002d58 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f913 	bl	8002da4 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b84:	461a      	mov	r2, r3
 8002b86:	2300      	movs	r3, #0
 8002b88:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b90:	461a      	mov	r2, r3
 8002b92:	2300      	movs	r3, #0
 8002b94:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba2:	6193      	str	r3, [r2, #24]
  USBx_DEVICE->DAINTMSK = 0U;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002baa:	461a      	mov	r2, r3
 8002bac:	2300      	movs	r3, #0
 8002bae:	61d3      	str	r3, [r2, #28]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	e034      	b.n	8002c20 <USB_DevInit+0x12c>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	015a      	lsls	r2, r3, #5
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bcc:	d10a      	bne.n	8002be4 <USB_DevInit+0xf0>
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	015a      	lsls	r2, r3, #5
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	e008      	b.n	8002bf6 <USB_DevInit+0x102>
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	015a      	lsls	r2, r3, #5
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4413      	add	r3, r2
 8002bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	6013      	str	r3, [r2, #0]
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	015a      	lsls	r2, r3, #5
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c02:	461a      	mov	r2, r3
 8002c04:	2300      	movs	r3, #0
 8002c06:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c14:	461a      	mov	r2, r3
 8002c16:	23ff      	movs	r3, #255	; 0xff
 8002c18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d8c6      	bhi.n	8002bb6 <USB_DevInit+0xc2>
  }
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	e034      	b.n	8002c98 <USB_DevInit+0x1a4>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c44:	d10a      	bne.n	8002c5c <USB_DevInit+0x168>
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c52:	461a      	mov	r2, r3
 8002c54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	e008      	b.n	8002c6e <USB_DevInit+0x17a>
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c68:	461a      	mov	r2, r3
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	6013      	str	r3, [r2, #0]
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	015a      	lsls	r2, r3, #5
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	015a      	lsls	r2, r3, #5
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4413      	add	r3, r2
 8002c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	23ff      	movs	r3, #255	; 0xff
 8002c90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	3301      	adds	r3, #1
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	69fa      	ldr	r2, [r7, #28]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d8c6      	bhi.n	8002c2e <USB_DevInit+0x13a>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cb4:	6113      	str	r3, [r2, #16]
  
  if (cfg.dma_enable == 1U)
 8002cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d117      	bne.n	8002cec <USB_DevInit+0x1f8>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <USB_DevInit+0x25c>)
 8002cc6:	6313      	str	r3, [r2, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cce:	461a      	mov	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cdc:	f043 0303 	orr.w	r3, r3, #3
 8002ce0:	6313      	str	r3, [r2, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	60fb      	str	r3, [r7, #12]
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002cf8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8002cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d105      	bne.n	8002d0c <USB_DevInit+0x218>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	f043 0210 	orr.w	r2, r3, #16
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	619a      	str	r2, [r3, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699a      	ldr	r2, [r3, #24]
 8002d10:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <USB_DevInit+0x260>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 8002d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d005      	beq.n	8002d2a <USB_DevInit+0x236>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	f043 0208 	orr.w	r2, r3, #8
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 8002d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d107      	bne.n	8002d40 <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d38:	f043 0304 	orr.w	r3, r3, #4
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6193      	str	r3, [r2, #24]
  }
  
  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d4c:	b004      	add	sp, #16
 8002d4e:	4770      	bx	lr
 8002d50:	00800100 	.word	0x00800100
 8002d54:	803c3800 	.word	0x803c3800

08002d58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	019b      	lsls	r3, r3, #6
 8002d6a:	f043 0220 	orr.w	r2, r3, #32
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	3301      	adds	r3, #1
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4a09      	ldr	r2, [pc, #36]	; (8002da0 <USB_FlushTxFifo+0x48>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d901      	bls.n	8002d84 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e006      	b.n	8002d92 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	f003 0320 	and.w	r3, r3, #32
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	d0f0      	beq.n	8002d72 <USB_FlushTxFifo+0x1a>
  
  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	00030d40 	.word	0x00030d40

08002da4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2210      	movs	r2, #16
 8002db4:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	3301      	adds	r3, #1
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4a09      	ldr	r2, [pc, #36]	; (8002de4 <USB_FlushRxFifo+0x40>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d901      	bls.n	8002dc8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e006      	b.n	8002dd6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	f003 0310 	and.w	r3, r3, #16
 8002dd0:	2b10      	cmp	r3, #16
 8002dd2:	d0f0      	beq.n	8002db6 <USB_FlushRxFifo+0x12>
  
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	00030d40 	.word	0x00030d40

08002de8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG |= speed;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	78fb      	ldrb	r3, [r7, #3]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <USB_GetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint8_t speed = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	73fb      	strb	r3, [r7, #15]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 0306 	and.w	r3, r3, #6
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d102      	bne.n	8002e3a <USB_GetDevSpeed+0x22>
  {
    speed = USB_OTG_SPEED_HIGH;
 8002e34:	2300      	movs	r3, #0
 8002e36:	73fb      	strb	r3, [r7, #15]
 8002e38:	e01c      	b.n	8002e74 <USB_GetDevSpeed+0x5c>
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 0306 	and.w	r3, r3, #6
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d007      	beq.n	8002e5a <USB_GetDevSpeed+0x42>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8002e56:	2b06      	cmp	r3, #6
 8002e58:	d102      	bne.n	8002e60 <USB_GetDevSpeed+0x48>
  {
    speed = USB_OTG_SPEED_FULL;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	73fb      	strb	r3, [r7, #15]
 8002e5e:	e009      	b.n	8002e74 <USB_GetDevSpeed+0x5c>
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 0306 	and.w	r3, r3, #6
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d101      	bne.n	8002e74 <USB_GetDevSpeed+0x5c>
  {
    speed = USB_OTG_SPEED_LOW;
 8002e70:	2302      	movs	r3, #2
 8002e72:	73fb      	strb	r3, [r7, #15]
  }
  
  return speed;
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	785b      	ldrb	r3, [r3, #1]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d13e      	bne.n	8002f12 <USB_ActivateEndpoint+0x90>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ea2:	69da      	ldr	r2, [r3, #28]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	2301      	movs	r3, #1
 8002eac:	4083      	lsls	r3, r0
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61cb      	str	r3, [r1, #28]
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	015a      	lsls	r2, r3, #5
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d15c      	bne.n	8002f86 <USB_ActivateEndpoint+0x104>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	015a      	lsls	r2, r3, #5
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eda:	4618      	mov	r0, r3
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	015a      	lsls	r2, r3, #5
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ef4:	6839      	ldr	r1, [r7, #0]
 8002ef6:	78c9      	ldrb	r1, [r1, #3]
 8002ef8:	0489      	lsls	r1, r1, #18
 8002efa:	430b      	orrs	r3, r1
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
 8002efc:	6839      	ldr	r1, [r7, #0]
 8002efe:	7809      	ldrb	r1, [r1, #0]
 8002f00:	0589      	lsls	r1, r1, #22
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8002f02:	430b      	orrs	r3, r1
 8002f04:	4313      	orrs	r3, r2
 8002f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f0e:	6003      	str	r3, [r0, #0]
 8002f10:	e039      	b.n	8002f86 <USB_ActivateEndpoint+0x104>
    } 
  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f18:	4619      	mov	r1, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f20:	69da      	ldr	r2, [r3, #28]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	2301      	movs	r3, #1
 8002f2a:	4083      	lsls	r3, r0
 8002f2c:	041b      	lsls	r3, r3, #16
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	61cb      	str	r3, [r1, #28]
     
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d11d      	bne.n	8002f86 <USB_ActivateEndpoint+0x104>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	015a      	lsls	r2, r3, #5
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f58:	4618      	mov	r0, r3
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	015a      	lsls	r2, r3, #5
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4413      	add	r3, r2
 8002f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f72:	6839      	ldr	r1, [r7, #0]
 8002f74:	78c9      	ldrb	r1, [r1, #3]
 8002f76:	0489      	lsls	r1, r1, #18
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f84:	6003      	str	r3, [r0, #0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	785b      	ldrb	r3, [r3, #1]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d154      	bne.n	8003054 <USB_DeactivateEndpoint+0xc0>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fb8:	4619      	mov	r1, r3
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	015a      	lsls	r2, r3, #5
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002fce:	600b      	str	r3, [r1, #0]
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	015a      	lsls	r2, r3, #5
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fde:	461a      	mov	r2, r3
 8002fe0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002fe4:	6013      	str	r3, [r2, #0]
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ffa:	6013      	str	r3, [r2, #0]
    
    do
    {
      if (++count > 200000U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	3301      	adds	r3, #1
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4a43      	ldr	r2, [pc, #268]	; (8003114 <USB_DeactivateEndpoint+0x180>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d901      	bls.n	800300e <USB_DeactivateEndpoint+0x7a>
      {
        return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e07d      	b.n	800310a <USB_DeactivateEndpoint+0x176>
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	015a      	lsls	r2, r3, #5
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4413      	add	r3, r2
 8003018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003026:	d0e9      	beq.n	8002ffc <USB_DeactivateEndpoint+0x68>
    
    
    /* Flush any data remaining in the TxFIFO */
    USB_FlushTxFifo(USBx , 0x10U);
 8003028:	2110      	movs	r1, #16
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff fe94 	bl	8002d58 <USB_FlushTxFifo>
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003036:	4619      	mov	r1, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800303e:	69da      	ldr	r2, [r3, #28]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	2301      	movs	r3, #1
 8003048:	4083      	lsls	r3, r0
 800304a:	b29b      	uxth	r3, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	4013      	ands	r3, r2
 8003050:	61cb      	str	r3, [r1, #28]
 8003052:	e059      	b.n	8003108 <USB_DeactivateEndpoint+0x174>
  
  }
  else /* Disable the OUT endpoint */
  {
    
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4413      	add	r3, r2
 800305e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003062:	4619      	mov	r1, r3
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4413      	add	r3, r2
 800306e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003078:	600b      	str	r3, [r1, #0]
    
    /* sets the NAK bit for the OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	015a      	lsls	r2, r3, #5
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4413      	add	r3, r2
 8003084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003088:	461a      	mov	r2, r3
 800308a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800308e:	6013      	str	r3, [r2, #0]
    
    /* Disable OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	015a      	lsls	r2, r3, #5
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4413      	add	r3, r2
 800309a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800309e:	461a      	mov	r2, r3
 80030a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030a4:	6013      	str	r3, [r2, #0]
    
    do
    {
      if (++count > 200000U)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	3301      	adds	r3, #1
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4a19      	ldr	r2, [pc, #100]	; (8003114 <USB_DeactivateEndpoint+0x180>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d901      	bls.n	80030b8 <USB_DeactivateEndpoint+0x124>
      {
        return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e028      	b.n	800310a <USB_DeactivateEndpoint+0x176>
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	015a      	lsls	r2, r3, #5
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4413      	add	r3, r2
 80030c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	2b10      	cmp	r3, #16
 80030ce:	d0ea      	beq.n	80030a6 <USB_DeactivateEndpoint+0x112>
    
    /* Set the "Clear the Global OUT NAK bit" to disable global OUT NAK mode */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d6:	461a      	mov	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030e4:	6053      	str	r3, [r2, #4]
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ec:	4619      	mov	r1, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030f4:	69da      	ldr	r2, [r3, #28]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	2301      	movs	r3, #1
 80030fe:	4083      	lsls	r3, r0
 8003100:	041b      	lsls	r3, r3, #16
 8003102:	43db      	mvns	r3, r3
 8003104:	4013      	ands	r3, r2
 8003106:	61cb      	str	r3, [r1, #28]
  }
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	00030d40 	.word	0x00030d40

08003118 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af02      	add	r7, sp, #8
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	4613      	mov	r3, r2
 8003124:	71fb      	strb	r3, [r7, #7]
  uint16_t pktcnt = 0U;
 8003126:	2300      	movs	r3, #0
 8003128:	82fb      	strh	r3, [r7, #22]
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	785b      	ldrb	r3, [r3, #1]
 800312e:	2b01      	cmp	r3, #1
 8003130:	f040 8146 	bne.w	80033c0 <USB_EPStartXfer+0x2a8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d13b      	bne.n	80031b4 <USB_EPStartXfer+0x9c>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4413      	add	r3, r2
 8003146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800314a:	4619      	mov	r1, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4413      	add	r3, r2
 8003156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003160:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003164:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	015a      	lsls	r2, r3, #5
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4413      	add	r3, r2
 8003170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003174:	4619      	mov	r1, r3
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	015a      	lsls	r2, r3, #5
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4413      	add	r3, r2
 8003180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800318a:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	015a      	lsls	r2, r3, #5
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4413      	add	r3, r2
 8003196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800319a:	4619      	mov	r1, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	0cdb      	lsrs	r3, r3, #19
 80031ae:	04db      	lsls	r3, r3, #19
 80031b0:	610b      	str	r3, [r1, #16]
 80031b2:	e086      	b.n	80032c2 <USB_EPStartXfer+0x1aa>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	015a      	lsls	r2, r3, #5
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4413      	add	r3, r2
 80031be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031c2:	4619      	mov	r1, r3
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	015a      	lsls	r2, r3, #5
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4413      	add	r3, r2
 80031ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	0cdb      	lsrs	r3, r3, #19
 80031d6:	04db      	lsls	r3, r3, #19
 80031d8:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e8:	4619      	mov	r1, r3
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	015a      	lsls	r2, r3, #5
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80031fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003202:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4413      	add	r3, r2
 800320e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003212:	4618      	mov	r0, r3
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	015a      	lsls	r2, r3, #5
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4413      	add	r3, r2
 800321e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	6959      	ldr	r1, [r3, #20]
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	440b      	add	r3, r1
 800322e:	1e59      	subs	r1, r3, #1
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	fbb1 f3f3 	udiv	r3, r1, r3
 8003238:	04d9      	lsls	r1, r3, #19
 800323a:	4b8c      	ldr	r3, [pc, #560]	; (800346c <USB_EPStartXfer+0x354>)
 800323c:	400b      	ands	r3, r1
 800323e:	4313      	orrs	r3, r2
 8003240:	6103      	str	r3, [r0, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	015a      	lsls	r2, r3, #5
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4413      	add	r3, r2
 800324c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003250:	4619      	mov	r1, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4413      	add	r3, r2
 800325c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003260:	691a      	ldr	r2, [r3, #16]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800326a:	4313      	orrs	r3, r2
 800326c:	610b      	str	r3, [r1, #16]
      
      if (ep->type == EP_TYPE_ISOC)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	78db      	ldrb	r3, [r3, #3]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d125      	bne.n	80032c2 <USB_EPStartXfer+0x1aa>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	015a      	lsls	r2, r3, #5
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4413      	add	r3, r2
 8003280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003284:	4619      	mov	r1, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4413      	add	r3, r2
 8003290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800329a:	610b      	str	r3, [r1, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	015a      	lsls	r2, r3, #5
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032aa:	4619      	mov	r1, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032c0:	610b      	str	r3, [r1, #16]
      }       
    }

    if (dma == 1U)
 80032c2:	79fb      	ldrb	r3, [r7, #7]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d10b      	bne.n	80032e0 <USB_EPStartXfer+0x1c8>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	015a      	lsls	r2, r3, #5
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032d6:	461a      	mov	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	6153      	str	r3, [r2, #20]
 80032de:	e016      	b.n	800330e <USB_EPStartXfer+0x1f6>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	78db      	ldrb	r3, [r3, #3]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d012      	beq.n	800330e <USB_EPStartXfer+0x1f6>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00e      	beq.n	800330e <USB_EPStartXfer+0x1f6>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032f6:	4619      	mov	r1, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	2301      	movs	r3, #1
 8003308:	4083      	lsls	r3, r0
 800330a:	4313      	orrs	r3, r2
 800330c:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	78db      	ldrb	r3, [r3, #3]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d12e      	bne.n	8003374 <USB_EPStartXfer+0x25c>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003322:	2b00      	cmp	r3, #0
 8003324:	d113      	bne.n	800334e <USB_EPStartXfer+0x236>
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4413      	add	r3, r2
 8003330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003334:	4619      	mov	r1, r3
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4413      	add	r3, r2
 8003340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800334a:	600b      	str	r3, [r1, #0]
 800334c:	e012      	b.n	8003374 <USB_EPStartXfer+0x25c>
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4413      	add	r3, r2
 8003358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800335c:	4619      	mov	r1, r3
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4413      	add	r3, r2
 8003368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003372:	600b      	str	r3, [r1, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	015a      	lsls	r2, r3, #5
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	4413      	add	r3, r2
 800337e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003382:	4619      	mov	r1, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	015a      	lsls	r2, r3, #5
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	4413      	add	r3, r2
 800338e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003398:	600b      	str	r3, [r1, #0]
    
    if (ep->type == EP_TYPE_ISOC)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	78db      	ldrb	r3, [r3, #3]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	f040 80f5 	bne.w	800358e <USB_EPStartXfer+0x476>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	68d9      	ldr	r1, [r3, #12]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	781a      	ldrb	r2, [r3, #0]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	b298      	uxth	r0, r3
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	4603      	mov	r3, r0
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 fa4e 	bl	800385a <USB_WritePacket>
 80033be:	e0e6      	b.n	800358e <USB_EPStartXfer+0x476>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */  
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ce:	4619      	mov	r1, r3
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	015a      	lsls	r2, r3, #5
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4413      	add	r3, r2
 80033da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	0cdb      	lsrs	r3, r3, #19
 80033e2:	04db      	lsls	r3, r3, #19
 80033e4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f4:	4619      	mov	r1, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800340a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800340e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d12b      	bne.n	8003470 <USB_EPStartXfer+0x358>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4413      	add	r3, r2
 8003422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003426:	4619      	mov	r1, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	015a      	lsls	r2, r3, #5
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	4413      	add	r3, r2
 8003432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003436:	691a      	ldr	r2, [r3, #16]
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003440:	4313      	orrs	r3, r2
 8003442:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4413      	add	r3, r2
 800344e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003452:	4619      	mov	r1, r3
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	015a      	lsls	r2, r3, #5
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4413      	add	r3, r2
 800345e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003468:	610b      	str	r3, [r1, #16]
 800346a:	e03c      	b.n	80034e6 <USB_EPStartXfer+0x3ce>
 800346c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	695a      	ldr	r2, [r3, #20]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	4413      	add	r3, r2
 800347a:	1e5a      	subs	r2, r3, #1
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	fbb2 f3f3 	udiv	r3, r2, r3
 8003484:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4413      	add	r3, r2
 8003490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003494:	4619      	mov	r1, r3
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	015a      	lsls	r2, r3, #5
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a4:	691a      	ldr	r2, [r3, #16]
 80034a6:	8afb      	ldrh	r3, [r7, #22]
 80034a8:	04db      	lsls	r3, r3, #19
 80034aa:	4618      	mov	r0, r3
 80034ac:	4b3a      	ldr	r3, [pc, #232]	; (8003598 <USB_EPStartXfer+0x480>)
 80034ae:	4003      	ands	r3, r0
 80034b0:	4313      	orrs	r3, r2
 80034b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	015a      	lsls	r2, r3, #5
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	4413      	add	r3, r2
 80034be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c2:	4618      	mov	r0, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	015a      	lsls	r2, r3, #5
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4413      	add	r3, r2
 80034ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	8af9      	ldrh	r1, [r7, #22]
 80034da:	fb01 f303 	mul.w	r3, r1, r3
 80034de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e2:	4313      	orrs	r3, r2
 80034e4:	6103      	str	r3, [r0, #16]
    }

    if (dma == 1U)
 80034e6:	79fb      	ldrb	r3, [r7, #7]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d10a      	bne.n	8003502 <USB_EPStartXfer+0x3ea>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	015a      	lsls	r2, r3, #5
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4413      	add	r3, r2
 80034f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034fa:	461a      	mov	r2, r3
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	6153      	str	r3, [r2, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	78db      	ldrb	r3, [r3, #3]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d12e      	bne.n	8003568 <USB_EPStartXfer+0x450>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003516:	2b00      	cmp	r3, #0
 8003518:	d113      	bne.n	8003542 <USB_EPStartXfer+0x42a>
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4413      	add	r3, r2
 8003524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003528:	4619      	mov	r1, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4413      	add	r3, r2
 8003534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800353e:	600b      	str	r3, [r1, #0]
 8003540:	e012      	b.n	8003568 <USB_EPStartXfer+0x450>
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	015a      	lsls	r2, r3, #5
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4413      	add	r3, r2
 800354c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003550:	4619      	mov	r1, r3
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4413      	add	r3, r2
 800355c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003566:	600b      	str	r3, [r1, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	015a      	lsls	r2, r3, #5
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4413      	add	r3, r2
 8003572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003576:	4619      	mov	r1, r3
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	4413      	add	r3, r2
 8003582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800358c:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	1ff80000 	.word	0x1ff80000

0800359c <USB_EP0StartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	4613      	mov	r3, r2
 80035a8:	71fb      	strb	r3, [r7, #7]
  /* IN endpoint */
  if (ep->is_in == 1U)
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	785b      	ldrb	r3, [r3, #1]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	f040 80d2 	bne.w	8003758 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d13b      	bne.n	8003634 <USB_EP0StartXfer+0x98>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ca:	4619      	mov	r1, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80035e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80035e4:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035f4:	4619      	mov	r1, r3
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	015a      	lsls	r2, r3, #5
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4413      	add	r3, r2
 8003600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800360a:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4413      	add	r3, r2
 8003616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800361a:	4619      	mov	r1, r3
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	015a      	lsls	r2, r3, #5
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4413      	add	r3, r2
 8003626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	0cdb      	lsrs	r3, r3, #19
 800362e:	04db      	lsls	r3, r3, #19
 8003630:	610b      	str	r3, [r1, #16]
 8003632:	e05a      	b.n	80036ea <USB_EP0StartXfer+0x14e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	015a      	lsls	r2, r3, #5
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4413      	add	r3, r2
 800363e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003642:	4619      	mov	r1, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4413      	add	r3, r2
 800364e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	0cdb      	lsrs	r3, r3, #19
 8003656:	04db      	lsls	r3, r3, #19
 8003658:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4413      	add	r3, r2
 8003664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003668:	4619      	mov	r1, r3
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	015a      	lsls	r2, r3, #5
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4413      	add	r3, r2
 8003674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800367e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003682:	610b      	str	r3, [r1, #16]
      
      if(ep->xfer_len > ep->maxpacket)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	695a      	ldr	r2, [r3, #20]
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	429a      	cmp	r2, r3
 800368e:	d903      	bls.n	8003698 <USB_EP0StartXfer+0xfc>
      {
        ep->xfer_len = ep->maxpacket;
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a6:	4619      	mov	r1, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036bc:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	015a      	lsls	r2, r3, #5
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036cc:	4619      	mov	r1, r3
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036dc:	691a      	ldr	r2, [r3, #16]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036e6:	4313      	orrs	r3, r2
 80036e8:	610b      	str	r3, [r1, #16]
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f8:	4619      	mov	r1, r3
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	015a      	lsls	r2, r3, #5
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4413      	add	r3, r2
 8003704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800370e:	600b      	str	r3, [r1, #0]
    
    if (dma == 1)
 8003710:	79fb      	ldrb	r3, [r7, #7]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d10b      	bne.n	800372e <USB_EP0StartXfer+0x192>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4413      	add	r3, r2
 8003720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003724:	461a      	mov	r2, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	6153      	str	r3, [r2, #20]
 800372c:	e08e      	b.n	800384c <USB_EP0StartXfer+0x2b0>
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 808a 	beq.w	800384c <USB_EP0StartXfer+0x2b0>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800373e:	4619      	mov	r1, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	2301      	movs	r3, #1
 8003750:	4083      	lsls	r3, r0
 8003752:	4313      	orrs	r3, r2
 8003754:	634b      	str	r3, [r1, #52]	; 0x34
 8003756:	e079      	b.n	800384c <USB_EP0StartXfer+0x2b0>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	015a      	lsls	r2, r3, #5
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	4413      	add	r3, r2
 8003762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003766:	4619      	mov	r1, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	015a      	lsls	r2, r3, #5
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4413      	add	r3, r2
 8003772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	0cdb      	lsrs	r3, r3, #19
 800377a:	04db      	lsls	r3, r3, #19
 800377c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4413      	add	r3, r2
 8003788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800378c:	4619      	mov	r1, r3
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4413      	add	r3, r2
 8003798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80037a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80037a6:	610b      	str	r3, [r1, #16]
      
    if (ep->xfer_len > 0U)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <USB_EP0StartXfer+0x21c>
    {
      ep->xfer_len = ep->maxpacket;
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	615a      	str	r2, [r3, #20]
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c6:	4619      	mov	r1, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80037dc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ec:	4619      	mov	r1, r3
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037fc:	691a      	ldr	r2, [r3, #16]
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003806:	4313      	orrs	r3, r2
 8003808:	610b      	str	r3, [r1, #16]
    

    if (dma == 1U)
 800380a:	79fb      	ldrb	r3, [r7, #7]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d10a      	bne.n	8003826 <USB_EP0StartXfer+0x28a>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4413      	add	r3, r2
 800381a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800381e:	461a      	mov	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	6153      	str	r3, [r2, #20]
    }
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4413      	add	r3, r2
 8003830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003834:	4619      	mov	r1, r3
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4413      	add	r3, r2
 8003840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800384a:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800385a:	b480      	push	{r7}
 800385c:	b087      	sub	sp, #28
 800385e:	af00      	add	r7, sp, #0
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	4611      	mov	r1, r2
 8003866:	461a      	mov	r2, r3
 8003868:	460b      	mov	r3, r1
 800386a:	71fb      	strb	r3, [r7, #7]
 800386c:	4613      	mov	r3, r2
 800386e:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b = 0U , i = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	613b      	str	r3, [r7, #16]
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]
  
  if (dma == 0U)
 8003878:	f897 3020 	ldrb.w	r3, [r7, #32]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d11a      	bne.n	80038b6 <USB_WritePacket+0x5c>
  {
    count32b =  (len + 3U) / 4U;
 8003880:	88bb      	ldrh	r3, [r7, #4]
 8003882:	3303      	adds	r3, #3
 8003884:	089b      	lsrs	r3, r3, #2
 8003886:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++, src += 4U)
 8003888:	2300      	movs	r3, #0
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	e00f      	b.n	80038ae <USB_WritePacket+0x54>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	031a      	lsls	r2, r3, #12
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4413      	add	r3, r2
 8003896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800389a:	461a      	mov	r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6013      	str	r3, [r2, #0]
    for (i = 0U; i < count32b; i++, src += 4U)
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	3301      	adds	r3, #1
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	3304      	adds	r3, #4
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d3eb      	bcc.n	800388e <USB_WritePacket+0x34>
    }
  }
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	371c      	adds	r7, #28
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	4613      	mov	r3, r2
 80038d0:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3U) / 4U;
 80038d6:	88fb      	ldrh	r3, [r7, #6]
 80038d8:	3303      	adds	r3, #3
 80038da:	089b      	lsrs	r3, r3, #2
 80038dc:	613b      	str	r3, [r7, #16]
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	e00b      	b.n	80038fc <USB_ReadPacket+0x38>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	601a      	str	r2, [r3, #0]
  for ( i = 0U; i < count32b; i++, dest += 4U )
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	3301      	adds	r3, #1
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	3304      	adds	r3, #4
 80038fa:	60bb      	str	r3, [r7, #8]
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	429a      	cmp	r2, r3
 8003902:	d3ef      	bcc.n	80038e4 <USB_ReadPacket+0x20>
    
  }
  return ((void *)dest);
 8003904:	68bb      	ldr	r3, [r7, #8]
}
 8003906:	4618      	mov	r0, r3
 8003908:	371c      	adds	r7, #28
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	785b      	ldrb	r3, [r3, #1]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d130      	bne.n	8003986 <USB_EPSetStall+0x74>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4413      	add	r3, r2
 800392e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	db12      	blt.n	800395e <USB_EPSetStall+0x4c>
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS); 
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4413      	add	r3, r2
 8003942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003946:	4619      	mov	r1, r3
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4413      	add	r3, r2
 8003952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800395c:	600b      	str	r3, [r1, #0]
    } 
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4413      	add	r3, r2
 8003968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800396c:	4619      	mov	r1, r3
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4413      	add	r3, r2
 8003978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003982:	600b      	str	r3, [r1, #0]
 8003984:	e02f      	b.n	80039e6 <USB_EPSetStall+0xd4>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	db12      	blt.n	80039c0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a8:	4619      	mov	r1, r3
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80039be:	600b      	str	r3, [r1, #0]
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ce:	4619      	mov	r1, r3
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039e4:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	785b      	ldrb	r3, [r3, #1]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d12e      	bne.n	8003a64 <USB_EPClearStall+0x70>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a14:	4619      	mov	r1, r3
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a2a:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	78db      	ldrb	r3, [r3, #3]
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	d003      	beq.n	8003a3c <USB_EPClearStall+0x48>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	78db      	ldrb	r3, [r3, #3]
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d141      	bne.n	8003ac0 <USB_EPClearStall+0xcc>
    {
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a60:	600b      	str	r3, [r1, #0]
 8003a62:	e02d      	b.n	8003ac0 <USB_EPClearStall+0xcc>
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	015a      	lsls	r2, r3, #5
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a72:	4619      	mov	r1, r3
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	015a      	lsls	r2, r3, #5
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a88:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	78db      	ldrb	r3, [r3, #3]
 8003a8e:	2b03      	cmp	r3, #3
 8003a90:	d003      	beq.n	8003a9a <USB_EPClearStall+0xa6>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	78db      	ldrb	r3, [r3, #3]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d112      	bne.n	8003ac0 <USB_EPClearStall+0xcc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003abe:	600b      	str	r3, [r1, #0]
    }    
  }
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003aee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af6:	4619      	mov	r1, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	600b      	str	r3, [r1, #0]
  
  return HAL_OK;  
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b082      	sub	sp, #8
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b28:	461a      	mov	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f023 0302 	bic.w	r3, r3, #2
 8003b36:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003b38:	2003      	movs	r0, #3
 8003b3a:	f7fc fd2d 	bl	8000598 <HAL_Delay>
  
  return HAL_OK;  
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b56:	461a      	mov	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f043 0302 	orr.w	r3, r3, #2
 8003b64:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003b66:	2003      	movs	r0, #3
 8003b68:	f7fc fd16 	bl	8000598 <HAL_Delay>
  
  return HAL_OK;  
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b085      	sub	sp, #20
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  uint32_t v = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
  
  v = USBx->GINTSTS;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]
  return v;  
 8003b92:	68fb      	ldr	r3, [r7, #12]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000U) >> 16U);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	0c1b      	lsrs	r3, r3, #16
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4013      	ands	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]
  return ((v & 0xFFFFU));
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	b29b      	uxth	r3, r3
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8003c0c:	78fb      	ldrb	r3, [r7, #3]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DOEPMSK;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	4013      	ands	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]
  return v;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	460b      	mov	r3, r1
 8003c42:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	617b      	str	r3, [r7, #20]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c56:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8003c58:	78fb      	ldrb	r3, [r7, #3]
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c60:	01db      	lsls	r3, r3, #7
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	617b      	str	r3, [r7, #20]
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8003c6a:	78fb      	ldrb	r3, [r7, #3]
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]
  return v;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	371c      	adds	r7, #28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1U);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	f003 0301 	and.w	r3, r3, #1
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003cc4:	f023 0307 	bic.w	r3, r3, #7
 8003cc8:	6013      	str	r3, [r2, #0]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 0306 	and.w	r3, r3, #6
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d10a      	bne.n	8003cf0 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f043 0303 	orr.w	r3, r3, #3
 8003cee:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	607a      	str	r2, [r7, #4]
 8003d20:	72fb      	strb	r3, [r7, #11]
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d28:	461a      	mov	r2, r3
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d34:	461a      	mov	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d42:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	f043 0318 	orr.w	r3, r3, #24
 8003d58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d60:	461a      	mov	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8003d6e:	6113      	str	r3, [r2, #16]
  
  if (dma == 1U)
 8003d70:	7afb      	ldrb	r3, [r7, #11]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d10c      	bne.n	8003d90 <USB_EP0_OutStart+0x7c>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d88:	461a      	mov	r2, r3
 8003d8a:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 8003d8e:	6013      	str	r3, [r2, #0]
  }
  
  return HAL_OK;  
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
	...

08003da0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	3301      	adds	r3, #1
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4a13      	ldr	r2, [pc, #76]	; (8003e04 <USB_CoreReset+0x64>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d901      	bls.n	8003dbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e01b      	b.n	8003df6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	daf2      	bge.n	8003dac <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f043 0201 	orr.w	r2, r3, #1
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4a09      	ldr	r2, [pc, #36]	; (8003e04 <USB_CoreReset+0x64>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d901      	bls.n	8003de8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e006      	b.n	8003df6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d0f0      	beq.n	8003dd6 <USB_CoreReset+0x36>
  
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	00030d40 	.word	0x00030d40

08003e08 <MX_USB_DEVICE_Init>:
#include "usbd_rndis_if.h"

USBD_HandleTypeDef hUsbDeviceFS;

void MX_USB_DEVICE_Init(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
	USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	490b      	ldr	r1, [pc, #44]	; (8003e3c <MX_USB_DEVICE_Init+0x34>)
 8003e10:	480b      	ldr	r0, [pc, #44]	; (8003e40 <MX_USB_DEVICE_Init+0x38>)
 8003e12:	f002 fdae 	bl	8006972 <USBD_Init>

//	USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC);
//	USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
//	USBD_COMPOSITE_RegisterClass(&hUsbDeviceFS, 0x08, 0x06, 0x50);

	USBD_RegisterClass(&hUsbDeviceFS, &USBD_RNDIS);
 8003e16:	490b      	ldr	r1, [pc, #44]	; (8003e44 <MX_USB_DEVICE_Init+0x3c>)
 8003e18:	4809      	ldr	r0, [pc, #36]	; (8003e40 <MX_USB_DEVICE_Init+0x38>)
 8003e1a:	f002 fdd5 	bl	80069c8 <USBD_RegisterClass>
	USBD_RNDIS_RegisterInterface(&hUsbDeviceFS, &USBD_RNDIS_Interface_fops_FS);
 8003e1e:	490a      	ldr	r1, [pc, #40]	; (8003e48 <MX_USB_DEVICE_Init+0x40>)
 8003e20:	4807      	ldr	r0, [pc, #28]	; (8003e40 <MX_USB_DEVICE_Init+0x38>)
 8003e22:	f002 fcfb 	bl	800681c <USBD_RNDIS_RegisterInterface>
	USBD_COMPOSITE_RegisterClass(&hUsbDeviceFS, 0xE0, 0x01, 0x03);
 8003e26:	2303      	movs	r3, #3
 8003e28:	2201      	movs	r2, #1
 8003e2a:	21e0      	movs	r1, #224	; 0xe0
 8003e2c:	4804      	ldr	r0, [pc, #16]	; (8003e40 <MX_USB_DEVICE_Init+0x38>)
 8003e2e:	f002 f823 	bl	8005e78 <USBD_COMPOSITE_RegisterClass>

	USBD_Start(&hUsbDeviceFS);
 8003e32:	4803      	ldr	r0, [pc, #12]	; (8003e40 <MX_USB_DEVICE_Init+0x38>)
 8003e34:	f002 fde2 	bl	80069fc <USBD_Start>

}
 8003e38:	bf00      	nop
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	20000004 	.word	0x20000004
 8003e40:	20005780 	.word	0x20005780
 8003e44:	200000b4 	.word	0x200000b4
 8003e48:	2000003c 	.word	0x2000003c

08003e4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b088      	sub	sp, #32
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e5c:	d139      	bne.n	8003ed2 <HAL_PCD_MspInit+0x86>
	    PA8     ------> USB_OTG_FS_SOF
	    PA9     ------> USB_OTG_FS_VBUS
	    PA11     ------> USB_OTG_FS_DM
	    PA12     ------> USB_OTG_FS_DP
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8003e5e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003e62:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e64:	2302      	movs	r3, #2
 8003e66:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003e70:	230a      	movs	r3, #10
 8003e72:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e74:	f107 030c 	add.w	r3, r7, #12
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4818      	ldr	r0, [pc, #96]	; (8003edc <HAL_PCD_MspInit+0x90>)
 8003e7c:	f7fc fcd6 	bl	800082c <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e84:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e86:	2300      	movs	r3, #0
 8003e88:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e8e:	f107 030c 	add.w	r3, r7, #12
 8003e92:	4619      	mov	r1, r3
 8003e94:	4811      	ldr	r0, [pc, #68]	; (8003edc <HAL_PCD_MspInit+0x90>)
 8003e96:	f7fc fcc9 	bl	800082c <HAL_GPIO_Init>

	    /* Peripheral clock enable */
	    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003e9a:	4a11      	ldr	r2, [pc, #68]	; (8003ee0 <HAL_PCD_MspInit+0x94>)
 8003e9c:	4b10      	ldr	r3, [pc, #64]	; (8003ee0 <HAL_PCD_MspInit+0x94>)
 8003e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ea4:	6353      	str	r3, [r2, #52]	; 0x34
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	4a0d      	ldr	r2, [pc, #52]	; (8003ee0 <HAL_PCD_MspInit+0x94>)
 8003eac:	4b0c      	ldr	r3, [pc, #48]	; (8003ee0 <HAL_PCD_MspInit+0x94>)
 8003eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8003eb6:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <HAL_PCD_MspInit+0x94>)
 8003eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ebe:	60bb      	str	r3, [r7, #8]
 8003ec0:	68bb      	ldr	r3, [r7, #8]

	    /* Peripheral interrupt init */
	    HAL_NVIC_SetPriority(OTG_FS_IRQn, 7, 0);
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	2107      	movs	r1, #7
 8003ec6:	2043      	movs	r0, #67	; 0x43
 8003ec8:	f7fc fc5d 	bl	8000786 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003ecc:	2043      	movs	r0, #67	; 0x43
 8003ece:	f7fc fc76 	bl	80007be <HAL_NVIC_EnableIRQ>
	  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

	  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003ed2:	bf00      	nop
 8003ed4:	3720      	adds	r7, #32
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	40020000 	.word	0x40020000
 8003ee0:	40023800 	.word	0x40023800

08003ee4 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8d3 23ec 	ldr.w	r2, [r3, #1004]	; 0x3ec
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4610      	mov	r0, r2
 8003efc:	f002 fdc7 	bl	8006a8e <USBD_LL_SetupStage>
}
 8003f00:	bf00      	nop
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	460b      	mov	r3, r1
 8003f12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	; 0x3ec
 8003f1a:	78fa      	ldrb	r2, [r7, #3]
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	1a9b      	subs	r3, r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	78fb      	ldrb	r3, [r7, #3]
 8003f30:	4619      	mov	r1, r3
 8003f32:	f002 fdf6 	bl	8006b22 <USBD_LL_DataOutStage>
}
 8003f36:	bf00      	nop
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b082      	sub	sp, #8
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
 8003f46:	460b      	mov	r3, r1
 8003f48:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	; 0x3ec
 8003f50:	78fa      	ldrb	r2, [r7, #3]
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	4613      	mov	r3, r2
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	1a9b      	subs	r3, r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	3344      	adds	r3, #68	; 0x44
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	78fb      	ldrb	r3, [r7, #3]
 8003f64:	4619      	mov	r1, r3
 8003f66:	f002 fe37 	bl	8006bd8 <USBD_LL_DataInStage>
}
 8003f6a:	bf00      	nop
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b082      	sub	sp, #8
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003f80:	4618      	mov	r0, r3
 8003f82:	f002 ff1d 	bl	8006dc0 <USBD_LL_SOF>
}
 8003f86:	bf00      	nop
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b084      	sub	sp, #16
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8003f96:	2301      	movs	r3, #1
 8003f98:	73fb      	strb	r3, [r7, #15]

  /*Set USB Current Speed*/
  switch (hpcd->Init.speed)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <HAL_PCD_ResetCallback+0x1a>
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d003      	beq.n	8003fae <HAL_PCD_ResetCallback+0x20>
 8003fa6:	e005      	b.n	8003fb4 <HAL_PCD_ResetCallback+0x26>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	73fb      	strb	r3, [r7, #15]
    break;
 8003fac:	e005      	b.n	8003fba <HAL_PCD_ResetCallback+0x2c>
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;    
 8003fae:	2301      	movs	r3, #1
 8003fb0:	73fb      	strb	r3, [r7, #15]
    break;
 8003fb2:	e002      	b.n	8003fba <HAL_PCD_ResetCallback+0x2c>
	
  default:
    speed = USBD_SPEED_FULL;    
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	73fb      	strb	r3, [r7, #15]
    break;    
 8003fb8:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003fc0:	7bfa      	ldrb	r2, [r7, #15]
 8003fc2:	4611      	mov	r1, r2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f002 fec5 	bl	8006d54 <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f002 fe90 	bl	8006cf6 <USBD_LL_Reset>
}
 8003fd6:	bf00      	nop
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{  
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
   /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f002 fec0 	bl	8006d74 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f043 0301 	orr.w	r3, r3, #1
 800400c:	6013      	str	r3, [r2, #0]
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_PCD_SuspendCallback+0x42>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004016:	4a05      	ldr	r2, [pc, #20]	; (800402c <HAL_PCD_SuspendCallback+0x4c>)
 8004018:	4b04      	ldr	r3, [pc, #16]	; (800402c <HAL_PCD_SuspendCallback+0x4c>)
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	f043 0306 	orr.w	r3, r3, #6
 8004020:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8004022:	bf00      	nop
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	e000ed00 	.word	0xe000ed00

08004030 <HAL_PCD_ResumeCallback>:
    When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800403e:	4618      	mov	r0, r3
 8004040:	f002 fead 	bl	8006d9e <USBD_LL_Resume>
  
}
 8004044:	bf00      	nop
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	460b      	mov	r3, r1
 8004056:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800405e:	78fa      	ldrb	r2, [r7, #3]
 8004060:	4611      	mov	r1, r2
 8004062:	4618      	mov	r0, r3
 8004064:	f002 fed3 	bl	8006e0e <USBD_LL_IsoOUTIncomplete>
}
 8004068:	bf00      	nop
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8004082:	78fa      	ldrb	r2, [r7, #3]
 8004084:	4611      	mov	r1, r2
 8004086:	4618      	mov	r0, r3
 8004088:	f002 feb4 	bl	8006df4 <USBD_LL_IsoINIncomplete>
}
 800408c:	bf00      	nop
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80040a2:	4618      	mov	r0, r3
 80040a4:	f002 fec0 	bl	8006e28 <USBD_LL_DevConnected>
}
 80040a8:	bf00      	nop
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80040be:	4618      	mov	r0, r3
 80040c0:	f002 febd 	bl	8006e3e <USBD_LL_DevDisconnected>
}
 80040c4:	bf00      	nop
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (pdev->id == DEVICE_FS) {
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d14c      	bne.n	8004176 <USBD_LL_Init+0xaa>
  /* Link The driver to the stack */	
  hpcd_USB_OTG_FS.pData = pdev;
 80040dc:	4a28      	ldr	r2, [pc, #160]	; (8004180 <USBD_LL_Init+0xb4>)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
  pdev->pData = &hpcd_USB_OTG_FS; 
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a26      	ldr	r2, [pc, #152]	; (8004180 <USBD_LL_Init+0xb4>)
 80040e8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80040ec:	4b24      	ldr	r3, [pc, #144]	; (8004180 <USBD_LL_Init+0xb4>)
 80040ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80040f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80040f4:	4b22      	ldr	r3, [pc, #136]	; (8004180 <USBD_LL_Init+0xb4>)
 80040f6:	2204      	movs	r2, #4
 80040f8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80040fa:	4b21      	ldr	r3, [pc, #132]	; (8004180 <USBD_LL_Init+0xb4>)
 80040fc:	2202      	movs	r2, #2
 80040fe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004100:	4b1f      	ldr	r3, [pc, #124]	; (8004180 <USBD_LL_Init+0xb4>)
 8004102:	2200      	movs	r2, #0
 8004104:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8004106:	4b1e      	ldr	r3, [pc, #120]	; (8004180 <USBD_LL_Init+0xb4>)
 8004108:	2200      	movs	r2, #0
 800410a:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800410c:	4b1c      	ldr	r3, [pc, #112]	; (8004180 <USBD_LL_Init+0xb4>)
 800410e:	2202      	movs	r2, #2
 8004110:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004112:	4b1b      	ldr	r3, [pc, #108]	; (8004180 <USBD_LL_Init+0xb4>)
 8004114:	2200      	movs	r2, #0
 8004116:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004118:	4b19      	ldr	r3, [pc, #100]	; (8004180 <USBD_LL_Init+0xb4>)
 800411a:	2200      	movs	r2, #0
 800411c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800411e:	4b18      	ldr	r3, [pc, #96]	; (8004180 <USBD_LL_Init+0xb4>)
 8004120:	2200      	movs	r2, #0
 8004122:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8004124:	4b16      	ldr	r3, [pc, #88]	; (8004180 <USBD_LL_Init+0xb4>)
 8004126:	2201      	movs	r2, #1
 8004128:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800412a:	4b15      	ldr	r3, [pc, #84]	; (8004180 <USBD_LL_Init+0xb4>)
 800412c:	2200      	movs	r2, #0
 800412e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004130:	4813      	ldr	r0, [pc, #76]	; (8004180 <USBD_LL_Init+0xb4>)
 8004132:	f7fc fd28 	bl	8000b86 <HAL_PCD_Init>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d004      	beq.n	8004146 <USBD_LL_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800413c:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004140:	4810      	ldr	r0, [pc, #64]	; (8004184 <USBD_LL_Init+0xb8>)
 8004142:	f00c fddf 	bl	8010d04 <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8004146:	2180      	movs	r1, #128	; 0x80
 8004148:	480d      	ldr	r0, [pc, #52]	; (8004180 <USBD_LL_Init+0xb4>)
 800414a:	f7fd fdc1 	bl	8001cd0 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800414e:	2240      	movs	r2, #64	; 0x40
 8004150:	2100      	movs	r1, #0
 8004152:	480b      	ldr	r0, [pc, #44]	; (8004180 <USBD_LL_Init+0xb4>)
 8004154:	f7fd fd71 	bl	8001c3a <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x40);
 8004158:	2240      	movs	r2, #64	; 0x40
 800415a:	2101      	movs	r1, #1
 800415c:	4808      	ldr	r0, [pc, #32]	; (8004180 <USBD_LL_Init+0xb4>)
 800415e:	f7fd fd6c 	bl	8001c3a <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 2, 0x40);
 8004162:	2240      	movs	r2, #64	; 0x40
 8004164:	2102      	movs	r1, #2
 8004166:	4806      	ldr	r0, [pc, #24]	; (8004180 <USBD_LL_Init+0xb4>)
 8004168:	f7fd fd67 	bl	8001c3a <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 3, 0x40);
 800416c:	2240      	movs	r2, #64	; 0x40
 800416e:	2103      	movs	r1, #3
 8004170:	4803      	ldr	r0, [pc, #12]	; (8004180 <USBD_LL_Init+0xb4>)
 8004172:	f7fd fd62 	bl	8001c3a <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	200059a4 	.word	0x200059a4
 8004184:	08011324 	.word	0x08011324

08004188 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004190:	2300      	movs	r3, #0
 8004192:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004194:	2300      	movs	r3, #0
 8004196:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fc fdf8 	bl	8000d94 <HAL_PCD_Start>
 80041a4:	4603      	mov	r3, r0
 80041a6:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80041a8:	7bbb      	ldrb	r3, [r7, #14]
 80041aa:	2b03      	cmp	r3, #3
 80041ac:	d816      	bhi.n	80041dc <USBD_LL_Start+0x54>
 80041ae:	a201      	add	r2, pc, #4	; (adr r2, 80041b4 <USBD_LL_Start+0x2c>)
 80041b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b4:	080041c5 	.word	0x080041c5
 80041b8:	080041cb 	.word	0x080041cb
 80041bc:	080041d1 	.word	0x080041d1
 80041c0:	080041d7 	.word	0x080041d7
    case HAL_OK :
      usb_status = USBD_OK;
 80041c4:	2300      	movs	r3, #0
 80041c6:	73fb      	strb	r3, [r7, #15]
    break;
 80041c8:	e00b      	b.n	80041e2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80041ca:	2302      	movs	r3, #2
 80041cc:	73fb      	strb	r3, [r7, #15]
    break;
 80041ce:	e008      	b.n	80041e2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80041d0:	2301      	movs	r3, #1
 80041d2:	73fb      	strb	r3, [r7, #15]
    break;
 80041d4:	e005      	b.n	80041e2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80041d6:	2302      	movs	r3, #2
 80041d8:	73fb      	strb	r3, [r7, #15]
    break;
 80041da:	e002      	b.n	80041e2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80041dc:	2302      	movs	r3, #2
 80041de:	73fb      	strb	r3, [r7, #15]
    break;
 80041e0:	bf00      	nop
  }
  return usb_status;  
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	4608      	mov	r0, r1
 80041f6:	4611      	mov	r1, r2
 80041f8:	461a      	mov	r2, r3
 80041fa:	4603      	mov	r3, r0
 80041fc:	70fb      	strb	r3, [r7, #3]
 80041fe:	460b      	mov	r3, r1
 8004200:	70bb      	strb	r3, [r7, #2]
 8004202:	4613      	mov	r3, r2
 8004204:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	73fb      	strb	r3, [r7, #15]

  ep_addr=USBD_COMPOSITE_LL_EP_Conversion(pdev, ep_addr);
 800420e:	78fb      	ldrb	r3, [r7, #3]
 8004210:	4619      	mov	r1, r3
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f002 f8ba 	bl	800638c <USBD_COMPOSITE_LL_EP_Conversion>
 8004218:	4603      	mov	r3, r0
 800421a:	70fb      	strb	r3, [r7, #3]

  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8004222:	78bb      	ldrb	r3, [r7, #2]
 8004224:	883a      	ldrh	r2, [r7, #0]
 8004226:	78f9      	ldrb	r1, [r7, #3]
 8004228:	f7fd fa81 	bl	800172e <HAL_PCD_EP_Open>
 800422c:	4603      	mov	r3, r0
 800422e:	73bb      	strb	r3, [r7, #14]
                               ep_addr, 
                               ep_mps, 
                               ep_type);
  
     
  switch (hal_status) {
 8004230:	7bbb      	ldrb	r3, [r7, #14]
 8004232:	2b03      	cmp	r3, #3
 8004234:	d816      	bhi.n	8004264 <USBD_LL_OpenEP+0x78>
 8004236:	a201      	add	r2, pc, #4	; (adr r2, 800423c <USBD_LL_OpenEP+0x50>)
 8004238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423c:	0800424d 	.word	0x0800424d
 8004240:	08004253 	.word	0x08004253
 8004244:	08004259 	.word	0x08004259
 8004248:	0800425f 	.word	0x0800425f
    case HAL_OK :
      usb_status = USBD_OK;
 800424c:	2300      	movs	r3, #0
 800424e:	73fb      	strb	r3, [r7, #15]
    break;
 8004250:	e00b      	b.n	800426a <USBD_LL_OpenEP+0x7e>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004252:	2302      	movs	r3, #2
 8004254:	73fb      	strb	r3, [r7, #15]
    break;
 8004256:	e008      	b.n	800426a <USBD_LL_OpenEP+0x7e>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8004258:	2301      	movs	r3, #1
 800425a:	73fb      	strb	r3, [r7, #15]
    break;
 800425c:	e005      	b.n	800426a <USBD_LL_OpenEP+0x7e>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800425e:	2302      	movs	r3, #2
 8004260:	73fb      	strb	r3, [r7, #15]
    break;
 8004262:	e002      	b.n	800426a <USBD_LL_OpenEP+0x7e>
    default :
      usb_status = USBD_FAIL;
 8004264:	2302      	movs	r3, #2
 8004266:	73fb      	strb	r3, [r7, #15]
    break;
 8004268:	bf00      	nop
  }
  return usb_status; 
 800426a:	7bfb      	ldrb	r3, [r7, #15]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	460b      	mov	r3, r1
 800427e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004280:	2300      	movs	r3, #0
 8004282:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	73fb      	strb	r3, [r7, #15]
  
  ep_addr=USBD_COMPOSITE_LL_EP_Conversion(pdev, ep_addr);
 8004288:	78fb      	ldrb	r3, [r7, #3]
 800428a:	4619      	mov	r1, r3
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f002 f87d 	bl	800638c <USBD_COMPOSITE_LL_EP_Conversion>
 8004292:	4603      	mov	r3, r0
 8004294:	70fb      	strb	r3, [r7, #3]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800429c:	78fa      	ldrb	r2, [r7, #3]
 800429e:	4611      	mov	r1, r2
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fd faac 	bl	80017fe <HAL_PCD_EP_Close>
 80042a6:	4603      	mov	r3, r0
 80042a8:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 80042aa:	7bbb      	ldrb	r3, [r7, #14]
 80042ac:	2b03      	cmp	r3, #3
 80042ae:	d817      	bhi.n	80042e0 <USBD_LL_CloseEP+0x6c>
 80042b0:	a201      	add	r2, pc, #4	; (adr r2, 80042b8 <USBD_LL_CloseEP+0x44>)
 80042b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b6:	bf00      	nop
 80042b8:	080042c9 	.word	0x080042c9
 80042bc:	080042cf 	.word	0x080042cf
 80042c0:	080042d5 	.word	0x080042d5
 80042c4:	080042db 	.word	0x080042db
    case HAL_OK :
      usb_status = USBD_OK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	73fb      	strb	r3, [r7, #15]
    break;
 80042cc:	e00b      	b.n	80042e6 <USBD_LL_CloseEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80042ce:	2302      	movs	r3, #2
 80042d0:	73fb      	strb	r3, [r7, #15]
    break;
 80042d2:	e008      	b.n	80042e6 <USBD_LL_CloseEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80042d4:	2301      	movs	r3, #1
 80042d6:	73fb      	strb	r3, [r7, #15]
    break;
 80042d8:	e005      	b.n	80042e6 <USBD_LL_CloseEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80042da:	2302      	movs	r3, #2
 80042dc:	73fb      	strb	r3, [r7, #15]
    break;
 80042de:	e002      	b.n	80042e6 <USBD_LL_CloseEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80042e0:	2302      	movs	r3, #2
 80042e2:	73fb      	strb	r3, [r7, #15]
    break;
 80042e4:	bf00      	nop
  }
  return usb_status;  
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	460b      	mov	r3, r1
 80042fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80042fc:	2300      	movs	r3, #0
 80042fe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004300:	2300      	movs	r3, #0
 8004302:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800430a:	78fa      	ldrb	r2, [r7, #3]
 800430c:	4611      	mov	r1, r2
 800430e:	4618      	mov	r0, r3
 8004310:	f7fd fb6b 	bl	80019ea <HAL_PCD_EP_SetStall>
 8004314:	4603      	mov	r3, r0
 8004316:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8004318:	7bbb      	ldrb	r3, [r7, #14]
 800431a:	2b03      	cmp	r3, #3
 800431c:	d816      	bhi.n	800434c <USBD_LL_StallEP+0x5c>
 800431e:	a201      	add	r2, pc, #4	; (adr r2, 8004324 <USBD_LL_StallEP+0x34>)
 8004320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004324:	08004335 	.word	0x08004335
 8004328:	0800433b 	.word	0x0800433b
 800432c:	08004341 	.word	0x08004341
 8004330:	08004347 	.word	0x08004347
    case HAL_OK :
      usb_status = USBD_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	73fb      	strb	r3, [r7, #15]
    break;
 8004338:	e00b      	b.n	8004352 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800433a:	2302      	movs	r3, #2
 800433c:	73fb      	strb	r3, [r7, #15]
    break;
 800433e:	e008      	b.n	8004352 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8004340:	2301      	movs	r3, #1
 8004342:	73fb      	strb	r3, [r7, #15]
    break;
 8004344:	e005      	b.n	8004352 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8004346:	2302      	movs	r3, #2
 8004348:	73fb      	strb	r3, [r7, #15]
    break;
 800434a:	e002      	b.n	8004352 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800434c:	2302      	movs	r3, #2
 800434e:	73fb      	strb	r3, [r7, #15]
    break;
 8004350:	bf00      	nop
  }
  return usb_status;  
 8004352:	7bfb      	ldrb	r3, [r7, #15]
}
 8004354:	4618      	mov	r0, r3
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	460b      	mov	r3, r1
 8004366:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800436c:	2300      	movs	r3, #0
 800436e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8004376:	78fa      	ldrb	r2, [r7, #3]
 8004378:	4611      	mov	r1, r2
 800437a:	4618      	mov	r0, r3
 800437c:	f7fd fb90 	bl	8001aa0 <HAL_PCD_EP_ClrStall>
 8004380:	4603      	mov	r3, r0
 8004382:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8004384:	7bbb      	ldrb	r3, [r7, #14]
 8004386:	2b03      	cmp	r3, #3
 8004388:	d816      	bhi.n	80043b8 <USBD_LL_ClearStallEP+0x5c>
 800438a:	a201      	add	r2, pc, #4	; (adr r2, 8004390 <USBD_LL_ClearStallEP+0x34>)
 800438c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004390:	080043a1 	.word	0x080043a1
 8004394:	080043a7 	.word	0x080043a7
 8004398:	080043ad 	.word	0x080043ad
 800439c:	080043b3 	.word	0x080043b3
    case HAL_OK :
      usb_status = USBD_OK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	73fb      	strb	r3, [r7, #15]
    break;
 80043a4:	e00b      	b.n	80043be <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80043a6:	2302      	movs	r3, #2
 80043a8:	73fb      	strb	r3, [r7, #15]
    break;
 80043aa:	e008      	b.n	80043be <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80043ac:	2301      	movs	r3, #1
 80043ae:	73fb      	strb	r3, [r7, #15]
    break;
 80043b0:	e005      	b.n	80043be <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80043b2:	2302      	movs	r3, #2
 80043b4:	73fb      	strb	r3, [r7, #15]
    break;
 80043b6:	e002      	b.n	80043be <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80043b8:	2302      	movs	r3, #2
 80043ba:	73fb      	strb	r3, [r7, #15]
    break;
 80043bc:	bf00      	nop
  }
  return usb_status; 
 80043be:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	460b      	mov	r3, r1
 80043d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80043da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80043dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	da0b      	bge.n	80043fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80043ea:	68f9      	ldr	r1, [r7, #12]
 80043ec:	4613      	mov	r3, r2
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	1a9b      	subs	r3, r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	333a      	adds	r3, #58	; 0x3a
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	e00b      	b.n	8004414 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80043fc:	78fb      	ldrb	r3, [r7, #3]
 80043fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004402:	68f9      	ldr	r1, [r7, #12]
 8004404:	4613      	mov	r3, r2
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	1a9b      	subs	r3, r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	440b      	add	r3, r1
 800440e:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 8004412:	781b      	ldrb	r3, [r3, #0]
  }
}
 8004414:	4618      	mov	r0, r3
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800442c:	2300      	movs	r3, #0
 800442e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004430:	2300      	movs	r3, #0
 8004432:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800443a:	78fa      	ldrb	r2, [r7, #3]
 800443c:	4611      	mov	r1, r2
 800443e:	4618      	mov	r0, r3
 8004440:	f7fd f954 	bl	80016ec <HAL_PCD_SetAddress>
 8004444:	4603      	mov	r3, r0
 8004446:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8004448:	7bbb      	ldrb	r3, [r7, #14]
 800444a:	2b03      	cmp	r3, #3
 800444c:	d816      	bhi.n	800447c <USBD_LL_SetUSBAddress+0x5c>
 800444e:	a201      	add	r2, pc, #4	; (adr r2, 8004454 <USBD_LL_SetUSBAddress+0x34>)
 8004450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004454:	08004465 	.word	0x08004465
 8004458:	0800446b 	.word	0x0800446b
 800445c:	08004471 	.word	0x08004471
 8004460:	08004477 	.word	0x08004477
    case HAL_OK :
      usb_status = USBD_OK;
 8004464:	2300      	movs	r3, #0
 8004466:	73fb      	strb	r3, [r7, #15]
    break;
 8004468:	e00b      	b.n	8004482 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800446a:	2302      	movs	r3, #2
 800446c:	73fb      	strb	r3, [r7, #15]
    break;
 800446e:	e008      	b.n	8004482 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8004470:	2301      	movs	r3, #1
 8004472:	73fb      	strb	r3, [r7, #15]
    break;
 8004474:	e005      	b.n	8004482 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8004476:	2302      	movs	r3, #2
 8004478:	73fb      	strb	r3, [r7, #15]
    break;
 800447a:	e002      	b.n	8004482 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800447c:	2302      	movs	r3, #2
 800447e:	73fb      	strb	r3, [r7, #15]
    break;
 8004480:	bf00      	nop
  }
  return usb_status;  
 8004482:	7bfb      	ldrb	r3, [r7, #15]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	607a      	str	r2, [r7, #4]
 8004496:	461a      	mov	r2, r3
 8004498:	460b      	mov	r3, r1
 800449a:	72fb      	strb	r3, [r7, #11]
 800449c:	4613      	mov	r3, r2
 800449e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80044a4:	2300      	movs	r3, #0
 80044a6:	75fb      	strb	r3, [r7, #23]

  ep_addr=USBD_COMPOSITE_LL_EP_Conversion(pdev, ep_addr);
 80044a8:	7afb      	ldrb	r3, [r7, #11]
 80044aa:	4619      	mov	r1, r3
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f001 ff6d 	bl	800638c <USBD_COMPOSITE_LL_EP_Conversion>
 80044b2:	4603      	mov	r3, r0
 80044b4:	72fb      	strb	r3, [r7, #11]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80044bc:	893b      	ldrh	r3, [r7, #8]
 80044be:	7af9      	ldrb	r1, [r7, #11]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	f7fd fa49 	bl	8001958 <HAL_PCD_EP_Transmit>
 80044c6:	4603      	mov	r3, r0
 80044c8:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 80044ca:	7dbb      	ldrb	r3, [r7, #22]
 80044cc:	2b03      	cmp	r3, #3
 80044ce:	d817      	bhi.n	8004500 <USBD_LL_Transmit+0x74>
 80044d0:	a201      	add	r2, pc, #4	; (adr r2, 80044d8 <USBD_LL_Transmit+0x4c>)
 80044d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d6:	bf00      	nop
 80044d8:	080044e9 	.word	0x080044e9
 80044dc:	080044ef 	.word	0x080044ef
 80044e0:	080044f5 	.word	0x080044f5
 80044e4:	080044fb 	.word	0x080044fb
    case HAL_OK :
      usb_status = USBD_OK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	75fb      	strb	r3, [r7, #23]
    break;
 80044ec:	e00b      	b.n	8004506 <USBD_LL_Transmit+0x7a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80044ee:	2302      	movs	r3, #2
 80044f0:	75fb      	strb	r3, [r7, #23]
    break;
 80044f2:	e008      	b.n	8004506 <USBD_LL_Transmit+0x7a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80044f4:	2301      	movs	r3, #1
 80044f6:	75fb      	strb	r3, [r7, #23]
    break;
 80044f8:	e005      	b.n	8004506 <USBD_LL_Transmit+0x7a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80044fa:	2302      	movs	r3, #2
 80044fc:	75fb      	strb	r3, [r7, #23]
    break;
 80044fe:	e002      	b.n	8004506 <USBD_LL_Transmit+0x7a>
    default :
      usb_status = USBD_FAIL;
 8004500:	2302      	movs	r3, #2
 8004502:	75fb      	strb	r3, [r7, #23]
    break;
 8004504:	bf00      	nop
  }
  return usb_status;    
 8004506:	7dfb      	ldrb	r3, [r7, #23]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	607a      	str	r2, [r7, #4]
 800451a:	461a      	mov	r2, r3
 800451c:	460b      	mov	r3, r1
 800451e:	72fb      	strb	r3, [r7, #11]
 8004520:	4613      	mov	r3, r2
 8004522:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004524:	2300      	movs	r3, #0
 8004526:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004528:	2300      	movs	r3, #0
 800452a:	75fb      	strb	r3, [r7, #23]

  ep_addr=USBD_COMPOSITE_LL_EP_Conversion(pdev, ep_addr);
 800452c:	7afb      	ldrb	r3, [r7, #11]
 800452e:	4619      	mov	r1, r3
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f001 ff2b 	bl	800638c <USBD_COMPOSITE_LL_EP_Conversion>
 8004536:	4603      	mov	r3, r0
 8004538:	72fb      	strb	r3, [r7, #11]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8004540:	893b      	ldrh	r3, [r7, #8]
 8004542:	7af9      	ldrb	r1, [r7, #11]
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	f7fd f9a4 	bl	8001892 <HAL_PCD_EP_Receive>
 800454a:	4603      	mov	r3, r0
 800454c:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800454e:	7dbb      	ldrb	r3, [r7, #22]
 8004550:	2b03      	cmp	r3, #3
 8004552:	d817      	bhi.n	8004584 <USBD_LL_PrepareReceive+0x74>
 8004554:	a201      	add	r2, pc, #4	; (adr r2, 800455c <USBD_LL_PrepareReceive+0x4c>)
 8004556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455a:	bf00      	nop
 800455c:	0800456d 	.word	0x0800456d
 8004560:	08004573 	.word	0x08004573
 8004564:	08004579 	.word	0x08004579
 8004568:	0800457f 	.word	0x0800457f
    case HAL_OK :
      usb_status = USBD_OK;
 800456c:	2300      	movs	r3, #0
 800456e:	75fb      	strb	r3, [r7, #23]
    break;
 8004570:	e00b      	b.n	800458a <USBD_LL_PrepareReceive+0x7a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004572:	2302      	movs	r3, #2
 8004574:	75fb      	strb	r3, [r7, #23]
    break;
 8004576:	e008      	b.n	800458a <USBD_LL_PrepareReceive+0x7a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8004578:	2301      	movs	r3, #1
 800457a:	75fb      	strb	r3, [r7, #23]
    break;
 800457c:	e005      	b.n	800458a <USBD_LL_PrepareReceive+0x7a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800457e:	2302      	movs	r3, #2
 8004580:	75fb      	strb	r3, [r7, #23]
    break;
 8004582:	e002      	b.n	800458a <USBD_LL_PrepareReceive+0x7a>
    default :
      usb_status = USBD_FAIL;
 8004584:	2302      	movs	r3, #2
 8004586:	75fb      	strb	r3, [r7, #23]
    break;
 8004588:	bf00      	nop
  }
  return usb_status; 
 800458a:	7dfb      	ldrb	r3, [r7, #23]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	460b      	mov	r3, r1
 800459e:	70fb      	strb	r3, [r7, #3]
  ep_addr=USBD_COMPOSITE_LL_EP_Conversion(pdev, ep_addr);
 80045a0:	78fb      	ldrb	r3, [r7, #3]
 80045a2:	4619      	mov	r1, r3
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f001 fef1 	bl	800638c <USBD_COMPOSITE_LL_EP_Conversion>
 80045aa:	4603      	mov	r3, r0
 80045ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80045b4:	78fa      	ldrb	r2, [r7, #3]
 80045b6:	4611      	mov	r1, r2
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fd f9b4 	bl	8001926 <HAL_PCD_EP_GetRxCount>
 80045be:	4603      	mov	r3, r0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB On The Go FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80045cc:	4802      	ldr	r0, [pc, #8]	; (80045d8 <OTG_FS_IRQHandler+0x10>)
 80045ce:	f7fc fc03 	bl	8000dd8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80045d2:	bf00      	nop
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	200059a4 	.word	0x200059a4

080045dc <USBD_FS_DeviceDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	6039      	str	r1, [r7, #0]
 80045e6:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	2212      	movs	r2, #18
 80045ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80045ee:	4b03      	ldr	r3, [pc, #12]	; (80045fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	20000020 	.word	0x20000020

08004600 <USBD_FS_LangIDStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	4603      	mov	r3, r0
 8004608:	6039      	str	r1, [r7, #0]
 800460a:	71fb      	strb	r3, [r7, #7]
  *length =  sizeof(USBD_LangIDDesc);  
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	2204      	movs	r2, #4
 8004610:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8004612:	4b03      	ldr	r3, [pc, #12]	; (8004620 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8004614:	4618      	mov	r0, r3
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	20000034 	.word	0x20000034

08004624 <USBD_FS_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	4603      	mov	r3, r0
 800462c:	6039      	str	r1, [r7, #0]
 800462e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004630:	79fb      	ldrb	r3, [r7, #7]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d105      	bne.n	8004642 <USBD_FS_ProductStrDescriptor+0x1e>
  {   
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	4907      	ldr	r1, [pc, #28]	; (8004658 <USBD_FS_ProductStrDescriptor+0x34>)
 800463a:	4808      	ldr	r0, [pc, #32]	; (800465c <USBD_FS_ProductStrDescriptor+0x38>)
 800463c:	f003 f819 	bl	8007672 <USBD_GetString>
 8004640:	e004      	b.n	800464c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	4904      	ldr	r1, [pc, #16]	; (8004658 <USBD_FS_ProductStrDescriptor+0x34>)
 8004646:	4805      	ldr	r0, [pc, #20]	; (800465c <USBD_FS_ProductStrDescriptor+0x38>)
 8004648:	f003 f813 	bl	8007672 <USBD_GetString>
  }
  return USBD_StrDesc;
 800464c:	4b02      	ldr	r3, [pc, #8]	; (8004658 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800464e:	4618      	mov	r0, r3
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20005d94 	.word	0x20005d94
 800465c:	08011364 	.word	0x08011364

08004660 <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	4603      	mov	r3, r0
 8004668:	6039      	str	r1, [r7, #0]
 800466a:	71fb      	strb	r3, [r7, #7]
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	4904      	ldr	r1, [pc, #16]	; (8004680 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8004670:	4804      	ldr	r0, [pc, #16]	; (8004684 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8004672:	f002 fffe 	bl	8007672 <USBD_GetString>
  return USBD_StrDesc;
 8004676:	4b02      	ldr	r3, [pc, #8]	; (8004680 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8004678:	4618      	mov	r0, r3
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	20005d94 	.word	0x20005d94
 8004684:	08011374 	.word	0x08011374

08004688 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	4603      	mov	r3, r0
 8004690:	6039      	str	r1, [r7, #0]
 8004692:	71fb      	strb	r3, [r7, #7]
  if(speed  == USBD_SPEED_HIGH)
 8004694:	79fb      	ldrb	r3, [r7, #7]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d105      	bne.n	80046a6 <USBD_FS_SerialStrDescriptor+0x1e>
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	4907      	ldr	r1, [pc, #28]	; (80046bc <USBD_FS_SerialStrDescriptor+0x34>)
 800469e:	4808      	ldr	r0, [pc, #32]	; (80046c0 <USBD_FS_SerialStrDescriptor+0x38>)
 80046a0:	f002 ffe7 	bl	8007672 <USBD_GetString>
 80046a4:	e004      	b.n	80046b0 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	4904      	ldr	r1, [pc, #16]	; (80046bc <USBD_FS_SerialStrDescriptor+0x34>)
 80046aa:	4805      	ldr	r0, [pc, #20]	; (80046c0 <USBD_FS_SerialStrDescriptor+0x38>)
 80046ac:	f002 ffe1 	bl	8007672 <USBD_GetString>
  }
  return USBD_StrDesc;
 80046b0:	4b02      	ldr	r3, [pc, #8]	; (80046bc <USBD_FS_SerialStrDescriptor+0x34>)
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	20005d94 	.word	0x20005d94
 80046c0:	0801137c 	.word	0x0801137c

080046c4 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	4603      	mov	r3, r0
 80046cc:	6039      	str	r1, [r7, #0]
 80046ce:	71fb      	strb	r3, [r7, #7]
  if(speed  == USBD_SPEED_HIGH)
 80046d0:	79fb      	ldrb	r3, [r7, #7]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d105      	bne.n	80046e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	4907      	ldr	r1, [pc, #28]	; (80046f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80046da:	4808      	ldr	r0, [pc, #32]	; (80046fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80046dc:	f002 ffc9 	bl	8007672 <USBD_GetString>
 80046e0:	e004      	b.n	80046ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	4904      	ldr	r1, [pc, #16]	; (80046f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80046e6:	4805      	ldr	r0, [pc, #20]	; (80046fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80046e8:	f002 ffc3 	bl	8007672 <USBD_GetString>
  }
  return USBD_StrDesc;  
 80046ec:	4b02      	ldr	r3, [pc, #8]	; (80046f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	20005d94 	.word	0x20005d94
 80046fc:	0801138c 	.word	0x0801138c

08004700 <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	4603      	mov	r3, r0
 8004708:	6039      	str	r1, [r7, #0]
 800470a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800470c:	79fb      	ldrb	r3, [r7, #7]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d105      	bne.n	800471e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	4907      	ldr	r1, [pc, #28]	; (8004734 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8004716:	4808      	ldr	r0, [pc, #32]	; (8004738 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8004718:	f002 ffab 	bl	8007672 <USBD_GetString>
 800471c:	e004      	b.n	8004728 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	4904      	ldr	r1, [pc, #16]	; (8004734 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8004722:	4805      	ldr	r0, [pc, #20]	; (8004738 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8004724:	f002 ffa5 	bl	8007672 <USBD_GetString>
  }
  return USBD_StrDesc;  
 8004728:	4b02      	ldr	r3, [pc, #8]	; (8004734 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800472a:	4618      	mov	r0, r3
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	20005d94 	.word	0x20005d94
 8004738:	0801139c 	.word	0x0801139c

0800473c <RNDIS_Disconnect>:
};


/* Private functions ---------------------------------------------------------*/

void RNDIS_Disconnect(){
 800473c:	b598      	push	{r3, r4, r7, lr}
 800473e:	af00      	add	r7, sp, #0
	rndis_oid_gen_xmit_ok=0;
 8004740:	4a0a      	ldr	r2, [pc, #40]	; (800476c <RNDIS_Disconnect+0x30>)
 8004742:	f04f 0300 	mov.w	r3, #0
 8004746:	f04f 0400 	mov.w	r4, #0
 800474a:	e882 0018 	stmia.w	r2, {r3, r4}
	rndis_oid_gen_rcv_ok=0;
 800474e:	4a08      	ldr	r2, [pc, #32]	; (8004770 <RNDIS_Disconnect+0x34>)
 8004750:	f04f 0300 	mov.w	r3, #0
 8004754:	f04f 0400 	mov.w	r4, #0
 8004758:	e882 0018 	stmia.w	r2, {r3, r4}
	rndis_state=RNDIS_STATE_HALTED;
 800475c:	4b05      	ldr	r3, [pc, #20]	; (8004774 <RNDIS_Disconnect+0x38>)
 800475e:	2201      	movs	r2, #1
 8004760:	701a      	strb	r2, [r3, #0]
	FreeRTOS_NetworkDownFromISR();
 8004762:	f006 fd95 	bl	800b290 <FreeRTOS_NetworkDownFromISR>
}
 8004766:	bf00      	nop
 8004768:	bd98      	pop	{r3, r4, r7, pc}
 800476a:	bf00      	nop
 800476c:	20000c08 	.word	0x20000c08
 8004770:	20000c10 	.word	0x20000c10
 8004774:	20000038 	.word	0x20000038

08004778 <RNDIS_Init_FS>:
 *         Initializes the RNDIS media low layer over the FS USB IP
 * @param  None
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t RNDIS_Init_FS(void)
{ 
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800477c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004780:	4807      	ldr	r0, [pc, #28]	; (80047a0 <RNDIS_Init_FS+0x28>)
 8004782:	f7fc f9ee 	bl	8000b62 <HAL_GPIO_TogglePin>
	USBD_RNDIS_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8004786:	2200      	movs	r2, #0
 8004788:	4906      	ldr	r1, [pc, #24]	; (80047a4 <RNDIS_Init_FS+0x2c>)
 800478a:	4807      	ldr	r0, [pc, #28]	; (80047a8 <RNDIS_Init_FS+0x30>)
 800478c:	f002 f85d 	bl	800684a <USBD_RNDIS_SetTxBuffer>
	USBD_RNDIS_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS_Temp);
 8004790:	4906      	ldr	r1, [pc, #24]	; (80047ac <RNDIS_Init_FS+0x34>)
 8004792:	4805      	ldr	r0, [pc, #20]	; (80047a8 <RNDIS_Init_FS+0x30>)
 8004794:	f002 f873 	bl	800687e <USBD_RNDIS_SetRxBuffer>
	//RNDIS_Disconnect();
	return (USBD_OK);
 8004798:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 800479a:	4618      	mov	r0, r3
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	40020c00 	.word	0x40020c00
 80047a4:	20005f94 	.word	0x20005f94
 80047a8:	20005780 	.word	0x20005780
 80047ac:	20000bc4 	.word	0x20000bc4

080047b0 <RNDIS_DeInit_FS>:
 *         DeInitializes the RNDIS media low layer
 * @param  None
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t RNDIS_DeInit_FS(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	RNDIS_Disconnect();
 80047b4:	f7ff ffc2 	bl	800473c <RNDIS_Disconnect>
	return (USBD_OK);
 80047b8:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	bd80      	pop	{r7, pc}
	...

080047c0 <RNDIS_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t RNDIS_Control_FS  (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{ 
 80047c0:	b590      	push	{r4, r7, lr}
 80047c2:	b089      	sub	sp, #36	; 0x24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	4603      	mov	r3, r0
 80047c8:	6039      	str	r1, [r7, #0]
 80047ca:	71fb      	strb	r3, [r7, #7]
 80047cc:	4613      	mov	r3, r2
 80047ce:	80bb      	strh	r3, [r7, #4]
	static const char nome[]="IMBEL TPP-1400";
	static RNDIS_DATA rndis_data;
	uint32_t *buf32=(uint32_t *)pbuf;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	617b      	str	r3, [r7, #20]
	uint8_t len = 0;
 80047d4:	2300      	movs	r3, #0
 80047d6:	77fb      	strb	r3, [r7, #31]
	int pos=0;
 80047d8:	2300      	movs	r3, #0
 80047da:	61bb      	str	r3, [r7, #24]
	USBD_RNDIS_HandleTypeDef *hrndis = (USBD_RNDIS_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80047dc:	4ba0      	ldr	r3, [pc, #640]	; (8004a60 <RNDIS_Control_FS+0x2a0>)
 80047de:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80047e2:	613b      	str	r3, [r7, #16]

	switch (cmd)
 80047e4:	79fb      	ldrb	r3, [r7, #7]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <RNDIS_Control_FS+0x30>
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d06e      	beq.n	80048cc <RNDIS_Control_FS+0x10c>
		}
		if(!len) len=buf32[1]=pos*4;
		USBD_CtlSendData(&hUsbDeviceFS, pbuf, len);
		break;
	default:
		break;
 80047ee:	e3f9      	b.n	8004fe4 <RNDIS_Control_FS+0x824>
		rndis_data.MessageType=buf32[0];
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a9b      	ldr	r2, [pc, #620]	; (8004a64 <RNDIS_Control_FS+0x2a4>)
 80047f6:	6013      	str	r3, [r2, #0]
		rndis_data.RequestId=buf32[2];
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	4a99      	ldr	r2, [pc, #612]	; (8004a64 <RNDIS_Control_FS+0x2a4>)
 80047fe:	6053      	str	r3, [r2, #4]
		if(buf32[0]==RNDIS_MSG_INIT){
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b02      	cmp	r3, #2
 8004806:	d11a      	bne.n	800483e <RNDIS_Control_FS+0x7e>
			RNDIS_Disconnect();
 8004808:	f7ff ff98 	bl	800473c <RNDIS_Disconnect>
			rndis_data.MajorVersion=buf32[3];
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	4a94      	ldr	r2, [pc, #592]	; (8004a64 <RNDIS_Control_FS+0x2a4>)
 8004812:	6093      	str	r3, [r2, #8]
			rndis_data.MinorVersion=buf32[4];
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	4a92      	ldr	r2, [pc, #584]	; (8004a64 <RNDIS_Control_FS+0x2a4>)
 800481a:	60d3      	str	r3, [r2, #12]
			rndis_data.MaxTransferSize=buf32[5];
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	4a90      	ldr	r2, [pc, #576]	; (8004a64 <RNDIS_Control_FS+0x2a4>)
 8004822:	6113      	str	r3, [r2, #16]
			rndis_state=RNDIS_STATE_NORMAL;
 8004824:	4b90      	ldr	r3, [pc, #576]	; (8004a68 <RNDIS_Control_FS+0x2a8>)
 8004826:	2200      	movs	r2, #0
 8004828:	701a      	strb	r2, [r3, #0]
			hrndis->TxState=0;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	2200      	movs	r2, #0
 800482e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			USBD_RNDIS_TransmitControl(&hUsbDeviceFS, (uint8_t*)response, 8);
 8004832:	2208      	movs	r2, #8
 8004834:	498d      	ldr	r1, [pc, #564]	; (8004a6c <RNDIS_Control_FS+0x2ac>)
 8004836:	488a      	ldr	r0, [pc, #552]	; (8004a60 <RNDIS_Control_FS+0x2a0>)
 8004838:	f002 f889 	bl	800694e <USBD_RNDIS_TransmitControl>
		break;
 800483c:	e3d1      	b.n	8004fe2 <RNDIS_Control_FS+0x822>
		} else if(buf32[0]==RNDIS_MSG_HALT){
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b03      	cmp	r3, #3
 8004844:	d109      	bne.n	800485a <RNDIS_Control_FS+0x9a>
			hrndis->TxState=1;
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	2201      	movs	r2, #1
 800484a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			RNDIS_Disconnect();
 800484e:	f7ff ff75 	bl	800473c <RNDIS_Disconnect>
			rndis_state=RNDIS_STATE_HALTED;
 8004852:	4b85      	ldr	r3, [pc, #532]	; (8004a68 <RNDIS_Control_FS+0x2a8>)
 8004854:	2201      	movs	r2, #1
 8004856:	701a      	strb	r2, [r3, #0]
		break;
 8004858:	e3c3      	b.n	8004fe2 <RNDIS_Control_FS+0x822>
		} else if(buf32[0]==RNDIS_MSG_QUERY){
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b04      	cmp	r3, #4
 8004860:	d115      	bne.n	800488e <RNDIS_Control_FS+0xce>
			rndis_data.Oid=buf32[3];
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	4a7f      	ldr	r2, [pc, #508]	; (8004a64 <RNDIS_Control_FS+0x2a4>)
 8004868:	6153      	str	r3, [r2, #20]
			rndis_data.InformationBufferLength=buf32[4];
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	4a7d      	ldr	r2, [pc, #500]	; (8004a64 <RNDIS_Control_FS+0x2a4>)
 8004870:	6193      	str	r3, [r2, #24]
			rndis_data.InformationBufferOffset=buf32[5];
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	4a7b      	ldr	r2, [pc, #492]	; (8004a64 <RNDIS_Control_FS+0x2a4>)
 8004878:	61d3      	str	r3, [r2, #28]
			rndis_data.DeviceVcHandle=buf32[6];
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	4a79      	ldr	r2, [pc, #484]	; (8004a64 <RNDIS_Control_FS+0x2a4>)
 8004880:	6213      	str	r3, [r2, #32]
			USBD_RNDIS_TransmitControl(&hUsbDeviceFS, (uint8_t*)response, 8);
 8004882:	2208      	movs	r2, #8
 8004884:	4979      	ldr	r1, [pc, #484]	; (8004a6c <RNDIS_Control_FS+0x2ac>)
 8004886:	4876      	ldr	r0, [pc, #472]	; (8004a60 <RNDIS_Control_FS+0x2a0>)
 8004888:	f002 f861 	bl	800694e <USBD_RNDIS_TransmitControl>
		break;
 800488c:	e3a9      	b.n	8004fe2 <RNDIS_Control_FS+0x822>
		} else if(buf32[0]==RNDIS_MSG_SET){
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b05      	cmp	r3, #5
 8004894:	d105      	bne.n	80048a2 <RNDIS_Control_FS+0xe2>
			USBD_RNDIS_TransmitControl(&hUsbDeviceFS, (uint8_t*)response, 8);
 8004896:	2208      	movs	r2, #8
 8004898:	4974      	ldr	r1, [pc, #464]	; (8004a6c <RNDIS_Control_FS+0x2ac>)
 800489a:	4871      	ldr	r0, [pc, #452]	; (8004a60 <RNDIS_Control_FS+0x2a0>)
 800489c:	f002 f857 	bl	800694e <USBD_RNDIS_TransmitControl>
		break;
 80048a0:	e39f      	b.n	8004fe2 <RNDIS_Control_FS+0x822>
		} else if(buf32[0]==RNDIS_MSG_RESET){
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b06      	cmp	r3, #6
 80048a8:	d105      	bne.n	80048b6 <RNDIS_Control_FS+0xf6>
			USBD_RNDIS_TransmitControl(&hUsbDeviceFS, (uint8_t*)response, 8);
 80048aa:	2208      	movs	r2, #8
 80048ac:	496f      	ldr	r1, [pc, #444]	; (8004a6c <RNDIS_Control_FS+0x2ac>)
 80048ae:	486c      	ldr	r0, [pc, #432]	; (8004a60 <RNDIS_Control_FS+0x2a0>)
 80048b0:	f002 f84d 	bl	800694e <USBD_RNDIS_TransmitControl>
		break;
 80048b4:	e395      	b.n	8004fe2 <RNDIS_Control_FS+0x822>
		} else if(buf32[0]==RNDIS_MSG_KEEPALIVE){
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	f040 8391 	bne.w	8004fe2 <RNDIS_Control_FS+0x822>
			USBD_RNDIS_TransmitControl(&hUsbDeviceFS, (uint8_t*)response, 8);
 80048c0:	2208      	movs	r2, #8
 80048c2:	496a      	ldr	r1, [pc, #424]	; (8004a6c <RNDIS_Control_FS+0x2ac>)
 80048c4:	4866      	ldr	r0, [pc, #408]	; (8004a60 <RNDIS_Control_FS+0x2a0>)
 80048c6:	f002 f842 	bl	800694e <USBD_RNDIS_TransmitControl>
		break;
 80048ca:	e38a      	b.n	8004fe2 <RNDIS_Control_FS+0x822>
		if(rndis_data.MessageType==RNDIS_MSG_INIT){
 80048cc:	4b65      	ldr	r3, [pc, #404]	; (8004a64 <RNDIS_Control_FS+0x2a4>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d165      	bne.n	80049a0 <RNDIS_Control_FS+0x1e0>
			buf32[pos++]=RNDIS_MSG_INIT_C;							//MessageType			Specifies the type of message being sent. Set to 0x80000002.
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	1c5a      	adds	r2, r3, #1
 80048d8:	61ba      	str	r2, [r7, #24]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	4413      	add	r3, r2
 80048e0:	4a63      	ldr	r2, [pc, #396]	; (8004a70 <RNDIS_Control_FS+0x2b0>)
 80048e2:	601a      	str	r2, [r3, #0]
			pos++;
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	3301      	adds	r3, #1
 80048e8:	61bb      	str	r3, [r7, #24]
			buf32[pos++]=rndis_data.RequestId;						//RequestId				Specifies the Remote NDIS message ID value. This value is used to match messages sent by the host with device responses.
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	61ba      	str	r2, [r7, #24]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	4413      	add	r3, r2
 80048f6:	4a5b      	ldr	r2, [pc, #364]	; (8004a64 <RNDIS_Control_FS+0x2a4>)
 80048f8:	6852      	ldr	r2, [r2, #4]
 80048fa:	601a      	str	r2, [r3, #0]
			buf32[pos++]=RNDIS_STATUS_SUCCESS;						//Status				Specifies RNDIS_STATUS_SUCCESS if the device initialized successfully; otherwise, it specifies an error code that indicates the failure.
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	1c5a      	adds	r2, r3, #1
 8004900:	61ba      	str	r2, [r7, #24]
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	4413      	add	r3, r2
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]
			buf32[pos++]=1;											//MajorVersion			Specifies the highest Remote NDIS major protocol version supported by the device.
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	61ba      	str	r2, [r7, #24]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	4413      	add	r3, r2
 8004918:	2201      	movs	r2, #1
 800491a:	601a      	str	r2, [r3, #0]
			buf32[pos++]=0;											//MinorVersion			Specifies the highest Remote NDIS minor protocol version supported by the device.
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	61ba      	str	r2, [r7, #24]
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	4413      	add	r3, r2
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]
			buf32[pos++]=RNDIS_DF_CONNECTIONLESS;					//DeviceFlags			Specifies the miniport driver type as either connectionless or connection-oriented. This value can be one of the following:
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	61ba      	str	r2, [r7, #24]
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	4413      	add	r3, r2
 8004938:	2201      	movs	r2, #1
 800493a:	601a      	str	r2, [r3, #0]
			buf32[pos++]=RNDIS_MEDIUM_802_3;						//Medium				Specifies the medium supported by the device. Set to RNDIS_MEDIUM_802_3 (0x00000000)
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	1c5a      	adds	r2, r3, #1
 8004940:	61ba      	str	r2, [r7, #24]
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	4413      	add	r3, r2
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]
			buf32[pos++]=1;											//MaxPacketsPerMessage	Specifies the maximum number of Remote NDIS data messages that the device can handle in a single transfer to it. This value should be at least one.
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	61ba      	str	r2, [r7, #24]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	4413      	add	r3, r2
 8004958:	2201      	movs	r2, #1
 800495a:	601a      	str	r2, [r3, #0]
			buf32[pos++]=1580;										//MaxTransferSize		Specifies the maximum size in bytes of any single bus data transfer that the device expects to receive from the host.
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	61ba      	str	r2, [r7, #24]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	4413      	add	r3, r2
 8004968:	f240 622c 	movw	r2, #1580	; 0x62c
 800496c:	601a      	str	r2, [r3, #0]
			buf32[pos++]=3;											//PacketAlignmentFactor	Specifies the byte alignment that the device expects for each Remote NDIS message that is part of a multimessage transfer to it. This value is specified in powers of 2. For example, this value is set to three to indicate 8-byte alignment. This value has a maximum setting of seven, which specifies 128-byte alignment.
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	61ba      	str	r2, [r7, #24]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	4413      	add	r3, r2
 800497a:	2203      	movs	r2, #3
 800497c:	601a      	str	r2, [r3, #0]
			buf32[pos++]=0;											//AFListOffset			Reserved for connection-oriented devices. Set value to zero.
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	1c5a      	adds	r2, r3, #1
 8004982:	61ba      	str	r2, [r7, #24]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	4413      	add	r3, r2
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]
			buf32[pos++]=0;											//AFListSize			Reserved for connection-oriented devices. Set value to zero.
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	61ba      	str	r2, [r7, #24]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	4413      	add	r3, r2
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	e30e      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
		} else if(rndis_data.MessageType==RNDIS_MSG_QUERY){
 80049a0:	4b30      	ldr	r3, [pc, #192]	; (8004a64 <RNDIS_Control_FS+0x2a4>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	f040 828f 	bne.w	8004ec8 <RNDIS_Control_FS+0x708>
			uint32_t temp=0;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
			buf32[pos++]=RNDIS_MSG_QUERY_C;
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	61ba      	str	r2, [r7, #24]
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	4413      	add	r3, r2
 80049ba:	4a2e      	ldr	r2, [pc, #184]	; (8004a74 <RNDIS_Control_FS+0x2b4>)
 80049bc:	601a      	str	r2, [r3, #0]
			pos++;
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	3301      	adds	r3, #1
 80049c2:	61bb      	str	r3, [r7, #24]
			buf32[pos++]=rndis_data.RequestId;
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	61ba      	str	r2, [r7, #24]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	4413      	add	r3, r2
 80049d0:	4a24      	ldr	r2, [pc, #144]	; (8004a64 <RNDIS_Control_FS+0x2a4>)
 80049d2:	6852      	ldr	r2, [r2, #4]
 80049d4:	601a      	str	r2, [r3, #0]
			buf32[pos++]=RNDIS_STATUS_SUCCESS;
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	61ba      	str	r2, [r7, #24]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	4413      	add	r3, r2
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]
			switch(rndis_data.Oid){
 80049e6:	4b1f      	ldr	r3, [pc, #124]	; (8004a64 <RNDIS_Control_FS+0x2a4>)
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	4a23      	ldr	r2, [pc, #140]	; (8004a78 <RNDIS_Control_FS+0x2b8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	f000 808e 	beq.w	8004b0e <RNDIS_Control_FS+0x34e>
 80049f2:	4a21      	ldr	r2, [pc, #132]	; (8004a78 <RNDIS_Control_FS+0x2b8>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d81f      	bhi.n	8004a38 <RNDIS_Control_FS+0x278>
 80049f8:	4a20      	ldr	r2, [pc, #128]	; (8004a7c <RNDIS_Control_FS+0x2bc>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	f000 820d 	beq.w	8004e1a <RNDIS_Control_FS+0x65a>
 8004a00:	4a1e      	ldr	r2, [pc, #120]	; (8004a7c <RNDIS_Control_FS+0x2bc>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d80b      	bhi.n	8004a1e <RNDIS_Control_FS+0x25e>
 8004a06:	4a1e      	ldr	r2, [pc, #120]	; (8004a80 <RNDIS_Control_FS+0x2c0>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	f000 8099 	beq.w	8004b40 <RNDIS_Control_FS+0x380>
 8004a0e:	4a1d      	ldr	r2, [pc, #116]	; (8004a84 <RNDIS_Control_FS+0x2c4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	f000 80af 	beq.w	8004b74 <RNDIS_Control_FS+0x3b4>
 8004a16:	4a1c      	ldr	r2, [pc, #112]	; (8004a88 <RNDIS_Control_FS+0x2c8>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d058      	beq.n	8004ace <RNDIS_Control_FS+0x30e>
 8004a1c:	e242      	b.n	8004ea4 <RNDIS_Control_FS+0x6e4>
 8004a1e:	4a1b      	ldr	r2, [pc, #108]	; (8004a8c <RNDIS_Control_FS+0x2cc>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	f000 814f 	beq.w	8004cc4 <RNDIS_Control_FS+0x504>
 8004a26:	4a1a      	ldr	r2, [pc, #104]	; (8004a90 <RNDIS_Control_FS+0x2d0>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	f000 80bd 	beq.w	8004ba8 <RNDIS_Control_FS+0x3e8>
 8004a2e:	4a19      	ldr	r2, [pc, #100]	; (8004a94 <RNDIS_Control_FS+0x2d4>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	f000 8213 	beq.w	8004e5c <RNDIS_Control_FS+0x69c>
 8004a36:	e235      	b.n	8004ea4 <RNDIS_Control_FS+0x6e4>
 8004a38:	4a17      	ldr	r2, [pc, #92]	; (8004a98 <RNDIS_Control_FS+0x2d8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	f000 81a2 	beq.w	8004d84 <RNDIS_Control_FS+0x5c4>
 8004a40:	4a15      	ldr	r2, [pc, #84]	; (8004a98 <RNDIS_Control_FS+0x2d8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d82e      	bhi.n	8004aa4 <RNDIS_Control_FS+0x2e4>
 8004a46:	4a15      	ldr	r2, [pc, #84]	; (8004a9c <RNDIS_Control_FS+0x2dc>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	f000 8181 	beq.w	8004d50 <RNDIS_Control_FS+0x590>
 8004a4e:	4a13      	ldr	r2, [pc, #76]	; (8004a9c <RNDIS_Control_FS+0x2dc>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	f200 81c9 	bhi.w	8004de8 <RNDIS_Control_FS+0x628>
 8004a56:	4a12      	ldr	r2, [pc, #72]	; (8004aa0 <RNDIS_Control_FS+0x2e0>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	f000 814d 	beq.w	8004cf8 <RNDIS_Control_FS+0x538>
 8004a5e:	e221      	b.n	8004ea4 <RNDIS_Control_FS+0x6e4>
 8004a60:	20005780 	.word	0x20005780
 8004a64:	20000c20 	.word	0x20000c20
 8004a68:	20000038 	.word	0x20000038
 8004a6c:	08011484 	.word	0x08011484
 8004a70:	80000002 	.word	0x80000002
 8004a74:	80000004 	.word	0x80000004
 8004a78:	00010202 	.word	0x00010202
 8004a7c:	0001010c 	.word	0x0001010c
 8004a80:	00010106 	.word	0x00010106
 8004a84:	00010107 	.word	0x00010107
 8004a88:	00010101 	.word	0x00010101
 8004a8c:	00010111 	.word	0x00010111
 8004a90:	00010114 	.word	0x00010114
 8004a94:	0001010d 	.word	0x0001010d
 8004a98:	00020104 	.word	0x00020104
 8004a9c:	00020102 	.word	0x00020102
 8004aa0:	00020101 	.word	0x00020101
 8004aa4:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
 8004aa8:	f000 80e2 	beq.w	8004c70 <RNDIS_Control_FS+0x4b0>
 8004aac:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
 8004ab0:	d804      	bhi.n	8004abc <RNDIS_Control_FS+0x2fc>
 8004ab2:	4a9e      	ldr	r2, [pc, #632]	; (8004d2c <RNDIS_Control_FS+0x56c>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	f000 817e 	beq.w	8004db6 <RNDIS_Control_FS+0x5f6>
 8004aba:	e1f3      	b.n	8004ea4 <RNDIS_Control_FS+0x6e4>
 8004abc:	f113 3ffe 	cmn.w	r3, #4278124286	; 0xfefefefe
 8004ac0:	f000 80a4 	beq.w	8004c0c <RNDIS_Control_FS+0x44c>
 8004ac4:	4a9a      	ldr	r2, [pc, #616]	; (8004d30 <RNDIS_Control_FS+0x570>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	f000 8087 	beq.w	8004bda <RNDIS_Control_FS+0x41a>
 8004acc:	e1ea      	b.n	8004ea4 <RNDIS_Control_FS+0x6e4>
				temp=sizeof(OID_GEN_SUPPORTED);
 8004ace:	2364      	movs	r3, #100	; 0x64
 8004ad0:	60fb      	str	r3, [r7, #12]
				buf32[pos++]=temp;
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	1c5a      	adds	r2, r3, #1
 8004ad6:	61ba      	str	r2, [r7, #24]
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	4413      	add	r3, r2
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	601a      	str	r2, [r3, #0]
				buf32[pos++]=16;
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	1c5a      	adds	r2, r3, #1
 8004ae6:	61ba      	str	r2, [r7, #24]
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	4413      	add	r3, r2
 8004aee:	2210      	movs	r2, #16
 8004af0:	601a      	str	r2, [r3, #0]
				USBD_memcpy(buf32+pos, OID_GEN_SUPPORTED, temp);
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	4413      	add	r3, r2
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	498d      	ldr	r1, [pc, #564]	; (8004d34 <RNDIS_Control_FS+0x574>)
 8004afe:	4618      	mov	r0, r3
 8004b00:	f00c fa7d 	bl	8010ffe <memcpy>
				pos+=temp;
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4413      	add	r3, r2
 8004b0a:	61bb      	str	r3, [r7, #24]
				break;
 8004b0c:	e257      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				buf32[pos++]=4;
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	61ba      	str	r2, [r7, #24]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	4413      	add	r3, r2
 8004b1a:	2204      	movs	r2, #4
 8004b1c:	601a      	str	r2, [r3, #0]
				buf32[pos++]=16;
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	61ba      	str	r2, [r7, #24]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	4413      	add	r3, r2
 8004b2a:	2210      	movs	r2, #16
 8004b2c:	601a      	str	r2, [r3, #0]
				buf32[pos++]=0;
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	1c5a      	adds	r2, r3, #1
 8004b32:	61ba      	str	r2, [r7, #24]
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4413      	add	r3, r2
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]
				break;
 8004b3e:	e23e      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				buf32[pos++]=4;
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	61ba      	str	r2, [r7, #24]
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	2204      	movs	r2, #4
 8004b4e:	601a      	str	r2, [r3, #0]
				buf32[pos++]=16;
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	1c5a      	adds	r2, r3, #1
 8004b54:	61ba      	str	r2, [r7, #24]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	2210      	movs	r2, #16
 8004b5e:	601a      	str	r2, [r3, #0]
				buf32[pos++]=1500;
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	61ba      	str	r2, [r7, #24]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004b70:	601a      	str	r2, [r3, #0]
				break;
 8004b72:	e224      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				buf32[pos++]=4;
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	61ba      	str	r2, [r7, #24]
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	4413      	add	r3, r2
 8004b80:	2204      	movs	r2, #4
 8004b82:	601a      	str	r2, [r3, #0]
				buf32[pos++]=16;
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	61ba      	str	r2, [r7, #24]
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	4413      	add	r3, r2
 8004b90:	2210      	movs	r2, #16
 8004b92:	601a      	str	r2, [r3, #0]
				buf32[pos++]=100000/100;
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	61ba      	str	r2, [r7, #24]
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ba4:	601a      	str	r2, [r3, #0]
				break;
 8004ba6:	e20a      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				buf32[pos++]=4;
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	61ba      	str	r2, [r7, #24]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	2204      	movs	r2, #4
 8004bb6:	601a      	str	r2, [r3, #0]
				buf32[pos++]=16;
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	1c5a      	adds	r2, r3, #1
 8004bbc:	61ba      	str	r2, [r7, #24]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	2210      	movs	r2, #16
 8004bc6:	601a      	str	r2, [r3, #0]
				buf32[pos++]=NdisMediaStateConnected;
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	1c5a      	adds	r2, r3, #1
 8004bcc:	61ba      	str	r2, [r7, #24]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	601a      	str	r2, [r3, #0]
				break;
 8004bd8:	e1f1      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				buf32[pos++]=4;
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	61ba      	str	r2, [r7, #24]
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	4413      	add	r3, r2
 8004be6:	2204      	movs	r2, #4
 8004be8:	601a      	str	r2, [r3, #0]
				buf32[pos++]=16;
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	1c5a      	adds	r2, r3, #1
 8004bee:	61ba      	str	r2, [r7, #24]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	2210      	movs	r2, #16
 8004bf8:	601a      	str	r2, [r3, #0]
				buf32[pos++]=1;
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	61ba      	str	r2, [r7, #24]
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	4413      	add	r3, r2
 8004c06:	2201      	movs	r2, #1
 8004c08:	601a      	str	r2, [r3, #0]
				break;
 8004c0a:	e1d8      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				buf32[pos++]=6;
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	61ba      	str	r2, [r7, #24]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	4413      	add	r3, r2
 8004c18:	2206      	movs	r2, #6
 8004c1a:	601a      	str	r2, [r3, #0]
				buf32[pos++]=16;
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	1c5a      	adds	r2, r3, #1
 8004c20:	61ba      	str	r2, [r7, #24]
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	4413      	add	r3, r2
 8004c28:	2210      	movs	r2, #16
 8004c2a:	601a      	str	r2, [r3, #0]
				buf32[pos++]=0x00757840 | (DeviceID_8[0]<<24);
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	1c5a      	adds	r2, r3, #1
 8004c30:	61ba      	str	r2, [r7, #24]
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	441a      	add	r2, r3
 8004c38:	4b3f      	ldr	r3, [pc, #252]	; (8004d38 <RNDIS_Control_FS+0x578>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	0619      	lsls	r1, r3, #24
 8004c3e:	4b3f      	ldr	r3, [pc, #252]	; (8004d3c <RNDIS_Control_FS+0x57c>)
 8004c40:	430b      	orrs	r3, r1
 8004c42:	6013      	str	r3, [r2, #0]
				buf32[pos++]=DeviceID_8[2]<<8 | DeviceID_8[1];
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	61ba      	str	r2, [r7, #24]
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	4413      	add	r3, r2
 8004c50:	4a3b      	ldr	r2, [pc, #236]	; (8004d40 <RNDIS_Control_FS+0x580>)
 8004c52:	7812      	ldrb	r2, [r2, #0]
 8004c54:	0212      	lsls	r2, r2, #8
 8004c56:	493b      	ldr	r1, [pc, #236]	; (8004d44 <RNDIS_Control_FS+0x584>)
 8004c58:	7809      	ldrb	r1, [r1, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	601a      	str	r2, [r3, #0]
				len=buf32[1]=pos*4-2;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	3304      	adds	r3, #4
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	0092      	lsls	r2, r2, #2
 8004c66:	3a02      	subs	r2, #2
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	77fb      	strb	r3, [r7, #31]
				break;
 8004c6e:	e1a6      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				buf32[pos++]=6;
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	1c5a      	adds	r2, r3, #1
 8004c74:	61ba      	str	r2, [r7, #24]
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	2206      	movs	r2, #6
 8004c7e:	601a      	str	r2, [r3, #0]
				buf32[pos++]=16;
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	61ba      	str	r2, [r7, #24]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	2210      	movs	r2, #16
 8004c8e:	601a      	str	r2, [r3, #0]
				buf32[pos++]=0xDD757840;
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	1c5a      	adds	r2, r3, #1
 8004c94:	61ba      	str	r2, [r7, #24]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	4a2a      	ldr	r2, [pc, #168]	; (8004d48 <RNDIS_Control_FS+0x588>)
 8004c9e:	601a      	str	r2, [r3, #0]
				buf32[pos++]=0xFFEE;
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	1c5a      	adds	r2, r3, #1
 8004ca4:	61ba      	str	r2, [r7, #24]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	4413      	add	r3, r2
 8004cac:	f64f 72ee 	movw	r2, #65518	; 0xffee
 8004cb0:	601a      	str	r2, [r3, #0]
				len=buf32[1]=pos*4-2;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	0092      	lsls	r2, r2, #2
 8004cba:	3a02      	subs	r2, #2
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	77fb      	strb	r3, [r7, #31]
				break;
 8004cc2:	e17c      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				buf32[pos++]=4;
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	61ba      	str	r2, [r7, #24]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	4413      	add	r3, r2
 8004cd0:	2204      	movs	r2, #4
 8004cd2:	601a      	str	r2, [r3, #0]
				buf32[pos++]=16;
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	1c5a      	adds	r2, r3, #1
 8004cd8:	61ba      	str	r2, [r7, #24]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	4413      	add	r3, r2
 8004ce0:	2210      	movs	r2, #16
 8004ce2:	601a      	str	r2, [r3, #0]
				buf32[pos++]=1558;
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	61ba      	str	r2, [r7, #24]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f240 6216 	movw	r2, #1558	; 0x616
 8004cf4:	601a      	str	r2, [r3, #0]
				break;
 8004cf6:	e162      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				buf32[pos++]=4;
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	1c5a      	adds	r2, r3, #1
 8004cfc:	61ba      	str	r2, [r7, #24]
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	4413      	add	r3, r2
 8004d04:	2204      	movs	r2, #4
 8004d06:	601a      	str	r2, [r3, #0]
				buf32[pos++]=16;
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	61ba      	str	r2, [r7, #24]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	4413      	add	r3, r2
 8004d14:	2210      	movs	r2, #16
 8004d16:	601a      	str	r2, [r3, #0]
				buf32[pos++]=rndis_oid_gen_xmit_ok & 0xffffffff;
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	61ba      	str	r2, [r7, #24]
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	441a      	add	r2, r3
 8004d24:	4b09      	ldr	r3, [pc, #36]	; (8004d4c <RNDIS_Control_FS+0x58c>)
 8004d26:	cb18      	ldmia	r3, {r3, r4}
 8004d28:	6013      	str	r3, [r2, #0]
				break;
 8004d2a:	e148      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
 8004d2c:	00020105 	.word	0x00020105
 8004d30:	01010104 	.word	0x01010104
 8004d34:	08011420 	.word	0x08011420
 8004d38:	1fff7a10 	.word	0x1fff7a10
 8004d3c:	00757840 	.word	0x00757840
 8004d40:	1fff7a12 	.word	0x1fff7a12
 8004d44:	1fff7a11 	.word	0x1fff7a11
 8004d48:	dd757840 	.word	0xdd757840
 8004d4c:	20000c08 	.word	0x20000c08
				buf32[pos++]=4;
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	1c5a      	adds	r2, r3, #1
 8004d54:	61ba      	str	r2, [r7, #24]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	2204      	movs	r2, #4
 8004d5e:	601a      	str	r2, [r3, #0]
				buf32[pos++]=16;
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	1c5a      	adds	r2, r3, #1
 8004d64:	61ba      	str	r2, [r7, #24]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	2210      	movs	r2, #16
 8004d6e:	601a      	str	r2, [r3, #0]
				buf32[pos++]=rndis_oid_gen_rcv_ok & 0xffffffff;
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	61ba      	str	r2, [r7, #24]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	441a      	add	r2, r3
 8004d7c:	4b9c      	ldr	r3, [pc, #624]	; (8004ff0 <RNDIS_Control_FS+0x830>)
 8004d7e:	cb18      	ldmia	r3, {r3, r4}
 8004d80:	6013      	str	r3, [r2, #0]
				break;
 8004d82:	e11c      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				buf32[pos++]=4;
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	1c5a      	adds	r2, r3, #1
 8004d88:	61ba      	str	r2, [r7, #24]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	4413      	add	r3, r2
 8004d90:	2204      	movs	r2, #4
 8004d92:	601a      	str	r2, [r3, #0]
				buf32[pos++]=16;
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	61ba      	str	r2, [r7, #24]
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	4413      	add	r3, r2
 8004da0:	2210      	movs	r2, #16
 8004da2:	601a      	str	r2, [r3, #0]
				buf32[pos++]=0;
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	61ba      	str	r2, [r7, #24]
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	4413      	add	r3, r2
 8004db0:	2200      	movs	r2, #0
 8004db2:	601a      	str	r2, [r3, #0]
				break;
 8004db4:	e103      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				buf32[pos++]=4;
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	61ba      	str	r2, [r7, #24]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	2204      	movs	r2, #4
 8004dc4:	601a      	str	r2, [r3, #0]
				buf32[pos++]=16;
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	1c5a      	adds	r2, r3, #1
 8004dca:	61ba      	str	r2, [r7, #24]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	2210      	movs	r2, #16
 8004dd4:	601a      	str	r2, [r3, #0]
				buf32[pos++]=0;
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	61ba      	str	r2, [r7, #24]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	4413      	add	r3, r2
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
				break;
 8004de6:	e0ea      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				buf32[pos++]=4;
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	1c5a      	adds	r2, r3, #1
 8004dec:	61ba      	str	r2, [r7, #24]
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	4413      	add	r3, r2
 8004df4:	2204      	movs	r2, #4
 8004df6:	601a      	str	r2, [r3, #0]
				buf32[pos++]=16;
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	61ba      	str	r2, [r7, #24]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	4413      	add	r3, r2
 8004e04:	2210      	movs	r2, #16
 8004e06:	601a      	str	r2, [r3, #0]
				buf32[pos++]=0;
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	1c5a      	adds	r2, r3, #1
 8004e0c:	61ba      	str	r2, [r7, #24]
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	4413      	add	r3, r2
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]
				break;
 8004e18:	e0d1      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				buf32[pos++]=3;
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	1c5a      	adds	r2, r3, #1
 8004e1e:	61ba      	str	r2, [r7, #24]
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	4413      	add	r3, r2
 8004e26:	2203      	movs	r2, #3
 8004e28:	601a      	str	r2, [r3, #0]
				buf32[pos++]=20;
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	61ba      	str	r2, [r7, #24]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	4413      	add	r3, r2
 8004e36:	2214      	movs	r2, #20
 8004e38:	601a      	str	r2, [r3, #0]
				buf32[pos++]=0x00757840;
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	61ba      	str	r2, [r7, #24]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	4413      	add	r3, r2
 8004e46:	4a6b      	ldr	r2, [pc, #428]	; (8004ff4 <RNDIS_Control_FS+0x834>)
 8004e48:	601a      	str	r2, [r3, #0]
				len=buf32[1]=pos*4-1;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	0092      	lsls	r2, r2, #2
 8004e52:	3a01      	subs	r2, #1
 8004e54:	601a      	str	r2, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	77fb      	strb	r3, [r7, #31]
				break;
 8004e5a:	e0b0      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				buf32[pos++]=sizeof(nome);
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	61ba      	str	r2, [r7, #24]
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	4413      	add	r3, r2
 8004e68:	220f      	movs	r2, #15
 8004e6a:	601a      	str	r2, [r3, #0]
				buf32[pos++]=16;
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	1c5a      	adds	r2, r3, #1
 8004e70:	61ba      	str	r2, [r7, #24]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	4413      	add	r3, r2
 8004e78:	2210      	movs	r2, #16
 8004e7a:	601a      	str	r2, [r3, #0]
				USBD_memcpy((char*)&buf32[pos++], nome, sizeof(nome));
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	61ba      	str	r2, [r7, #24]
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	4413      	add	r3, r2
 8004e88:	220f      	movs	r2, #15
 8004e8a:	495b      	ldr	r1, [pc, #364]	; (8004ff8 <RNDIS_Control_FS+0x838>)
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f00c f8b6 	bl	8010ffe <memcpy>
				len=buf32[1]=pos*4+sizeof(nome);
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	3304      	adds	r3, #4
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	0092      	lsls	r2, r2, #2
 8004e9a:	320f      	adds	r2, #15
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	77fb      	strb	r3, [r7, #31]
				break;
 8004ea2:	e08c      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				buf32[pos++]=0;
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	61ba      	str	r2, [r7, #24]
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	4413      	add	r3, r2
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]
				buf32[pos++]=20;
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	61ba      	str	r2, [r7, #24]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	2214      	movs	r2, #20
 8004ec2:	601a      	str	r2, [r3, #0]
				break;
 8004ec4:	bf00      	nop
 8004ec6:	e07a      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
		} else if(rndis_data.MessageType==RNDIS_MSG_SET){
 8004ec8:	4b4c      	ldr	r3, [pc, #304]	; (8004ffc <RNDIS_Control_FS+0x83c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b05      	cmp	r3, #5
 8004ece:	d12e      	bne.n	8004f2e <RNDIS_Control_FS+0x76e>
			buf32[pos++]=RNDIS_MSG_SET_C;
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	61ba      	str	r2, [r7, #24]
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	4413      	add	r3, r2
 8004edc:	4a48      	ldr	r2, [pc, #288]	; (8005000 <RNDIS_Control_FS+0x840>)
 8004ede:	601a      	str	r2, [r3, #0]
			pos++;
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	61bb      	str	r3, [r7, #24]
			buf32[pos++]=rndis_data.RequestId;
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	61ba      	str	r2, [r7, #24]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	4a42      	ldr	r2, [pc, #264]	; (8004ffc <RNDIS_Control_FS+0x83c>)
 8004ef4:	6852      	ldr	r2, [r2, #4]
 8004ef6:	601a      	str	r2, [r3, #0]
			buf32[pos++]=RNDIS_STATUS_SUCCESS;
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	1c5a      	adds	r2, r3, #1
 8004efc:	61ba      	str	r2, [r7, #24]
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	4413      	add	r3, r2
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]
			switch(rndis_data.Oid){
 8004f08:	4b3c      	ldr	r3, [pc, #240]	; (8004ffc <RNDIS_Control_FS+0x83c>)
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	4a3d      	ldr	r2, [pc, #244]	; (8005004 <RNDIS_Control_FS+0x844>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d04e      	beq.n	8004fb0 <RNDIS_Control_FS+0x7f0>
 8004f12:	4a3c      	ldr	r2, [pc, #240]	; (8005004 <RNDIS_Control_FS+0x844>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d803      	bhi.n	8004f20 <RNDIS_Control_FS+0x760>
 8004f18:	4a3b      	ldr	r2, [pc, #236]	; (8005008 <RNDIS_Control_FS+0x848>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d04a      	beq.n	8004fb4 <RNDIS_Control_FS+0x7f4>
				break;
 8004f1e:	e04e      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
			switch(rndis_data.Oid){
 8004f20:	4a3a      	ldr	r2, [pc, #232]	; (800500c <RNDIS_Control_FS+0x84c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d048      	beq.n	8004fb8 <RNDIS_Control_FS+0x7f8>
 8004f26:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
 8004f2a:	d047      	beq.n	8004fbc <RNDIS_Control_FS+0x7fc>
				break;
 8004f2c:	e047      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
		} else if(rndis_data.MessageType==RNDIS_MSG_RESET){
 8004f2e:	4b33      	ldr	r3, [pc, #204]	; (8004ffc <RNDIS_Control_FS+0x83c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2b06      	cmp	r3, #6
 8004f34:	d11b      	bne.n	8004f6e <RNDIS_Control_FS+0x7ae>
			buf32[pos++]=RNDIS_MSG_RESET_C;
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	1c5a      	adds	r2, r3, #1
 8004f3a:	61ba      	str	r2, [r7, #24]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	4413      	add	r3, r2
 8004f42:	4a33      	ldr	r2, [pc, #204]	; (8005010 <RNDIS_Control_FS+0x850>)
 8004f44:	601a      	str	r2, [r3, #0]
			pos++;
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	61bb      	str	r3, [r7, #24]
			buf32[pos++]=RNDIS_STATUS_SUCCESS;
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	1c5a      	adds	r2, r3, #1
 8004f50:	61ba      	str	r2, [r7, #24]
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	4413      	add	r3, r2
 8004f58:	2200      	movs	r2, #0
 8004f5a:	601a      	str	r2, [r3, #0]
			buf32[pos++]=0;
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	1c5a      	adds	r2, r3, #1
 8004f60:	61ba      	str	r2, [r7, #24]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	4413      	add	r3, r2
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	e027      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
		} else if(rndis_data.MessageType==RNDIS_MSG_KEEPALIVE){
 8004f6e:	4b23      	ldr	r3, [pc, #140]	; (8004ffc <RNDIS_Control_FS+0x83c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2b08      	cmp	r3, #8
 8004f74:	d123      	bne.n	8004fbe <RNDIS_Control_FS+0x7fe>
			buf32[pos++]=RNDIS_MSG_KEEPALIVE_C;
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	61ba      	str	r2, [r7, #24]
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	4413      	add	r3, r2
 8004f82:	4a24      	ldr	r2, [pc, #144]	; (8005014 <RNDIS_Control_FS+0x854>)
 8004f84:	601a      	str	r2, [r3, #0]
			pos++;
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	61bb      	str	r3, [r7, #24]
			buf32[pos++]=rndis_data.RequestId;
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	61ba      	str	r2, [r7, #24]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	4413      	add	r3, r2
 8004f98:	4a18      	ldr	r2, [pc, #96]	; (8004ffc <RNDIS_Control_FS+0x83c>)
 8004f9a:	6852      	ldr	r2, [r2, #4]
 8004f9c:	601a      	str	r2, [r3, #0]
			buf32[pos++]=RNDIS_STATUS_SUCCESS;
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	61ba      	str	r2, [r7, #24]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	4413      	add	r3, r2
 8004faa:	2200      	movs	r2, #0
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	e006      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				break;
 8004fb0:	bf00      	nop
 8004fb2:	e004      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				break;
 8004fb4:	bf00      	nop
 8004fb6:	e002      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				break;
 8004fb8:	bf00      	nop
 8004fba:	e000      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				break;
 8004fbc:	bf00      	nop
		if(!len) len=buf32[1]=pos*4;
 8004fbe:	7ffb      	ldrb	r3, [r7, #31]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d106      	bne.n	8004fd2 <RNDIS_Control_FS+0x812>
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	0092      	lsls	r2, r2, #2
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	77fb      	strb	r3, [r7, #31]
		USBD_CtlSendData(&hUsbDeviceFS, pbuf, len);
 8004fd2:	7ffb      	ldrb	r3, [r7, #31]
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	6839      	ldr	r1, [r7, #0]
 8004fda:	480f      	ldr	r0, [pc, #60]	; (8005018 <RNDIS_Control_FS+0x858>)
 8004fdc:	f002 fba4 	bl	8007728 <USBD_CtlSendData>
		break;
 8004fe0:	e000      	b.n	8004fe4 <RNDIS_Control_FS+0x824>
		break;
 8004fe2:	bf00      	nop
	}
	return (USBD_OK);
 8004fe4:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3724      	adds	r7, #36	; 0x24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd90      	pop	{r4, r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	20000c10 	.word	0x20000c10
 8004ff4:	00757840 	.word	0x00757840
 8004ff8:	080114a4 	.word	0x080114a4
 8004ffc:	20000c20 	.word	0x20000c20
 8005000:	80000005 	.word	0x80000005
 8005004:	00010111 	.word	0x00010111
 8005008:	0001010e 	.word	0x0001010e
 800500c:	00010114 	.word	0x00010114
 8005010:	80000006 	.word	0x80000006
 8005014:	80000008 	.word	0x80000008
 8005018:	20005780 	.word	0x20005780

0800501c <RNDIS_Receive_FS>:
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
//uint64_t timestamp;
static int8_t RNDIS_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
 800501c:	b590      	push	{r4, r7, lr}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
	BaseType_t xHigherPriorityTaskWoken;
	static uint16_t len=0;

	if(*Len>64){
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2b40      	cmp	r3, #64	; 0x40
 800502c:	d902      	bls.n	8005034 <RNDIS_Receive_FS+0x18>
		*Len=64;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2240      	movs	r2, #64	; 0x40
 8005032:	601a      	str	r2, [r3, #0]
	}
	memcpy(UserRxBufferFS+len, UserRxBufferFS_Temp, *Len);
 8005034:	4b25      	ldr	r3, [pc, #148]	; (80050cc <RNDIS_Receive_FS+0xb0>)
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	461a      	mov	r2, r3
 800503a:	4b25      	ldr	r3, [pc, #148]	; (80050d0 <RNDIS_Receive_FS+0xb4>)
 800503c:	18d0      	adds	r0, r2, r3
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	4923      	ldr	r1, [pc, #140]	; (80050d4 <RNDIS_Receive_FS+0xb8>)
 8005046:	f00b ffda 	bl	8010ffe <memcpy>
	len+=(*Len);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	b29a      	uxth	r2, r3
 8005050:	4b1e      	ldr	r3, [pc, #120]	; (80050cc <RNDIS_Receive_FS+0xb0>)
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	4413      	add	r3, r2
 8005056:	b29a      	uxth	r2, r3
 8005058:	4b1c      	ldr	r3, [pc, #112]	; (80050cc <RNDIS_Receive_FS+0xb0>)
 800505a:	801a      	strh	r2, [r3, #0]

	if(*Len!=64 && xEMACTaskHandle!=0){
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b40      	cmp	r3, #64	; 0x40
 8005062:	d026      	beq.n	80050b2 <RNDIS_Receive_FS+0x96>
 8005064:	4b1c      	ldr	r3, [pc, #112]	; (80050d8 <RNDIS_Receive_FS+0xbc>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d022      	beq.n	80050b2 <RNDIS_Receive_FS+0x96>
		UserRxSize=len;
 800506c:	4b17      	ldr	r3, [pc, #92]	; (80050cc <RNDIS_Receive_FS+0xb0>)
 800506e:	881a      	ldrh	r2, [r3, #0]
 8005070:	4b1a      	ldr	r3, [pc, #104]	; (80050dc <RNDIS_Receive_FS+0xc0>)
 8005072:	801a      	strh	r2, [r3, #0]
		//timestamp=ullGetHighResolutionTime();
		len=0;
 8005074:	4b15      	ldr	r3, [pc, #84]	; (80050cc <RNDIS_Receive_FS+0xb0>)
 8005076:	2200      	movs	r2, #0
 8005078:	801a      	strh	r2, [r3, #0]
		vTaskNotifyGiveFromISR(xEMACTaskHandle, &xHigherPriorityTaskWoken);
 800507a:	4b17      	ldr	r3, [pc, #92]	; (80050d8 <RNDIS_Receive_FS+0xbc>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f107 020c 	add.w	r2, r7, #12
 8005082:	4611      	mov	r1, r2
 8005084:	4618      	mov	r0, r3
 8005086:	f004 fe79 	bl	8009d7c <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d007      	beq.n	80050a0 <RNDIS_Receive_FS+0x84>
 8005090:	4b13      	ldr	r3, [pc, #76]	; (80050e0 <RNDIS_Receive_FS+0xc4>)
 8005092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	f3bf 8f6f 	isb	sy
		rndis_oid_gen_rcv_ok++;
 80050a0:	4b10      	ldr	r3, [pc, #64]	; (80050e4 <RNDIS_Receive_FS+0xc8>)
 80050a2:	cb18      	ldmia	r3, {r3, r4}
 80050a4:	3301      	adds	r3, #1
 80050a6:	f144 0400 	adc.w	r4, r4, #0
 80050aa:	4a0e      	ldr	r2, [pc, #56]	; (80050e4 <RNDIS_Receive_FS+0xc8>)
 80050ac:	e882 0018 	stmia.w	r2, {r3, r4}
 80050b0:	e006      	b.n	80050c0 <RNDIS_Receive_FS+0xa4>
	} else {
		USBD_RNDIS_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS_Temp);
 80050b2:	4908      	ldr	r1, [pc, #32]	; (80050d4 <RNDIS_Receive_FS+0xb8>)
 80050b4:	480c      	ldr	r0, [pc, #48]	; (80050e8 <RNDIS_Receive_FS+0xcc>)
 80050b6:	f001 fbe2 	bl	800687e <USBD_RNDIS_SetRxBuffer>
		USBD_RNDIS_ReceivePacket(&hUsbDeviceFS);
 80050ba:	480b      	ldr	r0, [pc, #44]	; (80050e8 <RNDIS_Receive_FS+0xcc>)
 80050bc:	f001 fc1d 	bl	80068fa <USBD_RNDIS_ReceivePacket>
	}
	return (USBD_OK);
 80050c0:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd90      	pop	{r4, r7, pc}
 80050ca:	bf00      	nop
 80050cc:	20000c44 	.word	0x20000c44
 80050d0:	200003c4 	.word	0x200003c4
 80050d4:	20000bc4 	.word	0x20000bc4
 80050d8:	20000c1c 	.word	0x20000c1c
 80050dc:	20000c18 	.word	0x20000c18
 80050e0:	e000ed04 	.word	0xe000ed04
 80050e4:	20000c10 	.word	0x20000c10
 80050e8:	20005780 	.word	0x20005780

080050ec <RNDIS_Transmit_FS>:
 * @param  Buf: Buffer of data to be send
 * @param  Len: Number of data to be send (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t RNDIS_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80050ec:	b590      	push	{r4, r7, lr}
 80050ee:	b087      	sub	sp, #28
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	460b      	mov	r3, r1
 80050f6:	807b      	strh	r3, [r7, #2]
	uint32_t *buffer=(uint32_t*)UserTxBufferFS;
 80050f8:	4b32      	ldr	r3, [pc, #200]	; (80051c4 <RNDIS_Transmit_FS+0xd8>)
 80050fa:	617b      	str	r3, [r7, #20]
	uint8_t result = USBD_OK;
 80050fc:	2300      	movs	r3, #0
 80050fe:	74fb      	strb	r3, [r7, #19]
	/* USER CODE BEGIN 7 */
	USBD_RNDIS_HandleTypeDef *hrndis = (USBD_RNDIS_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005100:	4b31      	ldr	r3, [pc, #196]	; (80051c8 <RNDIS_Transmit_FS+0xdc>)
 8005102:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005106:	60fb      	str	r3, [r7, #12]
	if (hrndis->TxState != 0 || rndis_state!=RNDIS_STATE_NORMAL){
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800510e:	2b00      	cmp	r3, #0
 8005110:	d103      	bne.n	800511a <RNDIS_Transmit_FS+0x2e>
 8005112:	4b2e      	ldr	r3, [pc, #184]	; (80051cc <RNDIS_Transmit_FS+0xe0>)
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <RNDIS_Transmit_FS+0x32>
		return USBD_BUSY;
 800511a:	2301      	movs	r3, #1
 800511c:	e04e      	b.n	80051bc <RNDIS_Transmit_FS+0xd0>
	}

	if(Len>APP_TX_DATA_SIZE){
 800511e:	887b      	ldrh	r3, [r7, #2]
 8005120:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005124:	d902      	bls.n	800512c <RNDIS_Transmit_FS+0x40>
		Len=APP_TX_DATA_SIZE;
 8005126:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800512a:	807b      	strh	r3, [r7, #2]
	}

	buffer[0]=0x00000001;	//MessageType
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	2201      	movs	r2, #1
 8005130:	601a      	str	r2, [r3, #0]
	buffer[1]=Len+44;		//MessageLength
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	3304      	adds	r3, #4
 8005136:	887a      	ldrh	r2, [r7, #2]
 8005138:	322c      	adds	r2, #44	; 0x2c
 800513a:	601a      	str	r2, [r3, #0]
	buffer[2]=36;			//DataOffset
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	3308      	adds	r3, #8
 8005140:	2224      	movs	r2, #36	; 0x24
 8005142:	601a      	str	r2, [r3, #0]
	buffer[3]=Len;			//DataLength
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	330c      	adds	r3, #12
 8005148:	887a      	ldrh	r2, [r7, #2]
 800514a:	601a      	str	r2, [r3, #0]
	buffer[4]=0;			//OOBDataOffset
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	3310      	adds	r3, #16
 8005150:	2200      	movs	r2, #0
 8005152:	601a      	str	r2, [r3, #0]
	buffer[5]=0;			//OOBDataLength
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	3314      	adds	r3, #20
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]
	buffer[6]=0;			//NumOOBDataElements
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	3318      	adds	r3, #24
 8005160:	2200      	movs	r2, #0
 8005162:	601a      	str	r2, [r3, #0]
	buffer[7]=0;			//PerPacketInfoOffset
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	331c      	adds	r3, #28
 8005168:	2200      	movs	r2, #0
 800516a:	601a      	str	r2, [r3, #0]
	buffer[8]=0;			//PerPacketInfoLength
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	3320      	adds	r3, #32
 8005170:	2200      	movs	r2, #0
 8005172:	601a      	str	r2, [r3, #0]
	buffer[9]=0;			//VcHandle
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	3324      	adds	r3, #36	; 0x24
 8005178:	2200      	movs	r2, #0
 800517a:	601a      	str	r2, [r3, #0]
	buffer[10]=0;			//Reserved
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	3328      	adds	r3, #40	; 0x28
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]

	memcpy(UserTxBufferFS+44, Buf, Len);
 8005184:	4812      	ldr	r0, [pc, #72]	; (80051d0 <RNDIS_Transmit_FS+0xe4>)
 8005186:	887b      	ldrh	r3, [r7, #2]
 8005188:	461a      	mov	r2, r3
 800518a:	6879      	ldr	r1, [r7, #4]
 800518c:	f00b ff37 	bl	8010ffe <memcpy>

	USBD_RNDIS_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, Len+44);
 8005190:	887b      	ldrh	r3, [r7, #2]
 8005192:	332c      	adds	r3, #44	; 0x2c
 8005194:	b29b      	uxth	r3, r3
 8005196:	461a      	mov	r2, r3
 8005198:	490a      	ldr	r1, [pc, #40]	; (80051c4 <RNDIS_Transmit_FS+0xd8>)
 800519a:	480b      	ldr	r0, [pc, #44]	; (80051c8 <RNDIS_Transmit_FS+0xdc>)
 800519c:	f001 fb55 	bl	800684a <USBD_RNDIS_SetTxBuffer>
	result = USBD_RNDIS_TransmitPacket(&hUsbDeviceFS);
 80051a0:	4809      	ldr	r0, [pc, #36]	; (80051c8 <RNDIS_Transmit_FS+0xdc>)
 80051a2:	f001 fb80 	bl	80068a6 <USBD_RNDIS_TransmitPacket>
 80051a6:	4603      	mov	r3, r0
 80051a8:	74fb      	strb	r3, [r7, #19]
	rndis_oid_gen_xmit_ok++;
 80051aa:	4b0a      	ldr	r3, [pc, #40]	; (80051d4 <RNDIS_Transmit_FS+0xe8>)
 80051ac:	cb18      	ldmia	r3, {r3, r4}
 80051ae:	3301      	adds	r3, #1
 80051b0:	f144 0400 	adc.w	r4, r4, #0
 80051b4:	4a07      	ldr	r2, [pc, #28]	; (80051d4 <RNDIS_Transmit_FS+0xe8>)
 80051b6:	e882 0018 	stmia.w	r2, {r3, r4}
	/* USER CODE END 7 */
	return result;
 80051ba:	7cfb      	ldrb	r3, [r7, #19]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	371c      	adds	r7, #28
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd90      	pop	{r4, r7, pc}
 80051c4:	20005f94 	.word	0x20005f94
 80051c8:	20005780 	.word	0x20005780
 80051cc:	20000038 	.word	0x20000038
 80051d0:	20005fc0 	.word	0x20005fc0
 80051d4:	20000c08 	.word	0x20000c08

080051d8 <xNetworkInterfaceInitialise>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
/* USER CODE END PRIVATE_FUNCTIONS_IMPLEMENTATION */

BaseType_t xNetworkInterfaceInitialise( void ){
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af02      	add	r7, sp, #8
	/* When returning non-zero, the stack will become active and
    start DHCP (if configured) */
	BaseType_t ret=0;
 80051de:	2300      	movs	r3, #0
 80051e0:	607b      	str	r3, [r7, #4]

	/* The deferred interrupt handler task is created at the highest
	possible priority to ensure the interrupt handler can return directly
	to it.  The task's handle is stored in xEMACTaskHandle so interrupts can
	notify the task when there is something to process. */
	if(rndis_state==RNDIS_STATE_NORMAL){
 80051e2:	4b0d      	ldr	r3, [pc, #52]	; (8005218 <xNetworkInterfaceInitialise+0x40>)
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d110      	bne.n	800520c <xNetworkInterfaceInitialise+0x34>
		ret=1;
 80051ea:	2301      	movs	r3, #1
 80051ec:	607b      	str	r3, [r7, #4]
		if(xEMACTaskHandle==0){
 80051ee:	4b0b      	ldr	r3, [pc, #44]	; (800521c <xNetworkInterfaceInitialise+0x44>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10a      	bne.n	800520c <xNetworkInterfaceInitialise+0x34>
			xTaskCreate( prvEMACHandlerTask, "EMAC", configEMAC_TASK_STACK_SIZE, NULL, configMAX_PRIORITIES - 1, &xEMACTaskHandle );
 80051f6:	4b09      	ldr	r3, [pc, #36]	; (800521c <xNetworkInterfaceInitialise+0x44>)
 80051f8:	9301      	str	r3, [sp, #4]
 80051fa:	2306      	movs	r3, #6
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	2300      	movs	r3, #0
 8005200:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005204:	4906      	ldr	r1, [pc, #24]	; (8005220 <xNetworkInterfaceInitialise+0x48>)
 8005206:	4807      	ldr	r0, [pc, #28]	; (8005224 <xNetworkInterfaceInitialise+0x4c>)
 8005208:	f003 fe4e 	bl	8008ea8 <xTaskCreate>
		}
	}

	return ret;
 800520c:	687b      	ldr	r3, [r7, #4]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	20000038 	.word	0x20000038
 800521c:	20000c1c 	.word	0x20000c1c
 8005220:	080113b0 	.word	0x080113b0
 8005224:	0800527d 	.word	0x0800527d

08005228 <xNetworkInterfaceOutput>:


BaseType_t xNetworkInterfaceOutput( NetworkBufferDescriptor_t * const pxDescriptor, BaseType_t xReleaseAfterSend  ){
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
	    takes a pointer to the start of the data to be sent and the length of the
	    data to be sent as two separate parameters.  The start of the data is located
	    by pxDescriptor->pucEthernetBuffer.  The length of the data is located
	    by pxDescriptor->xDataLength. */

	uint8_t retries=0;
 8005232:	2300      	movs	r3, #0
 8005234:	73fb      	strb	r3, [r7, #15]
	while(RNDIS_Transmit_FS( pxDescriptor->pucEthernetBuffer, pxDescriptor->xDataLength) ){
 8005236:	e008      	b.n	800524a <xNetworkInterfaceOutput+0x22>
		vTaskDelay(5);
 8005238:	2005      	movs	r0, #5
 800523a:	f003 ff67 	bl	800910c <vTaskDelay>
		retries++;
 800523e:	7bfb      	ldrb	r3, [r7, #15]
 8005240:	3301      	adds	r3, #1
 8005242:	73fb      	strb	r3, [r7, #15]
		if(retries>=5){
 8005244:	7bfb      	ldrb	r3, [r7, #15]
 8005246:	2b04      	cmp	r3, #4
 8005248:	d80c      	bhi.n	8005264 <xNetworkInterfaceOutput+0x3c>
	while(RNDIS_Transmit_FS( pxDescriptor->pucEthernetBuffer, pxDescriptor->xDataLength) ){
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	699a      	ldr	r2, [r3, #24]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	b29b      	uxth	r3, r3
 8005254:	4619      	mov	r1, r3
 8005256:	4610      	mov	r0, r2
 8005258:	f7ff ff48 	bl	80050ec <RNDIS_Transmit_FS>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1ea      	bne.n	8005238 <xNetworkInterfaceOutput+0x10>
 8005262:	e000      	b.n	8005266 <xNetworkInterfaceOutput+0x3e>
			break;
 8005264:	bf00      	nop

	iptraceNETWORK_INTERFACE_TRANSMIT();

	/* Call the standard trace macro to log the send event. */

	if( xReleaseAfterSend != pdFALSE )
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d002      	beq.n	8005272 <xNetworkInterfaceOutput+0x4a>
	{
		/* It is assumed SendData() copies the data out of the FreeRTOS+TCP Ethernet
	        buffer.  The Ethernet buffer is therefore no longer needed, and must be
	        freed for re-use. */
		vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f00b fbb1 	bl	80109d4 <vReleaseNetworkBufferAndDescriptor>
	}

	return pdTRUE;
 8005272:	2301      	movs	r3, #1

}
 8005274:	4618      	mov	r0, r3
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <prvEMACHandlerTask>:
		}

		return xReturn;
}

static void prvEMACHandlerTask( void *pvParameters ){
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
	{
		/* Wait for the Ethernet MAC interrupt to indicate that another packet
	        has been received.  The task notification is used in a similar way to a
	        counting semaphore to count Rx events, but is a lot more efficient than
	        a semaphore. */
		ulTaskNotifyTake( pdFALSE, portMAX_DELAY );
 8005284:	f04f 31ff 	mov.w	r1, #4294967295
 8005288:	2000      	movs	r0, #0
 800528a:	f004 fd2f 	bl	8009cec <ulTaskNotifyTake>

		/* See how much data was received.  Here it is assumed ReceiveSize() is
	        a peripheral driver function that returns the number of bytes in the
	        received Ethernet frame. */

		xBytesReceived = UserRxSize;
 800528e:	4b24      	ldr	r3, [pc, #144]	; (8005320 <prvEMACHandlerTask+0xa4>)
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	617b      	str	r3, [r7, #20]
		//timestamp=ullGetHighResolutionTime()-timestamp;

		if( xBytesReceived > 44 )
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	2b2c      	cmp	r3, #44	; 0x2c
 8005298:	d939      	bls.n	800530e <prvEMACHandlerTask+0x92>
		{
			xBytesReceived-=44;
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	3b2c      	subs	r3, #44	; 0x2c
 800529e:	617b      	str	r3, [r7, #20]
			/* Allocate a network buffer descriptor that points to a buffer
	            large enough to hold the received frame.  As this is the simple
	            rather than efficient example the received data will just be copied
	            into this buffer. */
			pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( xBytesReceived, 0 );
 80052a0:	2100      	movs	r1, #0
 80052a2:	6978      	ldr	r0, [r7, #20]
 80052a4:	f00b fb1e 	bl	80108e4 <pxGetNetworkBufferWithDescriptor>
 80052a8:	6138      	str	r0, [r7, #16]

			if( pxBufferDescriptor != NULL )
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d02e      	beq.n	800530e <prvEMACHandlerTask+0x92>
	                is assumed ReceiveData() is a peripheral driver function that
	                copies the received data into a buffer passed in as the function's
	                parameter.  Remember! While is is a simple robust technique -
	                it is not efficient.  An example that uses a zero copy technique
	                is provided further down this page. */
				memcpy(pxBufferDescriptor->pucEthernetBuffer, UserRxBufferFS+44, xBytesReceived);
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	491b      	ldr	r1, [pc, #108]	; (8005324 <prvEMACHandlerTask+0xa8>)
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f00b fea0 	bl	8010ffe <memcpy>
				UserRxSize=0;
 80052be:	4b18      	ldr	r3, [pc, #96]	; (8005320 <prvEMACHandlerTask+0xa4>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	801a      	strh	r2, [r3, #0]
				pxBufferDescriptor->xDataLength = xBytesReceived;
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	61da      	str	r2, [r3, #28]

				/* See if the data contained in the received Ethernet frame needs
	                to be processed.  NOTE! It is preferable to do this in
	                the interrupt service routine itself, which would remove the need
	                to unblock this task for packets that don't need processing. */
				if( eConsiderFrameForProcessing( pxBufferDescriptor->pucEthernetBuffer )
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f006 f9b0 	bl	800b634 <eConsiderFrameForProcessing>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d116      	bne.n	8005308 <prvEMACHandlerTask+0x8c>
						== eProcessBuffer )
				{
					/* The event about to be sent to the TCP/IP is an Rx event. */
					xRxEvent.eEventType = eNetworkRxEvent;
 80052da:	2301      	movs	r3, #1
 80052dc:	723b      	strb	r3, [r7, #8]

					/* pvData is used to point to the network buffer descriptor that
	                    now references the received data. */
					xRxEvent.pvData = ( void * ) pxBufferDescriptor;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	60fb      	str	r3, [r7, #12]

					/* Send the data to the TCP/IP stack. */
					if( xSendEventStructToIPTask( &xRxEvent, 0 ) == pdFALSE )
 80052e2:	f107 0308 	add.w	r3, r7, #8
 80052e6:	2100      	movs	r1, #0
 80052e8:	4618      	mov	r0, r3
 80052ea:	f006 f959 	bl	800b5a0 <xSendEventStructToIPTask>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d103      	bne.n	80052fc <prvEMACHandlerTask+0x80>
					{
						/* The buffer could not be sent to the IP task so the buffer
	                        must be released. */
						vReleaseNetworkBufferAndDescriptor( pxBufferDescriptor );
 80052f4:	6938      	ldr	r0, [r7, #16]
 80052f6:	f00b fb6d 	bl	80109d4 <vReleaseNetworkBufferAndDescriptor>
 80052fa:	e008      	b.n	800530e <prvEMACHandlerTask+0x92>
					else
					{
						/* The message was successfully sent to the TCP/IP stack.
	                        Call the standard trace macro to log the occurrence. */
						iptraceNETWORK_INTERFACE_RECEIVE();
						HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80052fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005300:	4809      	ldr	r0, [pc, #36]	; (8005328 <prvEMACHandlerTask+0xac>)
 8005302:	f7fb fc2e 	bl	8000b62 <HAL_GPIO_TogglePin>
 8005306:	e002      	b.n	800530e <prvEMACHandlerTask+0x92>
				}
				else
				{
					/* The Ethernet frame can be dropped, but the Ethernet buffer
	                    must be released. */
					vReleaseNetworkBufferAndDescriptor( pxBufferDescriptor );
 8005308:	6938      	ldr	r0, [r7, #16]
 800530a:	f00b fb63 	bl	80109d4 <vReleaseNetworkBufferAndDescriptor>
				/* The event was lost because a network buffer was not available.
	                Call the standard trace macro to log the occurrence. */
				iptraceETHERNET_RX_EVENT_LOST();
			}
		}
		USBD_RNDIS_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS_Temp);
 800530e:	4907      	ldr	r1, [pc, #28]	; (800532c <prvEMACHandlerTask+0xb0>)
 8005310:	4807      	ldr	r0, [pc, #28]	; (8005330 <prvEMACHandlerTask+0xb4>)
 8005312:	f001 fab4 	bl	800687e <USBD_RNDIS_SetRxBuffer>
		USBD_RNDIS_ReceivePacket(&hUsbDeviceFS);
 8005316:	4806      	ldr	r0, [pc, #24]	; (8005330 <prvEMACHandlerTask+0xb4>)
 8005318:	f001 faef 	bl	80068fa <USBD_RNDIS_ReceivePacket>
		ulTaskNotifyTake( pdFALSE, portMAX_DELAY );
 800531c:	e7b2      	b.n	8005284 <prvEMACHandlerTask+0x8>
 800531e:	bf00      	nop
 8005320:	20000c18 	.word	0x20000c18
 8005324:	200003f0 	.word	0x200003f0
 8005328:	40020c00 	.word	0x40020c00
 800532c:	20000bc4 	.word	0x20000bc4
 8005330:	20005780 	.word	0x20005780

08005334 <USBD_COMPOSITE_Init>:
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t  USBD_COMPOSITE_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	460b      	mov	r3, r1
 800533e:	70fb      	strb	r3, [r7, #3]
	uint8_t ret = 0;
 8005340:	2300      	movs	r3, #0
 8005342:	73fb      	strb	r3, [r7, #15]
	uint8_t index=0;
 8005344:	2300      	movs	r3, #0
 8005346:	73bb      	strb	r3, [r7, #14]

	for(index=0 ; index<usbd_composite_pClass_count;index++){
 8005348:	2300      	movs	r3, #0
 800534a:	73bb      	strb	r3, [r7, #14]
 800534c:	e045      	b.n	80053da <USBD_COMPOSITE_Init+0xa6>
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 800534e:	7bba      	ldrb	r2, [r7, #14]
 8005350:	4927      	ldr	r1, [pc, #156]	; (80053f0 <USBD_COMPOSITE_Init+0xbc>)
 8005352:	4613      	mov	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	440b      	add	r3, r1
 800535c:	3308      	adds	r3, #8
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8005366:	7bba      	ldrb	r2, [r7, #14]
 8005368:	4921      	ldr	r1, [pc, #132]	; (80053f0 <USBD_COMPOSITE_Init+0xbc>)
 800536a:	4613      	mov	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	440b      	add	r3, r1
 8005374:	330c      	adds	r3, #12
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

		ret|=usbd_composite_class_data[index].pClass->Init(pdev, cfgidx);
 800537e:	7bba      	ldrb	r2, [r7, #14]
 8005380:	491b      	ldr	r1, [pc, #108]	; (80053f0 <USBD_COMPOSITE_Init+0xbc>)
 8005382:	4613      	mov	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4413      	add	r3, r2
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	440b      	add	r3, r1
 800538c:	3304      	adds	r3, #4
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	78fa      	ldrb	r2, [r7, #3]
 8005394:	4611      	mov	r1, r2
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	4798      	blx	r3
 800539a:	4603      	mov	r3, r0
 800539c:	461a      	mov	r2, r3
 800539e:	7bfb      	ldrb	r3, [r7, #15]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	73fb      	strb	r3, [r7, #15]

		usbd_composite_class_data[index].pClassData=pdev->pClassData;
 80053a4:	7bba      	ldrb	r2, [r7, #14]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
 80053ac:	4810      	ldr	r0, [pc, #64]	; (80053f0 <USBD_COMPOSITE_Init+0xbc>)
 80053ae:	4613      	mov	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	4403      	add	r3, r0
 80053b8:	3308      	adds	r3, #8
 80053ba:	6019      	str	r1, [r3, #0]
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
 80053bc:	7bba      	ldrb	r2, [r7, #14]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 80053c4:	480a      	ldr	r0, [pc, #40]	; (80053f0 <USBD_COMPOSITE_Init+0xbc>)
 80053c6:	4613      	mov	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	011b      	lsls	r3, r3, #4
 80053ce:	4403      	add	r3, r0
 80053d0:	330c      	adds	r3, #12
 80053d2:	6019      	str	r1, [r3, #0]
	for(index=0 ; index<usbd_composite_pClass_count;index++){
 80053d4:	7bbb      	ldrb	r3, [r7, #14]
 80053d6:	3301      	adds	r3, #1
 80053d8:	73bb      	strb	r3, [r7, #14]
 80053da:	4b06      	ldr	r3, [pc, #24]	; (80053f4 <USBD_COMPOSITE_Init+0xc0>)
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	7bba      	ldrb	r2, [r7, #14]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d3b4      	bcc.n	800534e <USBD_COMPOSITE_Init+0x1a>
	}
	return ret;
 80053e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	200067c0 	.word	0x200067c0
 80053f4:	20000c46 	.word	0x20000c46

080053f8 <USBD_COMPOSITE_DeInit>:
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t  USBD_COMPOSITE_DeInit (USBD_HandleTypeDef *pdev,
		uint8_t cfgidx)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	460b      	mov	r3, r1
 8005402:	70fb      	strb	r3, [r7, #3]
	uint8_t ret = 0;
 8005404:	2300      	movs	r3, #0
 8005406:	73fb      	strb	r3, [r7, #15]

	uint8_t index=0;
 8005408:	2300      	movs	r3, #0
 800540a:	73bb      	strb	r3, [r7, #14]

	for(index=0 ; index<usbd_composite_pClass_count;index++){
 800540c:	2300      	movs	r3, #0
 800540e:	73bb      	strb	r3, [r7, #14]
 8005410:	e045      	b.n	800549e <USBD_COMPOSITE_DeInit+0xa6>
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8005412:	7bba      	ldrb	r2, [r7, #14]
 8005414:	4927      	ldr	r1, [pc, #156]	; (80054b4 <USBD_COMPOSITE_DeInit+0xbc>)
 8005416:	4613      	mov	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	440b      	add	r3, r1
 8005420:	3308      	adds	r3, #8
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 800542a:	7bba      	ldrb	r2, [r7, #14]
 800542c:	4921      	ldr	r1, [pc, #132]	; (80054b4 <USBD_COMPOSITE_DeInit+0xbc>)
 800542e:	4613      	mov	r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	4413      	add	r3, r2
 8005434:	011b      	lsls	r3, r3, #4
 8005436:	440b      	add	r3, r1
 8005438:	330c      	adds	r3, #12
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

		ret|=usbd_composite_class_data[index].pClass->DeInit(pdev, cfgidx);
 8005442:	7bba      	ldrb	r2, [r7, #14]
 8005444:	491b      	ldr	r1, [pc, #108]	; (80054b4 <USBD_COMPOSITE_DeInit+0xbc>)
 8005446:	4613      	mov	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	440b      	add	r3, r1
 8005450:	3304      	adds	r3, #4
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	78fa      	ldrb	r2, [r7, #3]
 8005458:	4611      	mov	r1, r2
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	4798      	blx	r3
 800545e:	4603      	mov	r3, r0
 8005460:	461a      	mov	r2, r3
 8005462:	7bfb      	ldrb	r3, [r7, #15]
 8005464:	4313      	orrs	r3, r2
 8005466:	73fb      	strb	r3, [r7, #15]

		usbd_composite_class_data[index].pClassData=pdev->pClassData;
 8005468:	7bba      	ldrb	r2, [r7, #14]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
 8005470:	4810      	ldr	r0, [pc, #64]	; (80054b4 <USBD_COMPOSITE_DeInit+0xbc>)
 8005472:	4613      	mov	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4413      	add	r3, r2
 8005478:	011b      	lsls	r3, r3, #4
 800547a:	4403      	add	r3, r0
 800547c:	3308      	adds	r3, #8
 800547e:	6019      	str	r1, [r3, #0]
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
 8005480:	7bba      	ldrb	r2, [r7, #14]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8005488:	480a      	ldr	r0, [pc, #40]	; (80054b4 <USBD_COMPOSITE_DeInit+0xbc>)
 800548a:	4613      	mov	r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4413      	add	r3, r2
 8005490:	011b      	lsls	r3, r3, #4
 8005492:	4403      	add	r3, r0
 8005494:	330c      	adds	r3, #12
 8005496:	6019      	str	r1, [r3, #0]
	for(index=0 ; index<usbd_composite_pClass_count;index++){
 8005498:	7bbb      	ldrb	r3, [r7, #14]
 800549a:	3301      	adds	r3, #1
 800549c:	73bb      	strb	r3, [r7, #14]
 800549e:	4b06      	ldr	r3, [pc, #24]	; (80054b8 <USBD_COMPOSITE_DeInit+0xc0>)
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	7bba      	ldrb	r2, [r7, #14]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d3b4      	bcc.n	8005412 <USBD_COMPOSITE_DeInit+0x1a>
	}

	return ret;
 80054a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	200067c0 	.word	0x200067c0
 80054b8:	20000c46 	.word	0x20000c46

080054bc <USBD_COMPOSITE_Setup>:
 * @param  req: usb requests
 * @retval status
 */
static uint8_t  USBD_COMPOSITE_Setup (USBD_HandleTypeDef *pdev,
		USBD_SetupReqTypedef *req)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
	uint8_t status=USBD_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	73fb      	strb	r3, [r7, #15]
	uint8_t itf=0;
 80054ca:	2300      	movs	r3, #0
 80054cc:	73bb      	strb	r3, [r7, #14]
	uint8_t index=-1;
 80054ce:	23ff      	movs	r3, #255	; 0xff
 80054d0:	737b      	strb	r3, [r7, #13]
	uint8_t i=0;
 80054d2:	2300      	movs	r3, #0
 80054d4:	733b      	strb	r3, [r7, #12]

	switch(req->bmRequest & 0x1F) {
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	f003 031f 	and.w	r3, r3, #31
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d002      	beq.n	80054e8 <USBD_COMPOSITE_Setup+0x2c>
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d020      	beq.n	8005528 <USBD_COMPOSITE_Setup+0x6c>
 80054e6:	e08a      	b.n	80055fe <USBD_COMPOSITE_Setup+0x142>
	case USB_REQ_RECIPIENT_INTERFACE:
		for(index=0;index<usbd_composite_pClass_count;index++){
 80054e8:	2300      	movs	r3, #0
 80054ea:	737b      	strb	r3, [r7, #13]
 80054ec:	e014      	b.n	8005518 <USBD_COMPOSITE_Setup+0x5c>
			itf+=usbd_composite_class_data[index].bInterfaces;
 80054ee:	7b7a      	ldrb	r2, [r7, #13]
 80054f0:	496d      	ldr	r1, [pc, #436]	; (80056a8 <USBD_COMPOSITE_Setup+0x1ec>)
 80054f2:	4613      	mov	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	440b      	add	r3, r1
 80054fc:	3303      	adds	r3, #3
 80054fe:	781a      	ldrb	r2, [r3, #0]
 8005500:	7bbb      	ldrb	r3, [r7, #14]
 8005502:	4413      	add	r3, r2
 8005504:	73bb      	strb	r3, [r7, #14]
			if(LOBYTE(req->wIndex)<itf)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	889b      	ldrh	r3, [r3, #4]
 800550a:	b2db      	uxtb	r3, r3
 800550c:	7bba      	ldrb	r2, [r7, #14]
 800550e:	429a      	cmp	r2, r3
 8005510:	d808      	bhi.n	8005524 <USBD_COMPOSITE_Setup+0x68>
		for(index=0;index<usbd_composite_pClass_count;index++){
 8005512:	7b7b      	ldrb	r3, [r7, #13]
 8005514:	3301      	adds	r3, #1
 8005516:	737b      	strb	r3, [r7, #13]
 8005518:	4b64      	ldr	r3, [pc, #400]	; (80056ac <USBD_COMPOSITE_Setup+0x1f0>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	7b7a      	ldrb	r2, [r7, #13]
 800551e:	429a      	cmp	r2, r3
 8005520:	d3e5      	bcc.n	80054ee <USBD_COMPOSITE_Setup+0x32>
				break;
		}
		break;
 8005522:	e06c      	b.n	80055fe <USBD_COMPOSITE_Setup+0x142>
				break;
 8005524:	bf00      	nop
		break;
 8005526:	e06a      	b.n	80055fe <USBD_COMPOSITE_Setup+0x142>
	case USB_REQ_RECIPIENT_ENDPOINT:
		for(index=0;index<usbd_composite_pClass_count;index++){
 8005528:	2300      	movs	r3, #0
 800552a:	737b      	strb	r3, [r7, #13]
 800552c:	e05f      	b.n	80055ee <USBD_COMPOSITE_Setup+0x132>
			if(req->wIndex & 0x80){
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	889b      	ldrh	r3, [r3, #4]
 8005532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005536:	2b00      	cmp	r3, #0
 8005538:	d024      	beq.n	8005584 <USBD_COMPOSITE_Setup+0xc8>
				for(i=0;i<usbd_composite_class_data[index].inEP;i++){
 800553a:	2300      	movs	r3, #0
 800553c:	733b      	strb	r3, [r7, #12]
 800553e:	e014      	b.n	800556a <USBD_COMPOSITE_Setup+0xae>
					if(usbd_composite_class_data[index].inEPa[i]==(req->wIndex & 0x7F)){
 8005540:	7b7a      	ldrb	r2, [r7, #13]
 8005542:	7b39      	ldrb	r1, [r7, #12]
 8005544:	4858      	ldr	r0, [pc, #352]	; (80056a8 <USBD_COMPOSITE_Setup+0x1ec>)
 8005546:	4613      	mov	r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	011b      	lsls	r3, r3, #4
 800554e:	4403      	add	r3, r0
 8005550:	440b      	add	r3, r1
 8005552:	3330      	adds	r3, #48	; 0x30
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	889b      	ldrh	r3, [r3, #4]
 800555c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005560:	429a      	cmp	r2, r3
 8005562:	d032      	beq.n	80055ca <USBD_COMPOSITE_Setup+0x10e>
				for(i=0;i<usbd_composite_class_data[index].inEP;i++){
 8005564:	7b3b      	ldrb	r3, [r7, #12]
 8005566:	3301      	adds	r3, #1
 8005568:	733b      	strb	r3, [r7, #12]
 800556a:	7b7a      	ldrb	r2, [r7, #13]
 800556c:	494e      	ldr	r1, [pc, #312]	; (80056a8 <USBD_COMPOSITE_Setup+0x1ec>)
 800556e:	4613      	mov	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	011b      	lsls	r3, r3, #4
 8005576:	440b      	add	r3, r1
 8005578:	3310      	adds	r3, #16
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	7b3a      	ldrb	r2, [r7, #12]
 800557e:	429a      	cmp	r2, r3
 8005580:	d3de      	bcc.n	8005540 <USBD_COMPOSITE_Setup+0x84>
 8005582:	e025      	b.n	80055d0 <USBD_COMPOSITE_Setup+0x114>
						break;
					}
				}
			} else {
				for(i=0;i<usbd_composite_class_data[index].outEP;i++){
 8005584:	2300      	movs	r3, #0
 8005586:	733b      	strb	r3, [r7, #12]
 8005588:	e012      	b.n	80055b0 <USBD_COMPOSITE_Setup+0xf4>
					if(usbd_composite_class_data[index].outEPa[i]==LOBYTE(req->wIndex)){
 800558a:	7b7a      	ldrb	r2, [r7, #13]
 800558c:	7b39      	ldrb	r1, [r7, #12]
 800558e:	4846      	ldr	r0, [pc, #280]	; (80056a8 <USBD_COMPOSITE_Setup+0x1ec>)
 8005590:	4613      	mov	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	011b      	lsls	r3, r3, #4
 8005598:	4403      	add	r3, r0
 800559a:	440b      	add	r3, r1
 800559c:	333f      	adds	r3, #63	; 0x3f
 800559e:	781a      	ldrb	r2, [r3, #0]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	889b      	ldrh	r3, [r3, #4]
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d011      	beq.n	80055ce <USBD_COMPOSITE_Setup+0x112>
				for(i=0;i<usbd_composite_class_data[index].outEP;i++){
 80055aa:	7b3b      	ldrb	r3, [r7, #12]
 80055ac:	3301      	adds	r3, #1
 80055ae:	733b      	strb	r3, [r7, #12]
 80055b0:	7b7a      	ldrb	r2, [r7, #13]
 80055b2:	493d      	ldr	r1, [pc, #244]	; (80056a8 <USBD_COMPOSITE_Setup+0x1ec>)
 80055b4:	4613      	mov	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	011b      	lsls	r3, r3, #4
 80055bc:	440b      	add	r3, r1
 80055be:	3311      	adds	r3, #17
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	7b3a      	ldrb	r2, [r7, #12]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d3e0      	bcc.n	800558a <USBD_COMPOSITE_Setup+0xce>
 80055c8:	e002      	b.n	80055d0 <USBD_COMPOSITE_Setup+0x114>
						break;
 80055ca:	bf00      	nop
 80055cc:	e000      	b.n	80055d0 <USBD_COMPOSITE_Setup+0x114>
						break;
 80055ce:	bf00      	nop
					}
				}
			}
			if(i!=usbd_composite_class_data[index].inEP){
 80055d0:	7b7a      	ldrb	r2, [r7, #13]
 80055d2:	4935      	ldr	r1, [pc, #212]	; (80056a8 <USBD_COMPOSITE_Setup+0x1ec>)
 80055d4:	4613      	mov	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	011b      	lsls	r3, r3, #4
 80055dc:	440b      	add	r3, r1
 80055de:	3310      	adds	r3, #16
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	7b3a      	ldrb	r2, [r7, #12]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d108      	bne.n	80055fa <USBD_COMPOSITE_Setup+0x13e>
		for(index=0;index<usbd_composite_pClass_count;index++){
 80055e8:	7b7b      	ldrb	r3, [r7, #13]
 80055ea:	3301      	adds	r3, #1
 80055ec:	737b      	strb	r3, [r7, #13]
 80055ee:	4b2f      	ldr	r3, [pc, #188]	; (80056ac <USBD_COMPOSITE_Setup+0x1f0>)
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	7b7a      	ldrb	r2, [r7, #13]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d39a      	bcc.n	800552e <USBD_COMPOSITE_Setup+0x72>
				break;
			}
		}
		break;
 80055f8:	e000      	b.n	80055fc <USBD_COMPOSITE_Setup+0x140>
				break;
 80055fa:	bf00      	nop
		break;
 80055fc:	bf00      	nop
	}
	if(index!=-1 && index!=usbd_composite_pClass_count){
 80055fe:	4b2b      	ldr	r3, [pc, #172]	; (80056ac <USBD_COMPOSITE_Setup+0x1f0>)
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	7b7a      	ldrb	r2, [r7, #13]
 8005604:	429a      	cmp	r2, r3
 8005606:	d04a      	beq.n	800569e <USBD_COMPOSITE_Setup+0x1e2>
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8005608:	7b7a      	ldrb	r2, [r7, #13]
 800560a:	4927      	ldr	r1, [pc, #156]	; (80056a8 <USBD_COMPOSITE_Setup+0x1ec>)
 800560c:	4613      	mov	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	011b      	lsls	r3, r3, #4
 8005614:	440b      	add	r3, r1
 8005616:	3308      	adds	r3, #8
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8005620:	7b7a      	ldrb	r2, [r7, #13]
 8005622:	4921      	ldr	r1, [pc, #132]	; (80056a8 <USBD_COMPOSITE_Setup+0x1ec>)
 8005624:	4613      	mov	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	011b      	lsls	r3, r3, #4
 800562c:	440b      	add	r3, r1
 800562e:	330c      	adds	r3, #12
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

		if(usbd_composite_class_data[index].pClass->Setup){
 8005638:	7b7a      	ldrb	r2, [r7, #13]
 800563a:	491b      	ldr	r1, [pc, #108]	; (80056a8 <USBD_COMPOSITE_Setup+0x1ec>)
 800563c:	4613      	mov	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	011b      	lsls	r3, r3, #4
 8005644:	440b      	add	r3, r1
 8005646:	3304      	adds	r3, #4
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00e      	beq.n	800566e <USBD_COMPOSITE_Setup+0x1b2>
			status=usbd_composite_class_data[index].pClass->Setup(pdev, req);
 8005650:	7b7a      	ldrb	r2, [r7, #13]
 8005652:	4915      	ldr	r1, [pc, #84]	; (80056a8 <USBD_COMPOSITE_Setup+0x1ec>)
 8005654:	4613      	mov	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4413      	add	r3, r2
 800565a:	011b      	lsls	r3, r3, #4
 800565c:	440b      	add	r3, r1
 800565e:	3304      	adds	r3, #4
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	6839      	ldr	r1, [r7, #0]
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	4798      	blx	r3
 800566a:	4603      	mov	r3, r0
 800566c:	73fb      	strb	r3, [r7, #15]
		}

		usbd_composite_class_data[index].pClassData=pdev->pClassData;
 800566e:	7b7a      	ldrb	r2, [r7, #13]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
 8005676:	480c      	ldr	r0, [pc, #48]	; (80056a8 <USBD_COMPOSITE_Setup+0x1ec>)
 8005678:	4613      	mov	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	011b      	lsls	r3, r3, #4
 8005680:	4403      	add	r3, r0
 8005682:	3308      	adds	r3, #8
 8005684:	6019      	str	r1, [r3, #0]
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
 8005686:	7b7a      	ldrb	r2, [r7, #13]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 800568e:	4806      	ldr	r0, [pc, #24]	; (80056a8 <USBD_COMPOSITE_Setup+0x1ec>)
 8005690:	4613      	mov	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4413      	add	r3, r2
 8005696:	011b      	lsls	r3, r3, #4
 8005698:	4403      	add	r3, r0
 800569a:	330c      	adds	r3, #12
 800569c:	6019      	str	r1, [r3, #0]
	}

	return status;
 800569e:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	200067c0 	.word	0x200067c0
 80056ac:	20000c46 	.word	0x20000c46

080056b0 <USBD_COMPOSITE_DataIn>:
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t  USBD_COMPOSITE_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80056b0:	b590      	push	{r4, r7, lr}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	460b      	mov	r3, r1
 80056ba:	70fb      	strb	r3, [r7, #3]
	uint8_t status=USBD_OK;
 80056bc:	2300      	movs	r3, #0
 80056be:	73fb      	strb	r3, [r7, #15]
	uint8_t index=0;
 80056c0:	2300      	movs	r3, #0
 80056c2:	73bb      	strb	r3, [r7, #14]
	uint8_t i=0;
 80056c4:	2300      	movs	r3, #0
 80056c6:	737b      	strb	r3, [r7, #13]

	for(index=0;index<usbd_composite_pClass_count;index++){
 80056c8:	2300      	movs	r3, #0
 80056ca:	73bb      	strb	r3, [r7, #14]
 80056cc:	e07d      	b.n	80057ca <USBD_COMPOSITE_DataIn+0x11a>
		for(i=0;i<usbd_composite_class_data[index].inEP;i++){
 80056ce:	2300      	movs	r3, #0
 80056d0:	737b      	strb	r3, [r7, #13]
 80056d2:	e06b      	b.n	80057ac <USBD_COMPOSITE_DataIn+0xfc>
			if(usbd_composite_class_data[index].inEPa[i]==epnum){
 80056d4:	7bba      	ldrb	r2, [r7, #14]
 80056d6:	7b79      	ldrb	r1, [r7, #13]
 80056d8:	4841      	ldr	r0, [pc, #260]	; (80057e0 <USBD_COMPOSITE_DataIn+0x130>)
 80056da:	4613      	mov	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	011b      	lsls	r3, r3, #4
 80056e2:	4403      	add	r3, r0
 80056e4:	440b      	add	r3, r1
 80056e6:	3330      	adds	r3, #48	; 0x30
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	78fa      	ldrb	r2, [r7, #3]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d15a      	bne.n	80057a6 <USBD_COMPOSITE_DataIn+0xf6>
				pdev->pClassData=usbd_composite_class_data[index].pClassData;
 80056f0:	7bba      	ldrb	r2, [r7, #14]
 80056f2:	493b      	ldr	r1, [pc, #236]	; (80057e0 <USBD_COMPOSITE_DataIn+0x130>)
 80056f4:	4613      	mov	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	011b      	lsls	r3, r3, #4
 80056fc:	440b      	add	r3, r1
 80056fe:	3308      	adds	r3, #8
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
				pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8005708:	7bba      	ldrb	r2, [r7, #14]
 800570a:	4935      	ldr	r1, [pc, #212]	; (80057e0 <USBD_COMPOSITE_DataIn+0x130>)
 800570c:	4613      	mov	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	011b      	lsls	r3, r3, #4
 8005714:	440b      	add	r3, r1
 8005716:	330c      	adds	r3, #12
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

				if(usbd_composite_class_data[index].pClass->DataOut){
 8005720:	7bba      	ldrb	r2, [r7, #14]
 8005722:	492f      	ldr	r1, [pc, #188]	; (80057e0 <USBD_COMPOSITE_DataIn+0x130>)
 8005724:	4613      	mov	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	440b      	add	r3, r1
 800572e:	3304      	adds	r3, #4
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d01c      	beq.n	8005772 <USBD_COMPOSITE_DataIn+0xc2>
					status|=usbd_composite_class_data[index].pClass->DataIn(pdev, usbd_composite_class_data[index].inEPn[i]);
 8005738:	7bba      	ldrb	r2, [r7, #14]
 800573a:	4929      	ldr	r1, [pc, #164]	; (80057e0 <USBD_COMPOSITE_DataIn+0x130>)
 800573c:	4613      	mov	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	440b      	add	r3, r1
 8005746:	3304      	adds	r3, #4
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	695c      	ldr	r4, [r3, #20]
 800574c:	7bba      	ldrb	r2, [r7, #14]
 800574e:	7b79      	ldrb	r1, [r7, #13]
 8005750:	4823      	ldr	r0, [pc, #140]	; (80057e0 <USBD_COMPOSITE_DataIn+0x130>)
 8005752:	4613      	mov	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	011b      	lsls	r3, r3, #4
 800575a:	4403      	add	r3, r0
 800575c:	440b      	add	r3, r1
 800575e:	3312      	adds	r3, #18
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	4619      	mov	r1, r3
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	47a0      	blx	r4
 8005768:	4603      	mov	r3, r0
 800576a:	461a      	mov	r2, r3
 800576c:	7bfb      	ldrb	r3, [r7, #15]
 800576e:	4313      	orrs	r3, r2
 8005770:	73fb      	strb	r3, [r7, #15]
				}

				usbd_composite_class_data[index].pClassData=pdev->pClassData;
 8005772:	7bba      	ldrb	r2, [r7, #14]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
 800577a:	4819      	ldr	r0, [pc, #100]	; (80057e0 <USBD_COMPOSITE_DataIn+0x130>)
 800577c:	4613      	mov	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	011b      	lsls	r3, r3, #4
 8005784:	4403      	add	r3, r0
 8005786:	3308      	adds	r3, #8
 8005788:	6019      	str	r1, [r3, #0]
				usbd_composite_class_data[index].pUserData=pdev->pUserData;
 800578a:	7bba      	ldrb	r2, [r7, #14]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8005792:	4813      	ldr	r0, [pc, #76]	; (80057e0 <USBD_COMPOSITE_DataIn+0x130>)
 8005794:	4613      	mov	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	011b      	lsls	r3, r3, #4
 800579c:	4403      	add	r3, r0
 800579e:	330c      	adds	r3, #12
 80057a0:	6019      	str	r1, [r3, #0]
				return status;
 80057a2:	7bfb      	ldrb	r3, [r7, #15]
 80057a4:	e018      	b.n	80057d8 <USBD_COMPOSITE_DataIn+0x128>
		for(i=0;i<usbd_composite_class_data[index].inEP;i++){
 80057a6:	7b7b      	ldrb	r3, [r7, #13]
 80057a8:	3301      	adds	r3, #1
 80057aa:	737b      	strb	r3, [r7, #13]
 80057ac:	7bba      	ldrb	r2, [r7, #14]
 80057ae:	490c      	ldr	r1, [pc, #48]	; (80057e0 <USBD_COMPOSITE_DataIn+0x130>)
 80057b0:	4613      	mov	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	011b      	lsls	r3, r3, #4
 80057b8:	440b      	add	r3, r1
 80057ba:	3310      	adds	r3, #16
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	7b7a      	ldrb	r2, [r7, #13]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d387      	bcc.n	80056d4 <USBD_COMPOSITE_DataIn+0x24>
	for(index=0;index<usbd_composite_pClass_count;index++){
 80057c4:	7bbb      	ldrb	r3, [r7, #14]
 80057c6:	3301      	adds	r3, #1
 80057c8:	73bb      	strb	r3, [r7, #14]
 80057ca:	4b06      	ldr	r3, [pc, #24]	; (80057e4 <USBD_COMPOSITE_DataIn+0x134>)
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	7bba      	ldrb	r2, [r7, #14]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	f4ff af7c 	bcc.w	80056ce <USBD_COMPOSITE_DataIn+0x1e>
			}
		}
	}
	return status;
 80057d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd90      	pop	{r4, r7, pc}
 80057e0:	200067c0 	.word	0x200067c0
 80057e4:	20000c46 	.word	0x20000c46

080057e8 <USBD_COMPOSITE_DataOut>:
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t  USBD_COMPOSITE_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 80057e8:	b590      	push	{r4, r7, lr}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	460b      	mov	r3, r1
 80057f2:	70fb      	strb	r3, [r7, #3]
	uint8_t status=USBD_OK;
 80057f4:	2300      	movs	r3, #0
 80057f6:	73fb      	strb	r3, [r7, #15]
	uint8_t index=0;
 80057f8:	2300      	movs	r3, #0
 80057fa:	73bb      	strb	r3, [r7, #14]
	for(index=0;index<usbd_composite_pClass_count;index++){
 80057fc:	2300      	movs	r3, #0
 80057fe:	73bb      	strb	r3, [r7, #14]
 8005800:	e07f      	b.n	8005902 <USBD_COMPOSITE_DataOut+0x11a>
		uint8_t i=0;
 8005802:	2300      	movs	r3, #0
 8005804:	737b      	strb	r3, [r7, #13]
		for(i=0;i<usbd_composite_class_data[index].outEP;i++){
 8005806:	2300      	movs	r3, #0
 8005808:	737b      	strb	r3, [r7, #13]
 800580a:	e06b      	b.n	80058e4 <USBD_COMPOSITE_DataOut+0xfc>
			if(usbd_composite_class_data[index].outEPa[i]==epnum){
 800580c:	7bba      	ldrb	r2, [r7, #14]
 800580e:	7b79      	ldrb	r1, [r7, #13]
 8005810:	4841      	ldr	r0, [pc, #260]	; (8005918 <USBD_COMPOSITE_DataOut+0x130>)
 8005812:	4613      	mov	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	4403      	add	r3, r0
 800581c:	440b      	add	r3, r1
 800581e:	333f      	adds	r3, #63	; 0x3f
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	78fa      	ldrb	r2, [r7, #3]
 8005824:	429a      	cmp	r2, r3
 8005826:	d15a      	bne.n	80058de <USBD_COMPOSITE_DataOut+0xf6>
				pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8005828:	7bba      	ldrb	r2, [r7, #14]
 800582a:	493b      	ldr	r1, [pc, #236]	; (8005918 <USBD_COMPOSITE_DataOut+0x130>)
 800582c:	4613      	mov	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4413      	add	r3, r2
 8005832:	011b      	lsls	r3, r3, #4
 8005834:	440b      	add	r3, r1
 8005836:	3308      	adds	r3, #8
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
				pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8005840:	7bba      	ldrb	r2, [r7, #14]
 8005842:	4935      	ldr	r1, [pc, #212]	; (8005918 <USBD_COMPOSITE_DataOut+0x130>)
 8005844:	4613      	mov	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	011b      	lsls	r3, r3, #4
 800584c:	440b      	add	r3, r1
 800584e:	330c      	adds	r3, #12
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

				if(usbd_composite_class_data[index].pClass->DataOut){
 8005858:	7bba      	ldrb	r2, [r7, #14]
 800585a:	492f      	ldr	r1, [pc, #188]	; (8005918 <USBD_COMPOSITE_DataOut+0x130>)
 800585c:	4613      	mov	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	011b      	lsls	r3, r3, #4
 8005864:	440b      	add	r3, r1
 8005866:	3304      	adds	r3, #4
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d01c      	beq.n	80058aa <USBD_COMPOSITE_DataOut+0xc2>
					status|=usbd_composite_class_data[index].pClass->DataOut(pdev, usbd_composite_class_data[index].outEPn[i]);
 8005870:	7bba      	ldrb	r2, [r7, #14]
 8005872:	4929      	ldr	r1, [pc, #164]	; (8005918 <USBD_COMPOSITE_DataOut+0x130>)
 8005874:	4613      	mov	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	011b      	lsls	r3, r3, #4
 800587c:	440b      	add	r3, r1
 800587e:	3304      	adds	r3, #4
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	699c      	ldr	r4, [r3, #24]
 8005884:	7bba      	ldrb	r2, [r7, #14]
 8005886:	7b79      	ldrb	r1, [r7, #13]
 8005888:	4823      	ldr	r0, [pc, #140]	; (8005918 <USBD_COMPOSITE_DataOut+0x130>)
 800588a:	4613      	mov	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	011b      	lsls	r3, r3, #4
 8005892:	4403      	add	r3, r0
 8005894:	440b      	add	r3, r1
 8005896:	3321      	adds	r3, #33	; 0x21
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	4619      	mov	r1, r3
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	47a0      	blx	r4
 80058a0:	4603      	mov	r3, r0
 80058a2:	461a      	mov	r2, r3
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	73fb      	strb	r3, [r7, #15]
				}

				usbd_composite_class_data[index].pClassData=pdev->pClassData;
 80058aa:	7bba      	ldrb	r2, [r7, #14]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
 80058b2:	4819      	ldr	r0, [pc, #100]	; (8005918 <USBD_COMPOSITE_DataOut+0x130>)
 80058b4:	4613      	mov	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	4403      	add	r3, r0
 80058be:	3308      	adds	r3, #8
 80058c0:	6019      	str	r1, [r3, #0]
				usbd_composite_class_data[index].pUserData=pdev->pUserData;
 80058c2:	7bba      	ldrb	r2, [r7, #14]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 80058ca:	4813      	ldr	r0, [pc, #76]	; (8005918 <USBD_COMPOSITE_DataOut+0x130>)
 80058cc:	4613      	mov	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	011b      	lsls	r3, r3, #4
 80058d4:	4403      	add	r3, r0
 80058d6:	330c      	adds	r3, #12
 80058d8:	6019      	str	r1, [r3, #0]
				return status;
 80058da:	7bfb      	ldrb	r3, [r7, #15]
 80058dc:	e018      	b.n	8005910 <USBD_COMPOSITE_DataOut+0x128>
		for(i=0;i<usbd_composite_class_data[index].outEP;i++){
 80058de:	7b7b      	ldrb	r3, [r7, #13]
 80058e0:	3301      	adds	r3, #1
 80058e2:	737b      	strb	r3, [r7, #13]
 80058e4:	7bba      	ldrb	r2, [r7, #14]
 80058e6:	490c      	ldr	r1, [pc, #48]	; (8005918 <USBD_COMPOSITE_DataOut+0x130>)
 80058e8:	4613      	mov	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	011b      	lsls	r3, r3, #4
 80058f0:	440b      	add	r3, r1
 80058f2:	3311      	adds	r3, #17
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	7b7a      	ldrb	r2, [r7, #13]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d387      	bcc.n	800580c <USBD_COMPOSITE_DataOut+0x24>
	for(index=0;index<usbd_composite_pClass_count;index++){
 80058fc:	7bbb      	ldrb	r3, [r7, #14]
 80058fe:	3301      	adds	r3, #1
 8005900:	73bb      	strb	r3, [r7, #14]
 8005902:	4b06      	ldr	r3, [pc, #24]	; (800591c <USBD_COMPOSITE_DataOut+0x134>)
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	7bba      	ldrb	r2, [r7, #14]
 8005908:	429a      	cmp	r2, r3
 800590a:	f4ff af7a 	bcc.w	8005802 <USBD_COMPOSITE_DataOut+0x1a>
			}
		}
	}
	return status;
 800590e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005910:	4618      	mov	r0, r3
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	bd90      	pop	{r4, r7, pc}
 8005918:	200067c0 	.word	0x200067c0
 800591c:	20000c46 	.word	0x20000c46

08005920 <USBD_COMPOSITE_EP0_RxReady>:
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t  USBD_COMPOSITE_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
	uint8_t status=USBD_OK;
 8005928:	2300      	movs	r3, #0
 800592a:	73fb      	strb	r3, [r7, #15]
	uint8_t index;
	for(index=0;index<usbd_composite_pClass_count;index++){
 800592c:	2300      	movs	r3, #0
 800592e:	73bb      	strb	r3, [r7, #14]
 8005930:	e04f      	b.n	80059d2 <USBD_COMPOSITE_EP0_RxReady+0xb2>
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8005932:	7bba      	ldrb	r2, [r7, #14]
 8005934:	492c      	ldr	r1, [pc, #176]	; (80059e8 <USBD_COMPOSITE_EP0_RxReady+0xc8>)
 8005936:	4613      	mov	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	011b      	lsls	r3, r3, #4
 800593e:	440b      	add	r3, r1
 8005940:	3308      	adds	r3, #8
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 800594a:	7bba      	ldrb	r2, [r7, #14]
 800594c:	4926      	ldr	r1, [pc, #152]	; (80059e8 <USBD_COMPOSITE_EP0_RxReady+0xc8>)
 800594e:	4613      	mov	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	011b      	lsls	r3, r3, #4
 8005956:	440b      	add	r3, r1
 8005958:	330c      	adds	r3, #12
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

		if(usbd_composite_class_data[index].pClass->EP0_RxReady){
 8005962:	7bba      	ldrb	r2, [r7, #14]
 8005964:	4920      	ldr	r1, [pc, #128]	; (80059e8 <USBD_COMPOSITE_EP0_RxReady+0xc8>)
 8005966:	4613      	mov	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	011b      	lsls	r3, r3, #4
 800596e:	440b      	add	r3, r1
 8005970:	3304      	adds	r3, #4
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d010      	beq.n	800599c <USBD_COMPOSITE_EP0_RxReady+0x7c>
			status|=usbd_composite_class_data[index].pClass->EP0_RxReady(pdev);
 800597a:	7bba      	ldrb	r2, [r7, #14]
 800597c:	491a      	ldr	r1, [pc, #104]	; (80059e8 <USBD_COMPOSITE_EP0_RxReady+0xc8>)
 800597e:	4613      	mov	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	011b      	lsls	r3, r3, #4
 8005986:	440b      	add	r3, r1
 8005988:	3304      	adds	r3, #4
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	4798      	blx	r3
 8005992:	4603      	mov	r3, r0
 8005994:	461a      	mov	r2, r3
 8005996:	7bfb      	ldrb	r3, [r7, #15]
 8005998:	4313      	orrs	r3, r2
 800599a:	73fb      	strb	r3, [r7, #15]
		}

		usbd_composite_class_data[index].pClassData=pdev->pClassData;
 800599c:	7bba      	ldrb	r2, [r7, #14]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
 80059a4:	4810      	ldr	r0, [pc, #64]	; (80059e8 <USBD_COMPOSITE_EP0_RxReady+0xc8>)
 80059a6:	4613      	mov	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	011b      	lsls	r3, r3, #4
 80059ae:	4403      	add	r3, r0
 80059b0:	3308      	adds	r3, #8
 80059b2:	6019      	str	r1, [r3, #0]
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
 80059b4:	7bba      	ldrb	r2, [r7, #14]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 80059bc:	480a      	ldr	r0, [pc, #40]	; (80059e8 <USBD_COMPOSITE_EP0_RxReady+0xc8>)
 80059be:	4613      	mov	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4413      	add	r3, r2
 80059c4:	011b      	lsls	r3, r3, #4
 80059c6:	4403      	add	r3, r0
 80059c8:	330c      	adds	r3, #12
 80059ca:	6019      	str	r1, [r3, #0]
	for(index=0;index<usbd_composite_pClass_count;index++){
 80059cc:	7bbb      	ldrb	r3, [r7, #14]
 80059ce:	3301      	adds	r3, #1
 80059d0:	73bb      	strb	r3, [r7, #14]
 80059d2:	4b06      	ldr	r3, [pc, #24]	; (80059ec <USBD_COMPOSITE_EP0_RxReady+0xcc>)
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	7bba      	ldrb	r2, [r7, #14]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d3aa      	bcc.n	8005932 <USBD_COMPOSITE_EP0_RxReady+0x12>
	}
	return status;
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	200067c0 	.word	0x200067c0
 80059ec:	20000c46 	.word	0x20000c46

080059f0 <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_COMPOSITE_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
	uint8_t status=USBD_OK;
 80059f8:	2300      	movs	r3, #0
 80059fa:	73fb      	strb	r3, [r7, #15]
	uint8_t index;
	for(index=0;index<usbd_composite_pClass_count;index++){
 80059fc:	2300      	movs	r3, #0
 80059fe:	73bb      	strb	r3, [r7, #14]
 8005a00:	e04f      	b.n	8005aa2 <USBD_COMPOSITE_EP0_TxReady+0xb2>
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8005a02:	7bba      	ldrb	r2, [r7, #14]
 8005a04:	492c      	ldr	r1, [pc, #176]	; (8005ab8 <USBD_COMPOSITE_EP0_TxReady+0xc8>)
 8005a06:	4613      	mov	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	011b      	lsls	r3, r3, #4
 8005a0e:	440b      	add	r3, r1
 8005a10:	3308      	adds	r3, #8
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8005a1a:	7bba      	ldrb	r2, [r7, #14]
 8005a1c:	4926      	ldr	r1, [pc, #152]	; (8005ab8 <USBD_COMPOSITE_EP0_TxReady+0xc8>)
 8005a1e:	4613      	mov	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	011b      	lsls	r3, r3, #4
 8005a26:	440b      	add	r3, r1
 8005a28:	330c      	adds	r3, #12
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

		if(usbd_composite_class_data[index].pClass->EP0_TxSent){
 8005a32:	7bba      	ldrb	r2, [r7, #14]
 8005a34:	4920      	ldr	r1, [pc, #128]	; (8005ab8 <USBD_COMPOSITE_EP0_TxReady+0xc8>)
 8005a36:	4613      	mov	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	011b      	lsls	r3, r3, #4
 8005a3e:	440b      	add	r3, r1
 8005a40:	3304      	adds	r3, #4
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d010      	beq.n	8005a6c <USBD_COMPOSITE_EP0_TxReady+0x7c>
			status|=usbd_composite_class_data[index].pClass->EP0_TxSent(pdev);
 8005a4a:	7bba      	ldrb	r2, [r7, #14]
 8005a4c:	491a      	ldr	r1, [pc, #104]	; (8005ab8 <USBD_COMPOSITE_EP0_TxReady+0xc8>)
 8005a4e:	4613      	mov	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	011b      	lsls	r3, r3, #4
 8005a56:	440b      	add	r3, r1
 8005a58:	3304      	adds	r3, #4
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	4798      	blx	r3
 8005a62:	4603      	mov	r3, r0
 8005a64:	461a      	mov	r2, r3
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	73fb      	strb	r3, [r7, #15]
		}

		usbd_composite_class_data[index].pClassData=pdev->pClassData;
 8005a6c:	7bba      	ldrb	r2, [r7, #14]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
 8005a74:	4810      	ldr	r0, [pc, #64]	; (8005ab8 <USBD_COMPOSITE_EP0_TxReady+0xc8>)
 8005a76:	4613      	mov	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	011b      	lsls	r3, r3, #4
 8005a7e:	4403      	add	r3, r0
 8005a80:	3308      	adds	r3, #8
 8005a82:	6019      	str	r1, [r3, #0]
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
 8005a84:	7bba      	ldrb	r2, [r7, #14]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8005a8c:	480a      	ldr	r0, [pc, #40]	; (8005ab8 <USBD_COMPOSITE_EP0_TxReady+0xc8>)
 8005a8e:	4613      	mov	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	4403      	add	r3, r0
 8005a98:	330c      	adds	r3, #12
 8005a9a:	6019      	str	r1, [r3, #0]
	for(index=0;index<usbd_composite_pClass_count;index++){
 8005a9c:	7bbb      	ldrb	r3, [r7, #14]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	73bb      	strb	r3, [r7, #14]
 8005aa2:	4b06      	ldr	r3, [pc, #24]	; (8005abc <USBD_COMPOSITE_EP0_TxReady+0xcc>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	7bba      	ldrb	r2, [r7, #14]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d3aa      	bcc.n	8005a02 <USBD_COMPOSITE_EP0_TxReady+0x12>
	}
	return status;
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	200067c0 	.word	0x200067c0
 8005abc:	20000c46 	.word	0x20000c46

08005ac0 <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_COMPOSITE_SOF (USBD_HandleTypeDef *pdev)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
	uint8_t status=USBD_OK;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	73fb      	strb	r3, [r7, #15]
	uint8_t index;
	for(index=0;index<usbd_composite_pClass_count;index++){
 8005acc:	2300      	movs	r3, #0
 8005ace:	73bb      	strb	r3, [r7, #14]
 8005ad0:	e04f      	b.n	8005b72 <USBD_COMPOSITE_SOF+0xb2>
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8005ad2:	7bba      	ldrb	r2, [r7, #14]
 8005ad4:	492c      	ldr	r1, [pc, #176]	; (8005b88 <USBD_COMPOSITE_SOF+0xc8>)
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	011b      	lsls	r3, r3, #4
 8005ade:	440b      	add	r3, r1
 8005ae0:	3308      	adds	r3, #8
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8005aea:	7bba      	ldrb	r2, [r7, #14]
 8005aec:	4926      	ldr	r1, [pc, #152]	; (8005b88 <USBD_COMPOSITE_SOF+0xc8>)
 8005aee:	4613      	mov	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	011b      	lsls	r3, r3, #4
 8005af6:	440b      	add	r3, r1
 8005af8:	330c      	adds	r3, #12
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

		if(usbd_composite_class_data[index].pClass->SOF){
 8005b02:	7bba      	ldrb	r2, [r7, #14]
 8005b04:	4920      	ldr	r1, [pc, #128]	; (8005b88 <USBD_COMPOSITE_SOF+0xc8>)
 8005b06:	4613      	mov	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	011b      	lsls	r3, r3, #4
 8005b0e:	440b      	add	r3, r1
 8005b10:	3304      	adds	r3, #4
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d010      	beq.n	8005b3c <USBD_COMPOSITE_SOF+0x7c>
			status|=usbd_composite_class_data[index].pClass->SOF(pdev);
 8005b1a:	7bba      	ldrb	r2, [r7, #14]
 8005b1c:	491a      	ldr	r1, [pc, #104]	; (8005b88 <USBD_COMPOSITE_SOF+0xc8>)
 8005b1e:	4613      	mov	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4413      	add	r3, r2
 8005b24:	011b      	lsls	r3, r3, #4
 8005b26:	440b      	add	r3, r1
 8005b28:	3304      	adds	r3, #4
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	4798      	blx	r3
 8005b32:	4603      	mov	r3, r0
 8005b34:	461a      	mov	r2, r3
 8005b36:	7bfb      	ldrb	r3, [r7, #15]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	73fb      	strb	r3, [r7, #15]
		}

		usbd_composite_class_data[index].pClassData=pdev->pClassData;
 8005b3c:	7bba      	ldrb	r2, [r7, #14]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
 8005b44:	4810      	ldr	r0, [pc, #64]	; (8005b88 <USBD_COMPOSITE_SOF+0xc8>)
 8005b46:	4613      	mov	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4413      	add	r3, r2
 8005b4c:	011b      	lsls	r3, r3, #4
 8005b4e:	4403      	add	r3, r0
 8005b50:	3308      	adds	r3, #8
 8005b52:	6019      	str	r1, [r3, #0]
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
 8005b54:	7bba      	ldrb	r2, [r7, #14]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8005b5c:	480a      	ldr	r0, [pc, #40]	; (8005b88 <USBD_COMPOSITE_SOF+0xc8>)
 8005b5e:	4613      	mov	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4413      	add	r3, r2
 8005b64:	011b      	lsls	r3, r3, #4
 8005b66:	4403      	add	r3, r0
 8005b68:	330c      	adds	r3, #12
 8005b6a:	6019      	str	r1, [r3, #0]
	for(index=0;index<usbd_composite_pClass_count;index++){
 8005b6c:	7bbb      	ldrb	r3, [r7, #14]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	73bb      	strb	r3, [r7, #14]
 8005b72:	4b06      	ldr	r3, [pc, #24]	; (8005b8c <USBD_COMPOSITE_SOF+0xcc>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	7bba      	ldrb	r2, [r7, #14]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d3aa      	bcc.n	8005ad2 <USBD_COMPOSITE_SOF+0x12>
	}
	return status;
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	200067c0 	.word	0x200067c0
 8005b8c:	20000c46 	.word	0x20000c46

08005b90 <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_COMPOSITE_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b90:	b590      	push	{r4, r7, lr}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	460b      	mov	r3, r1
 8005b9a:	70fb      	strb	r3, [r7, #3]
	uint8_t status=USBD_OK;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	73fb      	strb	r3, [r7, #15]
	uint8_t index=0;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	73bb      	strb	r3, [r7, #14]
	for(index=0;index<usbd_composite_pClass_count;index++){
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	73bb      	strb	r3, [r7, #14]
 8005ba8:	e07f      	b.n	8005caa <USBD_COMPOSITE_IsoINIncomplete+0x11a>
		uint8_t i=0;
 8005baa:	2300      	movs	r3, #0
 8005bac:	737b      	strb	r3, [r7, #13]
		for(i=0;i<usbd_composite_class_data[index].inEP;i++){
 8005bae:	2300      	movs	r3, #0
 8005bb0:	737b      	strb	r3, [r7, #13]
 8005bb2:	e06b      	b.n	8005c8c <USBD_COMPOSITE_IsoINIncomplete+0xfc>
			if(usbd_composite_class_data[index].inEPa[i]==epnum){
 8005bb4:	7bba      	ldrb	r2, [r7, #14]
 8005bb6:	7b79      	ldrb	r1, [r7, #13]
 8005bb8:	4841      	ldr	r0, [pc, #260]	; (8005cc0 <USBD_COMPOSITE_IsoINIncomplete+0x130>)
 8005bba:	4613      	mov	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	011b      	lsls	r3, r3, #4
 8005bc2:	4403      	add	r3, r0
 8005bc4:	440b      	add	r3, r1
 8005bc6:	3330      	adds	r3, #48	; 0x30
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	78fa      	ldrb	r2, [r7, #3]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d15a      	bne.n	8005c86 <USBD_COMPOSITE_IsoINIncomplete+0xf6>
				pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8005bd0:	7bba      	ldrb	r2, [r7, #14]
 8005bd2:	493b      	ldr	r1, [pc, #236]	; (8005cc0 <USBD_COMPOSITE_IsoINIncomplete+0x130>)
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	4413      	add	r3, r2
 8005bda:	011b      	lsls	r3, r3, #4
 8005bdc:	440b      	add	r3, r1
 8005bde:	3308      	adds	r3, #8
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
				pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8005be8:	7bba      	ldrb	r2, [r7, #14]
 8005bea:	4935      	ldr	r1, [pc, #212]	; (8005cc0 <USBD_COMPOSITE_IsoINIncomplete+0x130>)
 8005bec:	4613      	mov	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	011b      	lsls	r3, r3, #4
 8005bf4:	440b      	add	r3, r1
 8005bf6:	330c      	adds	r3, #12
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

				if(usbd_composite_class_data[index].pClass->IsoINIncomplete){
 8005c00:	7bba      	ldrb	r2, [r7, #14]
 8005c02:	492f      	ldr	r1, [pc, #188]	; (8005cc0 <USBD_COMPOSITE_IsoINIncomplete+0x130>)
 8005c04:	4613      	mov	r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4413      	add	r3, r2
 8005c0a:	011b      	lsls	r3, r3, #4
 8005c0c:	440b      	add	r3, r1
 8005c0e:	3304      	adds	r3, #4
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d01c      	beq.n	8005c52 <USBD_COMPOSITE_IsoINIncomplete+0xc2>
					status|=usbd_composite_class_data[index].pClass->IsoINIncomplete(pdev, usbd_composite_class_data[index].inEPn[i]);
 8005c18:	7bba      	ldrb	r2, [r7, #14]
 8005c1a:	4929      	ldr	r1, [pc, #164]	; (8005cc0 <USBD_COMPOSITE_IsoINIncomplete+0x130>)
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4413      	add	r3, r2
 8005c22:	011b      	lsls	r3, r3, #4
 8005c24:	440b      	add	r3, r1
 8005c26:	3304      	adds	r3, #4
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6a1c      	ldr	r4, [r3, #32]
 8005c2c:	7bba      	ldrb	r2, [r7, #14]
 8005c2e:	7b79      	ldrb	r1, [r7, #13]
 8005c30:	4823      	ldr	r0, [pc, #140]	; (8005cc0 <USBD_COMPOSITE_IsoINIncomplete+0x130>)
 8005c32:	4613      	mov	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	011b      	lsls	r3, r3, #4
 8005c3a:	4403      	add	r3, r0
 8005c3c:	440b      	add	r3, r1
 8005c3e:	3312      	adds	r3, #18
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	4619      	mov	r1, r3
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	47a0      	blx	r4
 8005c48:	4603      	mov	r3, r0
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	73fb      	strb	r3, [r7, #15]
				}

				usbd_composite_class_data[index].pClassData=pdev->pClassData;
 8005c52:	7bba      	ldrb	r2, [r7, #14]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
 8005c5a:	4819      	ldr	r0, [pc, #100]	; (8005cc0 <USBD_COMPOSITE_IsoINIncomplete+0x130>)
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	011b      	lsls	r3, r3, #4
 8005c64:	4403      	add	r3, r0
 8005c66:	3308      	adds	r3, #8
 8005c68:	6019      	str	r1, [r3, #0]
				usbd_composite_class_data[index].pUserData=pdev->pUserData;
 8005c6a:	7bba      	ldrb	r2, [r7, #14]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8005c72:	4813      	ldr	r0, [pc, #76]	; (8005cc0 <USBD_COMPOSITE_IsoINIncomplete+0x130>)
 8005c74:	4613      	mov	r3, r2
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	4413      	add	r3, r2
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	4403      	add	r3, r0
 8005c7e:	330c      	adds	r3, #12
 8005c80:	6019      	str	r1, [r3, #0]
				return status;
 8005c82:	7bfb      	ldrb	r3, [r7, #15]
 8005c84:	e018      	b.n	8005cb8 <USBD_COMPOSITE_IsoINIncomplete+0x128>
		for(i=0;i<usbd_composite_class_data[index].inEP;i++){
 8005c86:	7b7b      	ldrb	r3, [r7, #13]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	737b      	strb	r3, [r7, #13]
 8005c8c:	7bba      	ldrb	r2, [r7, #14]
 8005c8e:	490c      	ldr	r1, [pc, #48]	; (8005cc0 <USBD_COMPOSITE_IsoINIncomplete+0x130>)
 8005c90:	4613      	mov	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	011b      	lsls	r3, r3, #4
 8005c98:	440b      	add	r3, r1
 8005c9a:	3310      	adds	r3, #16
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	7b7a      	ldrb	r2, [r7, #13]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d387      	bcc.n	8005bb4 <USBD_COMPOSITE_IsoINIncomplete+0x24>
	for(index=0;index<usbd_composite_pClass_count;index++){
 8005ca4:	7bbb      	ldrb	r3, [r7, #14]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	73bb      	strb	r3, [r7, #14]
 8005caa:	4b06      	ldr	r3, [pc, #24]	; (8005cc4 <USBD_COMPOSITE_IsoINIncomplete+0x134>)
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	7bba      	ldrb	r2, [r7, #14]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	f4ff af7a 	bcc.w	8005baa <USBD_COMPOSITE_IsoINIncomplete+0x1a>
			}
		}
	}
	return status;
 8005cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3714      	adds	r7, #20
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd90      	pop	{r4, r7, pc}
 8005cc0:	200067c0 	.word	0x200067c0
 8005cc4:	20000c46 	.word	0x20000c46

08005cc8 <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_COMPOSITE_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005cc8:	b590      	push	{r4, r7, lr}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	70fb      	strb	r3, [r7, #3]

	uint8_t status=USBD_OK;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	73fb      	strb	r3, [r7, #15]
	uint8_t index=0;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	73bb      	strb	r3, [r7, #14]
	for(index=0;index<usbd_composite_pClass_count;index++){
 8005cdc:	2300      	movs	r3, #0
 8005cde:	73bb      	strb	r3, [r7, #14]
 8005ce0:	e07f      	b.n	8005de2 <USBD_COMPOSITE_IsoOutIncomplete+0x11a>
		uint8_t i=0;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	737b      	strb	r3, [r7, #13]
		for(i=0;i<usbd_composite_class_data[index].outEP;i++){
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	737b      	strb	r3, [r7, #13]
 8005cea:	e06b      	b.n	8005dc4 <USBD_COMPOSITE_IsoOutIncomplete+0xfc>
			if(usbd_composite_class_data[index].outEPa[i]==epnum){
 8005cec:	7bba      	ldrb	r2, [r7, #14]
 8005cee:	7b79      	ldrb	r1, [r7, #13]
 8005cf0:	4841      	ldr	r0, [pc, #260]	; (8005df8 <USBD_COMPOSITE_IsoOutIncomplete+0x130>)
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	011b      	lsls	r3, r3, #4
 8005cfa:	4403      	add	r3, r0
 8005cfc:	440b      	add	r3, r1
 8005cfe:	333f      	adds	r3, #63	; 0x3f
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	78fa      	ldrb	r2, [r7, #3]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d15a      	bne.n	8005dbe <USBD_COMPOSITE_IsoOutIncomplete+0xf6>
				pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8005d08:	7bba      	ldrb	r2, [r7, #14]
 8005d0a:	493b      	ldr	r1, [pc, #236]	; (8005df8 <USBD_COMPOSITE_IsoOutIncomplete+0x130>)
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	011b      	lsls	r3, r3, #4
 8005d14:	440b      	add	r3, r1
 8005d16:	3308      	adds	r3, #8
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
				pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8005d20:	7bba      	ldrb	r2, [r7, #14]
 8005d22:	4935      	ldr	r1, [pc, #212]	; (8005df8 <USBD_COMPOSITE_IsoOutIncomplete+0x130>)
 8005d24:	4613      	mov	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	011b      	lsls	r3, r3, #4
 8005d2c:	440b      	add	r3, r1
 8005d2e:	330c      	adds	r3, #12
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

				if(usbd_composite_class_data[index].pClass->IsoOUTIncomplete){
 8005d38:	7bba      	ldrb	r2, [r7, #14]
 8005d3a:	492f      	ldr	r1, [pc, #188]	; (8005df8 <USBD_COMPOSITE_IsoOutIncomplete+0x130>)
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	011b      	lsls	r3, r3, #4
 8005d44:	440b      	add	r3, r1
 8005d46:	3304      	adds	r3, #4
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d01c      	beq.n	8005d8a <USBD_COMPOSITE_IsoOutIncomplete+0xc2>
					status|=usbd_composite_class_data[index].pClass->IsoOUTIncomplete(pdev, usbd_composite_class_data[index].outEPn[i]);
 8005d50:	7bba      	ldrb	r2, [r7, #14]
 8005d52:	4929      	ldr	r1, [pc, #164]	; (8005df8 <USBD_COMPOSITE_IsoOutIncomplete+0x130>)
 8005d54:	4613      	mov	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	011b      	lsls	r3, r3, #4
 8005d5c:	440b      	add	r3, r1
 8005d5e:	3304      	adds	r3, #4
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005d64:	7bba      	ldrb	r2, [r7, #14]
 8005d66:	7b79      	ldrb	r1, [r7, #13]
 8005d68:	4823      	ldr	r0, [pc, #140]	; (8005df8 <USBD_COMPOSITE_IsoOutIncomplete+0x130>)
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	011b      	lsls	r3, r3, #4
 8005d72:	4403      	add	r3, r0
 8005d74:	440b      	add	r3, r1
 8005d76:	3321      	adds	r3, #33	; 0x21
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	47a0      	blx	r4
 8005d80:	4603      	mov	r3, r0
 8005d82:	461a      	mov	r2, r3
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	73fb      	strb	r3, [r7, #15]
				}

				usbd_composite_class_data[index].pClassData=pdev->pClassData;
 8005d8a:	7bba      	ldrb	r2, [r7, #14]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
 8005d92:	4819      	ldr	r0, [pc, #100]	; (8005df8 <USBD_COMPOSITE_IsoOutIncomplete+0x130>)
 8005d94:	4613      	mov	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	011b      	lsls	r3, r3, #4
 8005d9c:	4403      	add	r3, r0
 8005d9e:	3308      	adds	r3, #8
 8005da0:	6019      	str	r1, [r3, #0]
				usbd_composite_class_data[index].pUserData=pdev->pUserData;
 8005da2:	7bba      	ldrb	r2, [r7, #14]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8005daa:	4813      	ldr	r0, [pc, #76]	; (8005df8 <USBD_COMPOSITE_IsoOutIncomplete+0x130>)
 8005dac:	4613      	mov	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	4403      	add	r3, r0
 8005db6:	330c      	adds	r3, #12
 8005db8:	6019      	str	r1, [r3, #0]
				return status;
 8005dba:	7bfb      	ldrb	r3, [r7, #15]
 8005dbc:	e018      	b.n	8005df0 <USBD_COMPOSITE_IsoOutIncomplete+0x128>
		for(i=0;i<usbd_composite_class_data[index].outEP;i++){
 8005dbe:	7b7b      	ldrb	r3, [r7, #13]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	737b      	strb	r3, [r7, #13]
 8005dc4:	7bba      	ldrb	r2, [r7, #14]
 8005dc6:	490c      	ldr	r1, [pc, #48]	; (8005df8 <USBD_COMPOSITE_IsoOutIncomplete+0x130>)
 8005dc8:	4613      	mov	r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4413      	add	r3, r2
 8005dce:	011b      	lsls	r3, r3, #4
 8005dd0:	440b      	add	r3, r1
 8005dd2:	3311      	adds	r3, #17
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	7b7a      	ldrb	r2, [r7, #13]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d387      	bcc.n	8005cec <USBD_COMPOSITE_IsoOutIncomplete+0x24>
	for(index=0;index<usbd_composite_pClass_count;index++){
 8005ddc:	7bbb      	ldrb	r3, [r7, #14]
 8005dde:	3301      	adds	r3, #1
 8005de0:	73bb      	strb	r3, [r7, #14]
 8005de2:	4b06      	ldr	r3, [pc, #24]	; (8005dfc <USBD_COMPOSITE_IsoOutIncomplete+0x134>)
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	7bba      	ldrb	r2, [r7, #14]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	f4ff af7a 	bcc.w	8005ce2 <USBD_COMPOSITE_IsoOutIncomplete+0x1a>
			}
		}
	}
	return status;
 8005dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd90      	pop	{r4, r7, pc}
 8005df8:	200067c0 	.word	0x200067c0
 8005dfc:	20000c46 	.word	0x20000c46

08005e00 <USBD_COMPOSITE_GetFSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t  *USBD_COMPOSITE_GetFSCfgDesc (uint16_t *length)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
	*length=descriptor_size;
 8005e08:	4b05      	ldr	r3, [pc, #20]	; (8005e20 <USBD_COMPOSITE_GetFSCfgDesc+0x20>)
 8005e0a:	881a      	ldrh	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	801a      	strh	r2, [r3, #0]
	return descriptor;
 8005e10:	4b04      	ldr	r3, [pc, #16]	; (8005e24 <USBD_COMPOSITE_GetFSCfgDesc+0x24>)
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	20001048 	.word	0x20001048
 8005e24:	20000c48 	.word	0x20000c48

08005e28 <USBD_COMPOSITE_GetHSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t  *USBD_COMPOSITE_GetHSCfgDesc (uint16_t *length)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
	return USBD_COMPOSITE_GetFSCfgDesc(length);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7ff ffe5 	bl	8005e00 <USBD_COMPOSITE_GetFSCfgDesc>
 8005e36:	4603      	mov	r3, r0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3708      	adds	r7, #8
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t  *USBD_COMPOSITE_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
	return USBD_COMPOSITE_GetFSCfgDesc(length);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f7ff ffd9 	bl	8005e00 <USBD_COMPOSITE_GetFSCfgDesc>
 8005e4e:	4603      	mov	r3, r0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3708      	adds	r7, #8
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <USBD_COMPOSITE_GetDeviceQualifierDescriptor>:
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
uint8_t  *USBD_COMPOSITE_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
	*length = sizeof (USBD_COMPOSITE_DeviceQualifierDesc);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	220a      	movs	r2, #10
 8005e64:	801a      	strh	r2, [r3, #0]
	return USBD_COMPOSITE_DeviceQualifierDesc;
 8005e66:	4b03      	ldr	r3, [pc, #12]	; (8005e74 <USBD_COMPOSITE_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	20000050 	.word	0x20000050

08005e78 <USBD_COMPOSITE_RegisterClass>:

USBD_StatusTypeDef  USBD_COMPOSITE_RegisterClass(USBD_HandleTypeDef *pdev, uint8_t bFunctionClass, uint8_t bFunctionSubClass, uint8_t bFunctionProtocol){
 8005e78:	b5b0      	push	{r4, r5, r7, lr}
 8005e7a:	b08a      	sub	sp, #40	; 0x28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	4608      	mov	r0, r1
 8005e82:	4611      	mov	r1, r2
 8005e84:	461a      	mov	r2, r3
 8005e86:	4603      	mov	r3, r0
 8005e88:	70fb      	strb	r3, [r7, #3]
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	70bb      	strb	r3, [r7, #2]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	707b      	strb	r3, [r7, #1]
	USBD_StatusTypeDef   status = USBD_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t lastIfc=-1;
 8005e98:	23ff      	movs	r3, #255	; 0xff
 8005e9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(descriptor_size==0){
 8005e9e:	4ba9      	ldr	r3, [pc, #676]	; (8006144 <USBD_COMPOSITE_RegisterClass+0x2cc>)
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10a      	bne.n	8005ebc <USBD_COMPOSITE_RegisterClass+0x44>
		USBD_memcpy(descriptor, USBD_COMPOSITE_CfgFSDesc, USB_COMPOSITE_CONFIG_DESC_SIZ);
 8005ea6:	4ba8      	ldr	r3, [pc, #672]	; (8006148 <USBD_COMPOSITE_RegisterClass+0x2d0>)
 8005ea8:	4aa8      	ldr	r2, [pc, #672]	; (800614c <USBD_COMPOSITE_RegisterClass+0x2d4>)
 8005eaa:	ca07      	ldmia	r2, {r0, r1, r2}
 8005eac:	c303      	stmia	r3!, {r0, r1}
 8005eae:	701a      	strb	r2, [r3, #0]
		descriptor_size+=USB_COMPOSITE_CONFIG_DESC_SIZ;
 8005eb0:	4ba4      	ldr	r3, [pc, #656]	; (8006144 <USBD_COMPOSITE_RegisterClass+0x2cc>)
 8005eb2:	881b      	ldrh	r3, [r3, #0]
 8005eb4:	3309      	adds	r3, #9
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	4ba2      	ldr	r3, [pc, #648]	; (8006144 <USBD_COMPOSITE_RegisterClass+0x2cc>)
 8005eba:	801a      	strh	r2, [r3, #0]
	}

	if(pdev->pClass != 0 && pdev->pClass != &USBD_COMPOSITE && usbd_composite_pClass_count<USB_COMPOSITE_MAX_CLASSES)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f000 8248 	beq.w	8006358 <USBD_COMPOSITE_RegisterClass+0x4e0>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ece:	4aa0      	ldr	r2, [pc, #640]	; (8006150 <USBD_COMPOSITE_RegisterClass+0x2d8>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	f000 8241 	beq.w	8006358 <USBD_COMPOSITE_RegisterClass+0x4e0>
 8005ed6:	4b9f      	ldr	r3, [pc, #636]	; (8006154 <USBD_COMPOSITE_RegisterClass+0x2dc>)
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	2b04      	cmp	r3, #4
 8005edc:	f200 823c 	bhi.w	8006358 <USBD_COMPOSITE_RegisterClass+0x4e0>
	{
		/* link the class to the USB Device handle */
		usbd_composite_class_data[usbd_composite_pClass_count].bFunctionClass=bFunctionClass;
 8005ee0:	4b9c      	ldr	r3, [pc, #624]	; (8006154 <USBD_COMPOSITE_RegisterClass+0x2dc>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	4a9c      	ldr	r2, [pc, #624]	; (8006158 <USBD_COMPOSITE_RegisterClass+0x2e0>)
 8005ee8:	460b      	mov	r3, r1
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	440b      	add	r3, r1
 8005eee:	011b      	lsls	r3, r3, #4
 8005ef0:	4413      	add	r3, r2
 8005ef2:	78fa      	ldrb	r2, [r7, #3]
 8005ef4:	701a      	strb	r2, [r3, #0]
		usbd_composite_class_data[usbd_composite_pClass_count].bFunctionSubClass=bFunctionSubClass;
 8005ef6:	4b97      	ldr	r3, [pc, #604]	; (8006154 <USBD_COMPOSITE_RegisterClass+0x2dc>)
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	4619      	mov	r1, r3
 8005efc:	4a96      	ldr	r2, [pc, #600]	; (8006158 <USBD_COMPOSITE_RegisterClass+0x2e0>)
 8005efe:	460b      	mov	r3, r1
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	440b      	add	r3, r1
 8005f04:	011b      	lsls	r3, r3, #4
 8005f06:	4413      	add	r3, r2
 8005f08:	3301      	adds	r3, #1
 8005f0a:	78ba      	ldrb	r2, [r7, #2]
 8005f0c:	701a      	strb	r2, [r3, #0]
		usbd_composite_class_data[usbd_composite_pClass_count].bFunctionProtocol=bFunctionProtocol;
 8005f0e:	4b91      	ldr	r3, [pc, #580]	; (8006154 <USBD_COMPOSITE_RegisterClass+0x2dc>)
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	4619      	mov	r1, r3
 8005f14:	4a90      	ldr	r2, [pc, #576]	; (8006158 <USBD_COMPOSITE_RegisterClass+0x2e0>)
 8005f16:	460b      	mov	r3, r1
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	440b      	add	r3, r1
 8005f1c:	011b      	lsls	r3, r3, #4
 8005f1e:	4413      	add	r3, r2
 8005f20:	3302      	adds	r3, #2
 8005f22:	787a      	ldrb	r2, [r7, #1]
 8005f24:	701a      	strb	r2, [r3, #0]
		usbd_composite_class_data[usbd_composite_pClass_count].pClass=pdev->pClass;
 8005f26:	4b8b      	ldr	r3, [pc, #556]	; (8006154 <USBD_COMPOSITE_RegisterClass+0x2dc>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005f32:	4989      	ldr	r1, [pc, #548]	; (8006158 <USBD_COMPOSITE_RegisterClass+0x2e0>)
 8005f34:	4603      	mov	r3, r0
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	4403      	add	r3, r0
 8005f3a:	011b      	lsls	r3, r3, #4
 8005f3c:	440b      	add	r3, r1
 8005f3e:	3304      	adds	r3, #4
 8005f40:	601a      	str	r2, [r3, #0]
		usbd_composite_class_data[usbd_composite_pClass_count].pClassData=pdev->pClassData;
 8005f42:	4b84      	ldr	r3, [pc, #528]	; (8006154 <USBD_COMPOSITE_RegisterClass+0x2dc>)
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	4618      	mov	r0, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005f4e:	4982      	ldr	r1, [pc, #520]	; (8006158 <USBD_COMPOSITE_RegisterClass+0x2e0>)
 8005f50:	4603      	mov	r3, r0
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4403      	add	r3, r0
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	440b      	add	r3, r1
 8005f5a:	3308      	adds	r3, #8
 8005f5c:	601a      	str	r2, [r3, #0]
		usbd_composite_class_data[usbd_composite_pClass_count].pUserData=pdev->pUserData;
 8005f5e:	4b7d      	ldr	r3, [pc, #500]	; (8006154 <USBD_COMPOSITE_RegisterClass+0x2dc>)
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	4618      	mov	r0, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005f6a:	497b      	ldr	r1, [pc, #492]	; (8006158 <USBD_COMPOSITE_RegisterClass+0x2e0>)
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4403      	add	r3, r0
 8005f72:	011b      	lsls	r3, r3, #4
 8005f74:	440b      	add	r3, r1
 8005f76:	330c      	adds	r3, #12
 8005f78:	601a      	str	r2, [r3, #0]

		uint16_t length_temp;
		uint8_t *descriptor_temp=usbd_composite_class_data[usbd_composite_pClass_count].pClass->GetFSConfigDescriptor(&length_temp);
 8005f7a:	4b76      	ldr	r3, [pc, #472]	; (8006154 <USBD_COMPOSITE_RegisterClass+0x2dc>)
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	4619      	mov	r1, r3
 8005f80:	4a75      	ldr	r2, [pc, #468]	; (8006158 <USBD_COMPOSITE_RegisterClass+0x2e0>)
 8005f82:	460b      	mov	r3, r1
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	440b      	add	r3, r1
 8005f88:	011b      	lsls	r3, r3, #4
 8005f8a:	4413      	add	r3, r2
 8005f8c:	3304      	adds	r3, #4
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f92:	f107 020e 	add.w	r2, r7, #14
 8005f96:	4610      	mov	r0, r2
 8005f98:	4798      	blx	r3
 8005f9a:	6238      	str	r0, [r7, #32]
		uint8_t *descriptor_end=descriptor_temp+length_temp;
 8005f9c:	89fb      	ldrh	r3, [r7, #14]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	6a3b      	ldr	r3, [r7, #32]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	61fb      	str	r3, [r7, #28]
		USBD_COMPOSITE_ItfAssocDescriptor *itfAssocDescriptor;

		while(descriptor_temp<descriptor_end){
 8005fa6:	e1b4      	b.n	8006312 <USBD_COMPOSITE_RegisterClass+0x49a>
			uint8_t *descriptor_current=descriptor+descriptor_size;
 8005fa8:	4b66      	ldr	r3, [pc, #408]	; (8006144 <USBD_COMPOSITE_RegisterClass+0x2cc>)
 8005faa:	881b      	ldrh	r3, [r3, #0]
 8005fac:	461a      	mov	r2, r3
 8005fae:	4b66      	ldr	r3, [pc, #408]	; (8006148 <USBD_COMPOSITE_RegisterClass+0x2d0>)
 8005fb0:	4413      	add	r3, r2
 8005fb2:	61bb      	str	r3, [r7, #24]
			USBD_memcpy(descriptor_current, descriptor_temp, descriptor_temp[0]);
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	461a      	mov	r2, r3
 8005fba:	6a39      	ldr	r1, [r7, #32]
 8005fbc:	69b8      	ldr	r0, [r7, #24]
 8005fbe:	f00b f81e 	bl	8010ffe <memcpy>
			descriptor_size+=descriptor_temp[0];
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	4b5e      	ldr	r3, [pc, #376]	; (8006144 <USBD_COMPOSITE_RegisterClass+0x2cc>)
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	4413      	add	r3, r2
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	4b5c      	ldr	r3, [pc, #368]	; (8006144 <USBD_COMPOSITE_RegisterClass+0x2cc>)
 8005fd2:	801a      	strh	r2, [r3, #0]
			descriptor_temp+=descriptor_temp[0];
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	461a      	mov	r2, r3
 8005fda:	6a3b      	ldr	r3, [r7, #32]
 8005fdc:	4413      	add	r3, r2
 8005fde:	623b      	str	r3, [r7, #32]
			uint8_t itf_num_temp=0;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	75fb      	strb	r3, [r7, #23]

			switch(descriptor_current[1]){
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	3b02      	subs	r3, #2
 8005fec:	2b22      	cmp	r3, #34	; 0x22
 8005fee:	f200 818f 	bhi.w	8006310 <USBD_COMPOSITE_RegisterClass+0x498>
 8005ff2:	a201      	add	r2, pc, #4	; (adr r2, 8005ff8 <USBD_COMPOSITE_RegisterClass+0x180>)
 8005ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff8:	08006085 	.word	0x08006085
 8005ffc:	08006311 	.word	0x08006311
 8006000:	080060dd 	.word	0x080060dd
 8006004:	08006165 	.word	0x08006165
 8006008:	08006311 	.word	0x08006311
 800600c:	08006311 	.word	0x08006311
 8006010:	08006311 	.word	0x08006311
 8006014:	08006311 	.word	0x08006311
 8006018:	08006311 	.word	0x08006311
 800601c:	08006311 	.word	0x08006311
 8006020:	08006311 	.word	0x08006311
 8006024:	08006311 	.word	0x08006311
 8006028:	08006311 	.word	0x08006311
 800602c:	08006311 	.word	0x08006311
 8006030:	08006311 	.word	0x08006311
 8006034:	08006311 	.word	0x08006311
 8006038:	08006311 	.word	0x08006311
 800603c:	08006311 	.word	0x08006311
 8006040:	08006311 	.word	0x08006311
 8006044:	08006311 	.word	0x08006311
 8006048:	08006311 	.word	0x08006311
 800604c:	08006311 	.word	0x08006311
 8006050:	08006311 	.word	0x08006311
 8006054:	08006311 	.word	0x08006311
 8006058:	08006311 	.word	0x08006311
 800605c:	08006311 	.word	0x08006311
 8006060:	08006311 	.word	0x08006311
 8006064:	08006311 	.word	0x08006311
 8006068:	08006311 	.word	0x08006311
 800606c:	08006311 	.word	0x08006311
 8006070:	08006311 	.word	0x08006311
 8006074:	08006311 	.word	0x08006311
 8006078:	08006311 	.word	0x08006311
 800607c:	08006311 	.word	0x08006311
 8006080:	080062b3 	.word	0x080062b3
			case 0x02: // Configuration descriptor
				itf_num_temp=descriptor_current[4];
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	791b      	ldrb	r3, [r3, #4]
 8006088:	75fb      	strb	r3, [r7, #23]
				descriptor_size-=descriptor_current[0];
 800608a:	4b2e      	ldr	r3, [pc, #184]	; (8006144 <USBD_COMPOSITE_RegisterClass+0x2cc>)
 800608c:	881a      	ldrh	r2, [r3, #0]
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	b29b      	uxth	r3, r3
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	b29a      	uxth	r2, r3
 8006098:	4b2a      	ldr	r3, [pc, #168]	; (8006144 <USBD_COMPOSITE_RegisterClass+0x2cc>)
 800609a:	801a      	strh	r2, [r3, #0]
				USBD_memcpy(descriptor_current, USBD_COMPOSITE_IfcAssocDesc, USB_COMPOSITE_IFC_ASSOC_DESC_SIZ);
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	492f      	ldr	r1, [pc, #188]	; (800615c <USBD_COMPOSITE_RegisterClass+0x2e4>)
 80060a0:	461a      	mov	r2, r3
 80060a2:	460b      	mov	r3, r1
 80060a4:	cb03      	ldmia	r3!, {r0, r1}
 80060a6:	6010      	str	r0, [r2, #0]
 80060a8:	6051      	str	r1, [r2, #4]
				descriptor_size+=USB_COMPOSITE_IFC_ASSOC_DESC_SIZ;
 80060aa:	4b26      	ldr	r3, [pc, #152]	; (8006144 <USBD_COMPOSITE_RegisterClass+0x2cc>)
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	3308      	adds	r3, #8
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	4b24      	ldr	r3, [pc, #144]	; (8006144 <USBD_COMPOSITE_RegisterClass+0x2cc>)
 80060b4:	801a      	strh	r2, [r3, #0]

				itfAssocDescriptor=(USBD_COMPOSITE_ItfAssocDescriptor*)(descriptor_current);
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	613b      	str	r3, [r7, #16]
				itfAssocDescriptor->bFirstInterface=itf_num;													//Use next available interface
 80060ba:	4b29      	ldr	r3, [pc, #164]	; (8006160 <USBD_COMPOSITE_RegisterClass+0x2e8>)
 80060bc:	781a      	ldrb	r2, [r3, #0]
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	709a      	strb	r2, [r3, #2]
				itfAssocDescriptor->bInterfaceCount=itf_num_temp;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	7dfa      	ldrb	r2, [r7, #23]
 80060c6:	70da      	strb	r2, [r3, #3]
				itfAssocDescriptor->bFunctionClass=bFunctionClass;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	78fa      	ldrb	r2, [r7, #3]
 80060cc:	711a      	strb	r2, [r3, #4]
				itfAssocDescriptor->bFunctionSubClass=bFunctionSubClass;
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	78ba      	ldrb	r2, [r7, #2]
 80060d2:	715a      	strb	r2, [r3, #5]
				itfAssocDescriptor->bFunctionProtocol=bFunctionProtocol;
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	787a      	ldrb	r2, [r7, #1]
 80060d8:	719a      	strb	r2, [r3, #6]
				break;
 80060da:	e11a      	b.n	8006312 <USBD_COMPOSITE_RegisterClass+0x49a>
			case 0x04: // Interface descriptor
				if(descriptor_current[2]!=lastIfc){ // Check if same interface different configuration.
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	3302      	adds	r3, #2
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d023      	beq.n	8006132 <USBD_COMPOSITE_RegisterClass+0x2ba>
					lastIfc=descriptor_current[2];
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	789b      	ldrb	r3, [r3, #2]
 80060ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					descriptor_current[2]=itf_num++;
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	1c9a      	adds	r2, r3, #2
 80060f6:	4b1a      	ldr	r3, [pc, #104]	; (8006160 <USBD_COMPOSITE_RegisterClass+0x2e8>)
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	1c59      	adds	r1, r3, #1
 80060fc:	b2c8      	uxtb	r0, r1
 80060fe:	4918      	ldr	r1, [pc, #96]	; (8006160 <USBD_COMPOSITE_RegisterClass+0x2e8>)
 8006100:	7008      	strb	r0, [r1, #0]
 8006102:	7013      	strb	r3, [r2, #0]
					usbd_composite_class_data[usbd_composite_pClass_count].bInterfaces++;
 8006104:	4b13      	ldr	r3, [pc, #76]	; (8006154 <USBD_COMPOSITE_RegisterClass+0x2dc>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	461a      	mov	r2, r3
 800610a:	4913      	ldr	r1, [pc, #76]	; (8006158 <USBD_COMPOSITE_RegisterClass+0x2e0>)
 800610c:	4613      	mov	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	440b      	add	r3, r1
 8006116:	3303      	adds	r3, #3
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	3301      	adds	r3, #1
 800611c:	b2d8      	uxtb	r0, r3
 800611e:	490e      	ldr	r1, [pc, #56]	; (8006158 <USBD_COMPOSITE_RegisterClass+0x2e0>)
 8006120:	4613      	mov	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4413      	add	r3, r2
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	440b      	add	r3, r1
 800612a:	3303      	adds	r3, #3
 800612c:	4602      	mov	r2, r0
 800612e:	701a      	strb	r2, [r3, #0]
 8006130:	e0ef      	b.n	8006312 <USBD_COMPOSITE_RegisterClass+0x49a>
				} else {
					descriptor_current[2]=itf_num-1;
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	3302      	adds	r3, #2
 8006136:	4a0a      	ldr	r2, [pc, #40]	; (8006160 <USBD_COMPOSITE_RegisterClass+0x2e8>)
 8006138:	7812      	ldrb	r2, [r2, #0]
 800613a:	3a01      	subs	r2, #1
 800613c:	b2d2      	uxtb	r2, r2
 800613e:	701a      	strb	r2, [r3, #0]
				}
				break;
 8006140:	e0e7      	b.n	8006312 <USBD_COMPOSITE_RegisterClass+0x49a>
 8006142:	bf00      	nop
 8006144:	20001048 	.word	0x20001048
 8006148:	20000c48 	.word	0x20000c48
 800614c:	20000094 	.word	0x20000094
 8006150:	2000005c 	.word	0x2000005c
 8006154:	20000c46 	.word	0x20000c46
 8006158:	200067c0 	.word	0x200067c0
 800615c:	200000a0 	.word	0x200000a0
 8006160:	2000104a 	.word	0x2000104a
			case 0x05: // Endpoint descriptor
				if(descriptor_current[2] & 0x80) // Check if IN EP
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	3302      	adds	r3, #2
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	b25b      	sxtb	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	da51      	bge.n	8006214 <USBD_COMPOSITE_RegisterClass+0x39c>
				{
					usbd_composite_class_data[usbd_composite_pClass_count].inEPn[usbd_composite_class_data[usbd_composite_pClass_count].inEP]=descriptor_current[2] & 0x7F;
 8006170:	4b7e      	ldr	r3, [pc, #504]	; (800636c <USBD_COMPOSITE_RegisterClass+0x4f4>)
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	4619      	mov	r1, r3
 8006176:	4b7d      	ldr	r3, [pc, #500]	; (800636c <USBD_COMPOSITE_RegisterClass+0x4f4>)
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	4618      	mov	r0, r3
 800617c:	4a7c      	ldr	r2, [pc, #496]	; (8006370 <USBD_COMPOSITE_RegisterClass+0x4f8>)
 800617e:	4603      	mov	r3, r0
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4403      	add	r3, r0
 8006184:	011b      	lsls	r3, r3, #4
 8006186:	4413      	add	r3, r2
 8006188:	3310      	adds	r3, #16
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	461c      	mov	r4, r3
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	3302      	adds	r3, #2
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006198:	b2d8      	uxtb	r0, r3
 800619a:	4a75      	ldr	r2, [pc, #468]	; (8006370 <USBD_COMPOSITE_RegisterClass+0x4f8>)
 800619c:	460b      	mov	r3, r1
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	440b      	add	r3, r1
 80061a2:	011b      	lsls	r3, r3, #4
 80061a4:	4413      	add	r3, r2
 80061a6:	4423      	add	r3, r4
 80061a8:	3312      	adds	r3, #18
 80061aa:	4602      	mov	r2, r0
 80061ac:	701a      	strb	r2, [r3, #0]
//					usbd_composite_class_data[usbd_composite_pClass_count].inEPa[usbd_composite_class_data[usbd_composite_pClass_count].inEP++]=descriptor_current[2] & 0x7F;
//					inEP++;
					usbd_composite_class_data[usbd_composite_pClass_count].inEPa[usbd_composite_class_data[usbd_composite_pClass_count].inEP++]=inEP;
 80061ae:	4b6f      	ldr	r3, [pc, #444]	; (800636c <USBD_COMPOSITE_RegisterClass+0x4f4>)
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	461c      	mov	r4, r3
 80061b4:	4b6d      	ldr	r3, [pc, #436]	; (800636c <USBD_COMPOSITE_RegisterClass+0x4f4>)
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	461a      	mov	r2, r3
 80061ba:	496d      	ldr	r1, [pc, #436]	; (8006370 <USBD_COMPOSITE_RegisterClass+0x4f8>)
 80061bc:	4613      	mov	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	440b      	add	r3, r1
 80061c6:	3310      	adds	r3, #16
 80061c8:	7819      	ldrb	r1, [r3, #0]
 80061ca:	1c4b      	adds	r3, r1, #1
 80061cc:	b2dd      	uxtb	r5, r3
 80061ce:	4868      	ldr	r0, [pc, #416]	; (8006370 <USBD_COMPOSITE_RegisterClass+0x4f8>)
 80061d0:	4613      	mov	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	011b      	lsls	r3, r3, #4
 80061d8:	4403      	add	r3, r0
 80061da:	3310      	adds	r3, #16
 80061dc:	462a      	mov	r2, r5
 80061de:	701a      	strb	r2, [r3, #0]
 80061e0:	4608      	mov	r0, r1
 80061e2:	4b64      	ldr	r3, [pc, #400]	; (8006374 <USBD_COMPOSITE_RegisterClass+0x4fc>)
 80061e4:	7819      	ldrb	r1, [r3, #0]
 80061e6:	4a62      	ldr	r2, [pc, #392]	; (8006370 <USBD_COMPOSITE_RegisterClass+0x4f8>)
 80061e8:	4623      	mov	r3, r4
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4423      	add	r3, r4
 80061ee:	011b      	lsls	r3, r3, #4
 80061f0:	4413      	add	r3, r2
 80061f2:	4403      	add	r3, r0
 80061f4:	3330      	adds	r3, #48	; 0x30
 80061f6:	460a      	mov	r2, r1
 80061f8:	701a      	strb	r2, [r3, #0]
					descriptor_current[2]=inEP++ | 0x80;
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	1c9a      	adds	r2, r3, #2
 80061fe:	4b5d      	ldr	r3, [pc, #372]	; (8006374 <USBD_COMPOSITE_RegisterClass+0x4fc>)
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	1c59      	adds	r1, r3, #1
 8006204:	b2c8      	uxtb	r0, r1
 8006206:	495b      	ldr	r1, [pc, #364]	; (8006374 <USBD_COMPOSITE_RegisterClass+0x4fc>)
 8006208:	7008      	strb	r0, [r1, #0]
 800620a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800620e:	b2db      	uxtb	r3, r3
 8006210:	7013      	strb	r3, [r2, #0]
 8006212:	e07e      	b.n	8006312 <USBD_COMPOSITE_RegisterClass+0x49a>
				} else {
					usbd_composite_class_data[usbd_composite_pClass_count].outEPn[usbd_composite_class_data[usbd_composite_pClass_count].outEP]=descriptor_current[2] & 0x7F;
 8006214:	4b55      	ldr	r3, [pc, #340]	; (800636c <USBD_COMPOSITE_RegisterClass+0x4f4>)
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	4619      	mov	r1, r3
 800621a:	4b54      	ldr	r3, [pc, #336]	; (800636c <USBD_COMPOSITE_RegisterClass+0x4f4>)
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	4618      	mov	r0, r3
 8006220:	4a53      	ldr	r2, [pc, #332]	; (8006370 <USBD_COMPOSITE_RegisterClass+0x4f8>)
 8006222:	4603      	mov	r3, r0
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4403      	add	r3, r0
 8006228:	011b      	lsls	r3, r3, #4
 800622a:	4413      	add	r3, r2
 800622c:	3311      	adds	r3, #17
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	461c      	mov	r4, r3
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	3302      	adds	r3, #2
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800623c:	b2d8      	uxtb	r0, r3
 800623e:	4a4c      	ldr	r2, [pc, #304]	; (8006370 <USBD_COMPOSITE_RegisterClass+0x4f8>)
 8006240:	460b      	mov	r3, r1
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	440b      	add	r3, r1
 8006246:	011b      	lsls	r3, r3, #4
 8006248:	4413      	add	r3, r2
 800624a:	4423      	add	r3, r4
 800624c:	3321      	adds	r3, #33	; 0x21
 800624e:	4602      	mov	r2, r0
 8006250:	701a      	strb	r2, [r3, #0]
//					usbd_composite_class_data[usbd_composite_pClass_count].outEPa[usbd_composite_class_data[usbd_composite_pClass_count].outEP++]=descriptor_current[2] & 0x7F;
//					outEP++;
					usbd_composite_class_data[usbd_composite_pClass_count].outEPa[usbd_composite_class_data[usbd_composite_pClass_count].outEP++]=outEP;
 8006252:	4b46      	ldr	r3, [pc, #280]	; (800636c <USBD_COMPOSITE_RegisterClass+0x4f4>)
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	461c      	mov	r4, r3
 8006258:	4b44      	ldr	r3, [pc, #272]	; (800636c <USBD_COMPOSITE_RegisterClass+0x4f4>)
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	461a      	mov	r2, r3
 800625e:	4944      	ldr	r1, [pc, #272]	; (8006370 <USBD_COMPOSITE_RegisterClass+0x4f8>)
 8006260:	4613      	mov	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	011b      	lsls	r3, r3, #4
 8006268:	440b      	add	r3, r1
 800626a:	3311      	adds	r3, #17
 800626c:	7819      	ldrb	r1, [r3, #0]
 800626e:	1c4b      	adds	r3, r1, #1
 8006270:	b2dd      	uxtb	r5, r3
 8006272:	483f      	ldr	r0, [pc, #252]	; (8006370 <USBD_COMPOSITE_RegisterClass+0x4f8>)
 8006274:	4613      	mov	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	011b      	lsls	r3, r3, #4
 800627c:	4403      	add	r3, r0
 800627e:	3311      	adds	r3, #17
 8006280:	462a      	mov	r2, r5
 8006282:	701a      	strb	r2, [r3, #0]
 8006284:	4608      	mov	r0, r1
 8006286:	4b3c      	ldr	r3, [pc, #240]	; (8006378 <USBD_COMPOSITE_RegisterClass+0x500>)
 8006288:	7819      	ldrb	r1, [r3, #0]
 800628a:	4a39      	ldr	r2, [pc, #228]	; (8006370 <USBD_COMPOSITE_RegisterClass+0x4f8>)
 800628c:	4623      	mov	r3, r4
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4423      	add	r3, r4
 8006292:	011b      	lsls	r3, r3, #4
 8006294:	4413      	add	r3, r2
 8006296:	4403      	add	r3, r0
 8006298:	333f      	adds	r3, #63	; 0x3f
 800629a:	460a      	mov	r2, r1
 800629c:	701a      	strb	r2, [r3, #0]
					descriptor_current[2]=outEP++;
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	1c9a      	adds	r2, r3, #2
 80062a2:	4b35      	ldr	r3, [pc, #212]	; (8006378 <USBD_COMPOSITE_RegisterClass+0x500>)
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	1c59      	adds	r1, r3, #1
 80062a8:	b2c8      	uxtb	r0, r1
 80062aa:	4933      	ldr	r1, [pc, #204]	; (8006378 <USBD_COMPOSITE_RegisterClass+0x500>)
 80062ac:	7008      	strb	r0, [r1, #0]
 80062ae:	7013      	strb	r3, [r2, #0]
				}
				break;
 80062b0:	e02f      	b.n	8006312 <USBD_COMPOSITE_RegisterClass+0x49a>
			case 0x24: // CS Interface
				switch(descriptor_current[2]){
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	3302      	adds	r3, #2
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d002      	beq.n	80062c2 <USBD_COMPOSITE_RegisterClass+0x44a>
 80062bc:	2b06      	cmp	r3, #6
 80062be:	d00d      	beq.n	80062dc <USBD_COMPOSITE_RegisterClass+0x464>
 80062c0:	e025      	b.n	800630e <USBD_COMPOSITE_RegisterClass+0x496>
				case 0x01: //Check if Union Functional Descriptor
					descriptor_current[4]=itf_num-1+descriptor_current[4];
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	3304      	adds	r3, #4
 80062c6:	69ba      	ldr	r2, [r7, #24]
 80062c8:	3204      	adds	r2, #4
 80062ca:	7811      	ldrb	r1, [r2, #0]
 80062cc:	4a2b      	ldr	r2, [pc, #172]	; (800637c <USBD_COMPOSITE_RegisterClass+0x504>)
 80062ce:	7812      	ldrb	r2, [r2, #0]
 80062d0:	440a      	add	r2, r1
 80062d2:	b2d2      	uxtb	r2, r2
 80062d4:	3a01      	subs	r2, #1
 80062d6:	b2d2      	uxtb	r2, r2
 80062d8:	701a      	strb	r2, [r3, #0]
					break;
 80062da:	e018      	b.n	800630e <USBD_COMPOSITE_RegisterClass+0x496>
				case 0x06: //Check if Union Functional Descriptor
					descriptor_current[3]=itf_num-1+descriptor_current[3];
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	3303      	adds	r3, #3
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	3203      	adds	r2, #3
 80062e4:	7811      	ldrb	r1, [r2, #0]
 80062e6:	4a25      	ldr	r2, [pc, #148]	; (800637c <USBD_COMPOSITE_RegisterClass+0x504>)
 80062e8:	7812      	ldrb	r2, [r2, #0]
 80062ea:	440a      	add	r2, r1
 80062ec:	b2d2      	uxtb	r2, r2
 80062ee:	3a01      	subs	r2, #1
 80062f0:	b2d2      	uxtb	r2, r2
 80062f2:	701a      	strb	r2, [r3, #0]
					descriptor_current[4]=itf_num-1+descriptor_current[4];
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	3304      	adds	r3, #4
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	3204      	adds	r2, #4
 80062fc:	7811      	ldrb	r1, [r2, #0]
 80062fe:	4a1f      	ldr	r2, [pc, #124]	; (800637c <USBD_COMPOSITE_RegisterClass+0x504>)
 8006300:	7812      	ldrb	r2, [r2, #0]
 8006302:	440a      	add	r2, r1
 8006304:	b2d2      	uxtb	r2, r2
 8006306:	3a01      	subs	r2, #1
 8006308:	b2d2      	uxtb	r2, r2
 800630a:	701a      	strb	r2, [r3, #0]
					break;
 800630c:	bf00      	nop
				}
				break;
 800630e:	e000      	b.n	8006312 <USBD_COMPOSITE_RegisterClass+0x49a>
			default:
				break;
 8006310:	bf00      	nop
		while(descriptor_temp<descriptor_end){
 8006312:	6a3a      	ldr	r2, [r7, #32]
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	429a      	cmp	r2, r3
 8006318:	f4ff ae46 	bcc.w	8005fa8 <USBD_COMPOSITE_RegisterClass+0x130>
			}
		}

		descriptor[2]=LOBYTE(descriptor_size);		//Update Config Descritor Total Size
 800631c:	4b18      	ldr	r3, [pc, #96]	; (8006380 <USBD_COMPOSITE_RegisterClass+0x508>)
 800631e:	881b      	ldrh	r3, [r3, #0]
 8006320:	b2da      	uxtb	r2, r3
 8006322:	4b18      	ldr	r3, [pc, #96]	; (8006384 <USBD_COMPOSITE_RegisterClass+0x50c>)
 8006324:	709a      	strb	r2, [r3, #2]
		descriptor[3]=HIBYTE(descriptor_size);	//Update Config Descritor Total Size
 8006326:	4b16      	ldr	r3, [pc, #88]	; (8006380 <USBD_COMPOSITE_RegisterClass+0x508>)
 8006328:	881b      	ldrh	r3, [r3, #0]
 800632a:	0a1b      	lsrs	r3, r3, #8
 800632c:	b29b      	uxth	r3, r3
 800632e:	b2da      	uxtb	r2, r3
 8006330:	4b14      	ldr	r3, [pc, #80]	; (8006384 <USBD_COMPOSITE_RegisterClass+0x50c>)
 8006332:	70da      	strb	r2, [r3, #3]
		descriptor[4]=itf_num;			//Update the total interface count
 8006334:	4b11      	ldr	r3, [pc, #68]	; (800637c <USBD_COMPOSITE_RegisterClass+0x504>)
 8006336:	781a      	ldrb	r2, [r3, #0]
 8006338:	4b12      	ldr	r3, [pc, #72]	; (8006384 <USBD_COMPOSITE_RegisterClass+0x50c>)
 800633a:	711a      	strb	r2, [r3, #4]

		usbd_composite_pClass_count++;
 800633c:	4b0b      	ldr	r3, [pc, #44]	; (800636c <USBD_COMPOSITE_RegisterClass+0x4f4>)
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	3301      	adds	r3, #1
 8006342:	b2da      	uxtb	r2, r3
 8006344:	4b09      	ldr	r3, [pc, #36]	; (800636c <USBD_COMPOSITE_RegisterClass+0x4f4>)
 8006346:	701a      	strb	r2, [r3, #0]
		pdev->pClass = &USBD_COMPOSITE;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a0f      	ldr	r2, [pc, #60]	; (8006388 <USBD_COMPOSITE_RegisterClass+0x510>)
 800634c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

		status = USBD_OK;
 8006350:	2300      	movs	r3, #0
 8006352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	{
 8006356:	e002      	b.n	800635e <USBD_COMPOSITE_RegisterClass+0x4e6>
	}
	else
	{
		USBD_ErrLog("Invalid Class handle");
		status = USBD_FAIL;
 8006358:	2302      	movs	r3, #2
 800635a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return status;
 800635e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006362:	4618      	mov	r0, r3
 8006364:	3728      	adds	r7, #40	; 0x28
 8006366:	46bd      	mov	sp, r7
 8006368:	bdb0      	pop	{r4, r5, r7, pc}
 800636a:	bf00      	nop
 800636c:	20000c46 	.word	0x20000c46
 8006370:	200067c0 	.word	0x200067c0
 8006374:	2000004c 	.word	0x2000004c
 8006378:	2000004d 	.word	0x2000004d
 800637c:	2000104a 	.word	0x2000104a
 8006380:	20001048 	.word	0x20001048
 8006384:	20000c48 	.word	0x20000c48
 8006388:	2000005c 	.word	0x2000005c

0800638c <USBD_COMPOSITE_LL_EP_Conversion>:

uint8_t  USBD_COMPOSITE_LL_EP_Conversion  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr){
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	460b      	mov	r3, r1
 8006396:	70fb      	strb	r3, [r7, #3]
	uint8_t index=0;
 8006398:	2300      	movs	r3, #0
 800639a:	73fb      	strb	r3, [r7, #15]
	uint8_t i=0;
 800639c:	2300      	movs	r3, #0
 800639e:	73bb      	strb	r3, [r7, #14]
	if((ep_addr & 0x7f)==0){
 80063a0:	78fb      	ldrb	r3, [r7, #3]
 80063a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <USBD_COMPOSITE_LL_EP_Conversion+0x22>
		return ep_addr;
 80063aa:	78fb      	ldrb	r3, [r7, #3]
 80063ac:	e08b      	b.n	80064c6 <USBD_COMPOSITE_LL_EP_Conversion+0x13a>
	}
	for(index=0;index<usbd_composite_pClass_count;index++){
 80063ae:	2300      	movs	r3, #0
 80063b0:	73fb      	strb	r3, [r7, #15]
 80063b2:	e081      	b.n	80064b8 <USBD_COMPOSITE_LL_EP_Conversion+0x12c>
		if(pdev->pClassData==usbd_composite_class_data[index].pClassData && pdev->pUserData==usbd_composite_class_data[index].pUserData){
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
 80063ba:	7bfa      	ldrb	r2, [r7, #15]
 80063bc:	4845      	ldr	r0, [pc, #276]	; (80064d4 <USBD_COMPOSITE_LL_EP_Conversion+0x148>)
 80063be:	4613      	mov	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	011b      	lsls	r3, r3, #4
 80063c6:	4403      	add	r3, r0
 80063c8:	3308      	adds	r3, #8
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4299      	cmp	r1, r3
 80063ce:	d170      	bne.n	80064b2 <USBD_COMPOSITE_LL_EP_Conversion+0x126>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 80063d6:	7bfa      	ldrb	r2, [r7, #15]
 80063d8:	483e      	ldr	r0, [pc, #248]	; (80064d4 <USBD_COMPOSITE_LL_EP_Conversion+0x148>)
 80063da:	4613      	mov	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	011b      	lsls	r3, r3, #4
 80063e2:	4403      	add	r3, r0
 80063e4:	330c      	adds	r3, #12
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4299      	cmp	r1, r3
 80063ea:	d162      	bne.n	80064b2 <USBD_COMPOSITE_LL_EP_Conversion+0x126>
			if(ep_addr & 0x80){
 80063ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	da32      	bge.n	800645a <USBD_COMPOSITE_LL_EP_Conversion+0xce>
				for(i=0;i<usbd_composite_class_data[index].inEP;i++){
 80063f4:	2300      	movs	r3, #0
 80063f6:	73bb      	strb	r3, [r7, #14]
 80063f8:	e022      	b.n	8006440 <USBD_COMPOSITE_LL_EP_Conversion+0xb4>
					if(usbd_composite_class_data[index].inEPn[i]==(ep_addr & 0x7f)){
 80063fa:	7bfa      	ldrb	r2, [r7, #15]
 80063fc:	7bb9      	ldrb	r1, [r7, #14]
 80063fe:	4835      	ldr	r0, [pc, #212]	; (80064d4 <USBD_COMPOSITE_LL_EP_Conversion+0x148>)
 8006400:	4613      	mov	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4413      	add	r3, r2
 8006406:	011b      	lsls	r3, r3, #4
 8006408:	4403      	add	r3, r0
 800640a:	440b      	add	r3, r1
 800640c:	3312      	adds	r3, #18
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	461a      	mov	r2, r3
 8006412:	78fb      	ldrb	r3, [r7, #3]
 8006414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006418:	429a      	cmp	r2, r3
 800641a:	d10e      	bne.n	800643a <USBD_COMPOSITE_LL_EP_Conversion+0xae>
						return usbd_composite_class_data[index].inEPa[i] | 0x80;
 800641c:	7bfa      	ldrb	r2, [r7, #15]
 800641e:	7bb9      	ldrb	r1, [r7, #14]
 8006420:	482c      	ldr	r0, [pc, #176]	; (80064d4 <USBD_COMPOSITE_LL_EP_Conversion+0x148>)
 8006422:	4613      	mov	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4413      	add	r3, r2
 8006428:	011b      	lsls	r3, r3, #4
 800642a:	4403      	add	r3, r0
 800642c:	440b      	add	r3, r1
 800642e:	3330      	adds	r3, #48	; 0x30
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006436:	b2db      	uxtb	r3, r3
 8006438:	e045      	b.n	80064c6 <USBD_COMPOSITE_LL_EP_Conversion+0x13a>
				for(i=0;i<usbd_composite_class_data[index].inEP;i++){
 800643a:	7bbb      	ldrb	r3, [r7, #14]
 800643c:	3301      	adds	r3, #1
 800643e:	73bb      	strb	r3, [r7, #14]
 8006440:	7bfa      	ldrb	r2, [r7, #15]
 8006442:	4924      	ldr	r1, [pc, #144]	; (80064d4 <USBD_COMPOSITE_LL_EP_Conversion+0x148>)
 8006444:	4613      	mov	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	011b      	lsls	r3, r3, #4
 800644c:	440b      	add	r3, r1
 800644e:	3310      	adds	r3, #16
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	7bba      	ldrb	r2, [r7, #14]
 8006454:	429a      	cmp	r2, r3
 8006456:	d3d0      	bcc.n	80063fa <USBD_COMPOSITE_LL_EP_Conversion+0x6e>
 8006458:	e02b      	b.n	80064b2 <USBD_COMPOSITE_LL_EP_Conversion+0x126>
					}
				}
			} else {
				for(i=0;i<usbd_composite_class_data[index].outEP;i++){
 800645a:	2300      	movs	r3, #0
 800645c:	73bb      	strb	r3, [r7, #14]
 800645e:	e01c      	b.n	800649a <USBD_COMPOSITE_LL_EP_Conversion+0x10e>
					if(usbd_composite_class_data[index].outEPn[i]==ep_addr){
 8006460:	7bfa      	ldrb	r2, [r7, #15]
 8006462:	7bb9      	ldrb	r1, [r7, #14]
 8006464:	481b      	ldr	r0, [pc, #108]	; (80064d4 <USBD_COMPOSITE_LL_EP_Conversion+0x148>)
 8006466:	4613      	mov	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	011b      	lsls	r3, r3, #4
 800646e:	4403      	add	r3, r0
 8006470:	440b      	add	r3, r1
 8006472:	3321      	adds	r3, #33	; 0x21
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	78fa      	ldrb	r2, [r7, #3]
 8006478:	429a      	cmp	r2, r3
 800647a:	d10b      	bne.n	8006494 <USBD_COMPOSITE_LL_EP_Conversion+0x108>
						return usbd_composite_class_data[index].outEPa[i];
 800647c:	7bfa      	ldrb	r2, [r7, #15]
 800647e:	7bb9      	ldrb	r1, [r7, #14]
 8006480:	4814      	ldr	r0, [pc, #80]	; (80064d4 <USBD_COMPOSITE_LL_EP_Conversion+0x148>)
 8006482:	4613      	mov	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4413      	add	r3, r2
 8006488:	011b      	lsls	r3, r3, #4
 800648a:	4403      	add	r3, r0
 800648c:	440b      	add	r3, r1
 800648e:	333f      	adds	r3, #63	; 0x3f
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	e018      	b.n	80064c6 <USBD_COMPOSITE_LL_EP_Conversion+0x13a>
				for(i=0;i<usbd_composite_class_data[index].outEP;i++){
 8006494:	7bbb      	ldrb	r3, [r7, #14]
 8006496:	3301      	adds	r3, #1
 8006498:	73bb      	strb	r3, [r7, #14]
 800649a:	7bfa      	ldrb	r2, [r7, #15]
 800649c:	490d      	ldr	r1, [pc, #52]	; (80064d4 <USBD_COMPOSITE_LL_EP_Conversion+0x148>)
 800649e:	4613      	mov	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4413      	add	r3, r2
 80064a4:	011b      	lsls	r3, r3, #4
 80064a6:	440b      	add	r3, r1
 80064a8:	3311      	adds	r3, #17
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	7bba      	ldrb	r2, [r7, #14]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d3d6      	bcc.n	8006460 <USBD_COMPOSITE_LL_EP_Conversion+0xd4>
	for(index=0;index<usbd_composite_pClass_count;index++){
 80064b2:	7bfb      	ldrb	r3, [r7, #15]
 80064b4:	3301      	adds	r3, #1
 80064b6:	73fb      	strb	r3, [r7, #15]
 80064b8:	4b07      	ldr	r3, [pc, #28]	; (80064d8 <USBD_COMPOSITE_LL_EP_Conversion+0x14c>)
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	7bfa      	ldrb	r2, [r7, #15]
 80064be:	429a      	cmp	r2, r3
 80064c0:	f4ff af78 	bcc.w	80063b4 <USBD_COMPOSITE_LL_EP_Conversion+0x28>
					}
				}
			}
		}
	}
	return ep_addr;
 80064c4:	78fb      	ldrb	r3, [r7, #3]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	200067c0 	.word	0x200067c0
 80064d8:	20000c46 	.word	0x20000c46

080064dc <USBD_RNDIS_Init>:
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t  USBD_RNDIS_Init (USBD_HandleTypeDef *pdev,
		uint8_t cfgidx)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	460b      	mov	r3, r1
 80064e6:	70fb      	strb	r3, [r7, #3]
	uint8_t ret = 0;
 80064e8:	2300      	movs	r3, #0
 80064ea:	73fb      	strb	r3, [r7, #15]
	USBD_RNDIS_HandleTypeDef   *hrndis;

	if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	7c1b      	ldrb	r3, [r3, #16]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10e      	bne.n	8006512 <USBD_RNDIS_Init+0x36>
	{
		/* Open EP IN */
		USBD_LL_OpenEP(pdev,
 80064f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064f8:	2202      	movs	r2, #2
 80064fa:	2181      	movs	r1, #129	; 0x81
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f7fd fe75 	bl	80041ec <USBD_LL_OpenEP>
				RNDIS_IN_EP,
				USBD_EP_TYPE_BULK,
				RNDIS_DATA_HS_IN_PACKET_SIZE);

		/* Open EP OUT */
		USBD_LL_OpenEP(pdev,
 8006502:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006506:	2202      	movs	r2, #2
 8006508:	2101      	movs	r1, #1
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f7fd fe6e 	bl	80041ec <USBD_LL_OpenEP>
 8006510:	e00b      	b.n	800652a <USBD_RNDIS_Init+0x4e>

	}
	else
	{
		/* Open EP IN */
		USBD_LL_OpenEP(pdev,
 8006512:	2340      	movs	r3, #64	; 0x40
 8006514:	2202      	movs	r2, #2
 8006516:	2181      	movs	r1, #129	; 0x81
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f7fd fe67 	bl	80041ec <USBD_LL_OpenEP>
				RNDIS_IN_EP,
				USBD_EP_TYPE_BULK,
				RNDIS_DATA_FS_IN_PACKET_SIZE);

		/* Open EP OUT */
		USBD_LL_OpenEP(pdev,
 800651e:	2340      	movs	r3, #64	; 0x40
 8006520:	2202      	movs	r2, #2
 8006522:	2101      	movs	r1, #1
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7fd fe61 	bl	80041ec <USBD_LL_OpenEP>
				RNDIS_OUT_EP,
				USBD_EP_TYPE_BULK,
				RNDIS_DATA_FS_OUT_PACKET_SIZE);
	}
	/* Open Command IN EP */
	USBD_LL_OpenEP(pdev,
 800652a:	2308      	movs	r3, #8
 800652c:	2203      	movs	r2, #3
 800652e:	2182      	movs	r1, #130	; 0x82
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f7fd fe5b 	bl	80041ec <USBD_LL_OpenEP>
			RNDIS_CMD_EP,
			USBD_EP_TYPE_INTR,
			RNDIS_CMD_PACKET_SIZE);


	pdev->pClassData = USBD_malloc(sizeof (USBD_RNDIS_HandleTypeDef));
 8006536:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800653a:	f00a fd41 	bl	8010fc0 <malloc>
 800653e:	4603      	mov	r3, r0
 8006540:	461a      	mov	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	if(pdev->pClassData == NULL)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800654e:	2b00      	cmp	r3, #0
 8006550:	d102      	bne.n	8006558 <USBD_RNDIS_Init+0x7c>
	{
		ret = 1;
 8006552:	2301      	movs	r3, #1
 8006554:	73fb      	strb	r3, [r7, #15]
 8006556:	e026      	b.n	80065a6 <USBD_RNDIS_Init+0xca>
	}
	else
	{
		hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800655e:	60bb      	str	r3, [r7, #8]

		/* Init  physical Interface components */
		((USBD_RNDIS_ItfTypeDef *)pdev->pUserData)->Init();
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4798      	blx	r3

		/* Init Xfer states */
		hrndis->TxState =0;
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	2200      	movs	r2, #0
 800656e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
		hrndis->RxState =0;
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	2200      	movs	r2, #0
 8006576:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

		if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	7c1b      	ldrb	r3, [r3, #16]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d109      	bne.n	8006596 <USBD_RNDIS_Init+0xba>
		{
			/* Prepare Out endpoint to receive next packet */
			USBD_LL_PrepareReceive(pdev,
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006588:	f44f 7300 	mov.w	r3, #512	; 0x200
 800658c:	2101      	movs	r1, #1
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7fd ffbe 	bl	8004510 <USBD_LL_PrepareReceive>
 8006594:	e007      	b.n	80065a6 <USBD_RNDIS_Init+0xca>
					RNDIS_DATA_HS_OUT_PACKET_SIZE);
		}
		else
		{
			/* Prepare Out endpoint to receive next packet */
			USBD_LL_PrepareReceive(pdev,
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800659c:	2340      	movs	r3, #64	; 0x40
 800659e:	2101      	movs	r1, #1
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f7fd ffb5 	bl	8004510 <USBD_LL_PrepareReceive>
					RNDIS_DATA_FS_OUT_PACKET_SIZE);
		}


	}
	return ret;
 80065a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <USBD_RNDIS_DeInit>:
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t  USBD_RNDIS_DeInit (USBD_HandleTypeDef *pdev,
		uint8_t cfgidx)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	460b      	mov	r3, r1
 80065ba:	70fb      	strb	r3, [r7, #3]
	uint8_t ret = 0;
 80065bc:	2300      	movs	r3, #0
 80065be:	73fb      	strb	r3, [r7, #15]

	/* Open EP IN */
	USBD_LL_CloseEP(pdev,
 80065c0:	2181      	movs	r1, #129	; 0x81
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7fd fe56 	bl	8004274 <USBD_LL_CloseEP>
			RNDIS_IN_EP);

	/* Open EP OUT */
	USBD_LL_CloseEP(pdev,
 80065c8:	2101      	movs	r1, #1
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7fd fe52 	bl	8004274 <USBD_LL_CloseEP>
			RNDIS_OUT_EP);

	/* Open Command IN EP */
	USBD_LL_CloseEP(pdev,
 80065d0:	2182      	movs	r1, #130	; 0x82
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7fd fe4e 	bl	8004274 <USBD_LL_CloseEP>
			RNDIS_CMD_EP);


	/* DeInit  physical Interface components */
	if(pdev->pClassData != NULL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00e      	beq.n	8006600 <USBD_RNDIS_DeInit+0x50>
	{
		((USBD_RNDIS_ItfTypeDef *)pdev->pUserData)->DeInit();
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	4798      	blx	r3
		USBD_free(pdev->pClassData);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80065f2:	4618      	mov	r0, r3
 80065f4:	f00a fcec 	bl	8010fd0 <free>
		pdev->pClassData = NULL;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	}

	return ret;
 8006600:	7bfb      	ldrb	r3, [r7, #15]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
	...

0800660c <USBD_RNDIS_Setup>:
 * @param  pdev: instance
 * @param  req: usb requests
 * @retval status
 */
static uint8_t  USBD_RNDIS_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800661c:	60fb      	str	r3, [r7, #12]
	static uint8_t ifalt = 0;

	switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006626:	2b00      	cmp	r3, #0
 8006628:	d033      	beq.n	8006692 <USBD_RNDIS_Setup+0x86>
 800662a:	2b20      	cmp	r3, #32
 800662c:	d000      	beq.n	8006630 <USBD_RNDIS_Setup+0x24>
		case USB_REQ_SET_INTERFACE :
			break;
		}

		default:
			break;
 800662e:	e03c      	b.n	80066aa <USBD_RNDIS_Setup+0x9e>
		if (req->wLength)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	88db      	ldrh	r3, [r3, #6]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d022      	beq.n	800667e <USBD_RNDIS_Setup+0x72>
			if (req->bmRequest & 0x80)
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	b25b      	sxtb	r3, r3
 800663e:	2b00      	cmp	r3, #0
 8006640:	da0a      	bge.n	8006658 <USBD_RNDIS_Setup+0x4c>
				((USBD_RNDIS_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest, (uint8_t *)hrndis->data, req->wLength);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	683a      	ldr	r2, [r7, #0]
 800664c:	7850      	ldrb	r0, [r2, #1]
 800664e:	68f9      	ldr	r1, [r7, #12]
 8006650:	683a      	ldr	r2, [r7, #0]
 8006652:	88d2      	ldrh	r2, [r2, #6]
 8006654:	4798      	blx	r3
		break;
 8006656:	e029      	b.n	80066ac <USBD_RNDIS_Setup+0xa0>
				hrndis->CmdOpCode = req->bRequest;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	785a      	ldrb	r2, [r3, #1]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				hrndis->CmdLength = req->wLength;
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	88db      	ldrh	r3, [r3, #6]
 8006666:	b2da      	uxtb	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
				USBD_CtlPrepareRx (pdev, (uint8_t *)hrndis->data, req->wLength);
 800666e:	68f9      	ldr	r1, [r7, #12]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	88db      	ldrh	r3, [r3, #6]
 8006674:	461a      	mov	r2, r3
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f001 f884 	bl	8007784 <USBD_CtlPrepareRx>
		break;
 800667c:	e016      	b.n	80066ac <USBD_RNDIS_Setup+0xa0>
			((USBD_RNDIS_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest, (uint8_t*)req, 0);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	7850      	ldrb	r0, [r2, #1]
 800668a:	2200      	movs	r2, #0
 800668c:	6839      	ldr	r1, [r7, #0]
 800668e:	4798      	blx	r3
		break;
 8006690:	e00c      	b.n	80066ac <USBD_RNDIS_Setup+0xa0>
		switch (req->bRequest)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	785b      	ldrb	r3, [r3, #1]
 8006696:	2b0a      	cmp	r3, #10
 8006698:	d001      	beq.n	800669e <USBD_RNDIS_Setup+0x92>
 800669a:	2b0b      	cmp	r3, #11
			break;
 800669c:	e005      	b.n	80066aa <USBD_RNDIS_Setup+0x9e>
			USBD_CtlSendData (pdev, &ifalt, 1);
 800669e:	2201      	movs	r2, #1
 80066a0:	4905      	ldr	r1, [pc, #20]	; (80066b8 <USBD_RNDIS_Setup+0xac>)
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f001 f840 	bl	8007728 <USBD_CtlSendData>
			break;
 80066a8:	bf00      	nop
			break;
 80066aa:	bf00      	nop
	}
	return USBD_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	2000104b 	.word	0x2000104b

080066bc <USBD_RNDIS_DataIn>:
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t  USBD_RNDIS_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	460b      	mov	r3, r1
 80066c6:	70fb      	strb	r3, [r7, #3]
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80066ce:	60fb      	str	r3, [r7, #12]

	if(pdev->pClassData != NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d005      	beq.n	80066e6 <USBD_RNDIS_DataIn+0x2a>
	{

		hrndis->TxState = 0;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

		return USBD_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	e000      	b.n	80066e8 <USBD_RNDIS_DataIn+0x2c>
	}
	else
	{
		return USBD_FAIL;
 80066e6:	2302      	movs	r3, #2
	}
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <USBD_RNDIS_DataOut>:
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t  USBD_RNDIS_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	460b      	mov	r3, r1
 80066fe:	70fb      	strb	r3, [r7, #3]
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006706:	60fb      	str	r3, [r7, #12]

	/* Get the received data length */
	hrndis->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006708:	78fb      	ldrb	r3, [r7, #3]
 800670a:	4619      	mov	r1, r3
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f7fd ff41 	bl	8004594 <USBD_LL_GetRxDataSize>
 8006712:	4602      	mov	r2, r0
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
	if(pdev->pClassData != NULL)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00d      	beq.n	8006740 <USBD_RNDIS_DataOut+0x4c>
	{
		((USBD_RNDIS_ItfTypeDef *)pdev->pUserData)->Receive(hrndis->RxBuffer, &hrndis->RxLength);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006738:	4611      	mov	r1, r2
 800673a:	4798      	blx	r3

		return USBD_OK;
 800673c:	2300      	movs	r3, #0
 800673e:	e000      	b.n	8006742 <USBD_RNDIS_DataOut+0x4e>
	}
	else
	{
		return USBD_FAIL;
 8006740:	2302      	movs	r3, #2
	}
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <USBD_RNDIS_EP0_RxReady>:
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t  USBD_RNDIS_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b084      	sub	sp, #16
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006758:	60fb      	str	r3, [r7, #12]

	if((pdev->pUserData != NULL) && (hrndis->CmdOpCode != 0xFF))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006760:	2b00      	cmp	r3, #0
 8006762:	d015      	beq.n	8006790 <USBD_RNDIS_EP0_RxReady+0x46>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800676a:	2bff      	cmp	r3, #255	; 0xff
 800676c:	d010      	beq.n	8006790 <USBD_RNDIS_EP0_RxReady+0x46>
	{
		((USBD_RNDIS_ItfTypeDef *)pdev->pUserData)->Control(hrndis->CmdOpCode,
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
				(uint8_t *)hrndis->data,
 800677c:	68f9      	ldr	r1, [r7, #12]
				hrndis->CmdLength);
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
		((USBD_RNDIS_ItfTypeDef *)pdev->pUserData)->Control(hrndis->CmdOpCode,
 8006784:	b292      	uxth	r2, r2
 8006786:	4798      	blx	r3
		hrndis->CmdOpCode = 0xFF;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	22ff      	movs	r2, #255	; 0xff
 800678c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

	}
	return USBD_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
	...

0800679c <USBD_RNDIS_GetFSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t  *USBD_RNDIS_GetFSCfgDesc (uint16_t *length)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
	*length = sizeof (USBD_RNDIS_CfgFSDesc);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	223e      	movs	r2, #62	; 0x3e
 80067a8:	801a      	strh	r2, [r3, #0]
	return USBD_RNDIS_CfgFSDesc;
 80067aa:	4b03      	ldr	r3, [pc, #12]	; (80067b8 <USBD_RNDIS_GetFSCfgDesc+0x1c>)
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr
 80067b8:	2000012c 	.word	0x2000012c

080067bc <USBD_RNDIS_GetHSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t  *USBD_RNDIS_GetHSCfgDesc (uint16_t *length)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
	*length = sizeof (USBD_RNDIS_CfgHSDesc);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	223e      	movs	r2, #62	; 0x3e
 80067c8:	801a      	strh	r2, [r3, #0]
	return USBD_RNDIS_CfgHSDesc;
 80067ca:	4b03      	ldr	r3, [pc, #12]	; (80067d8 <USBD_RNDIS_GetHSCfgDesc+0x1c>)
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr
 80067d8:	200000ec 	.word	0x200000ec

080067dc <USBD_RNDIS_GetOtherSpeedCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t  *USBD_RNDIS_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
	*length = sizeof (USBD_RNDIS_OtherSpeedCfgDesc);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	223e      	movs	r2, #62	; 0x3e
 80067e8:	801a      	strh	r2, [r3, #0]
	return USBD_RNDIS_OtherSpeedCfgDesc;
 80067ea:	4b03      	ldr	r3, [pc, #12]	; (80067f8 <USBD_RNDIS_GetOtherSpeedCfgDesc+0x1c>)
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr
 80067f8:	2000016c 	.word	0x2000016c

080067fc <USBD_RNDIS_GetDeviceQualifierDescriptor>:
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
uint8_t  *USBD_RNDIS_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
	*length = sizeof (USBD_RNDIS_DeviceQualifierDesc);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	220a      	movs	r2, #10
 8006808:	801a      	strh	r2, [r3, #0]
	return USBD_RNDIS_DeviceQualifierDesc;
 800680a:	4b03      	ldr	r3, [pc, #12]	; (8006818 <USBD_RNDIS_GetDeviceQualifierDescriptor+0x1c>)
}
 800680c:	4618      	mov	r0, r3
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	200000a8 	.word	0x200000a8

0800681c <USBD_RNDIS_RegisterInterface>:
 * @param  fops: CD  Interface callback
 * @retval status
 */
uint8_t  USBD_RNDIS_RegisterInterface  (USBD_HandleTypeDef   *pdev,
		USBD_RNDIS_ItfTypeDef *fops)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
	uint8_t  ret = USBD_FAIL;
 8006826:	2302      	movs	r3, #2
 8006828:	73fb      	strb	r3, [r7, #15]

	if(fops != NULL)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d005      	beq.n	800683c <USBD_RNDIS_RegisterInterface+0x20>
	{
		pdev->pUserData= fops;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
		ret = USBD_OK;
 8006838:	2300      	movs	r3, #0
 800683a:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 800683c:	7bfb      	ldrb	r3, [r7, #15]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3714      	adds	r7, #20
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <USBD_RNDIS_SetTxBuffer>:
 * @retval status
 */
uint8_t  USBD_RNDIS_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
		uint8_t  *pbuff,
		uint16_t length)
{
 800684a:	b480      	push	{r7}
 800684c:	b087      	sub	sp, #28
 800684e:	af00      	add	r7, sp, #0
 8006850:	60f8      	str	r0, [r7, #12]
 8006852:	60b9      	str	r1, [r7, #8]
 8006854:	4613      	mov	r3, r2
 8006856:	80fb      	strh	r3, [r7, #6]
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800685e:	617b      	str	r3, [r7, #20]

	hrndis->TxBuffer = pbuff;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	hrndis->TxLength = length;
 8006868:	88fa      	ldrh	r2, [r7, #6]
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	return USBD_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	371c      	adds	r7, #28
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <USBD_RNDIS_SetRxBuffer>:
 * @param  pbuff: Rx Buffer
 * @retval status
 */
uint8_t  USBD_RNDIS_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
		uint8_t  *pbuff)
{
 800687e:	b480      	push	{r7}
 8006880:	b085      	sub	sp, #20
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	6039      	str	r1, [r7, #0]
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800688e:	60fb      	str	r3, [r7, #12]

	hrndis->RxBuffer = pbuff;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

	return USBD_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <USBD_RNDIS_TransmitPacket>:
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
uint8_t  USBD_RNDIS_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b084      	sub	sp, #16
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80068b4:	60fb      	str	r3, [r7, #12]

	if(pdev->pClassData != NULL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d017      	beq.n	80068f0 <USBD_RNDIS_TransmitPacket+0x4a>
	{
		if(hrndis->TxState == 0)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d110      	bne.n	80068ec <USBD_RNDIS_TransmitPacket+0x46>
		{
			/* Tx Transfer in progress */
			hrndis->TxState = 1;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

			/* Transmit next packet */
			USBD_LL_Transmit(pdev,
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
					RNDIS_IN_EP,
					hrndis->TxBuffer,
					hrndis->TxLength);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
			USBD_LL_Transmit(pdev,
 80068de:	b29b      	uxth	r3, r3
 80068e0:	2181      	movs	r1, #129	; 0x81
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7fd fdd2 	bl	800448c <USBD_LL_Transmit>

			return USBD_OK;
 80068e8:	2300      	movs	r3, #0
 80068ea:	e002      	b.n	80068f2 <USBD_RNDIS_TransmitPacket+0x4c>
		}
		else
		{
			return USBD_BUSY;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e000      	b.n	80068f2 <USBD_RNDIS_TransmitPacket+0x4c>
		}
	}
	else
	{
		return USBD_FAIL;
 80068f0:	2302      	movs	r3, #2
	}
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <USBD_RNDIS_ReceivePacket>:
 *         prepare OUT Endpoint for reception
 * @param  pdev: device instance
 * @retval status
 */
uint8_t  USBD_RNDIS_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b084      	sub	sp, #16
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006908:	60fb      	str	r3, [r7, #12]

	/* Suspend or Resume USB Out process */
	if(pdev->pClassData != NULL)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006910:	2b00      	cmp	r3, #0
 8006912:	d017      	beq.n	8006944 <USBD_RNDIS_ReceivePacket+0x4a>
	{
		if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	7c1b      	ldrb	r3, [r3, #16]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d109      	bne.n	8006930 <USBD_RNDIS_ReceivePacket+0x36>
		{
			/* Prepare Out endpoint to receive next packet */
			USBD_LL_PrepareReceive(pdev,
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006922:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006926:	2101      	movs	r1, #1
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7fd fdf1 	bl	8004510 <USBD_LL_PrepareReceive>
 800692e:	e007      	b.n	8006940 <USBD_RNDIS_ReceivePacket+0x46>
					RNDIS_DATA_HS_OUT_PACKET_SIZE);
		}
		else
		{
			/* Prepare Out endpoint to receive next packet */
			USBD_LL_PrepareReceive(pdev,
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006936:	2340      	movs	r3, #64	; 0x40
 8006938:	2101      	movs	r1, #1
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7fd fde8 	bl	8004510 <USBD_LL_PrepareReceive>
					RNDIS_OUT_EP,
					hrndis->RxBuffer,
					RNDIS_DATA_FS_OUT_PACKET_SIZE);
		}
		return USBD_OK;
 8006940:	2300      	movs	r3, #0
 8006942:	e000      	b.n	8006946 <USBD_RNDIS_ReceivePacket+0x4c>
	}
	else
	{
		return USBD_FAIL;
 8006944:	2302      	movs	r3, #2
	}
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <USBD_RNDIS_TransmitControl>:
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
uint8_t  USBD_RNDIS_TransmitControl(USBD_HandleTypeDef *pdev, uint8_t *buff, uint16_t length)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b084      	sub	sp, #16
 8006952:	af00      	add	r7, sp, #0
 8006954:	60f8      	str	r0, [r7, #12]
 8006956:	60b9      	str	r1, [r7, #8]
 8006958:	4613      	mov	r3, r2
 800695a:	80fb      	strh	r3, [r7, #6]
//		{
//			/* Tx Transfer in progress */
//			hrndis->TxState = 1;
//
//			/* Transmit next packet */
			USBD_LL_Transmit(pdev, RNDIS_CMD_EP, buff, length);
 800695c:	88fb      	ldrh	r3, [r7, #6]
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	2182      	movs	r1, #130	; 0x82
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f7fd fd92 	bl	800448c <USBD_LL_Transmit>

			return USBD_OK;
 8006968:	2300      	movs	r3, #0
//	}
//	else
//	{
//		return USBD_FAIL;
//	}
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b084      	sub	sp, #16
 8006976:	af00      	add	r7, sp, #0
 8006978:	60f8      	str	r0, [r7, #12]
 800697a:	60b9      	str	r1, [r7, #8]
 800697c:	4613      	mov	r3, r2
 800697e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8006986:	2302      	movs	r3, #2
 8006988:	e01a      	b.n	80069c0 <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006990:	2b00      	cmp	r3, #0
 8006992:	d003      	beq.n	800699c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	79fa      	ldrb	r2, [r7, #7]
 80069b6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f7fd fb87 	bl	80040cc <USBD_LL_Init>
  
  return USBD_OK; 
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80069d2:	2300      	movs	r3, #0
 80069d4:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d006      	beq.n	80069ea <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 80069e4:	2300      	movs	r3, #0
 80069e6:	73fb      	strb	r3, [r7, #15]
 80069e8:	e001      	b.n	80069ee <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 80069ea:	2302      	movs	r3, #2
 80069ec:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80069ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3714      	adds	r7, #20
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f7fd fbbf 	bl	8004188 <USBD_LL_Start>
  
  return USBD_OK;  
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	460b      	mov	r3, r1
 8006a34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8006a36:	2302      	movs	r3, #2
 8006a38:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00c      	beq.n	8006a5e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	78fa      	ldrb	r2, [r7, #3]
 8006a4e:	4611      	mov	r1, r2
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	4798      	blx	r3
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8006a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	460b      	mov	r3, r1
 8006a72:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	78fa      	ldrb	r2, [r7, #3]
 8006a7e:	4611      	mov	r1, r2
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	4798      	blx	r3
  return USBD_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3708      	adds	r7, #8
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b082      	sub	sp, #8
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
 8006a96:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006a9e:	6839      	ldr	r1, [r7, #0]
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f000 fd98 	bl	80075d6 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8006ac2:	f003 031f 	and.w	r3, r3, #31
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d00b      	beq.n	8006ae2 <USBD_LL_SetupStage+0x54>
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d011      	beq.n	8006af2 <USBD_LL_SetupStage+0x64>
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d117      	bne.n	8006b02 <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006ad8:	4619      	mov	r1, r3
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f9c6 	bl	8006e6c <USBD_StdDevReq>
    break;
 8006ae0:	e01a      	b.n	8006b18 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006ae8:	4619      	mov	r1, r3
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 fa0e 	bl	8006f0c <USBD_StdItfReq>
    break;
 8006af0:	e012      	b.n	8006b18 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fa39 	bl	8006f72 <USBD_StdEPReq>
    break;
 8006b00:	e00a      	b.n	8006b18 <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8006b08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	4619      	mov	r1, r3
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f7fd fbed 	bl	80042f0 <USBD_LL_StallEP>
    break;
 8006b16:	bf00      	nop
  }  
  return USBD_OK;  
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b086      	sub	sp, #24
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	60f8      	str	r0, [r7, #12]
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	607a      	str	r2, [r7, #4]
 8006b2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8006b30:	7afb      	ldrb	r3, [r7, #11]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d138      	bne.n	8006ba8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8006b3c:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8006b44:	2b03      	cmp	r3, #3
 8006b46:	d142      	bne.n	8006bce <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d914      	bls.n	8006b7e <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	689a      	ldr	r2, [r3, #8]
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	1ad2      	subs	r2, r2, r3
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	68da      	ldr	r2, [r3, #12]
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	bf28      	it	cs
 8006b6e:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	461a      	mov	r2, r3
 8006b74:	6879      	ldr	r1, [r7, #4]
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f000 fe22 	bl	80077c0 <USBD_CtlContinueRx>
 8006b7c:	e027      	b.n	8006bce <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00a      	beq.n	8006ba0 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006b90:	2b03      	cmp	r3, #3
 8006b92:	d105      	bne.n	8006ba0 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 fe1f 	bl	80077e4 <USBD_CtlSendStatus>
 8006ba6:	e012      	b.n	8006bce <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00c      	beq.n	8006bce <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 8006bba:	2b03      	cmp	r3, #3
 8006bbc:	d107      	bne.n	8006bce <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	7afa      	ldrb	r2, [r7, #11]
 8006bc8:	4611      	mov	r1, r2
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	4798      	blx	r3
  }  
  return USBD_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3718      	adds	r7, #24
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	460b      	mov	r3, r1
 8006be2:	607a      	str	r2, [r7, #4]
 8006be4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8006be6:	7afb      	ldrb	r3, [r7, #11]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d16c      	bne.n	8006cc6 <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	3314      	adds	r3, #20
 8006bf0:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d157      	bne.n	8006cac <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	689a      	ldr	r2, [r3, #8]
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d915      	bls.n	8006c34 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	689a      	ldr	r2, [r3, #8]
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	1ad2      	subs	r2, r2, r3
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	6879      	ldr	r1, [r7, #4]
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f000 fd9d 	bl	8007760 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8006c26:	2300      	movs	r3, #0
 8006c28:	2200      	movs	r2, #0
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f7fd fc6f 	bl	8004510 <USBD_LL_PrepareReceive>
 8006c32:	e03b      	b.n	8006cac <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	68d2      	ldr	r2, [r2, #12]
 8006c3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c40:	fb02 f201 	mul.w	r2, r2, r1
 8006c44:	1a9b      	subs	r3, r3, r2
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d11c      	bne.n	8006c84 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d316      	bcc.n	8006c84 <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d20f      	bcs.n	8006c84 <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8006c64:	2200      	movs	r2, #0
 8006c66:	2100      	movs	r1, #0
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f000 fd79 	bl	8007760 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8006c76:	2300      	movs	r3, #0
 8006c78:	2200      	movs	r2, #0
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f7fd fc47 	bl	8004510 <USBD_LL_PrepareReceive>
 8006c82:	e013      	b.n	8006cac <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00a      	beq.n	8006ca6 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	d105      	bne.n	8006ca6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f000 fdaf 	bl	800780a <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d11a      	bne.n	8006cec <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f7ff feac 	bl	8006a14 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8006cc4:	e012      	b.n	8006cec <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00c      	beq.n	8006cec <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8006cd8:	2b03      	cmp	r3, #3
 8006cda:	d107      	bne.n	8006cec <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	7afa      	ldrb	r2, [r7, #11]
 8006ce6:	4611      	mov	r1, r2
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	4798      	blx	r3
  }  
  return USBD_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3718      	adds	r7, #24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b082      	sub	sp, #8
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8006cfe:	2340      	movs	r3, #64	; 0x40
 8006d00:	2200      	movs	r2, #0
 8006d02:	2100      	movs	r1, #0
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f7fd fa71 	bl	80041ec <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2240      	movs	r2, #64	; 0x40
 8006d0e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8006d12:	2340      	movs	r3, #64	; 0x40
 8006d14:	2200      	movs	r2, #0
 8006d16:	2180      	movs	r1, #128	; 0x80
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f7fd fa67 	bl	80041ec <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2240      	movs	r2, #64	; 0x40
 8006d22:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d009      	beq.n	8006d4a <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	6852      	ldr	r2, [r2, #4]
 8006d42:	b2d2      	uxtb	r2, r2
 8006d44:	4611      	mov	r1, r2
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	4798      	blx	r3
 
  
  return USBD_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3708      	adds	r7, #8
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	78fa      	ldrb	r2, [r7, #3]
 8006d64:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2204      	movs	r2, #4
 8006d8c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b083      	sub	sp, #12
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006dce:	2b03      	cmp	r3, #3
 8006dd0:	d10b      	bne.n	8006dea <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006dd8:	69db      	ldr	r3, [r3, #28]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d005      	beq.n	8006dea <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3708      	adds	r7, #8
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b083      	sub	sp, #12
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
 8006e16:	460b      	mov	r3, r1
 8006e18:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	370c      	adds	r7, #12
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b082      	sub	sp, #8
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	6852      	ldr	r2, [r2, #4]
 8006e5a:	b2d2      	uxtb	r2, r2
 8006e5c:	4611      	mov	r1, r2
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	4798      	blx	r3
   
  return USBD_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3708      	adds	r7, #8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8006e76:	2300      	movs	r3, #0
 8006e78:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	785b      	ldrb	r3, [r3, #1]
 8006e7e:	2b09      	cmp	r3, #9
 8006e80:	d839      	bhi.n	8006ef6 <USBD_StdDevReq+0x8a>
 8006e82:	a201      	add	r2, pc, #4	; (adr r2, 8006e88 <USBD_StdDevReq+0x1c>)
 8006e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e88:	08006ed9 	.word	0x08006ed9
 8006e8c:	08006eed 	.word	0x08006eed
 8006e90:	08006ef7 	.word	0x08006ef7
 8006e94:	08006ee3 	.word	0x08006ee3
 8006e98:	08006ef7 	.word	0x08006ef7
 8006e9c:	08006ebb 	.word	0x08006ebb
 8006ea0:	08006eb1 	.word	0x08006eb1
 8006ea4:	08006ef7 	.word	0x08006ef7
 8006ea8:	08006ecf 	.word	0x08006ecf
 8006eac:	08006ec5 	.word	0x08006ec5
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f936 	bl	8007124 <USBD_GetDescriptor>
    break;
 8006eb8:	e022      	b.n	8006f00 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8006eba:	6839      	ldr	r1, [r7, #0]
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 fa25 	bl	800730c <USBD_SetAddress>
    break;
 8006ec2:	e01d      	b.n	8006f00 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8006ec4:	6839      	ldr	r1, [r7, #0]
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fa5e 	bl	8007388 <USBD_SetConfig>
    break;
 8006ecc:	e018      	b.n	8006f00 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8006ece:	6839      	ldr	r1, [r7, #0]
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fae1 	bl	8007498 <USBD_GetConfig>
    break;
 8006ed6:	e013      	b.n	8006f00 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fb0e 	bl	80074fc <USBD_GetStatus>
    break;
 8006ee0:	e00e      	b.n	8006f00 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8006ee2:	6839      	ldr	r1, [r7, #0]
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 fb33 	bl	8007550 <USBD_SetFeature>
    break;
 8006eea:	e009      	b.n	8006f00 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8006eec:	6839      	ldr	r1, [r7, #0]
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fb49 	bl	8007586 <USBD_ClrFeature>
    break;
 8006ef4:	e004      	b.n	8006f00 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8006ef6:	6839      	ldr	r1, [r7, #0]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fba9 	bl	8007650 <USBD_CtlError>
    break;
 8006efe:	bf00      	nop
  }
  
  return ret;
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop

08006f0c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 8006f16:	2300      	movs	r3, #0
 8006f18:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006f20:	2b03      	cmp	r3, #3
 8006f22:	d11b      	bne.n	8006f5c <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	889b      	ldrh	r3, [r3, #4]
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	2b04      	cmp	r3, #4
 8006f2c:	d811      	bhi.n	8006f52 <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	6839      	ldr	r1, [r7, #0]
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	88db      	ldrh	r3, [r3, #6]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d110      	bne.n	8006f66 <USBD_StdItfReq+0x5a>
 8006f44:	7bfb      	ldrb	r3, [r7, #15]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10d      	bne.n	8006f66 <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fc4a 	bl	80077e4 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8006f50:	e009      	b.n	8006f66 <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fb7b 	bl	8007650 <USBD_CtlError>
    break;
 8006f5a:	e004      	b.n	8006f66 <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fb76 	bl	8007650 <USBD_CtlError>
    break;
 8006f64:	e000      	b.n	8006f68 <USBD_StdItfReq+0x5c>
    break;
 8006f66:	bf00      	nop
  }
  return USBD_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b084      	sub	sp, #16
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
 8006f7a:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	889b      	ldrh	r3, [r3, #4]
 8006f84:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f8e:	2b20      	cmp	r3, #32
 8006f90:	d108      	bne.n	8006fa4 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	6839      	ldr	r1, [r7, #0]
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	4798      	blx	r3
    
    return USBD_OK;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	e0ba      	b.n	800711a <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	785b      	ldrb	r3, [r3, #1]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d039      	beq.n	8007020 <USBD_StdEPReq+0xae>
 8006fac:	2b03      	cmp	r3, #3
 8006fae:	d002      	beq.n	8006fb6 <USBD_StdEPReq+0x44>
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d06b      	beq.n	800708c <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 8006fb4:	e0b0      	b.n	8007118 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d002      	beq.n	8006fc6 <USBD_StdEPReq+0x54>
 8006fc0:	2b03      	cmp	r3, #3
 8006fc2:	d00c      	beq.n	8006fde <USBD_StdEPReq+0x6c>
 8006fc4:	e025      	b.n	8007012 <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8006fc6:	7bbb      	ldrb	r3, [r7, #14]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d027      	beq.n	800701c <USBD_StdEPReq+0xaa>
 8006fcc:	7bbb      	ldrb	r3, [r7, #14]
 8006fce:	2b80      	cmp	r3, #128	; 0x80
 8006fd0:	d024      	beq.n	800701c <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 8006fd2:	7bbb      	ldrb	r3, [r7, #14]
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f7fd f98a 	bl	80042f0 <USBD_LL_StallEP>
      break;	
 8006fdc:	e01e      	b.n	800701c <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	885b      	ldrh	r3, [r3, #2]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10a      	bne.n	8006ffc <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8006fe6:	7bbb      	ldrb	r3, [r7, #14]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d007      	beq.n	8006ffc <USBD_StdEPReq+0x8a>
 8006fec:	7bbb      	ldrb	r3, [r7, #14]
 8006fee:	2b80      	cmp	r3, #128	; 0x80
 8006ff0:	d004      	beq.n	8006ffc <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 8006ff2:	7bbb      	ldrb	r3, [r7, #14]
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f7fd f97a 	bl	80042f0 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	6839      	ldr	r1, [r7, #0]
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fbea 	bl	80077e4 <USBD_CtlSendStatus>
      break;
 8007010:	e005      	b.n	800701e <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 8007012:	6839      	ldr	r1, [r7, #0]
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 fb1b 	bl	8007650 <USBD_CtlError>
      break;    
 800701a:	e000      	b.n	800701e <USBD_StdEPReq+0xac>
      break;	
 800701c:	bf00      	nop
    break;
 800701e:	e07b      	b.n	8007118 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8007026:	2b02      	cmp	r3, #2
 8007028:	d002      	beq.n	8007030 <USBD_StdEPReq+0xbe>
 800702a:	2b03      	cmp	r3, #3
 800702c:	d00c      	beq.n	8007048 <USBD_StdEPReq+0xd6>
 800702e:	e024      	b.n	800707a <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8007030:	7bbb      	ldrb	r3, [r7, #14]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d026      	beq.n	8007084 <USBD_StdEPReq+0x112>
 8007036:	7bbb      	ldrb	r3, [r7, #14]
 8007038:	2b80      	cmp	r3, #128	; 0x80
 800703a:	d023      	beq.n	8007084 <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 800703c:	7bbb      	ldrb	r3, [r7, #14]
 800703e:	4619      	mov	r1, r3
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f7fd f955 	bl	80042f0 <USBD_LL_StallEP>
      break;	
 8007046:	e01d      	b.n	8007084 <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	885b      	ldrh	r3, [r3, #2]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d11b      	bne.n	8007088 <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 8007050:	7bbb      	ldrb	r3, [r7, #14]
 8007052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00b      	beq.n	8007072 <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800705a:	7bbb      	ldrb	r3, [r7, #14]
 800705c:	4619      	mov	r1, r3
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f7fd f97c 	bl	800435c <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	6839      	ldr	r1, [r7, #0]
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fbb6 	bl	80077e4 <USBD_CtlSendStatus>
      break;
 8007078:	e006      	b.n	8007088 <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 800707a:	6839      	ldr	r1, [r7, #0]
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fae7 	bl	8007650 <USBD_CtlError>
      break;    
 8007082:	e002      	b.n	800708a <USBD_StdEPReq+0x118>
      break;	
 8007084:	bf00      	nop
 8007086:	e047      	b.n	8007118 <USBD_StdEPReq+0x1a6>
      break;
 8007088:	bf00      	nop
    break;
 800708a:	e045      	b.n	8007118 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8007092:	2b02      	cmp	r3, #2
 8007094:	d002      	beq.n	800709c <USBD_StdEPReq+0x12a>
 8007096:	2b03      	cmp	r3, #3
 8007098:	d00b      	beq.n	80070b2 <USBD_StdEPReq+0x140>
 800709a:	e036      	b.n	800710a <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 800709c:	7bbb      	ldrb	r3, [r7, #14]
 800709e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d036      	beq.n	8007114 <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 80070a6:	7bbb      	ldrb	r3, [r7, #14]
 80070a8:	4619      	mov	r1, r3
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f7fd f920 	bl	80042f0 <USBD_LL_StallEP>
      break;	
 80070b0:	e030      	b.n	8007114 <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80070b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	da08      	bge.n	80070cc <USBD_StdEPReq+0x15a>
 80070ba:	7bbb      	ldrb	r3, [r7, #14]
 80070bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070c0:	3301      	adds	r3, #1
 80070c2:	011b      	lsls	r3, r3, #4
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	4413      	add	r3, r2
 80070c8:	3304      	adds	r3, #4
 80070ca:	e007      	b.n	80070dc <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 80070cc:	7bbb      	ldrb	r3, [r7, #14]
 80070ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80070d2:	3310      	adds	r3, #16
 80070d4:	011b      	lsls	r3, r3, #4
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	4413      	add	r3, r2
 80070da:	3304      	adds	r3, #4
 80070dc:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80070de:	7bbb      	ldrb	r3, [r7, #14]
 80070e0:	4619      	mov	r1, r3
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f7fd f970 	bl	80043c8 <USBD_LL_IsStallEP>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d003      	beq.n	80070f6 <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	2201      	movs	r2, #1
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	e002      	b.n	80070fc <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	2200      	movs	r2, #0
 80070fa:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 80070fc:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 80070fe:	2202      	movs	r2, #2
 8007100:	4619      	mov	r1, r3
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fb10 	bl	8007728 <USBD_CtlSendData>
      break;
 8007108:	e005      	b.n	8007116 <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 800710a:	6839      	ldr	r1, [r7, #0]
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fa9f 	bl	8007650 <USBD_CtlError>
      break;
 8007112:	e000      	b.n	8007116 <USBD_StdEPReq+0x1a4>
      break;	
 8007114:	bf00      	nop
    break;
 8007116:	bf00      	nop
  }
  return ret;
 8007118:	7bfb      	ldrb	r3, [r7, #15]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
	...

08007124 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	885b      	ldrh	r3, [r3, #2]
 8007132:	0a1b      	lsrs	r3, r3, #8
 8007134:	b29b      	uxth	r3, r3
 8007136:	3b01      	subs	r3, #1
 8007138:	2b06      	cmp	r3, #6
 800713a:	f200 80c9 	bhi.w	80072d0 <USBD_GetDescriptor+0x1ac>
 800713e:	a201      	add	r2, pc, #4	; (adr r2, 8007144 <USBD_GetDescriptor+0x20>)
 8007140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007144:	08007161 	.word	0x08007161
 8007148:	08007179 	.word	0x08007179
 800714c:	080071b9 	.word	0x080071b9
 8007150:	080072d1 	.word	0x080072d1
 8007154:	080072d1 	.word	0x080072d1
 8007158:	0800727d 	.word	0x0800727d
 800715c:	080072a3 	.word	0x080072a3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	7c12      	ldrb	r2, [r2, #16]
 800716c:	f107 010a 	add.w	r1, r7, #10
 8007170:	4610      	mov	r0, r2
 8007172:	4798      	blx	r3
 8007174:	60f8      	str	r0, [r7, #12]
    break;
 8007176:	e0b0      	b.n	80072da <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	7c1b      	ldrb	r3, [r3, #16]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10d      	bne.n	800719c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007188:	f107 020a 	add.w	r2, r7, #10
 800718c:	4610      	mov	r0, r2
 800718e:	4798      	blx	r3
 8007190:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	3301      	adds	r3, #1
 8007196:	2202      	movs	r2, #2
 8007198:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800719a:	e09e      	b.n	80072da <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80071a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a4:	f107 020a 	add.w	r2, r7, #10
 80071a8:	4610      	mov	r0, r2
 80071aa:	4798      	blx	r3
 80071ac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	3301      	adds	r3, #1
 80071b2:	2202      	movs	r2, #2
 80071b4:	701a      	strb	r2, [r3, #0]
    break;
 80071b6:	e090      	b.n	80072da <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	885b      	ldrh	r3, [r3, #2]
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	2b05      	cmp	r3, #5
 80071c0:	d856      	bhi.n	8007270 <USBD_GetDescriptor+0x14c>
 80071c2:	a201      	add	r2, pc, #4	; (adr r2, 80071c8 <USBD_GetDescriptor+0xa4>)
 80071c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c8:	080071e1 	.word	0x080071e1
 80071cc:	080071f9 	.word	0x080071f9
 80071d0:	08007211 	.word	0x08007211
 80071d4:	08007229 	.word	0x08007229
 80071d8:	08007241 	.word	0x08007241
 80071dc:	08007259 	.word	0x08007259
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	7c12      	ldrb	r2, [r2, #16]
 80071ec:	f107 010a 	add.w	r1, r7, #10
 80071f0:	4610      	mov	r0, r2
 80071f2:	4798      	blx	r3
 80071f4:	60f8      	str	r0, [r7, #12]
      break;
 80071f6:	e040      	b.n	800727a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	7c12      	ldrb	r2, [r2, #16]
 8007204:	f107 010a 	add.w	r1, r7, #10
 8007208:	4610      	mov	r0, r2
 800720a:	4798      	blx	r3
 800720c:	60f8      	str	r0, [r7, #12]
      break;
 800720e:	e034      	b.n	800727a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	7c12      	ldrb	r2, [r2, #16]
 800721c:	f107 010a 	add.w	r1, r7, #10
 8007220:	4610      	mov	r0, r2
 8007222:	4798      	blx	r3
 8007224:	60f8      	str	r0, [r7, #12]
      break;
 8007226:	e028      	b.n	800727a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	7c12      	ldrb	r2, [r2, #16]
 8007234:	f107 010a 	add.w	r1, r7, #10
 8007238:	4610      	mov	r0, r2
 800723a:	4798      	blx	r3
 800723c:	60f8      	str	r0, [r7, #12]
      break;
 800723e:	e01c      	b.n	800727a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007246:	695b      	ldr	r3, [r3, #20]
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	7c12      	ldrb	r2, [r2, #16]
 800724c:	f107 010a 	add.w	r1, r7, #10
 8007250:	4610      	mov	r0, r2
 8007252:	4798      	blx	r3
 8007254:	60f8      	str	r0, [r7, #12]
      break;
 8007256:	e010      	b.n	800727a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	7c12      	ldrb	r2, [r2, #16]
 8007264:	f107 010a 	add.w	r1, r7, #10
 8007268:	4610      	mov	r0, r2
 800726a:	4798      	blx	r3
 800726c:	60f8      	str	r0, [r7, #12]
      break;
 800726e:	e004      	b.n	800727a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8007270:	6839      	ldr	r1, [r7, #0]
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f9ec 	bl	8007650 <USBD_CtlError>
      return;
 8007278:	e044      	b.n	8007304 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 800727a:	e02e      	b.n	80072da <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	7c1b      	ldrb	r3, [r3, #16]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d109      	bne.n	8007298 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800728a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800728c:	f107 020a 	add.w	r2, r7, #10
 8007290:	4610      	mov	r0, r2
 8007292:	4798      	blx	r3
 8007294:	60f8      	str	r0, [r7, #12]
      break;
 8007296:	e020      	b.n	80072da <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007298:	6839      	ldr	r1, [r7, #0]
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f9d8 	bl	8007650 <USBD_CtlError>
      return;
 80072a0:	e030      	b.n	8007304 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	7c1b      	ldrb	r3, [r3, #16]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10d      	bne.n	80072c6 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80072b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b2:	f107 020a 	add.w	r2, r7, #10
 80072b6:	4610      	mov	r0, r2
 80072b8:	4798      	blx	r3
 80072ba:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	3301      	adds	r3, #1
 80072c0:	2207      	movs	r2, #7
 80072c2:	701a      	strb	r2, [r3, #0]
      break; 
 80072c4:	e009      	b.n	80072da <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f9c1 	bl	8007650 <USBD_CtlError>
      return;
 80072ce:	e019      	b.n	8007304 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f9bc 	bl	8007650 <USBD_CtlError>
    return;
 80072d8:	e014      	b.n	8007304 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 80072da:	897b      	ldrh	r3, [r7, #10]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d011      	beq.n	8007304 <USBD_GetDescriptor+0x1e0>
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	88db      	ldrh	r3, [r3, #6]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00d      	beq.n	8007304 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	88da      	ldrh	r2, [r3, #6]
 80072ec:	897b      	ldrh	r3, [r7, #10]
 80072ee:	4293      	cmp	r3, r2
 80072f0:	bf28      	it	cs
 80072f2:	4613      	movcs	r3, r2
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 80072f8:	897b      	ldrh	r3, [r7, #10]
 80072fa:	461a      	mov	r2, r3
 80072fc:	68f9      	ldr	r1, [r7, #12]
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fa12 	bl	8007728 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop

0800730c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	889b      	ldrh	r3, [r3, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d12c      	bne.n	8007378 <USBD_SetAddress+0x6c>
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	88db      	ldrh	r3, [r3, #6]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d128      	bne.n	8007378 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	885b      	ldrh	r3, [r3, #2]
 800732a:	b2db      	uxtb	r3, r3
 800732c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007330:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8007338:	2b03      	cmp	r3, #3
 800733a:	d104      	bne.n	8007346 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 800733c:	6839      	ldr	r1, [r7, #0]
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f986 	bl	8007650 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8007344:	e01c      	b.n	8007380 <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	7bfa      	ldrb	r2, [r7, #15]
 800734a:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800734e:	7bfb      	ldrb	r3, [r7, #15]
 8007350:	4619      	mov	r1, r3
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f7fd f864 	bl	8004420 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fa43 	bl	80077e4 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 800735e:	7bfb      	ldrb	r3, [r7, #15]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d004      	beq.n	800736e <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2202      	movs	r2, #2
 8007368:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800736c:	e008      	b.n	8007380 <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2201      	movs	r2, #1
 8007372:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8007376:	e003      	b.n	8007380 <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f968 	bl	8007650 <USBD_CtlError>
  } 
}
 8007380:	bf00      	nop
 8007382:	3710      	adds	r7, #16
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	885b      	ldrh	r3, [r3, #2]
 8007396:	b2da      	uxtb	r2, r3
 8007398:	4b3e      	ldr	r3, [pc, #248]	; (8007494 <USBD_SetConfig+0x10c>)
 800739a:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800739c:	4b3d      	ldr	r3, [pc, #244]	; (8007494 <USBD_SetConfig+0x10c>)
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d904      	bls.n	80073ae <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 80073a4:	6839      	ldr	r1, [r7, #0]
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f952 	bl	8007650 <USBD_CtlError>
 80073ac:	e06f      	b.n	800748e <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d002      	beq.n	80073be <USBD_SetConfig+0x36>
 80073b8:	2b03      	cmp	r3, #3
 80073ba:	d023      	beq.n	8007404 <USBD_SetConfig+0x7c>
 80073bc:	e062      	b.n	8007484 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 80073be:	4b35      	ldr	r3, [pc, #212]	; (8007494 <USBD_SetConfig+0x10c>)
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d01a      	beq.n	80073fc <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 80073c6:	4b33      	ldr	r3, [pc, #204]	; (8007494 <USBD_SetConfig+0x10c>)
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	461a      	mov	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2203      	movs	r2, #3
 80073d4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80073d8:	4b2e      	ldr	r3, [pc, #184]	; (8007494 <USBD_SetConfig+0x10c>)
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	4619      	mov	r1, r3
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7ff fb23 	bl	8006a2a <USBD_SetClassConfig>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	d104      	bne.n	80073f4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 80073ea:	6839      	ldr	r1, [r7, #0]
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 f92f 	bl	8007650 <USBD_CtlError>
          return;
 80073f2:	e04c      	b.n	800748e <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f9f5 	bl	80077e4 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 80073fa:	e048      	b.n	800748e <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 f9f1 	bl	80077e4 <USBD_CtlSendStatus>
      break;
 8007402:	e044      	b.n	800748e <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8007404:	4b23      	ldr	r3, [pc, #140]	; (8007494 <USBD_SetConfig+0x10c>)
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d112      	bne.n	8007432 <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2202      	movs	r2, #2
 8007410:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8007414:	4b1f      	ldr	r3, [pc, #124]	; (8007494 <USBD_SetConfig+0x10c>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	461a      	mov	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800741e:	4b1d      	ldr	r3, [pc, #116]	; (8007494 <USBD_SetConfig+0x10c>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	4619      	mov	r1, r3
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f7ff fb1f 	bl	8006a68 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 f9da 	bl	80077e4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007430:	e02d      	b.n	800748e <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 8007432:	4b18      	ldr	r3, [pc, #96]	; (8007494 <USBD_SetConfig+0x10c>)
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	461a      	mov	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	429a      	cmp	r2, r3
 800743e:	d01d      	beq.n	800747c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	b2db      	uxtb	r3, r3
 8007446:	4619      	mov	r1, r3
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f7ff fb0d 	bl	8006a68 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800744e:	4b11      	ldr	r3, [pc, #68]	; (8007494 <USBD_SetConfig+0x10c>)
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	461a      	mov	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8007458:	4b0e      	ldr	r3, [pc, #56]	; (8007494 <USBD_SetConfig+0x10c>)
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	4619      	mov	r1, r3
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f7ff fae3 	bl	8006a2a <USBD_SetClassConfig>
 8007464:	4603      	mov	r3, r0
 8007466:	2b02      	cmp	r3, #2
 8007468:	d104      	bne.n	8007474 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 800746a:	6839      	ldr	r1, [r7, #0]
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f8ef 	bl	8007650 <USBD_CtlError>
          return;
 8007472:	e00c      	b.n	800748e <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 f9b5 	bl	80077e4 <USBD_CtlSendStatus>
      break;
 800747a:	e008      	b.n	800748e <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f9b1 	bl	80077e4 <USBD_CtlSendStatus>
      break;
 8007482:	e004      	b.n	800748e <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f8e2 	bl	8007650 <USBD_CtlError>
      break;
 800748c:	bf00      	nop
    }
  }
}
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	2000104c 	.word	0x2000104c

08007498 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	88db      	ldrh	r3, [r3, #6]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d004      	beq.n	80074b4 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 80074aa:	6839      	ldr	r1, [r7, #0]
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f8cf 	bl	8007650 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80074b2:	e01f      	b.n	80074f4 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d002      	beq.n	80074c4 <USBD_GetConfig+0x2c>
 80074be:	2b03      	cmp	r3, #3
 80074c0:	d00b      	beq.n	80074da <USBD_GetConfig+0x42>
 80074c2:	e012      	b.n	80074ea <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 80074ce:	2201      	movs	r2, #1
 80074d0:	4619      	mov	r1, r3
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f928 	bl	8007728 <USBD_CtlSendData>
      break;
 80074d8:	e00c      	b.n	80074f4 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 80074de:	2201      	movs	r2, #1
 80074e0:	4619      	mov	r1, r3
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f920 	bl	8007728 <USBD_CtlSendData>
      break;
 80074e8:	e004      	b.n	80074f4 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 80074ea:	6839      	ldr	r1, [r7, #0]
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f8af 	bl	8007650 <USBD_CtlError>
      break;
 80074f2:	bf00      	nop
}
 80074f4:	bf00      	nop
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800750c:	3b02      	subs	r3, #2
 800750e:	2b01      	cmp	r3, #1
 8007510:	d815      	bhi.n	800753e <USBD_GetStatus+0x42>
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
#else
    pdev->dev_config_status = 0;                                   
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	60da      	str	r2, [r3, #12]
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800751e:	2b00      	cmp	r3, #0
 8007520:	d005      	beq.n	800752e <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	f043 0202 	orr.w	r2, r3, #2
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 8007532:	2202      	movs	r2, #2
 8007534:	4619      	mov	r1, r3
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f8f6 	bl	8007728 <USBD_CtlSendData>
                      2);
    break;
 800753c:	e004      	b.n	8007548 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f885 	bl	8007650 <USBD_CtlError>
    break;
 8007546:	bf00      	nop
  }
}
 8007548:	bf00      	nop
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	885b      	ldrh	r3, [r3, #2]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d10d      	bne.n	800757e <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2201      	movs	r2, #1
 8007566:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	6839      	ldr	r1, [r7, #0]
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f933 	bl	80077e4 <USBD_CtlSendStatus>
  }

}
 800757e:	bf00      	nop
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b082      	sub	sp, #8
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8007596:	3b02      	subs	r3, #2
 8007598:	2b01      	cmp	r3, #1
 800759a:	d812      	bhi.n	80075c2 <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	885b      	ldrh	r3, [r3, #2]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d113      	bne.n	80075cc <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	6839      	ldr	r1, [r7, #0]
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f912 	bl	80077e4 <USBD_CtlSendStatus>
    }
    break;
 80075c0:	e004      	b.n	80075cc <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 80075c2:	6839      	ldr	r1, [r7, #0]
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 f843 	bl	8007650 <USBD_CtlError>
    break;
 80075ca:	e000      	b.n	80075ce <USBD_ClrFeature+0x48>
    break;
 80075cc:	bf00      	nop
  }
}
 80075ce:	bf00      	nop
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b083      	sub	sp, #12
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	781a      	ldrb	r2, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	785a      	ldrb	r2, [r3, #1]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	3302      	adds	r3, #2
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	3303      	adds	r3, #3
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	b29b      	uxth	r3, r3
 8007600:	021b      	lsls	r3, r3, #8
 8007602:	b29b      	uxth	r3, r3
 8007604:	4413      	add	r3, r2
 8007606:	b29a      	uxth	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	3304      	adds	r3, #4
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	b29a      	uxth	r2, r3
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	3305      	adds	r3, #5
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	b29b      	uxth	r3, r3
 800761c:	021b      	lsls	r3, r3, #8
 800761e:	b29b      	uxth	r3, r3
 8007620:	4413      	add	r3, r2
 8007622:	b29a      	uxth	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	3306      	adds	r3, #6
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	b29a      	uxth	r2, r3
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	3307      	adds	r3, #7
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	b29b      	uxth	r3, r3
 8007638:	021b      	lsls	r3, r3, #8
 800763a:	b29b      	uxth	r3, r3
 800763c:	4413      	add	r3, r2
 800763e:	b29a      	uxth	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	80da      	strh	r2, [r3, #6]

}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 800765a:	2180      	movs	r1, #128	; 0x80
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f7fc fe47 	bl	80042f0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8007662:	2100      	movs	r1, #0
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f7fc fe43 	bl	80042f0 <USBD_LL_StallEP>
}
 800766a:	bf00      	nop
 800766c:	3708      	adds	r7, #8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b086      	sub	sp, #24
 8007676:	af00      	add	r7, sp, #0
 8007678:	60f8      	str	r0, [r7, #12]
 800767a:	60b9      	str	r1, [r7, #8]
 800767c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 800767e:	2300      	movs	r3, #0
 8007680:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d033      	beq.n	80076f0 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f000 f835 	bl	80076f8 <USBD_GetLen>
 800768e:	4603      	mov	r3, r0
 8007690:	3301      	adds	r3, #1
 8007692:	b29b      	uxth	r3, r3
 8007694:	005b      	lsls	r3, r3, #1
 8007696:	b29a      	uxth	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 800769c:	7dfb      	ldrb	r3, [r7, #23]
 800769e:	1c5a      	adds	r2, r3, #1
 80076a0:	75fa      	strb	r2, [r7, #23]
 80076a2:	461a      	mov	r2, r3
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	4413      	add	r3, r2
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	8812      	ldrh	r2, [r2, #0]
 80076ac:	b2d2      	uxtb	r2, r2
 80076ae:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80076b0:	7dfb      	ldrb	r3, [r7, #23]
 80076b2:	1c5a      	adds	r2, r3, #1
 80076b4:	75fa      	strb	r2, [r7, #23]
 80076b6:	461a      	mov	r2, r3
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	4413      	add	r3, r2
 80076bc:	2203      	movs	r2, #3
 80076be:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 80076c0:	e012      	b.n	80076e8 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 80076c2:	7dfb      	ldrb	r3, [r7, #23]
 80076c4:	1c5a      	adds	r2, r3, #1
 80076c6:	75fa      	strb	r2, [r7, #23]
 80076c8:	461a      	mov	r2, r3
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	441a      	add	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	1c59      	adds	r1, r3, #1
 80076d2:	60f9      	str	r1, [r7, #12]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 80076d8:	7dfb      	ldrb	r3, [r7, #23]
 80076da:	1c5a      	adds	r2, r3, #1
 80076dc:	75fa      	strb	r2, [r7, #23]
 80076de:	461a      	mov	r2, r3
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	4413      	add	r3, r2
 80076e4:	2200      	movs	r2, #0
 80076e6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1e8      	bne.n	80076c2 <USBD_GetString+0x50>
    }
  } 
}
 80076f0:	bf00      	nop
 80076f2:	3718      	adds	r7, #24
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8007700:	2300      	movs	r3, #0
 8007702:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8007704:	e005      	b.n	8007712 <USBD_GetLen+0x1a>
    {
        len++;
 8007706:	7bfb      	ldrb	r3, [r7, #15]
 8007708:	3301      	adds	r3, #1
 800770a:	73fb      	strb	r3, [r7, #15]
        buf++;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	3301      	adds	r3, #1
 8007710:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1f5      	bne.n	8007706 <USBD_GetLen+0xe>
    }

    return len;
 800771a:	7bfb      	ldrb	r3, [r7, #15]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	4613      	mov	r3, r2
 8007734:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2202      	movs	r2, #2
 800773a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800773e:	88fa      	ldrh	r2, [r7, #6]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8007744:	88fa      	ldrh	r2, [r7, #6]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800774a:	88fb      	ldrh	r3, [r7, #6]
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	2100      	movs	r1, #0
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f7fc fe9b 	bl	800448c <USBD_LL_Transmit>
  
  return USBD_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	4613      	mov	r3, r2
 800776c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800776e:	88fb      	ldrh	r3, [r7, #6]
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	2100      	movs	r1, #0
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f7fc fe89 	bl	800448c <USBD_LL_Transmit>
  
  return USBD_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	4613      	mov	r3, r2
 8007790:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2203      	movs	r2, #3
 8007796:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 800779a:	88fa      	ldrh	r2, [r7, #6]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 80077a2:	88fa      	ldrh	r2, [r7, #6]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80077aa:	88fb      	ldrh	r3, [r7, #6]
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	2100      	movs	r1, #0
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f7fc fead 	bl	8004510 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	4613      	mov	r3, r2
 80077cc:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 80077ce:	88fb      	ldrh	r3, [r7, #6]
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	2100      	movs	r1, #0
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f7fc fe9b 	bl	8004510 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2204      	movs	r2, #4
 80077f0:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80077f4:	2300      	movs	r3, #0
 80077f6:	2200      	movs	r2, #0
 80077f8:	2100      	movs	r1, #0
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7fc fe46 	bl	800448c <USBD_LL_Transmit>
  
  return USBD_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b082      	sub	sp, #8
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2205      	movs	r2, #5
 8007816:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800781a:	2300      	movs	r3, #0
 800781c:	2200      	movs	r2, #0
 800781e:	2100      	movs	r1, #0
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f7fc fe75 	bl	8004510 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3708      	adds	r7, #8
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	4603      	mov	r3, r0
 8007838:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800783a:	2300      	movs	r3, #0
 800783c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800783e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007842:	2b84      	cmp	r3, #132	; 0x84
 8007844:	d005      	beq.n	8007852 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007846:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	4413      	add	r3, r2
 800784e:	3303      	adds	r3, #3
 8007850:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007852:	68fb      	ldr	r3, [r7, #12]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007864:	f001 fc86 	bl	8009174 <vTaskStartScheduler>
  
  return osOK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	bd80      	pop	{r7, pc}

0800786e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800786e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007870:	b087      	sub	sp, #28
 8007872:	af02      	add	r7, sp, #8
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685c      	ldr	r4, [r3, #4]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007884:	b29e      	uxth	r6, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800788c:	4618      	mov	r0, r3
 800788e:	f7ff ffcf 	bl	8007830 <makeFreeRtosPriority>
 8007892:	4602      	mov	r2, r0
 8007894:	f107 030c 	add.w	r3, r7, #12
 8007898:	9301      	str	r3, [sp, #4]
 800789a:	9200      	str	r2, [sp, #0]
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	4632      	mov	r2, r6
 80078a0:	4629      	mov	r1, r5
 80078a2:	4620      	mov	r0, r4
 80078a4:	f001 fb00 	bl	8008ea8 <xTaskCreate>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d001      	beq.n	80078b2 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80078ae:	2300      	movs	r3, #0
 80078b0:	e000      	b.n	80078b4 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80078b2:	68fb      	ldr	r3, [r7, #12]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080078bc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d001      	beq.n	80078d2 <osDelay+0x16>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	e000      	b.n	80078d4 <osDelay+0x18>
 80078d2:	2301      	movs	r3, #1
 80078d4:	4618      	mov	r0, r3
 80078d6:	f001 fc19 	bl	800910c <vTaskDelay>
  
  return osOK;
 80078da:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3710      	adds	r7, #16
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80078e8:	f002 f8d4 	bl	8009a94 <xTaskGetSchedulerState>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d001      	beq.n	80078f6 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 80078f2:	f000 fb51 	bl	8007f98 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80078f6:	bf00      	nop
 80078f8:	bd80      	pop	{r7, pc}

080078fa <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b082      	sub	sp, #8
 80078fe:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8007900:	2018      	movs	r0, #24
 8007902:	f000 fbcd 	bl	80080a0 <pvPortMalloc>
 8007906:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d007      	beq.n	800791e <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	3304      	adds	r3, #4
 8007918:	4618      	mov	r0, r3
 800791a:	f000 f8f4 	bl	8007b06 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 800791e:	687b      	ldr	r3, [r7, #4]
	}
 8007920:	4618      	mov	r0, r3
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <xEventGroupClearBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b086      	sub	sp, #24
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d109      	bne.n	8007950 <xEventGroupClearBits+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800793c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007940:	f383 8811 	msr	BASEPRI, r3
 8007944:	f3bf 8f6f 	isb	sy
 8007948:	f3bf 8f4f 	dsb	sy
 800794c:	60fb      	str	r3, [r7, #12]
 800794e:	e7fe      	b.n	800794e <xEventGroupClearBits+0x26>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d009      	beq.n	800796e <xEventGroupClearBits+0x46>
 800795a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800795e:	f383 8811 	msr	BASEPRI, r3
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	f3bf 8f4f 	dsb	sy
 800796a:	60bb      	str	r3, [r7, #8]
 800796c:	e7fe      	b.n	800796c <xEventGroupClearBits+0x44>

	taskENTER_CRITICAL();
 800796e:	f000 fa87 	bl	8007e80 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	43db      	mvns	r3, r3
 8007980:	401a      	ands	r2, r3
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8007986:	f000 faa9 	bl	8007edc <vPortExitCritical>

	return uxReturn;
 800798a:	693b      	ldr	r3, [r7, #16]
}
 800798c:	4618      	mov	r0, r3
 800798e:	3718      	adds	r7, #24
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b08e      	sub	sp, #56	; 0x38
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800799e:	2300      	movs	r3, #0
 80079a0:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80079a6:	2300      	movs	r3, #0
 80079a8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d109      	bne.n	80079c4 <xEventGroupSetBits+0x30>
 80079b0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80079b4:	f383 8811 	msr	BASEPRI, r3
 80079b8:	f3bf 8f6f 	isb	sy
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	613b      	str	r3, [r7, #16]
 80079c2:	e7fe      	b.n	80079c2 <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d009      	beq.n	80079e2 <xEventGroupSetBits+0x4e>
 80079ce:	f04f 0340 	mov.w	r3, #64	; 0x40
 80079d2:	f383 8811 	msr	BASEPRI, r3
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	60fb      	str	r3, [r7, #12]
 80079e0:	e7fe      	b.n	80079e0 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80079e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e4:	3304      	adds	r3, #4
 80079e6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	3308      	adds	r3, #8
 80079ec:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80079ee:	f001 fc07 	bl	8009200 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80079f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80079f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	431a      	orrs	r2, r3
 8007a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a02:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8007a04:	e03c      	b.n	8007a80 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 8007a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8007a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8007a12:	2300      	movs	r3, #0
 8007a14:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8007a16:	69bb      	ldr	r3, [r7, #24]
 8007a18:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007a1c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007a24:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d108      	bne.n	8007a42 <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8007a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	4013      	ands	r3, r2
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00b      	beq.n	8007a54 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a40:	e008      	b.n	8007a54 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8007a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	401a      	ands	r2, r3
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d101      	bne.n	8007a54 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8007a50:	2301      	movs	r3, #1
 8007a52:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8007a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d010      	beq.n	8007a7c <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d003      	beq.n	8007a6c <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8007a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8007a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007a74:	4619      	mov	r1, r3
 8007a76:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007a78:	f001 fe3e 	bl	80096f8 <xTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8007a80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a82:	6a3b      	ldr	r3, [r7, #32]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d1be      	bne.n	8007a06 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8e:	43db      	mvns	r3, r3
 8007a90:	401a      	ands	r2, r3
 8007a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a94:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8007a96:	f001 fbc1 	bl	800921c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8007a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9c:	681b      	ldr	r3, [r3, #0]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3738      	adds	r7, #56	; 0x38
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b086      	sub	sp, #24
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	617b      	str	r3, [r7, #20]
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	3304      	adds	r3, #4
 8007ab6:	613b      	str	r3, [r7, #16]

	vTaskSuspendAll();
 8007ab8:	f001 fba2 	bl	8009200 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8007abc:	e016      	b.n	8007aec <vEventGroupDelete+0x46>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	68da      	ldr	r2, [r3, #12]
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	3308      	adds	r3, #8
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d109      	bne.n	8007ade <vEventGroupDelete+0x38>
 8007aca:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007ace:	f383 8811 	msr	BASEPRI, r3
 8007ad2:	f3bf 8f6f 	isb	sy
 8007ad6:	f3bf 8f4f 	dsb	sy
 8007ada:	60fb      	str	r3, [r7, #12]
 8007adc:	e7fe      	b.n	8007adc <vEventGroupDelete+0x36>
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f001 fe06 	bl	80096f8 <xTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1e4      	bne.n	8007abe <vEventGroupDelete+0x18>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
 8007af4:	6978      	ldr	r0, [r7, #20]
 8007af6:	f000 fb95 	bl	8008224 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
 8007afa:	f001 fb8f 	bl	800921c <xTaskResumeAll>
}
 8007afe:	bf00      	nop
 8007b00:	3718      	adds	r7, #24
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b06:	b480      	push	{r7}
 8007b08:	b083      	sub	sp, #12
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f103 0208 	add.w	r2, r3, #8
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b1e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f103 0208 	add.w	r2, r3, #8
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f103 0208 	add.w	r2, r3, #8
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b3a:	bf00      	nop
 8007b3c:	370c      	adds	r7, #12
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr

08007b46 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b46:	b480      	push	{r7}
 8007b48:	b083      	sub	sp, #12
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b60:	b480      	push	{r7}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	689a      	ldr	r2, [r3, #8]
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	683a      	ldr	r2, [r7, #0]
 8007b8a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	1c5a      	adds	r2, r3, #1
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	601a      	str	r2, [r3, #0]
}
 8007b9c:	bf00      	nop
 8007b9e:	3714      	adds	r7, #20
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bbe:	d103      	bne.n	8007bc8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	60fb      	str	r3, [r7, #12]
 8007bc6:	e00c      	b.n	8007be2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	3308      	adds	r3, #8
 8007bcc:	60fb      	str	r3, [r7, #12]
 8007bce:	e002      	b.n	8007bd6 <vListInsert+0x2e>
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	60fb      	str	r3, [r7, #12]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d9f6      	bls.n	8007bd0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	685a      	ldr	r2, [r3, #4]
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	683a      	ldr	r2, [r7, #0]
 8007bfc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	1c5a      	adds	r2, r3, #1
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	601a      	str	r2, [r3, #0]
}
 8007c0e:	bf00      	nop
 8007c10:	3714      	adds	r7, #20
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b085      	sub	sp, #20
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	6892      	ldr	r2, [r2, #8]
 8007c30:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	6852      	ldr	r2, [r2, #4]
 8007c3a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	685a      	ldr	r2, [r3, #4]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d103      	bne.n	8007c4e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	689a      	ldr	r2, [r3, #8]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	1e5a      	subs	r2, r3, #1
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3714      	adds	r7, #20
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr
	...

08007c70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007c70:	b480      	push	{r7}
 8007c72:	b085      	sub	sp, #20
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	3b04      	subs	r3, #4
 8007c80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007c88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	3b04      	subs	r3, #4
 8007c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	f023 0201 	bic.w	r2, r3, #1
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	3b04      	subs	r3, #4
 8007c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ca0:	4a0c      	ldr	r2, [pc, #48]	; (8007cd4 <pxPortInitialiseStack+0x64>)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	3b14      	subs	r3, #20
 8007caa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	3b04      	subs	r3, #4
 8007cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f06f 0202 	mvn.w	r2, #2
 8007cbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	3b20      	subs	r3, #32
 8007cc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3714      	adds	r7, #20
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr
 8007cd4:	08007cd9 	.word	0x08007cd9

08007cd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007cde:	4b0c      	ldr	r3, [pc, #48]	; (8007d10 <prvTaskExitError+0x38>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce6:	d009      	beq.n	8007cfc <prvTaskExitError+0x24>
 8007ce8:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007cec:	f383 8811 	msr	BASEPRI, r3
 8007cf0:	f3bf 8f6f 	isb	sy
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	607b      	str	r3, [r7, #4]
 8007cfa:	e7fe      	b.n	8007cfa <prvTaskExitError+0x22>
 8007cfc:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8007d0e:	e7fe      	b.n	8007d0e <prvTaskExitError+0x36>
 8007d10:	200001ac 	.word	0x200001ac
	...

08007d20 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007d20:	4b07      	ldr	r3, [pc, #28]	; (8007d40 <pxCurrentTCBConst2>)
 8007d22:	6819      	ldr	r1, [r3, #0]
 8007d24:	6808      	ldr	r0, [r1, #0]
 8007d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d2a:	f380 8809 	msr	PSP, r0
 8007d2e:	f3bf 8f6f 	isb	sy
 8007d32:	f04f 0000 	mov.w	r0, #0
 8007d36:	f380 8811 	msr	BASEPRI, r0
 8007d3a:	4770      	bx	lr
 8007d3c:	f3af 8000 	nop.w

08007d40 <pxCurrentTCBConst2>:
 8007d40:	20004c6c 	.word	0x20004c6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007d44:	bf00      	nop
 8007d46:	bf00      	nop

08007d48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007d48:	4806      	ldr	r0, [pc, #24]	; (8007d64 <prvPortStartFirstTask+0x1c>)
 8007d4a:	6800      	ldr	r0, [r0, #0]
 8007d4c:	6800      	ldr	r0, [r0, #0]
 8007d4e:	f380 8808 	msr	MSP, r0
 8007d52:	b662      	cpsie	i
 8007d54:	b661      	cpsie	f
 8007d56:	f3bf 8f4f 	dsb	sy
 8007d5a:	f3bf 8f6f 	isb	sy
 8007d5e:	df00      	svc	0
 8007d60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007d62:	bf00      	nop
 8007d64:	e000ed08 	.word	0xe000ed08

08007d68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b086      	sub	sp, #24
 8007d6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007d6e:	4b3b      	ldr	r3, [pc, #236]	; (8007e5c <xPortStartScheduler+0xf4>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a3b      	ldr	r2, [pc, #236]	; (8007e60 <xPortStartScheduler+0xf8>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d109      	bne.n	8007d8c <xPortStartScheduler+0x24>
 8007d78:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007d7c:	f383 8811 	msr	BASEPRI, r3
 8007d80:	f3bf 8f6f 	isb	sy
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	613b      	str	r3, [r7, #16]
 8007d8a:	e7fe      	b.n	8007d8a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007d8c:	4b33      	ldr	r3, [pc, #204]	; (8007e5c <xPortStartScheduler+0xf4>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a34      	ldr	r2, [pc, #208]	; (8007e64 <xPortStartScheduler+0xfc>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d109      	bne.n	8007daa <xPortStartScheduler+0x42>
 8007d96:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007d9a:	f383 8811 	msr	BASEPRI, r3
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	f3bf 8f4f 	dsb	sy
 8007da6:	60fb      	str	r3, [r7, #12]
 8007da8:	e7fe      	b.n	8007da8 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007daa:	4b2f      	ldr	r3, [pc, #188]	; (8007e68 <xPortStartScheduler+0x100>)
 8007dac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	22ff      	movs	r2, #255	; 0xff
 8007dba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007dc4:	79fb      	ldrb	r3, [r7, #7]
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dcc:	b2da      	uxtb	r2, r3
 8007dce:	4b27      	ldr	r3, [pc, #156]	; (8007e6c <xPortStartScheduler+0x104>)
 8007dd0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007dd2:	4b27      	ldr	r3, [pc, #156]	; (8007e70 <xPortStartScheduler+0x108>)
 8007dd4:	2207      	movs	r2, #7
 8007dd6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007dd8:	e009      	b.n	8007dee <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007dda:	4b25      	ldr	r3, [pc, #148]	; (8007e70 <xPortStartScheduler+0x108>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	3b01      	subs	r3, #1
 8007de0:	4a23      	ldr	r2, [pc, #140]	; (8007e70 <xPortStartScheduler+0x108>)
 8007de2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007de4:	79fb      	ldrb	r3, [r7, #7]
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	005b      	lsls	r3, r3, #1
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007dee:	79fb      	ldrb	r3, [r7, #7]
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007df6:	2b80      	cmp	r3, #128	; 0x80
 8007df8:	d0ef      	beq.n	8007dda <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007dfa:	4b1d      	ldr	r3, [pc, #116]	; (8007e70 <xPortStartScheduler+0x108>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	021b      	lsls	r3, r3, #8
 8007e00:	4a1b      	ldr	r2, [pc, #108]	; (8007e70 <xPortStartScheduler+0x108>)
 8007e02:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e04:	4b1a      	ldr	r3, [pc, #104]	; (8007e70 <xPortStartScheduler+0x108>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e0c:	4a18      	ldr	r2, [pc, #96]	; (8007e70 <xPortStartScheduler+0x108>)
 8007e0e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	b2da      	uxtb	r2, r3
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e18:	4a16      	ldr	r2, [pc, #88]	; (8007e74 <xPortStartScheduler+0x10c>)
 8007e1a:	4b16      	ldr	r3, [pc, #88]	; (8007e74 <xPortStartScheduler+0x10c>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007e22:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007e24:	4a13      	ldr	r2, [pc, #76]	; (8007e74 <xPortStartScheduler+0x10c>)
 8007e26:	4b13      	ldr	r3, [pc, #76]	; (8007e74 <xPortStartScheduler+0x10c>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007e2e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007e30:	f000 f8d2 	bl	8007fd8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007e34:	4b10      	ldr	r3, [pc, #64]	; (8007e78 <xPortStartScheduler+0x110>)
 8007e36:	2200      	movs	r2, #0
 8007e38:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007e3a:	f000 f8e9 	bl	8008010 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007e3e:	4a0f      	ldr	r2, [pc, #60]	; (8007e7c <xPortStartScheduler+0x114>)
 8007e40:	4b0e      	ldr	r3, [pc, #56]	; (8007e7c <xPortStartScheduler+0x114>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007e48:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007e4a:	f7ff ff7d 	bl	8007d48 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8007e4e:	f7ff ff43 	bl	8007cd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007e52:	2300      	movs	r3, #0
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3718      	adds	r7, #24
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	e000ed00 	.word	0xe000ed00
 8007e60:	410fc271 	.word	0x410fc271
 8007e64:	410fc270 	.word	0x410fc270
 8007e68:	e000e400 	.word	0xe000e400
 8007e6c:	2000104d 	.word	0x2000104d
 8007e70:	20001050 	.word	0x20001050
 8007e74:	e000ed20 	.word	0xe000ed20
 8007e78:	200001ac 	.word	0x200001ac
 8007e7c:	e000ef34 	.word	0xe000ef34

08007e80 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007e8a:	f383 8811 	msr	BASEPRI, r3
 8007e8e:	f3bf 8f6f 	isb	sy
 8007e92:	f3bf 8f4f 	dsb	sy
 8007e96:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007e98:	4b0e      	ldr	r3, [pc, #56]	; (8007ed4 <vPortEnterCritical+0x54>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	4a0d      	ldr	r2, [pc, #52]	; (8007ed4 <vPortEnterCritical+0x54>)
 8007ea0:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007ea2:	4b0c      	ldr	r3, [pc, #48]	; (8007ed4 <vPortEnterCritical+0x54>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d10e      	bne.n	8007ec8 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007eaa:	4b0b      	ldr	r3, [pc, #44]	; (8007ed8 <vPortEnterCritical+0x58>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d009      	beq.n	8007ec8 <vPortEnterCritical+0x48>
 8007eb4:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007eb8:	f383 8811 	msr	BASEPRI, r3
 8007ebc:	f3bf 8f6f 	isb	sy
 8007ec0:	f3bf 8f4f 	dsb	sy
 8007ec4:	603b      	str	r3, [r7, #0]
 8007ec6:	e7fe      	b.n	8007ec6 <vPortEnterCritical+0x46>
	}
}
 8007ec8:	bf00      	nop
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr
 8007ed4:	200001ac 	.word	0x200001ac
 8007ed8:	e000ed04 	.word	0xe000ed04

08007edc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007ee2:	4b11      	ldr	r3, [pc, #68]	; (8007f28 <vPortExitCritical+0x4c>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d109      	bne.n	8007efe <vPortExitCritical+0x22>
 8007eea:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007eee:	f383 8811 	msr	BASEPRI, r3
 8007ef2:	f3bf 8f6f 	isb	sy
 8007ef6:	f3bf 8f4f 	dsb	sy
 8007efa:	607b      	str	r3, [r7, #4]
 8007efc:	e7fe      	b.n	8007efc <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007efe:	4b0a      	ldr	r3, [pc, #40]	; (8007f28 <vPortExitCritical+0x4c>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	3b01      	subs	r3, #1
 8007f04:	4a08      	ldr	r2, [pc, #32]	; (8007f28 <vPortExitCritical+0x4c>)
 8007f06:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007f08:	4b07      	ldr	r3, [pc, #28]	; (8007f28 <vPortExitCritical+0x4c>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d104      	bne.n	8007f1a <vPortExitCritical+0x3e>
 8007f10:	2300      	movs	r3, #0
 8007f12:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007f1a:	bf00      	nop
 8007f1c:	370c      	adds	r7, #12
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	200001ac 	.word	0x200001ac
 8007f2c:	00000000 	.word	0x00000000

08007f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007f30:	f3ef 8009 	mrs	r0, PSP
 8007f34:	f3bf 8f6f 	isb	sy
 8007f38:	4b15      	ldr	r3, [pc, #84]	; (8007f90 <pxCurrentTCBConst>)
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	f01e 0f10 	tst.w	lr, #16
 8007f40:	bf08      	it	eq
 8007f42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007f46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f4a:	6010      	str	r0, [r2, #0]
 8007f4c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8007f50:	f04f 0040 	mov.w	r0, #64	; 0x40
 8007f54:	f380 8811 	msr	BASEPRI, r0
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	f001 fac4 	bl	80094ec <vTaskSwitchContext>
 8007f64:	f04f 0000 	mov.w	r0, #0
 8007f68:	f380 8811 	msr	BASEPRI, r0
 8007f6c:	bc08      	pop	{r3}
 8007f6e:	6819      	ldr	r1, [r3, #0]
 8007f70:	6808      	ldr	r0, [r1, #0]
 8007f72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f76:	f01e 0f10 	tst.w	lr, #16
 8007f7a:	bf08      	it	eq
 8007f7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007f80:	f380 8809 	msr	PSP, r0
 8007f84:	f3bf 8f6f 	isb	sy
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	f3af 8000 	nop.w

08007f90 <pxCurrentTCBConst>:
 8007f90:	20004c6c 	.word	0x20004c6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007f94:	bf00      	nop
 8007f96:	bf00      	nop

08007f98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f9e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007fa2:	f383 8811 	msr	BASEPRI, r3
 8007fa6:	f3bf 8f6f 	isb	sy
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007fb0:	f001 f9e0 	bl	8009374 <xTaskIncrementTick>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d003      	beq.n	8007fc2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007fba:	4b06      	ldr	r3, [pc, #24]	; (8007fd4 <xPortSysTickHandler+0x3c>)
 8007fbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fc0:	601a      	str	r2, [r3, #0]
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007fcc:	bf00      	nop
 8007fce:	3708      	adds	r7, #8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	e000ed04 	.word	0xe000ed04

08007fd8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007fd8:	b480      	push	{r7}
 8007fda:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007fdc:	4a08      	ldr	r2, [pc, #32]	; (8008000 <vPortSetupTimerInterrupt+0x28>)
 8007fde:	4b09      	ldr	r3, [pc, #36]	; (8008004 <vPortSetupTimerInterrupt+0x2c>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4909      	ldr	r1, [pc, #36]	; (8008008 <vPortSetupTimerInterrupt+0x30>)
 8007fe4:	fba1 1303 	umull	r1, r3, r1, r3
 8007fe8:	099b      	lsrs	r3, r3, #6
 8007fea:	3b01      	subs	r3, #1
 8007fec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007fee:	4b07      	ldr	r3, [pc, #28]	; (800800c <vPortSetupTimerInterrupt+0x34>)
 8007ff0:	2207      	movs	r2, #7
 8007ff2:	601a      	str	r2, [r3, #0]
}
 8007ff4:	bf00      	nop
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	e000e014 	.word	0xe000e014
 8008004:	200001d0 	.word	0x200001d0
 8008008:	10624dd3 	.word	0x10624dd3
 800800c:	e000e010 	.word	0xe000e010

08008010 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008010:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008020 <vPortEnableVFP+0x10>
 8008014:	6801      	ldr	r1, [r0, #0]
 8008016:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800801a:	6001      	str	r1, [r0, #0]
 800801c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800801e:	bf00      	nop
 8008020:	e000ed88 	.word	0xe000ed88

08008024 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800802a:	f3ef 8305 	mrs	r3, IPSR
 800802e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2b0f      	cmp	r3, #15
 8008034:	d913      	bls.n	800805e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008036:	4a16      	ldr	r2, [pc, #88]	; (8008090 <vPortValidateInterruptPriority+0x6c>)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	4413      	add	r3, r2
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008040:	4b14      	ldr	r3, [pc, #80]	; (8008094 <vPortValidateInterruptPriority+0x70>)
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	7afa      	ldrb	r2, [r7, #11]
 8008046:	429a      	cmp	r2, r3
 8008048:	d209      	bcs.n	800805e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800804a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800804e:	f383 8811 	msr	BASEPRI, r3
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	607b      	str	r3, [r7, #4]
 800805c:	e7fe      	b.n	800805c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800805e:	4b0e      	ldr	r3, [pc, #56]	; (8008098 <vPortValidateInterruptPriority+0x74>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008066:	4b0d      	ldr	r3, [pc, #52]	; (800809c <vPortValidateInterruptPriority+0x78>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	429a      	cmp	r2, r3
 800806c:	d909      	bls.n	8008082 <vPortValidateInterruptPriority+0x5e>
 800806e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008072:	f383 8811 	msr	BASEPRI, r3
 8008076:	f3bf 8f6f 	isb	sy
 800807a:	f3bf 8f4f 	dsb	sy
 800807e:	603b      	str	r3, [r7, #0]
 8008080:	e7fe      	b.n	8008080 <vPortValidateInterruptPriority+0x5c>
	}
 8008082:	bf00      	nop
 8008084:	3714      	adds	r7, #20
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	e000e3f0 	.word	0xe000e3f0
 8008094:	2000104d 	.word	0x2000104d
 8008098:	e000ed0c 	.word	0xe000ed0c
 800809c:	20001050 	.word	0x20001050

080080a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b08a      	sub	sp, #40	; 0x28
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80080a8:	2300      	movs	r3, #0
 80080aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80080ac:	f001 f8a8 	bl	8009200 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80080b0:	4b57      	ldr	r3, [pc, #348]	; (8008210 <pvPortMalloc+0x170>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d101      	bne.n	80080bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80080b8:	f000 f90c 	bl	80082d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80080bc:	4b55      	ldr	r3, [pc, #340]	; (8008214 <pvPortMalloc+0x174>)
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4013      	ands	r3, r2
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f040 808c 	bne.w	80081e2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d01c      	beq.n	800810a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80080d0:	2208      	movs	r2, #8
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4413      	add	r3, r2
 80080d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f003 0307 	and.w	r3, r3, #7
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d013      	beq.n	800810a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f023 0307 	bic.w	r3, r3, #7
 80080e8:	3308      	adds	r3, #8
 80080ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f003 0307 	and.w	r3, r3, #7
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d009      	beq.n	800810a <pvPortMalloc+0x6a>
 80080f6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80080fa:	f383 8811 	msr	BASEPRI, r3
 80080fe:	f3bf 8f6f 	isb	sy
 8008102:	f3bf 8f4f 	dsb	sy
 8008106:	617b      	str	r3, [r7, #20]
 8008108:	e7fe      	b.n	8008108 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d068      	beq.n	80081e2 <pvPortMalloc+0x142>
 8008110:	4b41      	ldr	r3, [pc, #260]	; (8008218 <pvPortMalloc+0x178>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	429a      	cmp	r2, r3
 8008118:	d863      	bhi.n	80081e2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800811a:	4b40      	ldr	r3, [pc, #256]	; (800821c <pvPortMalloc+0x17c>)
 800811c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800811e:	4b3f      	ldr	r3, [pc, #252]	; (800821c <pvPortMalloc+0x17c>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008124:	e004      	b.n	8008130 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008128:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008132:	685a      	ldr	r2, [r3, #4]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	429a      	cmp	r2, r3
 8008138:	d203      	bcs.n	8008142 <pvPortMalloc+0xa2>
 800813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1f1      	bne.n	8008126 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008142:	4b33      	ldr	r3, [pc, #204]	; (8008210 <pvPortMalloc+0x170>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008148:	429a      	cmp	r2, r3
 800814a:	d04a      	beq.n	80081e2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800814c:	6a3b      	ldr	r3, [r7, #32]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2208      	movs	r2, #8
 8008152:	4413      	add	r3, r2
 8008154:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	6a3b      	ldr	r3, [r7, #32]
 800815c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800815e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008160:	685a      	ldr	r2, [r3, #4]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	1ad2      	subs	r2, r2, r3
 8008166:	2308      	movs	r3, #8
 8008168:	005b      	lsls	r3, r3, #1
 800816a:	429a      	cmp	r2, r3
 800816c:	d91e      	bls.n	80081ac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800816e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4413      	add	r3, r2
 8008174:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	f003 0307 	and.w	r3, r3, #7
 800817c:	2b00      	cmp	r3, #0
 800817e:	d009      	beq.n	8008194 <pvPortMalloc+0xf4>
 8008180:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008184:	f383 8811 	msr	BASEPRI, r3
 8008188:	f3bf 8f6f 	isb	sy
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	613b      	str	r3, [r7, #16]
 8008192:	e7fe      	b.n	8008192 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008196:	685a      	ldr	r2, [r3, #4]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	1ad2      	subs	r2, r2, r3
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80081a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80081a6:	69b8      	ldr	r0, [r7, #24]
 80081a8:	f000 f8f6 	bl	8008398 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80081ac:	4b1a      	ldr	r3, [pc, #104]	; (8008218 <pvPortMalloc+0x178>)
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	1ad3      	subs	r3, r2, r3
 80081b6:	4a18      	ldr	r2, [pc, #96]	; (8008218 <pvPortMalloc+0x178>)
 80081b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80081ba:	4b17      	ldr	r3, [pc, #92]	; (8008218 <pvPortMalloc+0x178>)
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	4b18      	ldr	r3, [pc, #96]	; (8008220 <pvPortMalloc+0x180>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d203      	bcs.n	80081ce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80081c6:	4b14      	ldr	r3, [pc, #80]	; (8008218 <pvPortMalloc+0x178>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a15      	ldr	r2, [pc, #84]	; (8008220 <pvPortMalloc+0x180>)
 80081cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80081ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d0:	685a      	ldr	r2, [r3, #4]
 80081d2:	4b10      	ldr	r3, [pc, #64]	; (8008214 <pvPortMalloc+0x174>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	431a      	orrs	r2, r3
 80081d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80081dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081de:	2200      	movs	r2, #0
 80081e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80081e2:	f001 f81b 	bl	800921c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	f003 0307 	and.w	r3, r3, #7
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d009      	beq.n	8008204 <pvPortMalloc+0x164>
 80081f0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80081f4:	f383 8811 	msr	BASEPRI, r3
 80081f8:	f3bf 8f6f 	isb	sy
 80081fc:	f3bf 8f4f 	dsb	sy
 8008200:	60fb      	str	r3, [r7, #12]
 8008202:	e7fe      	b.n	8008202 <pvPortMalloc+0x162>
	return pvReturn;
 8008204:	69fb      	ldr	r3, [r7, #28]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3728      	adds	r7, #40	; 0x28
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	20004c5c 	.word	0x20004c5c
 8008214:	20004c68 	.word	0x20004c68
 8008218:	20004c60 	.word	0x20004c60
 800821c:	20004c54 	.word	0x20004c54
 8008220:	20004c64 	.word	0x20004c64

08008224 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b086      	sub	sp, #24
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d046      	beq.n	80082c4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008236:	2308      	movs	r3, #8
 8008238:	425b      	negs	r3, r3
 800823a:	697a      	ldr	r2, [r7, #20]
 800823c:	4413      	add	r3, r2
 800823e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	685a      	ldr	r2, [r3, #4]
 8008248:	4b20      	ldr	r3, [pc, #128]	; (80082cc <vPortFree+0xa8>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4013      	ands	r3, r2
 800824e:	2b00      	cmp	r3, #0
 8008250:	d109      	bne.n	8008266 <vPortFree+0x42>
 8008252:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008256:	f383 8811 	msr	BASEPRI, r3
 800825a:	f3bf 8f6f 	isb	sy
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	60fb      	str	r3, [r7, #12]
 8008264:	e7fe      	b.n	8008264 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d009      	beq.n	8008282 <vPortFree+0x5e>
 800826e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008272:	f383 8811 	msr	BASEPRI, r3
 8008276:	f3bf 8f6f 	isb	sy
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	60bb      	str	r3, [r7, #8]
 8008280:	e7fe      	b.n	8008280 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	685a      	ldr	r2, [r3, #4]
 8008286:	4b11      	ldr	r3, [pc, #68]	; (80082cc <vPortFree+0xa8>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4013      	ands	r3, r2
 800828c:	2b00      	cmp	r3, #0
 800828e:	d019      	beq.n	80082c4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d115      	bne.n	80082c4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	685a      	ldr	r2, [r3, #4]
 800829c:	4b0b      	ldr	r3, [pc, #44]	; (80082cc <vPortFree+0xa8>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	43db      	mvns	r3, r3
 80082a2:	401a      	ands	r2, r3
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80082a8:	f000 ffaa 	bl	8009200 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	685a      	ldr	r2, [r3, #4]
 80082b0:	4b07      	ldr	r3, [pc, #28]	; (80082d0 <vPortFree+0xac>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4413      	add	r3, r2
 80082b6:	4a06      	ldr	r2, [pc, #24]	; (80082d0 <vPortFree+0xac>)
 80082b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80082ba:	6938      	ldr	r0, [r7, #16]
 80082bc:	f000 f86c 	bl	8008398 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80082c0:	f000 ffac 	bl	800921c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80082c4:	bf00      	nop
 80082c6:	3718      	adds	r7, #24
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	20004c68 	.word	0x20004c68
 80082d0:	20004c60 	.word	0x20004c60

080082d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80082da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80082de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80082e0:	4b27      	ldr	r3, [pc, #156]	; (8008380 <prvHeapInit+0xac>)
 80082e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f003 0307 	and.w	r3, r3, #7
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00c      	beq.n	8008308 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	3307      	adds	r3, #7
 80082f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f023 0307 	bic.w	r3, r3, #7
 80082fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80082fc:	68ba      	ldr	r2, [r7, #8]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	4a1f      	ldr	r2, [pc, #124]	; (8008380 <prvHeapInit+0xac>)
 8008304:	4413      	add	r3, r2
 8008306:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800830c:	4a1d      	ldr	r2, [pc, #116]	; (8008384 <prvHeapInit+0xb0>)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008312:	4b1c      	ldr	r3, [pc, #112]	; (8008384 <prvHeapInit+0xb0>)
 8008314:	2200      	movs	r2, #0
 8008316:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	4413      	add	r3, r2
 800831e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008320:	2208      	movs	r2, #8
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	1a9b      	subs	r3, r3, r2
 8008326:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f023 0307 	bic.w	r3, r3, #7
 800832e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	4a15      	ldr	r2, [pc, #84]	; (8008388 <prvHeapInit+0xb4>)
 8008334:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008336:	4b14      	ldr	r3, [pc, #80]	; (8008388 <prvHeapInit+0xb4>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2200      	movs	r2, #0
 800833c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800833e:	4b12      	ldr	r3, [pc, #72]	; (8008388 <prvHeapInit+0xb4>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2200      	movs	r2, #0
 8008344:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	1ad2      	subs	r2, r2, r3
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008354:	4b0c      	ldr	r3, [pc, #48]	; (8008388 <prvHeapInit+0xb4>)
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	4a0a      	ldr	r2, [pc, #40]	; (800838c <prvHeapInit+0xb8>)
 8008362:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	4a09      	ldr	r2, [pc, #36]	; (8008390 <prvHeapInit+0xbc>)
 800836a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800836c:	4b09      	ldr	r3, [pc, #36]	; (8008394 <prvHeapInit+0xc0>)
 800836e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008372:	601a      	str	r2, [r3, #0]
}
 8008374:	bf00      	nop
 8008376:	3714      	adds	r7, #20
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr
 8008380:	20001054 	.word	0x20001054
 8008384:	20004c54 	.word	0x20004c54
 8008388:	20004c5c 	.word	0x20004c5c
 800838c:	20004c64 	.word	0x20004c64
 8008390:	20004c60 	.word	0x20004c60
 8008394:	20004c68 	.word	0x20004c68

08008398 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80083a0:	4b28      	ldr	r3, [pc, #160]	; (8008444 <prvInsertBlockIntoFreeList+0xac>)
 80083a2:	60fb      	str	r3, [r7, #12]
 80083a4:	e002      	b.n	80083ac <prvInsertBlockIntoFreeList+0x14>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	60fb      	str	r3, [r7, #12]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d3f7      	bcc.n	80083a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	441a      	add	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d108      	bne.n	80083da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	685a      	ldr	r2, [r3, #4]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	441a      	add	r2, r3
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	441a      	add	r2, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d118      	bne.n	8008420 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	4b15      	ldr	r3, [pc, #84]	; (8008448 <prvInsertBlockIntoFreeList+0xb0>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d00d      	beq.n	8008416 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	685a      	ldr	r2, [r3, #4]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	441a      	add	r2, r3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	601a      	str	r2, [r3, #0]
 8008414:	e008      	b.n	8008428 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008416:	4b0c      	ldr	r3, [pc, #48]	; (8008448 <prvInsertBlockIntoFreeList+0xb0>)
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	601a      	str	r2, [r3, #0]
 800841e:	e003      	b.n	8008428 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008428:	68fa      	ldr	r2, [r7, #12]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	429a      	cmp	r2, r3
 800842e:	d002      	beq.n	8008436 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008436:	bf00      	nop
 8008438:	3714      	adds	r7, #20
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop
 8008444:	20004c54 	.word	0x20004c54
 8008448:	20004c5c 	.word	0x20004c5c

0800844c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d109      	bne.n	8008474 <xQueueGenericReset+0x28>
 8008460:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	60bb      	str	r3, [r7, #8]
 8008472:	e7fe      	b.n	8008472 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008474:	f7ff fd04 	bl	8007e80 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008480:	68f9      	ldr	r1, [r7, #12]
 8008482:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008484:	fb01 f303 	mul.w	r3, r1, r3
 8008488:	441a      	add	r2, r3
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084a4:	3b01      	subs	r3, #1
 80084a6:	68f9      	ldr	r1, [r7, #12]
 80084a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80084aa:	fb01 f303 	mul.w	r3, r1, r3
 80084ae:	441a      	add	r2, r3
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	22ff      	movs	r2, #255	; 0xff
 80084b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	22ff      	movs	r2, #255	; 0xff
 80084c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d114      	bne.n	80084f4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d01a      	beq.n	8008508 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	3310      	adds	r3, #16
 80084d6:	4618      	mov	r0, r3
 80084d8:	f001 f8ac 	bl	8009634 <xTaskRemoveFromEventList>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d012      	beq.n	8008508 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80084e2:	4b0d      	ldr	r3, [pc, #52]	; (8008518 <xQueueGenericReset+0xcc>)
 80084e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084e8:	601a      	str	r2, [r3, #0]
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	e009      	b.n	8008508 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	3310      	adds	r3, #16
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7ff fb04 	bl	8007b06 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	3324      	adds	r3, #36	; 0x24
 8008502:	4618      	mov	r0, r3
 8008504:	f7ff faff 	bl	8007b06 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008508:	f7ff fce8 	bl	8007edc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800850c:	2301      	movs	r3, #1
}
 800850e:	4618      	mov	r0, r3
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	e000ed04 	.word	0xe000ed04

0800851c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800851c:	b580      	push	{r7, lr}
 800851e:	b08a      	sub	sp, #40	; 0x28
 8008520:	af02      	add	r7, sp, #8
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	4613      	mov	r3, r2
 8008528:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d109      	bne.n	8008544 <xQueueGenericCreate+0x28>
 8008530:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008534:	f383 8811 	msr	BASEPRI, r3
 8008538:	f3bf 8f6f 	isb	sy
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	613b      	str	r3, [r7, #16]
 8008542:	e7fe      	b.n	8008542 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d102      	bne.n	8008550 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800854a:	2300      	movs	r3, #0
 800854c:	61fb      	str	r3, [r7, #28]
 800854e:	e004      	b.n	800855a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	68ba      	ldr	r2, [r7, #8]
 8008554:	fb02 f303 	mul.w	r3, r2, r3
 8008558:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	3348      	adds	r3, #72	; 0x48
 800855e:	4618      	mov	r0, r3
 8008560:	f7ff fd9e 	bl	80080a0 <pvPortMalloc>
 8008564:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00b      	beq.n	8008584 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	3348      	adds	r3, #72	; 0x48
 8008570:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008572:	79fa      	ldrb	r2, [r7, #7]
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	4613      	mov	r3, r2
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	68b9      	ldr	r1, [r7, #8]
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f000 f805 	bl	800858e <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8008584:	69bb      	ldr	r3, [r7, #24]
	}
 8008586:	4618      	mov	r0, r3
 8008588:	3720      	adds	r7, #32
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b084      	sub	sp, #16
 8008592:	af00      	add	r7, sp, #0
 8008594:	60f8      	str	r0, [r7, #12]
 8008596:	60b9      	str	r1, [r7, #8]
 8008598:	607a      	str	r2, [r7, #4]
 800859a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d103      	bne.n	80085aa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	69ba      	ldr	r2, [r7, #24]
 80085a6:	601a      	str	r2, [r3, #0]
 80085a8:	e002      	b.n	80085b0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80085bc:	2101      	movs	r1, #1
 80085be:	69b8      	ldr	r0, [r7, #24]
 80085c0:	f7ff ff44 	bl	800844c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80085c4:	bf00      	nop
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b086      	sub	sp, #24
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d109      	bne.n	80085f0 <xQueueCreateCountingSemaphore+0x24>
 80085dc:	f04f 0340 	mov.w	r3, #64	; 0x40
 80085e0:	f383 8811 	msr	BASEPRI, r3
 80085e4:	f3bf 8f6f 	isb	sy
 80085e8:	f3bf 8f4f 	dsb	sy
 80085ec:	613b      	str	r3, [r7, #16]
 80085ee:	e7fe      	b.n	80085ee <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 80085f0:	683a      	ldr	r2, [r7, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d909      	bls.n	800860c <xQueueCreateCountingSemaphore+0x40>
 80085f8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80085fc:	f383 8811 	msr	BASEPRI, r3
 8008600:	f3bf 8f6f 	isb	sy
 8008604:	f3bf 8f4f 	dsb	sy
 8008608:	60fb      	str	r3, [r7, #12]
 800860a:	e7fe      	b.n	800860a <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800860c:	2202      	movs	r2, #2
 800860e:	2100      	movs	r1, #0
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f7ff ff83 	bl	800851c <xQueueGenericCreate>
 8008616:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d002      	beq.n	8008624 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	683a      	ldr	r2, [r7, #0]
 8008622:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008624:	697b      	ldr	r3, [r7, #20]
	}
 8008626:	4618      	mov	r0, r3
 8008628:	3718      	adds	r7, #24
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
	...

08008630 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b08e      	sub	sp, #56	; 0x38
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
 800863c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800863e:	2300      	movs	r3, #0
 8008640:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008648:	2b00      	cmp	r3, #0
 800864a:	d109      	bne.n	8008660 <xQueueGenericSend+0x30>
 800864c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008650:	f383 8811 	msr	BASEPRI, r3
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	62bb      	str	r3, [r7, #40]	; 0x28
 800865e:	e7fe      	b.n	800865e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d103      	bne.n	800866e <xQueueGenericSend+0x3e>
 8008666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866a:	2b00      	cmp	r3, #0
 800866c:	d101      	bne.n	8008672 <xQueueGenericSend+0x42>
 800866e:	2301      	movs	r3, #1
 8008670:	e000      	b.n	8008674 <xQueueGenericSend+0x44>
 8008672:	2300      	movs	r3, #0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d109      	bne.n	800868c <xQueueGenericSend+0x5c>
 8008678:	f04f 0340 	mov.w	r3, #64	; 0x40
 800867c:	f383 8811 	msr	BASEPRI, r3
 8008680:	f3bf 8f6f 	isb	sy
 8008684:	f3bf 8f4f 	dsb	sy
 8008688:	627b      	str	r3, [r7, #36]	; 0x24
 800868a:	e7fe      	b.n	800868a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	2b02      	cmp	r3, #2
 8008690:	d103      	bne.n	800869a <xQueueGenericSend+0x6a>
 8008692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008696:	2b01      	cmp	r3, #1
 8008698:	d101      	bne.n	800869e <xQueueGenericSend+0x6e>
 800869a:	2301      	movs	r3, #1
 800869c:	e000      	b.n	80086a0 <xQueueGenericSend+0x70>
 800869e:	2300      	movs	r3, #0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d109      	bne.n	80086b8 <xQueueGenericSend+0x88>
 80086a4:	f04f 0340 	mov.w	r3, #64	; 0x40
 80086a8:	f383 8811 	msr	BASEPRI, r3
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	623b      	str	r3, [r7, #32]
 80086b6:	e7fe      	b.n	80086b6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086b8:	f001 f9ec 	bl	8009a94 <xTaskGetSchedulerState>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d102      	bne.n	80086c8 <xQueueGenericSend+0x98>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d101      	bne.n	80086cc <xQueueGenericSend+0x9c>
 80086c8:	2301      	movs	r3, #1
 80086ca:	e000      	b.n	80086ce <xQueueGenericSend+0x9e>
 80086cc:	2300      	movs	r3, #0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d109      	bne.n	80086e6 <xQueueGenericSend+0xb6>
 80086d2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80086d6:	f383 8811 	msr	BASEPRI, r3
 80086da:	f3bf 8f6f 	isb	sy
 80086de:	f3bf 8f4f 	dsb	sy
 80086e2:	61fb      	str	r3, [r7, #28]
 80086e4:	e7fe      	b.n	80086e4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80086e6:	f7ff fbcb 	bl	8007e80 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80086ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d302      	bcc.n	80086fc <xQueueGenericSend+0xcc>
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d129      	bne.n	8008750 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80086fc:	683a      	ldr	r2, [r7, #0]
 80086fe:	68b9      	ldr	r1, [r7, #8]
 8008700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008702:	f000 fa6f 	bl	8008be4 <prvCopyDataToQueue>
 8008706:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870c:	2b00      	cmp	r3, #0
 800870e:	d010      	beq.n	8008732 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008712:	3324      	adds	r3, #36	; 0x24
 8008714:	4618      	mov	r0, r3
 8008716:	f000 ff8d 	bl	8009634 <xTaskRemoveFromEventList>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d013      	beq.n	8008748 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008720:	4b3f      	ldr	r3, [pc, #252]	; (8008820 <xQueueGenericSend+0x1f0>)
 8008722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008726:	601a      	str	r2, [r3, #0]
 8008728:	f3bf 8f4f 	dsb	sy
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	e00a      	b.n	8008748 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008734:	2b00      	cmp	r3, #0
 8008736:	d007      	beq.n	8008748 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008738:	4b39      	ldr	r3, [pc, #228]	; (8008820 <xQueueGenericSend+0x1f0>)
 800873a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800873e:	601a      	str	r2, [r3, #0]
 8008740:	f3bf 8f4f 	dsb	sy
 8008744:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008748:	f7ff fbc8 	bl	8007edc <vPortExitCritical>
				return pdPASS;
 800874c:	2301      	movs	r3, #1
 800874e:	e063      	b.n	8008818 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d103      	bne.n	800875e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008756:	f7ff fbc1 	bl	8007edc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800875a:	2300      	movs	r3, #0
 800875c:	e05c      	b.n	8008818 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800875e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008760:	2b00      	cmp	r3, #0
 8008762:	d106      	bne.n	8008772 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8008764:	f107 0314 	add.w	r3, r7, #20
 8008768:	4618      	mov	r0, r3
 800876a:	f001 f82b 	bl	80097c4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800876e:	2301      	movs	r3, #1
 8008770:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008772:	f7ff fbb3 	bl	8007edc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008776:	f000 fd43 	bl	8009200 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800877a:	f7ff fb81 	bl	8007e80 <vPortEnterCritical>
 800877e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008780:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008784:	b25b      	sxtb	r3, r3
 8008786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800878a:	d103      	bne.n	8008794 <xQueueGenericSend+0x164>
 800878c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878e:	2200      	movs	r2, #0
 8008790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008796:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800879a:	b25b      	sxtb	r3, r3
 800879c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a0:	d103      	bne.n	80087aa <xQueueGenericSend+0x17a>
 80087a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a4:	2200      	movs	r2, #0
 80087a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087aa:	f7ff fb97 	bl	8007edc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087ae:	1d3a      	adds	r2, r7, #4
 80087b0:	f107 0314 	add.w	r3, r7, #20
 80087b4:	4611      	mov	r1, r2
 80087b6:	4618      	mov	r0, r3
 80087b8:	f001 f828 	bl	800980c <xTaskCheckForTimeOut>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d124      	bne.n	800880c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80087c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087c4:	f000 fb06 	bl	8008dd4 <prvIsQueueFull>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d018      	beq.n	8008800 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80087ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d0:	3310      	adds	r3, #16
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	4611      	mov	r1, r2
 80087d6:	4618      	mov	r0, r3
 80087d8:	f000 ff08 	bl	80095ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80087dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087de:	f000 fa91 	bl	8008d04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80087e2:	f000 fd1b 	bl	800921c <xTaskResumeAll>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	f47f af7c 	bne.w	80086e6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80087ee:	4b0c      	ldr	r3, [pc, #48]	; (8008820 <xQueueGenericSend+0x1f0>)
 80087f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087f4:	601a      	str	r2, [r3, #0]
 80087f6:	f3bf 8f4f 	dsb	sy
 80087fa:	f3bf 8f6f 	isb	sy
 80087fe:	e772      	b.n	80086e6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008802:	f000 fa7f 	bl	8008d04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008806:	f000 fd09 	bl	800921c <xTaskResumeAll>
 800880a:	e76c      	b.n	80086e6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800880c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800880e:	f000 fa79 	bl	8008d04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008812:	f000 fd03 	bl	800921c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008816:	2300      	movs	r3, #0
		}
	}
}
 8008818:	4618      	mov	r0, r3
 800881a:	3738      	adds	r7, #56	; 0x38
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	e000ed04 	.word	0xe000ed04

08008824 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b08e      	sub	sp, #56	; 0x38
 8008828:	af00      	add	r7, sp, #0
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	607a      	str	r2, [r7, #4]
 8008830:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008838:	2b00      	cmp	r3, #0
 800883a:	d109      	bne.n	8008850 <xQueueGenericSendFromISR+0x2c>
 800883c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008840:	f383 8811 	msr	BASEPRI, r3
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	627b      	str	r3, [r7, #36]	; 0x24
 800884e:	e7fe      	b.n	800884e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d103      	bne.n	800885e <xQueueGenericSendFromISR+0x3a>
 8008856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885a:	2b00      	cmp	r3, #0
 800885c:	d101      	bne.n	8008862 <xQueueGenericSendFromISR+0x3e>
 800885e:	2301      	movs	r3, #1
 8008860:	e000      	b.n	8008864 <xQueueGenericSendFromISR+0x40>
 8008862:	2300      	movs	r3, #0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d109      	bne.n	800887c <xQueueGenericSendFromISR+0x58>
 8008868:	f04f 0340 	mov.w	r3, #64	; 0x40
 800886c:	f383 8811 	msr	BASEPRI, r3
 8008870:	f3bf 8f6f 	isb	sy
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	623b      	str	r3, [r7, #32]
 800887a:	e7fe      	b.n	800887a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	2b02      	cmp	r3, #2
 8008880:	d103      	bne.n	800888a <xQueueGenericSendFromISR+0x66>
 8008882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008886:	2b01      	cmp	r3, #1
 8008888:	d101      	bne.n	800888e <xQueueGenericSendFromISR+0x6a>
 800888a:	2301      	movs	r3, #1
 800888c:	e000      	b.n	8008890 <xQueueGenericSendFromISR+0x6c>
 800888e:	2300      	movs	r3, #0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d109      	bne.n	80088a8 <xQueueGenericSendFromISR+0x84>
 8008894:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008898:	f383 8811 	msr	BASEPRI, r3
 800889c:	f3bf 8f6f 	isb	sy
 80088a0:	f3bf 8f4f 	dsb	sy
 80088a4:	61fb      	str	r3, [r7, #28]
 80088a6:	e7fe      	b.n	80088a6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088a8:	f7ff fbbc 	bl	8008024 <vPortValidateInterruptPriority>
	__asm volatile
 80088ac:	f3ef 8211 	mrs	r2, BASEPRI
 80088b0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80088b4:	f383 8811 	msr	BASEPRI, r3
 80088b8:	f3bf 8f6f 	isb	sy
 80088bc:	f3bf 8f4f 	dsb	sy
 80088c0:	61ba      	str	r2, [r7, #24]
 80088c2:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80088c4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80088c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d302      	bcc.n	80088da <xQueueGenericSendFromISR+0xb6>
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	d12c      	bne.n	8008934 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80088da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088e4:	683a      	ldr	r2, [r7, #0]
 80088e6:	68b9      	ldr	r1, [r7, #8]
 80088e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088ea:	f000 f97b 	bl	8008be4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80088ee:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80088f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f6:	d112      	bne.n	800891e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d016      	beq.n	800892e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008902:	3324      	adds	r3, #36	; 0x24
 8008904:	4618      	mov	r0, r3
 8008906:	f000 fe95 	bl	8009634 <xTaskRemoveFromEventList>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d00e      	beq.n	800892e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00b      	beq.n	800892e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2201      	movs	r2, #1
 800891a:	601a      	str	r2, [r3, #0]
 800891c:	e007      	b.n	800892e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800891e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008922:	3301      	adds	r3, #1
 8008924:	b2db      	uxtb	r3, r3
 8008926:	b25a      	sxtb	r2, r3
 8008928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800892e:	2301      	movs	r3, #1
 8008930:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008932:	e001      	b.n	8008938 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008934:	2300      	movs	r3, #0
 8008936:	637b      	str	r3, [r7, #52]	; 0x34
 8008938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008944:	4618      	mov	r0, r3
 8008946:	3738      	adds	r7, #56	; 0x38
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b08e      	sub	sp, #56	; 0x38
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
 8008958:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800895a:	2300      	movs	r3, #0
 800895c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008964:	2b00      	cmp	r3, #0
 8008966:	d109      	bne.n	800897c <xQueueGenericReceive+0x30>
	__asm volatile
 8008968:	f04f 0340 	mov.w	r3, #64	; 0x40
 800896c:	f383 8811 	msr	BASEPRI, r3
 8008970:	f3bf 8f6f 	isb	sy
 8008974:	f3bf 8f4f 	dsb	sy
 8008978:	627b      	str	r3, [r7, #36]	; 0x24
 800897a:	e7fe      	b.n	800897a <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d103      	bne.n	800898a <xQueueGenericReceive+0x3e>
 8008982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008986:	2b00      	cmp	r3, #0
 8008988:	d101      	bne.n	800898e <xQueueGenericReceive+0x42>
 800898a:	2301      	movs	r3, #1
 800898c:	e000      	b.n	8008990 <xQueueGenericReceive+0x44>
 800898e:	2300      	movs	r3, #0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d109      	bne.n	80089a8 <xQueueGenericReceive+0x5c>
 8008994:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008998:	f383 8811 	msr	BASEPRI, r3
 800899c:	f3bf 8f6f 	isb	sy
 80089a0:	f3bf 8f4f 	dsb	sy
 80089a4:	623b      	str	r3, [r7, #32]
 80089a6:	e7fe      	b.n	80089a6 <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089a8:	f001 f874 	bl	8009a94 <xTaskGetSchedulerState>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d102      	bne.n	80089b8 <xQueueGenericReceive+0x6c>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d101      	bne.n	80089bc <xQueueGenericReceive+0x70>
 80089b8:	2301      	movs	r3, #1
 80089ba:	e000      	b.n	80089be <xQueueGenericReceive+0x72>
 80089bc:	2300      	movs	r3, #0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d109      	bne.n	80089d6 <xQueueGenericReceive+0x8a>
 80089c2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80089c6:	f383 8811 	msr	BASEPRI, r3
 80089ca:	f3bf 8f6f 	isb	sy
 80089ce:	f3bf 8f4f 	dsb	sy
 80089d2:	61fb      	str	r3, [r7, #28]
 80089d4:	e7fe      	b.n	80089d4 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80089d6:	f7ff fa53 	bl	8007e80 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089de:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d046      	beq.n	8008a74 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80089e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80089ec:	68b9      	ldr	r1, [r7, #8]
 80089ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089f0:	f000 f962 	bl	8008cb8 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d121      	bne.n	8008a3e <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80089fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fc:	1e5a      	subs	r2, r3, #1
 80089fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a00:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d104      	bne.n	8008a14 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008a0a:	f001 f95b 	bl	8009cc4 <pvTaskIncrementMutexHeldCount>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a12:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d027      	beq.n	8008a6c <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1e:	3310      	adds	r3, #16
 8008a20:	4618      	mov	r0, r3
 8008a22:	f000 fe07 	bl	8009634 <xTaskRemoveFromEventList>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d01f      	beq.n	8008a6c <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8008a2c:	4b4f      	ldr	r3, [pc, #316]	; (8008b6c <xQueueGenericReceive+0x220>)
 8008a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a32:	601a      	str	r2, [r3, #0]
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	f3bf 8f6f 	isb	sy
 8008a3c:	e016      	b.n	8008a6c <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8008a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a42:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00f      	beq.n	8008a6c <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4e:	3324      	adds	r3, #36	; 0x24
 8008a50:	4618      	mov	r0, r3
 8008a52:	f000 fdef 	bl	8009634 <xTaskRemoveFromEventList>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d007      	beq.n	8008a6c <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8008a5c:	4b43      	ldr	r3, [pc, #268]	; (8008b6c <xQueueGenericReceive+0x220>)
 8008a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a62:	601a      	str	r2, [r3, #0]
 8008a64:	f3bf 8f4f 	dsb	sy
 8008a68:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8008a6c:	f7ff fa36 	bl	8007edc <vPortExitCritical>
				return pdPASS;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e077      	b.n	8008b64 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d103      	bne.n	8008a82 <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a7a:	f7ff fa2f 	bl	8007edc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	e070      	b.n	8008b64 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d106      	bne.n	8008a96 <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8008a88:	f107 0314 	add.w	r3, r7, #20
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f000 fe99 	bl	80097c4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a92:	2301      	movs	r3, #1
 8008a94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a96:	f7ff fa21 	bl	8007edc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a9a:	f000 fbb1 	bl	8009200 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a9e:	f7ff f9ef 	bl	8007e80 <vPortEnterCritical>
 8008aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008aa8:	b25b      	sxtb	r3, r3
 8008aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aae:	d103      	bne.n	8008ab8 <xQueueGenericReceive+0x16c>
 8008ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008abe:	b25b      	sxtb	r3, r3
 8008ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac4:	d103      	bne.n	8008ace <xQueueGenericReceive+0x182>
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ace:	f7ff fa05 	bl	8007edc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ad2:	1d3a      	adds	r2, r7, #4
 8008ad4:	f107 0314 	add.w	r3, r7, #20
 8008ad8:	4611      	mov	r1, r2
 8008ada:	4618      	mov	r0, r3
 8008adc:	f000 fe96 	bl	800980c <xTaskCheckForTimeOut>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d131      	bne.n	8008b4a <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ae6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ae8:	f000 f95e 	bl	8008da8 <prvIsQueueEmpty>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d025      	beq.n	8008b3e <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d108      	bne.n	8008b0c <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8008afa:	f7ff f9c1 	bl	8007e80 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	4618      	mov	r0, r3
 8008b04:	f000 ffe4 	bl	8009ad0 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8008b08:	f7ff f9e8 	bl	8007edc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0e:	3324      	adds	r3, #36	; 0x24
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	4611      	mov	r1, r2
 8008b14:	4618      	mov	r0, r3
 8008b16:	f000 fd69 	bl	80095ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008b1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b1c:	f000 f8f2 	bl	8008d04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b20:	f000 fb7c 	bl	800921c <xTaskResumeAll>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	f47f af55 	bne.w	80089d6 <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8008b2c:	4b0f      	ldr	r3, [pc, #60]	; (8008b6c <xQueueGenericReceive+0x220>)
 8008b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b32:	601a      	str	r2, [r3, #0]
 8008b34:	f3bf 8f4f 	dsb	sy
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	e74b      	b.n	80089d6 <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008b3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b40:	f000 f8e0 	bl	8008d04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b44:	f000 fb6a 	bl	800921c <xTaskResumeAll>
 8008b48:	e745      	b.n	80089d6 <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8008b4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b4c:	f000 f8da 	bl	8008d04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b50:	f000 fb64 	bl	800921c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b56:	f000 f927 	bl	8008da8 <prvIsQueueEmpty>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f43f af3a 	beq.w	80089d6 <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b62:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3738      	adds	r7, #56	; 0x38
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	e000ed04 	.word	0xe000ed04

08008b70 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d109      	bne.n	8008b92 <uxQueueMessagesWaiting+0x22>
 8008b7e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008b82:	f383 8811 	msr	BASEPRI, r3
 8008b86:	f3bf 8f6f 	isb	sy
 8008b8a:	f3bf 8f4f 	dsb	sy
 8008b8e:	60bb      	str	r3, [r7, #8]
 8008b90:	e7fe      	b.n	8008b90 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8008b92:	f7ff f975 	bl	8007e80 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008b9c:	f7ff f99e 	bl	8007edc <vPortExitCritical>

	return uxReturn;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b084      	sub	sp, #16
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d109      	bne.n	8008bd0 <vQueueDelete+0x26>
 8008bbc:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008bc0:	f383 8811 	msr	BASEPRI, r3
 8008bc4:	f3bf 8f6f 	isb	sy
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	60bb      	str	r3, [r7, #8]
 8008bce:	e7fe      	b.n	8008bce <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f000 f93f 	bl	8008e54 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f7ff fb24 	bl	8008224 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008bdc:	bf00      	nop
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b086      	sub	sp, #24
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d10d      	bne.n	8008c1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d14d      	bne.n	8008ca6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f000 ffd4 	bl	8009bbc <xTaskPriorityDisinherit>
 8008c14:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	605a      	str	r2, [r3, #4]
 8008c1c:	e043      	b.n	8008ca6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d119      	bne.n	8008c58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6898      	ldr	r0, [r3, #8]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	68b9      	ldr	r1, [r7, #8]
 8008c30:	f008 f9e5 	bl	8010ffe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	689a      	ldr	r2, [r3, #8]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3c:	441a      	add	r2, r3
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	689a      	ldr	r2, [r3, #8]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d32b      	bcc.n	8008ca6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	609a      	str	r2, [r3, #8]
 8008c56:	e026      	b.n	8008ca6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	68d8      	ldr	r0, [r3, #12]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c60:	461a      	mov	r2, r3
 8008c62:	68b9      	ldr	r1, [r7, #8]
 8008c64:	f008 f9cb 	bl	8010ffe <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	68da      	ldr	r2, [r3, #12]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c70:	425b      	negs	r3, r3
 8008c72:	441a      	add	r2, r3
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	68da      	ldr	r2, [r3, #12]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d207      	bcs.n	8008c94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	685a      	ldr	r2, [r3, #4]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c8c:	425b      	negs	r3, r3
 8008c8e:	441a      	add	r2, r3
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d105      	bne.n	8008ca6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d002      	beq.n	8008ca6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	1c5a      	adds	r2, r3, #1
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008cae:	697b      	ldr	r3, [r7, #20]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3718      	adds	r7, #24
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d018      	beq.n	8008cfc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	68da      	ldr	r2, [r3, #12]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd2:	441a      	add	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68da      	ldr	r2, [r3, #12]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d303      	bcc.n	8008cec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	68d9      	ldr	r1, [r3, #12]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	6838      	ldr	r0, [r7, #0]
 8008cf8:	f008 f981 	bl	8010ffe <memcpy>
	}
}
 8008cfc:	bf00      	nop
 8008cfe:	3708      	adds	r7, #8
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008d0c:	f7ff f8b8 	bl	8007e80 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d18:	e011      	b.n	8008d3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d012      	beq.n	8008d48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	3324      	adds	r3, #36	; 0x24
 8008d26:	4618      	mov	r0, r3
 8008d28:	f000 fc84 	bl	8009634 <xTaskRemoveFromEventList>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d001      	beq.n	8008d36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008d32:	f000 fdc9 	bl	80098c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008d36:	7bfb      	ldrb	r3, [r7, #15]
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	dce9      	bgt.n	8008d1a <prvUnlockQueue+0x16>
 8008d46:	e000      	b.n	8008d4a <prvUnlockQueue+0x46>
					break;
 8008d48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	22ff      	movs	r2, #255	; 0xff
 8008d4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008d52:	f7ff f8c3 	bl	8007edc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008d56:	f7ff f893 	bl	8007e80 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d62:	e011      	b.n	8008d88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	691b      	ldr	r3, [r3, #16]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d012      	beq.n	8008d92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	3310      	adds	r3, #16
 8008d70:	4618      	mov	r0, r3
 8008d72:	f000 fc5f 	bl	8009634 <xTaskRemoveFromEventList>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d001      	beq.n	8008d80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008d7c:	f000 fda4 	bl	80098c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008d80:	7bbb      	ldrb	r3, [r7, #14]
 8008d82:	3b01      	subs	r3, #1
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	dce9      	bgt.n	8008d64 <prvUnlockQueue+0x60>
 8008d90:	e000      	b.n	8008d94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008d92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	22ff      	movs	r2, #255	; 0xff
 8008d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008d9c:	f7ff f89e 	bl	8007edc <vPortExitCritical>
}
 8008da0:	bf00      	nop
 8008da2:	3710      	adds	r7, #16
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008db0:	f7ff f866 	bl	8007e80 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d102      	bne.n	8008dc2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	60fb      	str	r3, [r7, #12]
 8008dc0:	e001      	b.n	8008dc6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008dc6:	f7ff f889 	bl	8007edc <vPortExitCritical>

	return xReturn;
 8008dca:	68fb      	ldr	r3, [r7, #12]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ddc:	f7ff f850 	bl	8007e80 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d102      	bne.n	8008df2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008dec:	2301      	movs	r3, #1
 8008dee:	60fb      	str	r3, [r7, #12]
 8008df0:	e001      	b.n	8008df6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008df2:	2300      	movs	r3, #0
 8008df4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008df6:	f7ff f871 	bl	8007edc <vPortExitCritical>

	return xReturn;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e0e:	2300      	movs	r3, #0
 8008e10:	60fb      	str	r3, [r7, #12]
 8008e12:	e014      	b.n	8008e3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008e14:	4a0e      	ldr	r2, [pc, #56]	; (8008e50 <vQueueAddToRegistry+0x4c>)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10b      	bne.n	8008e38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008e20:	490b      	ldr	r1, [pc, #44]	; (8008e50 <vQueueAddToRegistry+0x4c>)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	683a      	ldr	r2, [r7, #0]
 8008e26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008e2a:	4a09      	ldr	r2, [pc, #36]	; (8008e50 <vQueueAddToRegistry+0x4c>)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	00db      	lsls	r3, r3, #3
 8008e30:	4413      	add	r3, r2
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008e36:	e005      	b.n	8008e44 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	60fb      	str	r3, [r7, #12]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2b07      	cmp	r3, #7
 8008e42:	d9e7      	bls.n	8008e14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008e44:	bf00      	nop
 8008e46:	3714      	adds	r7, #20
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr
 8008e50:	20006950 	.word	0x20006950

08008e54 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008e54:	b480      	push	{r7}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	60fb      	str	r3, [r7, #12]
 8008e60:	e016      	b.n	8008e90 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008e62:	4a10      	ldr	r2, [pc, #64]	; (8008ea4 <vQueueUnregisterQueue+0x50>)
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	00db      	lsls	r3, r3, #3
 8008e68:	4413      	add	r3, r2
 8008e6a:	685a      	ldr	r2, [r3, #4]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d10b      	bne.n	8008e8a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008e72:	4a0c      	ldr	r2, [pc, #48]	; (8008ea4 <vQueueUnregisterQueue+0x50>)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2100      	movs	r1, #0
 8008e78:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008e7c:	4a09      	ldr	r2, [pc, #36]	; (8008ea4 <vQueueUnregisterQueue+0x50>)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	00db      	lsls	r3, r3, #3
 8008e82:	4413      	add	r3, r2
 8008e84:	2200      	movs	r2, #0
 8008e86:	605a      	str	r2, [r3, #4]
				break;
 8008e88:	e005      	b.n	8008e96 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	60fb      	str	r3, [r7, #12]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2b07      	cmp	r3, #7
 8008e94:	d9e5      	bls.n	8008e62 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008e96:	bf00      	nop
 8008e98:	3714      	adds	r7, #20
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	20006950 	.word	0x20006950

08008ea8 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b08c      	sub	sp, #48	; 0x30
 8008eac:	af04      	add	r7, sp, #16
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	603b      	str	r3, [r7, #0]
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eb8:	88fb      	ldrh	r3, [r7, #6]
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7ff f8ef 	bl	80080a0 <pvPortMalloc>
 8008ec2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00e      	beq.n	8008ee8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008eca:	2054      	movs	r0, #84	; 0x54
 8008ecc:	f7ff f8e8 	bl	80080a0 <pvPortMalloc>
 8008ed0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d003      	beq.n	8008ee0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	697a      	ldr	r2, [r7, #20]
 8008edc:	631a      	str	r2, [r3, #48]	; 0x30
 8008ede:	e005      	b.n	8008eec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008ee0:	6978      	ldr	r0, [r7, #20]
 8008ee2:	f7ff f99f 	bl	8008224 <vPortFree>
 8008ee6:	e001      	b.n	8008eec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d013      	beq.n	8008f1a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ef2:	88fa      	ldrh	r2, [r7, #6]
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	9303      	str	r3, [sp, #12]
 8008ef8:	69fb      	ldr	r3, [r7, #28]
 8008efa:	9302      	str	r3, [sp, #8]
 8008efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efe:	9301      	str	r3, [sp, #4]
 8008f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f02:	9300      	str	r3, [sp, #0]
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	68b9      	ldr	r1, [r7, #8]
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f000 f80e 	bl	8008f2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f0e:	69f8      	ldr	r0, [r7, #28]
 8008f10:	f000 f892 	bl	8009038 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008f14:	2301      	movs	r3, #1
 8008f16:	61bb      	str	r3, [r7, #24]
 8008f18:	e002      	b.n	8008f20 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008f20:	69bb      	ldr	r3, [r7, #24]
	}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3720      	adds	r7, #32
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b088      	sub	sp, #32
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	60f8      	str	r0, [r7, #12]
 8008f32:	60b9      	str	r1, [r7, #8]
 8008f34:	607a      	str	r2, [r7, #4]
 8008f36:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	461a      	mov	r2, r3
 8008f42:	21a5      	movs	r1, #165	; 0xa5
 8008f44:	f008 f880 	bl	8011048 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008f52:	3b01      	subs	r3, #1
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	4413      	add	r3, r2
 8008f58:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	f023 0307 	bic.w	r3, r3, #7
 8008f60:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	f003 0307 	and.w	r3, r3, #7
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d009      	beq.n	8008f80 <prvInitialiseNewTask+0x56>
 8008f6c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008f70:	f383 8811 	msr	BASEPRI, r3
 8008f74:	f3bf 8f6f 	isb	sy
 8008f78:	f3bf 8f4f 	dsb	sy
 8008f7c:	617b      	str	r3, [r7, #20]
 8008f7e:	e7fe      	b.n	8008f7e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f80:	2300      	movs	r3, #0
 8008f82:	61fb      	str	r3, [r7, #28]
 8008f84:	e012      	b.n	8008fac <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	7819      	ldrb	r1, [r3, #0]
 8008f8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	4413      	add	r3, r2
 8008f94:	3334      	adds	r3, #52	; 0x34
 8008f96:	460a      	mov	r2, r1
 8008f98:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008f9a:	68ba      	ldr	r2, [r7, #8]
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	4413      	add	r3, r2
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d006      	beq.n	8008fb4 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	3301      	adds	r3, #1
 8008faa:	61fb      	str	r3, [r7, #28]
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	2b0f      	cmp	r3, #15
 8008fb0:	d9e9      	bls.n	8008f86 <prvInitialiseNewTask+0x5c>
 8008fb2:	e000      	b.n	8008fb6 <prvInitialiseNewTask+0x8c>
		{
			break;
 8008fb4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc0:	2b06      	cmp	r3, #6
 8008fc2:	d901      	bls.n	8008fc8 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008fc4:	2306      	movs	r3, #6
 8008fc6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fcc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fd2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fdc:	3304      	adds	r3, #4
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7fe fdb1 	bl	8007b46 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe6:	3318      	adds	r3, #24
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7fe fdac 	bl	8007b46 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ff2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff6:	f1c3 0207 	rsb	r2, r3, #7
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009002:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009006:	2200      	movs	r2, #0
 8009008:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800900a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900c:	2200      	movs	r2, #0
 800900e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009012:	683a      	ldr	r2, [r7, #0]
 8009014:	68f9      	ldr	r1, [r7, #12]
 8009016:	69b8      	ldr	r0, [r7, #24]
 8009018:	f7fe fe2a 	bl	8007c70 <pxPortInitialiseStack>
 800901c:	4602      	mov	r2, r0
 800901e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009020:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009024:	2b00      	cmp	r3, #0
 8009026:	d002      	beq.n	800902e <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800902a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800902c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800902e:	bf00      	nop
 8009030:	3720      	adds	r7, #32
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
	...

08009038 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009040:	f7fe ff1e 	bl	8007e80 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009044:	4b2a      	ldr	r3, [pc, #168]	; (80090f0 <prvAddNewTaskToReadyList+0xb8>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	3301      	adds	r3, #1
 800904a:	4a29      	ldr	r2, [pc, #164]	; (80090f0 <prvAddNewTaskToReadyList+0xb8>)
 800904c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800904e:	4b29      	ldr	r3, [pc, #164]	; (80090f4 <prvAddNewTaskToReadyList+0xbc>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d109      	bne.n	800906a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009056:	4a27      	ldr	r2, [pc, #156]	; (80090f4 <prvAddNewTaskToReadyList+0xbc>)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800905c:	4b24      	ldr	r3, [pc, #144]	; (80090f0 <prvAddNewTaskToReadyList+0xb8>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2b01      	cmp	r3, #1
 8009062:	d110      	bne.n	8009086 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009064:	f000 fc54 	bl	8009910 <prvInitialiseTaskLists>
 8009068:	e00d      	b.n	8009086 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800906a:	4b23      	ldr	r3, [pc, #140]	; (80090f8 <prvAddNewTaskToReadyList+0xc0>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d109      	bne.n	8009086 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009072:	4b20      	ldr	r3, [pc, #128]	; (80090f4 <prvAddNewTaskToReadyList+0xbc>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907c:	429a      	cmp	r2, r3
 800907e:	d802      	bhi.n	8009086 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009080:	4a1c      	ldr	r2, [pc, #112]	; (80090f4 <prvAddNewTaskToReadyList+0xbc>)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009086:	4b1d      	ldr	r3, [pc, #116]	; (80090fc <prvAddNewTaskToReadyList+0xc4>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3301      	adds	r3, #1
 800908c:	4a1b      	ldr	r2, [pc, #108]	; (80090fc <prvAddNewTaskToReadyList+0xc4>)
 800908e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009094:	2201      	movs	r2, #1
 8009096:	409a      	lsls	r2, r3
 8009098:	4b19      	ldr	r3, [pc, #100]	; (8009100 <prvAddNewTaskToReadyList+0xc8>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4313      	orrs	r3, r2
 800909e:	4a18      	ldr	r2, [pc, #96]	; (8009100 <prvAddNewTaskToReadyList+0xc8>)
 80090a0:	6013      	str	r3, [r2, #0]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a6:	4613      	mov	r3, r2
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	4413      	add	r3, r2
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	4a15      	ldr	r2, [pc, #84]	; (8009104 <prvAddNewTaskToReadyList+0xcc>)
 80090b0:	441a      	add	r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	3304      	adds	r3, #4
 80090b6:	4619      	mov	r1, r3
 80090b8:	4610      	mov	r0, r2
 80090ba:	f7fe fd51 	bl	8007b60 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80090be:	f7fe ff0d 	bl	8007edc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80090c2:	4b0d      	ldr	r3, [pc, #52]	; (80090f8 <prvAddNewTaskToReadyList+0xc0>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00e      	beq.n	80090e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80090ca:	4b0a      	ldr	r3, [pc, #40]	; (80090f4 <prvAddNewTaskToReadyList+0xbc>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d207      	bcs.n	80090e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80090d8:	4b0b      	ldr	r3, [pc, #44]	; (8009108 <prvAddNewTaskToReadyList+0xd0>)
 80090da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090de:	601a      	str	r2, [r3, #0]
 80090e0:	f3bf 8f4f 	dsb	sy
 80090e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090e8:	bf00      	nop
 80090ea:	3708      	adds	r7, #8
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	20004d6c 	.word	0x20004d6c
 80090f4:	20004c6c 	.word	0x20004c6c
 80090f8:	20004d78 	.word	0x20004d78
 80090fc:	20004d88 	.word	0x20004d88
 8009100:	20004d74 	.word	0x20004d74
 8009104:	20004c70 	.word	0x20004c70
 8009108:	e000ed04 	.word	0xe000ed04

0800910c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009114:	2300      	movs	r3, #0
 8009116:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d016      	beq.n	800914c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800911e:	4b13      	ldr	r3, [pc, #76]	; (800916c <vTaskDelay+0x60>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d009      	beq.n	800913a <vTaskDelay+0x2e>
 8009126:	f04f 0340 	mov.w	r3, #64	; 0x40
 800912a:	f383 8811 	msr	BASEPRI, r3
 800912e:	f3bf 8f6f 	isb	sy
 8009132:	f3bf 8f4f 	dsb	sy
 8009136:	60bb      	str	r3, [r7, #8]
 8009138:	e7fe      	b.n	8009138 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800913a:	f000 f861 	bl	8009200 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800913e:	2100      	movs	r1, #0
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 feab 	bl	8009e9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009146:	f000 f869 	bl	800921c <xTaskResumeAll>
 800914a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d107      	bne.n	8009162 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009152:	4b07      	ldr	r3, [pc, #28]	; (8009170 <vTaskDelay+0x64>)
 8009154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009158:	601a      	str	r2, [r3, #0]
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009162:	bf00      	nop
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	20004d94 	.word	0x20004d94
 8009170:	e000ed04 	.word	0xe000ed04

08009174 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b086      	sub	sp, #24
 8009178:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800917a:	4b1b      	ldr	r3, [pc, #108]	; (80091e8 <vTaskStartScheduler+0x74>)
 800917c:	9301      	str	r3, [sp, #4]
 800917e:	2300      	movs	r3, #0
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	2300      	movs	r3, #0
 8009184:	2280      	movs	r2, #128	; 0x80
 8009186:	4919      	ldr	r1, [pc, #100]	; (80091ec <vTaskStartScheduler+0x78>)
 8009188:	4819      	ldr	r0, [pc, #100]	; (80091f0 <vTaskStartScheduler+0x7c>)
 800918a:	f7ff fe8d 	bl	8008ea8 <xTaskCreate>
 800918e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2b01      	cmp	r3, #1
 8009194:	d115      	bne.n	80091c2 <vTaskStartScheduler+0x4e>
 8009196:	f04f 0340 	mov.w	r3, #64	; 0x40
 800919a:	f383 8811 	msr	BASEPRI, r3
 800919e:	f3bf 8f6f 	isb	sy
 80091a2:	f3bf 8f4f 	dsb	sy
 80091a6:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80091a8:	4b12      	ldr	r3, [pc, #72]	; (80091f4 <vTaskStartScheduler+0x80>)
 80091aa:	f04f 32ff 	mov.w	r2, #4294967295
 80091ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80091b0:	4b11      	ldr	r3, [pc, #68]	; (80091f8 <vTaskStartScheduler+0x84>)
 80091b2:	2201      	movs	r2, #1
 80091b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80091b6:	4b11      	ldr	r3, [pc, #68]	; (80091fc <vTaskStartScheduler+0x88>)
 80091b8:	2200      	movs	r2, #0
 80091ba:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80091bc:	f7fe fdd4 	bl	8007d68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80091c0:	e00d      	b.n	80091de <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c8:	d109      	bne.n	80091de <vTaskStartScheduler+0x6a>
 80091ca:	f04f 0340 	mov.w	r3, #64	; 0x40
 80091ce:	f383 8811 	msr	BASEPRI, r3
 80091d2:	f3bf 8f6f 	isb	sy
 80091d6:	f3bf 8f4f 	dsb	sy
 80091da:	607b      	str	r3, [r7, #4]
 80091dc:	e7fe      	b.n	80091dc <vTaskStartScheduler+0x68>
}
 80091de:	bf00      	nop
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	20004d90 	.word	0x20004d90
 80091ec:	080113b8 	.word	0x080113b8
 80091f0:	080098e1 	.word	0x080098e1
 80091f4:	20004d8c 	.word	0x20004d8c
 80091f8:	20004d78 	.word	0x20004d78
 80091fc:	20004d70 	.word	0x20004d70

08009200 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009200:	b480      	push	{r7}
 8009202:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009204:	4b04      	ldr	r3, [pc, #16]	; (8009218 <vTaskSuspendAll+0x18>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	3301      	adds	r3, #1
 800920a:	4a03      	ldr	r2, [pc, #12]	; (8009218 <vTaskSuspendAll+0x18>)
 800920c:	6013      	str	r3, [r2, #0]
}
 800920e:	bf00      	nop
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr
 8009218:	20004d94 	.word	0x20004d94

0800921c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009222:	2300      	movs	r3, #0
 8009224:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009226:	2300      	movs	r3, #0
 8009228:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800922a:	4b41      	ldr	r3, [pc, #260]	; (8009330 <xTaskResumeAll+0x114>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d109      	bne.n	8009246 <xTaskResumeAll+0x2a>
 8009232:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009236:	f383 8811 	msr	BASEPRI, r3
 800923a:	f3bf 8f6f 	isb	sy
 800923e:	f3bf 8f4f 	dsb	sy
 8009242:	603b      	str	r3, [r7, #0]
 8009244:	e7fe      	b.n	8009244 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009246:	f7fe fe1b 	bl	8007e80 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800924a:	4b39      	ldr	r3, [pc, #228]	; (8009330 <xTaskResumeAll+0x114>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	3b01      	subs	r3, #1
 8009250:	4a37      	ldr	r2, [pc, #220]	; (8009330 <xTaskResumeAll+0x114>)
 8009252:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009254:	4b36      	ldr	r3, [pc, #216]	; (8009330 <xTaskResumeAll+0x114>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d161      	bne.n	8009320 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800925c:	4b35      	ldr	r3, [pc, #212]	; (8009334 <xTaskResumeAll+0x118>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d05d      	beq.n	8009320 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009264:	e02e      	b.n	80092c4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009266:	4b34      	ldr	r3, [pc, #208]	; (8009338 <xTaskResumeAll+0x11c>)
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	3318      	adds	r3, #24
 8009272:	4618      	mov	r0, r3
 8009274:	f7fe fcd1 	bl	8007c1a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	3304      	adds	r3, #4
 800927c:	4618      	mov	r0, r3
 800927e:	f7fe fccc 	bl	8007c1a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009286:	2201      	movs	r2, #1
 8009288:	409a      	lsls	r2, r3
 800928a:	4b2c      	ldr	r3, [pc, #176]	; (800933c <xTaskResumeAll+0x120>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4313      	orrs	r3, r2
 8009290:	4a2a      	ldr	r2, [pc, #168]	; (800933c <xTaskResumeAll+0x120>)
 8009292:	6013      	str	r3, [r2, #0]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009298:	4613      	mov	r3, r2
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	4413      	add	r3, r2
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4a27      	ldr	r2, [pc, #156]	; (8009340 <xTaskResumeAll+0x124>)
 80092a2:	441a      	add	r2, r3
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	3304      	adds	r3, #4
 80092a8:	4619      	mov	r1, r3
 80092aa:	4610      	mov	r0, r2
 80092ac:	f7fe fc58 	bl	8007b60 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b4:	4b23      	ldr	r3, [pc, #140]	; (8009344 <xTaskResumeAll+0x128>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d302      	bcc.n	80092c4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80092be:	4b22      	ldr	r3, [pc, #136]	; (8009348 <xTaskResumeAll+0x12c>)
 80092c0:	2201      	movs	r2, #1
 80092c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092c4:	4b1c      	ldr	r3, [pc, #112]	; (8009338 <xTaskResumeAll+0x11c>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d1cc      	bne.n	8009266 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d001      	beq.n	80092d6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80092d2:	f000 fba9 	bl	8009a28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80092d6:	4b1d      	ldr	r3, [pc, #116]	; (800934c <xTaskResumeAll+0x130>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d010      	beq.n	8009304 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80092e2:	f000 f847 	bl	8009374 <xTaskIncrementTick>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d002      	beq.n	80092f2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80092ec:	4b16      	ldr	r3, [pc, #88]	; (8009348 <xTaskResumeAll+0x12c>)
 80092ee:	2201      	movs	r2, #1
 80092f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	3b01      	subs	r3, #1
 80092f6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1f1      	bne.n	80092e2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80092fe:	4b13      	ldr	r3, [pc, #76]	; (800934c <xTaskResumeAll+0x130>)
 8009300:	2200      	movs	r2, #0
 8009302:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009304:	4b10      	ldr	r3, [pc, #64]	; (8009348 <xTaskResumeAll+0x12c>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d009      	beq.n	8009320 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800930c:	2301      	movs	r3, #1
 800930e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009310:	4b0f      	ldr	r3, [pc, #60]	; (8009350 <xTaskResumeAll+0x134>)
 8009312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009316:	601a      	str	r2, [r3, #0]
 8009318:	f3bf 8f4f 	dsb	sy
 800931c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009320:	f7fe fddc 	bl	8007edc <vPortExitCritical>

	return xAlreadyYielded;
 8009324:	68bb      	ldr	r3, [r7, #8]
}
 8009326:	4618      	mov	r0, r3
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	20004d94 	.word	0x20004d94
 8009334:	20004d6c 	.word	0x20004d6c
 8009338:	20004d2c 	.word	0x20004d2c
 800933c:	20004d74 	.word	0x20004d74
 8009340:	20004c70 	.word	0x20004c70
 8009344:	20004c6c 	.word	0x20004c6c
 8009348:	20004d80 	.word	0x20004d80
 800934c:	20004d7c 	.word	0x20004d7c
 8009350:	e000ed04 	.word	0xe000ed04

08009354 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800935a:	4b05      	ldr	r3, [pc, #20]	; (8009370 <xTaskGetTickCount+0x1c>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009360:	687b      	ldr	r3, [r7, #4]
}
 8009362:	4618      	mov	r0, r3
 8009364:	370c      	adds	r7, #12
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr
 800936e:	bf00      	nop
 8009370:	20004d70 	.word	0x20004d70

08009374 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b086      	sub	sp, #24
 8009378:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800937a:	2300      	movs	r3, #0
 800937c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800937e:	4b50      	ldr	r3, [pc, #320]	; (80094c0 <xTaskIncrementTick+0x14c>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	f040 808c 	bne.w	80094a0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8009388:	4b4e      	ldr	r3, [pc, #312]	; (80094c4 <xTaskIncrementTick+0x150>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	3301      	adds	r3, #1
 800938e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009390:	4a4c      	ldr	r2, [pc, #304]	; (80094c4 <xTaskIncrementTick+0x150>)
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d11f      	bne.n	80093dc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800939c:	4b4a      	ldr	r3, [pc, #296]	; (80094c8 <xTaskIncrementTick+0x154>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d009      	beq.n	80093ba <xTaskIncrementTick+0x46>
 80093a6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80093aa:	f383 8811 	msr	BASEPRI, r3
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	603b      	str	r3, [r7, #0]
 80093b8:	e7fe      	b.n	80093b8 <xTaskIncrementTick+0x44>
 80093ba:	4b43      	ldr	r3, [pc, #268]	; (80094c8 <xTaskIncrementTick+0x154>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	60fb      	str	r3, [r7, #12]
 80093c0:	4b42      	ldr	r3, [pc, #264]	; (80094cc <xTaskIncrementTick+0x158>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a40      	ldr	r2, [pc, #256]	; (80094c8 <xTaskIncrementTick+0x154>)
 80093c6:	6013      	str	r3, [r2, #0]
 80093c8:	4a40      	ldr	r2, [pc, #256]	; (80094cc <xTaskIncrementTick+0x158>)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6013      	str	r3, [r2, #0]
 80093ce:	4b40      	ldr	r3, [pc, #256]	; (80094d0 <xTaskIncrementTick+0x15c>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	3301      	adds	r3, #1
 80093d4:	4a3e      	ldr	r2, [pc, #248]	; (80094d0 <xTaskIncrementTick+0x15c>)
 80093d6:	6013      	str	r3, [r2, #0]
 80093d8:	f000 fb26 	bl	8009a28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80093dc:	4b3d      	ldr	r3, [pc, #244]	; (80094d4 <xTaskIncrementTick+0x160>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	693a      	ldr	r2, [r7, #16]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d34d      	bcc.n	8009482 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093e6:	4b38      	ldr	r3, [pc, #224]	; (80094c8 <xTaskIncrementTick+0x154>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d101      	bne.n	80093f4 <xTaskIncrementTick+0x80>
 80093f0:	2301      	movs	r3, #1
 80093f2:	e000      	b.n	80093f6 <xTaskIncrementTick+0x82>
 80093f4:	2300      	movs	r3, #0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d004      	beq.n	8009404 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093fa:	4b36      	ldr	r3, [pc, #216]	; (80094d4 <xTaskIncrementTick+0x160>)
 80093fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009400:	601a      	str	r2, [r3, #0]
					break;
 8009402:	e03e      	b.n	8009482 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009404:	4b30      	ldr	r3, [pc, #192]	; (80094c8 <xTaskIncrementTick+0x154>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009414:	693a      	ldr	r2, [r7, #16]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	429a      	cmp	r2, r3
 800941a:	d203      	bcs.n	8009424 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800941c:	4a2d      	ldr	r2, [pc, #180]	; (80094d4 <xTaskIncrementTick+0x160>)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6013      	str	r3, [r2, #0]
						break;
 8009422:	e02e      	b.n	8009482 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	3304      	adds	r3, #4
 8009428:	4618      	mov	r0, r3
 800942a:	f7fe fbf6 	bl	8007c1a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009432:	2b00      	cmp	r3, #0
 8009434:	d004      	beq.n	8009440 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	3318      	adds	r3, #24
 800943a:	4618      	mov	r0, r3
 800943c:	f7fe fbed 	bl	8007c1a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009444:	2201      	movs	r2, #1
 8009446:	409a      	lsls	r2, r3
 8009448:	4b23      	ldr	r3, [pc, #140]	; (80094d8 <xTaskIncrementTick+0x164>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4313      	orrs	r3, r2
 800944e:	4a22      	ldr	r2, [pc, #136]	; (80094d8 <xTaskIncrementTick+0x164>)
 8009450:	6013      	str	r3, [r2, #0]
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009456:	4613      	mov	r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	4413      	add	r3, r2
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	4a1f      	ldr	r2, [pc, #124]	; (80094dc <xTaskIncrementTick+0x168>)
 8009460:	441a      	add	r2, r3
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	3304      	adds	r3, #4
 8009466:	4619      	mov	r1, r3
 8009468:	4610      	mov	r0, r2
 800946a:	f7fe fb79 	bl	8007b60 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009472:	4b1b      	ldr	r3, [pc, #108]	; (80094e0 <xTaskIncrementTick+0x16c>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009478:	429a      	cmp	r2, r3
 800947a:	d3b4      	bcc.n	80093e6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800947c:	2301      	movs	r3, #1
 800947e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009480:	e7b1      	b.n	80093e6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009482:	4b17      	ldr	r3, [pc, #92]	; (80094e0 <xTaskIncrementTick+0x16c>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009488:	4914      	ldr	r1, [pc, #80]	; (80094dc <xTaskIncrementTick+0x168>)
 800948a:	4613      	mov	r3, r2
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	4413      	add	r3, r2
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	440b      	add	r3, r1
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2b01      	cmp	r3, #1
 8009498:	d907      	bls.n	80094aa <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800949a:	2301      	movs	r3, #1
 800949c:	617b      	str	r3, [r7, #20]
 800949e:	e004      	b.n	80094aa <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80094a0:	4b10      	ldr	r3, [pc, #64]	; (80094e4 <xTaskIncrementTick+0x170>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	3301      	adds	r3, #1
 80094a6:	4a0f      	ldr	r2, [pc, #60]	; (80094e4 <xTaskIncrementTick+0x170>)
 80094a8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80094aa:	4b0f      	ldr	r3, [pc, #60]	; (80094e8 <xTaskIncrementTick+0x174>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d001      	beq.n	80094b6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80094b2:	2301      	movs	r3, #1
 80094b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80094b6:	697b      	ldr	r3, [r7, #20]
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3718      	adds	r7, #24
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	20004d94 	.word	0x20004d94
 80094c4:	20004d70 	.word	0x20004d70
 80094c8:	20004d24 	.word	0x20004d24
 80094cc:	20004d28 	.word	0x20004d28
 80094d0:	20004d84 	.word	0x20004d84
 80094d4:	20004d8c 	.word	0x20004d8c
 80094d8:	20004d74 	.word	0x20004d74
 80094dc:	20004c70 	.word	0x20004c70
 80094e0:	20004c6c 	.word	0x20004c6c
 80094e4:	20004d7c 	.word	0x20004d7c
 80094e8:	20004d80 	.word	0x20004d80

080094ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b088      	sub	sp, #32
 80094f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80094f2:	4b39      	ldr	r3, [pc, #228]	; (80095d8 <vTaskSwitchContext+0xec>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d003      	beq.n	8009502 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80094fa:	4b38      	ldr	r3, [pc, #224]	; (80095dc <vTaskSwitchContext+0xf0>)
 80094fc:	2201      	movs	r2, #1
 80094fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009500:	e065      	b.n	80095ce <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8009502:	4b36      	ldr	r3, [pc, #216]	; (80095dc <vTaskSwitchContext+0xf0>)
 8009504:	2200      	movs	r2, #0
 8009506:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009508:	4b35      	ldr	r3, [pc, #212]	; (80095e0 <vTaskSwitchContext+0xf4>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800950e:	61fb      	str	r3, [r7, #28]
 8009510:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8009514:	61bb      	str	r3, [r7, #24]
 8009516:	69fb      	ldr	r3, [r7, #28]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	429a      	cmp	r2, r3
 800951e:	d111      	bne.n	8009544 <vTaskSwitchContext+0x58>
 8009520:	69fb      	ldr	r3, [r7, #28]
 8009522:	3304      	adds	r3, #4
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	429a      	cmp	r2, r3
 800952a:	d10b      	bne.n	8009544 <vTaskSwitchContext+0x58>
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	3308      	adds	r3, #8
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	429a      	cmp	r2, r3
 8009536:	d105      	bne.n	8009544 <vTaskSwitchContext+0x58>
 8009538:	69fb      	ldr	r3, [r7, #28]
 800953a:	330c      	adds	r3, #12
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	429a      	cmp	r2, r3
 8009542:	d008      	beq.n	8009556 <vTaskSwitchContext+0x6a>
 8009544:	4b26      	ldr	r3, [pc, #152]	; (80095e0 <vTaskSwitchContext+0xf4>)
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	4b25      	ldr	r3, [pc, #148]	; (80095e0 <vTaskSwitchContext+0xf4>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	3334      	adds	r3, #52	; 0x34
 800954e:	4619      	mov	r1, r3
 8009550:	4610      	mov	r0, r2
 8009552:	f007 fba3 	bl	8010c9c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009556:	4b23      	ldr	r3, [pc, #140]	; (80095e4 <vTaskSwitchContext+0xf8>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	fab3 f383 	clz	r3, r3
 8009562:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009564:	7afb      	ldrb	r3, [r7, #11]
 8009566:	f1c3 031f 	rsb	r3, r3, #31
 800956a:	617b      	str	r3, [r7, #20]
 800956c:	491e      	ldr	r1, [pc, #120]	; (80095e8 <vTaskSwitchContext+0xfc>)
 800956e:	697a      	ldr	r2, [r7, #20]
 8009570:	4613      	mov	r3, r2
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	4413      	add	r3, r2
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	440b      	add	r3, r1
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d109      	bne.n	8009594 <vTaskSwitchContext+0xa8>
	__asm volatile
 8009580:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009584:	f383 8811 	msr	BASEPRI, r3
 8009588:	f3bf 8f6f 	isb	sy
 800958c:	f3bf 8f4f 	dsb	sy
 8009590:	607b      	str	r3, [r7, #4]
 8009592:	e7fe      	b.n	8009592 <vTaskSwitchContext+0xa6>
 8009594:	697a      	ldr	r2, [r7, #20]
 8009596:	4613      	mov	r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	4413      	add	r3, r2
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	4a12      	ldr	r2, [pc, #72]	; (80095e8 <vTaskSwitchContext+0xfc>)
 80095a0:	4413      	add	r3, r2
 80095a2:	613b      	str	r3, [r7, #16]
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	685a      	ldr	r2, [r3, #4]
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	605a      	str	r2, [r3, #4]
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	685a      	ldr	r2, [r3, #4]
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	3308      	adds	r3, #8
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d104      	bne.n	80095c4 <vTaskSwitchContext+0xd8>
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	685a      	ldr	r2, [r3, #4]
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	605a      	str	r2, [r3, #4]
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	4a05      	ldr	r2, [pc, #20]	; (80095e0 <vTaskSwitchContext+0xf4>)
 80095cc:	6013      	str	r3, [r2, #0]
}
 80095ce:	bf00      	nop
 80095d0:	3720      	adds	r7, #32
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	20004d94 	.word	0x20004d94
 80095dc:	20004d80 	.word	0x20004d80
 80095e0:	20004c6c 	.word	0x20004c6c
 80095e4:	20004d74 	.word	0x20004d74
 80095e8:	20004c70 	.word	0x20004c70

080095ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d109      	bne.n	8009610 <vTaskPlaceOnEventList+0x24>
 80095fc:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009600:	f383 8811 	msr	BASEPRI, r3
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	60fb      	str	r3, [r7, #12]
 800960e:	e7fe      	b.n	800960e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009610:	4b07      	ldr	r3, [pc, #28]	; (8009630 <vTaskPlaceOnEventList+0x44>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	3318      	adds	r3, #24
 8009616:	4619      	mov	r1, r3
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f7fe fac5 	bl	8007ba8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800961e:	2101      	movs	r1, #1
 8009620:	6838      	ldr	r0, [r7, #0]
 8009622:	f000 fc3b 	bl	8009e9c <prvAddCurrentTaskToDelayedList>
}
 8009626:	bf00      	nop
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	20004c6c 	.word	0x20004c6c

08009634 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b086      	sub	sp, #24
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	68db      	ldr	r3, [r3, #12]
 8009642:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d109      	bne.n	800965e <xTaskRemoveFromEventList+0x2a>
 800964a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800964e:	f383 8811 	msr	BASEPRI, r3
 8009652:	f3bf 8f6f 	isb	sy
 8009656:	f3bf 8f4f 	dsb	sy
 800965a:	60fb      	str	r3, [r7, #12]
 800965c:	e7fe      	b.n	800965c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	3318      	adds	r3, #24
 8009662:	4618      	mov	r0, r3
 8009664:	f7fe fad9 	bl	8007c1a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009668:	4b1d      	ldr	r3, [pc, #116]	; (80096e0 <xTaskRemoveFromEventList+0xac>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d11c      	bne.n	80096aa <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	3304      	adds	r3, #4
 8009674:	4618      	mov	r0, r3
 8009676:	f7fe fad0 	bl	8007c1a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800967e:	2201      	movs	r2, #1
 8009680:	409a      	lsls	r2, r3
 8009682:	4b18      	ldr	r3, [pc, #96]	; (80096e4 <xTaskRemoveFromEventList+0xb0>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4313      	orrs	r3, r2
 8009688:	4a16      	ldr	r2, [pc, #88]	; (80096e4 <xTaskRemoveFromEventList+0xb0>)
 800968a:	6013      	str	r3, [r2, #0]
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009690:	4613      	mov	r3, r2
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	4413      	add	r3, r2
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	4a13      	ldr	r2, [pc, #76]	; (80096e8 <xTaskRemoveFromEventList+0xb4>)
 800969a:	441a      	add	r2, r3
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	3304      	adds	r3, #4
 80096a0:	4619      	mov	r1, r3
 80096a2:	4610      	mov	r0, r2
 80096a4:	f7fe fa5c 	bl	8007b60 <vListInsertEnd>
 80096a8:	e005      	b.n	80096b6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	3318      	adds	r3, #24
 80096ae:	4619      	mov	r1, r3
 80096b0:	480e      	ldr	r0, [pc, #56]	; (80096ec <xTaskRemoveFromEventList+0xb8>)
 80096b2:	f7fe fa55 	bl	8007b60 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ba:	4b0d      	ldr	r3, [pc, #52]	; (80096f0 <xTaskRemoveFromEventList+0xbc>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d905      	bls.n	80096d0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80096c4:	2301      	movs	r3, #1
 80096c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80096c8:	4b0a      	ldr	r3, [pc, #40]	; (80096f4 <xTaskRemoveFromEventList+0xc0>)
 80096ca:	2201      	movs	r2, #1
 80096cc:	601a      	str	r2, [r3, #0]
 80096ce:	e001      	b.n	80096d4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80096d0:	2300      	movs	r3, #0
 80096d2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80096d4:	697b      	ldr	r3, [r7, #20]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3718      	adds	r7, #24
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	20004d94 	.word	0x20004d94
 80096e4:	20004d74 	.word	0x20004d74
 80096e8:	20004c70 	.word	0x20004c70
 80096ec:	20004d2c 	.word	0x20004d2c
 80096f0:	20004c6c 	.word	0x20004c6c
 80096f4:	20004d80 	.word	0x20004d80

080096f8 <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b086      	sub	sp, #24
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;
BaseType_t xReturn;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8009702:	4b2b      	ldr	r3, [pc, #172]	; (80097b0 <xTaskRemoveFromUnorderedEventList+0xb8>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d109      	bne.n	800971e <xTaskRemoveFromUnorderedEventList+0x26>
 800970a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800970e:	f383 8811 	msr	BASEPRI, r3
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	f3bf 8f4f 	dsb	sy
 800971a:	60fb      	str	r3, [r7, #12]
 800971c:	e7fe      	b.n	800971c <xTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d109      	bne.n	8009748 <xTaskRemoveFromUnorderedEventList+0x50>
 8009734:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009738:	f383 8811 	msr	BASEPRI, r3
 800973c:	f3bf 8f6f 	isb	sy
 8009740:	f3bf 8f4f 	dsb	sy
 8009744:	60bb      	str	r3, [r7, #8]
 8009746:	e7fe      	b.n	8009746 <xTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f7fe fa66 	bl	8007c1a <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	3304      	adds	r3, #4
 8009752:	4618      	mov	r0, r3
 8009754:	f7fe fa61 	bl	8007c1a <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800975c:	2201      	movs	r2, #1
 800975e:	409a      	lsls	r2, r3
 8009760:	4b14      	ldr	r3, [pc, #80]	; (80097b4 <xTaskRemoveFromUnorderedEventList+0xbc>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4313      	orrs	r3, r2
 8009766:	4a13      	ldr	r2, [pc, #76]	; (80097b4 <xTaskRemoveFromUnorderedEventList+0xbc>)
 8009768:	6013      	str	r3, [r2, #0]
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800976e:	4613      	mov	r3, r2
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	4413      	add	r3, r2
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	4a10      	ldr	r2, [pc, #64]	; (80097b8 <xTaskRemoveFromUnorderedEventList+0xc0>)
 8009778:	441a      	add	r2, r3
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	3304      	adds	r3, #4
 800977e:	4619      	mov	r1, r3
 8009780:	4610      	mov	r0, r2
 8009782:	f7fe f9ed 	bl	8007b60 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800978a:	4b0c      	ldr	r3, [pc, #48]	; (80097bc <xTaskRemoveFromUnorderedEventList+0xc4>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009790:	429a      	cmp	r2, r3
 8009792:	d905      	bls.n	80097a0 <xTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8009794:	2301      	movs	r3, #1
 8009796:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009798:	4b09      	ldr	r3, [pc, #36]	; (80097c0 <xTaskRemoveFromUnorderedEventList+0xc8>)
 800979a:	2201      	movs	r2, #1
 800979c:	601a      	str	r2, [r3, #0]
 800979e:	e001      	b.n	80097a4 <xTaskRemoveFromUnorderedEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 80097a0:	2300      	movs	r3, #0
 80097a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80097a4:	697b      	ldr	r3, [r7, #20]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3718      	adds	r7, #24
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	20004d94 	.word	0x20004d94
 80097b4:	20004d74 	.word	0x20004d74
 80097b8:	20004c70 	.word	0x20004c70
 80097bc:	20004c6c 	.word	0x20004c6c
 80097c0:	20004d80 	.word	0x20004d80

080097c4 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80097c4:	b480      	push	{r7}
 80097c6:	b085      	sub	sp, #20
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d109      	bne.n	80097e6 <vTaskSetTimeOutState+0x22>
 80097d2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80097d6:	f383 8811 	msr	BASEPRI, r3
 80097da:	f3bf 8f6f 	isb	sy
 80097de:	f3bf 8f4f 	dsb	sy
 80097e2:	60fb      	str	r3, [r7, #12]
 80097e4:	e7fe      	b.n	80097e4 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80097e6:	4b07      	ldr	r3, [pc, #28]	; (8009804 <vTaskSetTimeOutState+0x40>)
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80097ee:	4b06      	ldr	r3, [pc, #24]	; (8009808 <vTaskSetTimeOutState+0x44>)
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	605a      	str	r2, [r3, #4]
}
 80097f6:	bf00      	nop
 80097f8:	3714      	adds	r7, #20
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	20004d84 	.word	0x20004d84
 8009808:	20004d70 	.word	0x20004d70

0800980c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b086      	sub	sp, #24
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d109      	bne.n	8009830 <xTaskCheckForTimeOut+0x24>
 800981c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009820:	f383 8811 	msr	BASEPRI, r3
 8009824:	f3bf 8f6f 	isb	sy
 8009828:	f3bf 8f4f 	dsb	sy
 800982c:	60fb      	str	r3, [r7, #12]
 800982e:	e7fe      	b.n	800982e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d109      	bne.n	800984a <xTaskCheckForTimeOut+0x3e>
 8009836:	f04f 0340 	mov.w	r3, #64	; 0x40
 800983a:	f383 8811 	msr	BASEPRI, r3
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	f3bf 8f4f 	dsb	sy
 8009846:	60bb      	str	r3, [r7, #8]
 8009848:	e7fe      	b.n	8009848 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800984a:	f7fe fb19 	bl	8007e80 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800984e:	4b1c      	ldr	r3, [pc, #112]	; (80098c0 <xTaskCheckForTimeOut+0xb4>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800985c:	d102      	bne.n	8009864 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800985e:	2300      	movs	r3, #0
 8009860:	617b      	str	r3, [r7, #20]
 8009862:	e026      	b.n	80098b2 <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	4b16      	ldr	r3, [pc, #88]	; (80098c4 <xTaskCheckForTimeOut+0xb8>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	429a      	cmp	r2, r3
 800986e:	d007      	beq.n	8009880 <xTaskCheckForTimeOut+0x74>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	685a      	ldr	r2, [r3, #4]
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	429a      	cmp	r2, r3
 8009878:	d802      	bhi.n	8009880 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800987a:	2301      	movs	r3, #1
 800987c:	617b      	str	r3, [r7, #20]
 800987e:	e018      	b.n	80098b2 <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	693a      	ldr	r2, [r7, #16]
 8009886:	1ad2      	subs	r2, r2, r3
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	429a      	cmp	r2, r3
 800988e:	d20e      	bcs.n	80098ae <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6859      	ldr	r1, [r3, #4]
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	1acb      	subs	r3, r1, r3
 800989c:	441a      	add	r2, r3
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f7ff ff8e 	bl	80097c4 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80098a8:	2300      	movs	r3, #0
 80098aa:	617b      	str	r3, [r7, #20]
 80098ac:	e001      	b.n	80098b2 <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 80098ae:	2301      	movs	r3, #1
 80098b0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80098b2:	f7fe fb13 	bl	8007edc <vPortExitCritical>

	return xReturn;
 80098b6:	697b      	ldr	r3, [r7, #20]
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3718      	adds	r7, #24
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	20004d70 	.word	0x20004d70
 80098c4:	20004d84 	.word	0x20004d84

080098c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80098c8:	b480      	push	{r7}
 80098ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80098cc:	4b03      	ldr	r3, [pc, #12]	; (80098dc <vTaskMissedYield+0x14>)
 80098ce:	2201      	movs	r2, #1
 80098d0:	601a      	str	r2, [r3, #0]
}
 80098d2:	bf00      	nop
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr
 80098dc:	20004d80 	.word	0x20004d80

080098e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80098e8:	f000 f852 	bl	8009990 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80098ec:	4b06      	ldr	r3, [pc, #24]	; (8009908 <prvIdleTask+0x28>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d9f9      	bls.n	80098e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80098f4:	4b05      	ldr	r3, [pc, #20]	; (800990c <prvIdleTask+0x2c>)
 80098f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098fa:	601a      	str	r2, [r3, #0]
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009904:	e7f0      	b.n	80098e8 <prvIdleTask+0x8>
 8009906:	bf00      	nop
 8009908:	20004c70 	.word	0x20004c70
 800990c:	e000ed04 	.word	0xe000ed04

08009910 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009916:	2300      	movs	r3, #0
 8009918:	607b      	str	r3, [r7, #4]
 800991a:	e00c      	b.n	8009936 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	4613      	mov	r3, r2
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	4413      	add	r3, r2
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	4a12      	ldr	r2, [pc, #72]	; (8009970 <prvInitialiseTaskLists+0x60>)
 8009928:	4413      	add	r3, r2
 800992a:	4618      	mov	r0, r3
 800992c:	f7fe f8eb 	bl	8007b06 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	3301      	adds	r3, #1
 8009934:	607b      	str	r3, [r7, #4]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2b06      	cmp	r3, #6
 800993a:	d9ef      	bls.n	800991c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800993c:	480d      	ldr	r0, [pc, #52]	; (8009974 <prvInitialiseTaskLists+0x64>)
 800993e:	f7fe f8e2 	bl	8007b06 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009942:	480d      	ldr	r0, [pc, #52]	; (8009978 <prvInitialiseTaskLists+0x68>)
 8009944:	f7fe f8df 	bl	8007b06 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009948:	480c      	ldr	r0, [pc, #48]	; (800997c <prvInitialiseTaskLists+0x6c>)
 800994a:	f7fe f8dc 	bl	8007b06 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800994e:	480c      	ldr	r0, [pc, #48]	; (8009980 <prvInitialiseTaskLists+0x70>)
 8009950:	f7fe f8d9 	bl	8007b06 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009954:	480b      	ldr	r0, [pc, #44]	; (8009984 <prvInitialiseTaskLists+0x74>)
 8009956:	f7fe f8d6 	bl	8007b06 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800995a:	4b0b      	ldr	r3, [pc, #44]	; (8009988 <prvInitialiseTaskLists+0x78>)
 800995c:	4a05      	ldr	r2, [pc, #20]	; (8009974 <prvInitialiseTaskLists+0x64>)
 800995e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009960:	4b0a      	ldr	r3, [pc, #40]	; (800998c <prvInitialiseTaskLists+0x7c>)
 8009962:	4a05      	ldr	r2, [pc, #20]	; (8009978 <prvInitialiseTaskLists+0x68>)
 8009964:	601a      	str	r2, [r3, #0]
}
 8009966:	bf00      	nop
 8009968:	3708      	adds	r7, #8
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	20004c70 	.word	0x20004c70
 8009974:	20004cfc 	.word	0x20004cfc
 8009978:	20004d10 	.word	0x20004d10
 800997c:	20004d2c 	.word	0x20004d2c
 8009980:	20004d40 	.word	0x20004d40
 8009984:	20004d58 	.word	0x20004d58
 8009988:	20004d24 	.word	0x20004d24
 800998c:	20004d28 	.word	0x20004d28

08009990 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009996:	e028      	b.n	80099ea <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8009998:	f7ff fc32 	bl	8009200 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800999c:	4b17      	ldr	r3, [pc, #92]	; (80099fc <prvCheckTasksWaitingTermination+0x6c>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	bf0c      	ite	eq
 80099a4:	2301      	moveq	r3, #1
 80099a6:	2300      	movne	r3, #0
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 80099ac:	f7ff fc36 	bl	800921c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d119      	bne.n	80099ea <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80099b6:	f7fe fa63 	bl	8007e80 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80099ba:	4b10      	ldr	r3, [pc, #64]	; (80099fc <prvCheckTasksWaitingTermination+0x6c>)
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	3304      	adds	r3, #4
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7fe f927 	bl	8007c1a <uxListRemove>
					--uxCurrentNumberOfTasks;
 80099cc:	4b0c      	ldr	r3, [pc, #48]	; (8009a00 <prvCheckTasksWaitingTermination+0x70>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	3b01      	subs	r3, #1
 80099d2:	4a0b      	ldr	r2, [pc, #44]	; (8009a00 <prvCheckTasksWaitingTermination+0x70>)
 80099d4:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80099d6:	4b0b      	ldr	r3, [pc, #44]	; (8009a04 <prvCheckTasksWaitingTermination+0x74>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	3b01      	subs	r3, #1
 80099dc:	4a09      	ldr	r2, [pc, #36]	; (8009a04 <prvCheckTasksWaitingTermination+0x74>)
 80099de:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 80099e0:	f7fe fa7c 	bl	8007edc <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80099e4:	6838      	ldr	r0, [r7, #0]
 80099e6:	f000 f80f 	bl	8009a08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099ea:	4b06      	ldr	r3, [pc, #24]	; (8009a04 <prvCheckTasksWaitingTermination+0x74>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d1d2      	bne.n	8009998 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80099f2:	bf00      	nop
 80099f4:	3708      	adds	r7, #8
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop
 80099fc:	20004d40 	.word	0x20004d40
 8009a00:	20004d6c 	.word	0x20004d6c
 8009a04:	20004d54 	.word	0x20004d54

08009a08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7fe fc05 	bl	8008224 <vPortFree>
			vPortFree( pxTCB );
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f7fe fc02 	bl	8008224 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009a20:	bf00      	nop
 8009a22:	3708      	adds	r7, #8
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a2e:	4b0f      	ldr	r3, [pc, #60]	; (8009a6c <prvResetNextTaskUnblockTime+0x44>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d101      	bne.n	8009a3c <prvResetNextTaskUnblockTime+0x14>
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e000      	b.n	8009a3e <prvResetNextTaskUnblockTime+0x16>
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d004      	beq.n	8009a4c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009a42:	4b0b      	ldr	r3, [pc, #44]	; (8009a70 <prvResetNextTaskUnblockTime+0x48>)
 8009a44:	f04f 32ff 	mov.w	r2, #4294967295
 8009a48:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009a4a:	e008      	b.n	8009a5e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009a4c:	4b07      	ldr	r3, [pc, #28]	; (8009a6c <prvResetNextTaskUnblockTime+0x44>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	4a05      	ldr	r2, [pc, #20]	; (8009a70 <prvResetNextTaskUnblockTime+0x48>)
 8009a5c:	6013      	str	r3, [r2, #0]
}
 8009a5e:	bf00      	nop
 8009a60:	370c      	adds	r7, #12
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	20004d24 	.word	0x20004d24
 8009a70:	20004d8c 	.word	0x20004d8c

08009a74 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009a7a:	4b05      	ldr	r3, [pc, #20]	; (8009a90 <xTaskGetCurrentTaskHandle+0x1c>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009a80:	687b      	ldr	r3, [r7, #4]
	}
 8009a82:	4618      	mov	r0, r3
 8009a84:	370c      	adds	r7, #12
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop
 8009a90:	20004c6c 	.word	0x20004c6c

08009a94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009a9a:	4b0b      	ldr	r3, [pc, #44]	; (8009ac8 <xTaskGetSchedulerState+0x34>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d102      	bne.n	8009aa8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	607b      	str	r3, [r7, #4]
 8009aa6:	e008      	b.n	8009aba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009aa8:	4b08      	ldr	r3, [pc, #32]	; (8009acc <xTaskGetSchedulerState+0x38>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d102      	bne.n	8009ab6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009ab0:	2302      	movs	r3, #2
 8009ab2:	607b      	str	r3, [r7, #4]
 8009ab4:	e001      	b.n	8009aba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009aba:	687b      	ldr	r3, [r7, #4]
	}
 8009abc:	4618      	mov	r0, r3
 8009abe:	370c      	adds	r7, #12
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr
 8009ac8:	20004d78 	.word	0x20004d78
 8009acc:	20004d94 	.word	0x20004d94

08009ad0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d062      	beq.n	8009ba8 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ae6:	4b32      	ldr	r3, [pc, #200]	; (8009bb0 <vTaskPriorityInherit+0xe0>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d25b      	bcs.n	8009ba8 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	699b      	ldr	r3, [r3, #24]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	db06      	blt.n	8009b06 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009af8:	4b2d      	ldr	r3, [pc, #180]	; (8009bb0 <vTaskPriorityInherit+0xe0>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009afe:	f1c3 0207 	rsb	r2, r3, #7
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	6959      	ldr	r1, [r3, #20]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b0e:	4613      	mov	r3, r2
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	4413      	add	r3, r2
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	4a27      	ldr	r2, [pc, #156]	; (8009bb4 <vTaskPriorityInherit+0xe4>)
 8009b18:	4413      	add	r3, r2
 8009b1a:	4299      	cmp	r1, r3
 8009b1c:	d101      	bne.n	8009b22 <vTaskPriorityInherit+0x52>
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e000      	b.n	8009b24 <vTaskPriorityInherit+0x54>
 8009b22:	2300      	movs	r3, #0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d03a      	beq.n	8009b9e <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	3304      	adds	r3, #4
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7fe f874 	bl	8007c1a <uxListRemove>
 8009b32:	4603      	mov	r3, r0
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d115      	bne.n	8009b64 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b3c:	491d      	ldr	r1, [pc, #116]	; (8009bb4 <vTaskPriorityInherit+0xe4>)
 8009b3e:	4613      	mov	r3, r2
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	4413      	add	r3, r2
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	440b      	add	r3, r1
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d10a      	bne.n	8009b64 <vTaskPriorityInherit+0x94>
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b52:	2201      	movs	r2, #1
 8009b54:	fa02 f303 	lsl.w	r3, r2, r3
 8009b58:	43da      	mvns	r2, r3
 8009b5a:	4b17      	ldr	r3, [pc, #92]	; (8009bb8 <vTaskPriorityInherit+0xe8>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4013      	ands	r3, r2
 8009b60:	4a15      	ldr	r2, [pc, #84]	; (8009bb8 <vTaskPriorityInherit+0xe8>)
 8009b62:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009b64:	4b12      	ldr	r3, [pc, #72]	; (8009bb0 <vTaskPriorityInherit+0xe0>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b72:	2201      	movs	r2, #1
 8009b74:	409a      	lsls	r2, r3
 8009b76:	4b10      	ldr	r3, [pc, #64]	; (8009bb8 <vTaskPriorityInherit+0xe8>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	4a0e      	ldr	r2, [pc, #56]	; (8009bb8 <vTaskPriorityInherit+0xe8>)
 8009b7e:	6013      	str	r3, [r2, #0]
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b84:	4613      	mov	r3, r2
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	4413      	add	r3, r2
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	4a09      	ldr	r2, [pc, #36]	; (8009bb4 <vTaskPriorityInherit+0xe4>)
 8009b8e:	441a      	add	r2, r3
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	3304      	adds	r3, #4
 8009b94:	4619      	mov	r1, r3
 8009b96:	4610      	mov	r0, r2
 8009b98:	f7fd ffe2 	bl	8007b60 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b9c:	e004      	b.n	8009ba8 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009b9e:	4b04      	ldr	r3, [pc, #16]	; (8009bb0 <vTaskPriorityInherit+0xe0>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8009ba8:	bf00      	nop
 8009baa:	3710      	adds	r7, #16
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	20004c6c 	.word	0x20004c6c
 8009bb4:	20004c70 	.word	0x20004c70
 8009bb8:	20004d74 	.word	0x20004d74

08009bbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b086      	sub	sp, #24
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d06c      	beq.n	8009cac <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009bd2:	4b39      	ldr	r3, [pc, #228]	; (8009cb8 <xTaskPriorityDisinherit+0xfc>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	693a      	ldr	r2, [r7, #16]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d009      	beq.n	8009bf0 <xTaskPriorityDisinherit+0x34>
 8009bdc:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009be0:	f383 8811 	msr	BASEPRI, r3
 8009be4:	f3bf 8f6f 	isb	sy
 8009be8:	f3bf 8f4f 	dsb	sy
 8009bec:	60fb      	str	r3, [r7, #12]
 8009bee:	e7fe      	b.n	8009bee <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d109      	bne.n	8009c0c <xTaskPriorityDisinherit+0x50>
 8009bf8:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009bfc:	f383 8811 	msr	BASEPRI, r3
 8009c00:	f3bf 8f6f 	isb	sy
 8009c04:	f3bf 8f4f 	dsb	sy
 8009c08:	60bb      	str	r3, [r7, #8]
 8009c0a:	e7fe      	b.n	8009c0a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c10:	1e5a      	subs	r2, r3, #1
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d044      	beq.n	8009cac <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d140      	bne.n	8009cac <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	3304      	adds	r3, #4
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f7fd fff3 	bl	8007c1a <uxListRemove>
 8009c34:	4603      	mov	r3, r0
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d115      	bne.n	8009c66 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c3e:	491f      	ldr	r1, [pc, #124]	; (8009cbc <xTaskPriorityDisinherit+0x100>)
 8009c40:	4613      	mov	r3, r2
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	4413      	add	r3, r2
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	440b      	add	r3, r1
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d10a      	bne.n	8009c66 <xTaskPriorityDisinherit+0xaa>
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c54:	2201      	movs	r2, #1
 8009c56:	fa02 f303 	lsl.w	r3, r2, r3
 8009c5a:	43da      	mvns	r2, r3
 8009c5c:	4b18      	ldr	r3, [pc, #96]	; (8009cc0 <xTaskPriorityDisinherit+0x104>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4013      	ands	r3, r2
 8009c62:	4a17      	ldr	r2, [pc, #92]	; (8009cc0 <xTaskPriorityDisinherit+0x104>)
 8009c64:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c72:	f1c3 0207 	rsb	r2, r3, #7
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7e:	2201      	movs	r2, #1
 8009c80:	409a      	lsls	r2, r3
 8009c82:	4b0f      	ldr	r3, [pc, #60]	; (8009cc0 <xTaskPriorityDisinherit+0x104>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4313      	orrs	r3, r2
 8009c88:	4a0d      	ldr	r2, [pc, #52]	; (8009cc0 <xTaskPriorityDisinherit+0x104>)
 8009c8a:	6013      	str	r3, [r2, #0]
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c90:	4613      	mov	r3, r2
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	4413      	add	r3, r2
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	4a08      	ldr	r2, [pc, #32]	; (8009cbc <xTaskPriorityDisinherit+0x100>)
 8009c9a:	441a      	add	r2, r3
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	3304      	adds	r3, #4
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	4610      	mov	r0, r2
 8009ca4:	f7fd ff5c 	bl	8007b60 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009cac:	697b      	ldr	r3, [r7, #20]
	}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3718      	adds	r7, #24
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	20004c6c 	.word	0x20004c6c
 8009cbc:	20004c70 	.word	0x20004c70
 8009cc0:	20004d74 	.word	0x20004d74

08009cc4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009cc4:	b480      	push	{r7}
 8009cc6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009cc8:	4b07      	ldr	r3, [pc, #28]	; (8009ce8 <pvTaskIncrementMutexHeldCount+0x24>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d004      	beq.n	8009cda <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009cd0:	4b05      	ldr	r3, [pc, #20]	; (8009ce8 <pvTaskIncrementMutexHeldCount+0x24>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009cd6:	3201      	adds	r2, #1
 8009cd8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009cda:	4b03      	ldr	r3, [pc, #12]	; (8009ce8 <pvTaskIncrementMutexHeldCount+0x24>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
	}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr
 8009ce8:	20004c6c 	.word	0x20004c6c

08009cec <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8009cf6:	f7fe f8c3 	bl	8007e80 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8009cfa:	4b1e      	ldr	r3, [pc, #120]	; (8009d74 <ulTaskNotifyTake+0x88>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d113      	bne.n	8009d2c <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009d04:	4b1b      	ldr	r3, [pc, #108]	; (8009d74 <ulTaskNotifyTake+0x88>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2201      	movs	r2, #1
 8009d0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00b      	beq.n	8009d2c <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d14:	2101      	movs	r1, #1
 8009d16:	6838      	ldr	r0, [r7, #0]
 8009d18:	f000 f8c0 	bl	8009e9c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009d1c:	4b16      	ldr	r3, [pc, #88]	; (8009d78 <ulTaskNotifyTake+0x8c>)
 8009d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d22:	601a      	str	r2, [r3, #0]
 8009d24:	f3bf 8f4f 	dsb	sy
 8009d28:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009d2c:	f7fe f8d6 	bl	8007edc <vPortExitCritical>

		taskENTER_CRITICAL();
 8009d30:	f7fe f8a6 	bl	8007e80 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8009d34:	4b0f      	ldr	r3, [pc, #60]	; (8009d74 <ulTaskNotifyTake+0x88>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d3a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d00c      	beq.n	8009d5c <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d004      	beq.n	8009d52 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8009d48:	4b0a      	ldr	r3, [pc, #40]	; (8009d74 <ulTaskNotifyTake+0x88>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	64da      	str	r2, [r3, #76]	; 0x4c
 8009d50:	e004      	b.n	8009d5c <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
 8009d52:	4b08      	ldr	r3, [pc, #32]	; (8009d74 <ulTaskNotifyTake+0x88>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	68fa      	ldr	r2, [r7, #12]
 8009d58:	3a01      	subs	r2, #1
 8009d5a:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009d5c:	4b05      	ldr	r3, [pc, #20]	; (8009d74 <ulTaskNotifyTake+0x88>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	2200      	movs	r2, #0
 8009d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8009d66:	f7fe f8b9 	bl	8007edc <vPortExitCritical>

		return ulReturn;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
	}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3710      	adds	r7, #16
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}
 8009d74:	20004c6c 	.word	0x20004c6c
 8009d78:	e000ed04 	.word	0xe000ed04

08009d7c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b08a      	sub	sp, #40	; 0x28
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d109      	bne.n	8009da0 <vTaskNotifyGiveFromISR+0x24>
 8009d8c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009d90:	f383 8811 	msr	BASEPRI, r3
 8009d94:	f3bf 8f6f 	isb	sy
 8009d98:	f3bf 8f4f 	dsb	sy
 8009d9c:	61bb      	str	r3, [r7, #24]
 8009d9e:	e7fe      	b.n	8009d9e <vTaskNotifyGiveFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009da0:	f7fe f940 	bl	8008024 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 8009da8:	f3ef 8211 	mrs	r2, BASEPRI
 8009dac:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009db0:	f383 8811 	msr	BASEPRI, r3
 8009db4:	f3bf 8f6f 	isb	sy
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	617a      	str	r2, [r7, #20]
 8009dbe:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009dc0:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009dc2:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009dca:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dce:	2202      	movs	r2, #2
 8009dd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8009dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dd8:	1c5a      	adds	r2, r3, #1
 8009dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ddc:	64da      	str	r2, [r3, #76]	; 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009dde:	7ffb      	ldrb	r3, [r7, #31]
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d145      	bne.n	8009e70 <vTaskNotifyGiveFromISR+0xf4>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d009      	beq.n	8009e00 <vTaskNotifyGiveFromISR+0x84>
	__asm volatile
 8009dec:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009df0:	f383 8811 	msr	BASEPRI, r3
 8009df4:	f3bf 8f6f 	isb	sy
 8009df8:	f3bf 8f4f 	dsb	sy
 8009dfc:	60fb      	str	r3, [r7, #12]
 8009dfe:	e7fe      	b.n	8009dfe <vTaskNotifyGiveFromISR+0x82>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e00:	4b20      	ldr	r3, [pc, #128]	; (8009e84 <vTaskNotifyGiveFromISR+0x108>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d11c      	bne.n	8009e42 <vTaskNotifyGiveFromISR+0xc6>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0a:	3304      	adds	r3, #4
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f7fd ff04 	bl	8007c1a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e16:	2201      	movs	r2, #1
 8009e18:	409a      	lsls	r2, r3
 8009e1a:	4b1b      	ldr	r3, [pc, #108]	; (8009e88 <vTaskNotifyGiveFromISR+0x10c>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	4a19      	ldr	r2, [pc, #100]	; (8009e88 <vTaskNotifyGiveFromISR+0x10c>)
 8009e22:	6013      	str	r3, [r2, #0]
 8009e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e28:	4613      	mov	r3, r2
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	4413      	add	r3, r2
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	4a16      	ldr	r2, [pc, #88]	; (8009e8c <vTaskNotifyGiveFromISR+0x110>)
 8009e32:	441a      	add	r2, r3
 8009e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e36:	3304      	adds	r3, #4
 8009e38:	4619      	mov	r1, r3
 8009e3a:	4610      	mov	r0, r2
 8009e3c:	f7fd fe90 	bl	8007b60 <vListInsertEnd>
 8009e40:	e005      	b.n	8009e4e <vTaskNotifyGiveFromISR+0xd2>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e44:	3318      	adds	r3, #24
 8009e46:	4619      	mov	r1, r3
 8009e48:	4811      	ldr	r0, [pc, #68]	; (8009e90 <vTaskNotifyGiveFromISR+0x114>)
 8009e4a:	f7fd fe89 	bl	8007b60 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e52:	4b10      	ldr	r3, [pc, #64]	; (8009e94 <vTaskNotifyGiveFromISR+0x118>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d909      	bls.n	8009e70 <vTaskNotifyGiveFromISR+0xf4>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d003      	beq.n	8009e6a <vTaskNotifyGiveFromISR+0xee>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	2201      	movs	r2, #1
 8009e66:	601a      	str	r2, [r3, #0]
 8009e68:	e002      	b.n	8009e70 <vTaskNotifyGiveFromISR+0xf4>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8009e6a:	4b0b      	ldr	r3, [pc, #44]	; (8009e98 <vTaskNotifyGiveFromISR+0x11c>)
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	601a      	str	r2, [r3, #0]
 8009e70:	6a3b      	ldr	r3, [r7, #32]
 8009e72:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8009e7a:	bf00      	nop
 8009e7c:	3728      	adds	r7, #40	; 0x28
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	20004d94 	.word	0x20004d94
 8009e88:	20004d74 	.word	0x20004d74
 8009e8c:	20004c70 	.word	0x20004c70
 8009e90:	20004d2c 	.word	0x20004d2c
 8009e94:	20004c6c 	.word	0x20004c6c
 8009e98:	20004d80 	.word	0x20004d80

08009e9c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009ea6:	4b29      	ldr	r3, [pc, #164]	; (8009f4c <prvAddCurrentTaskToDelayedList+0xb0>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009eac:	4b28      	ldr	r3, [pc, #160]	; (8009f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	3304      	adds	r3, #4
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f7fd feb1 	bl	8007c1a <uxListRemove>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d10b      	bne.n	8009ed6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009ebe:	4b24      	ldr	r3, [pc, #144]	; (8009f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8009eca:	43da      	mvns	r2, r3
 8009ecc:	4b21      	ldr	r3, [pc, #132]	; (8009f54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4013      	ands	r3, r2
 8009ed2:	4a20      	ldr	r2, [pc, #128]	; (8009f54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009ed4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009edc:	d10a      	bne.n	8009ef4 <prvAddCurrentTaskToDelayedList+0x58>
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d007      	beq.n	8009ef4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ee4:	4b1a      	ldr	r3, [pc, #104]	; (8009f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	3304      	adds	r3, #4
 8009eea:	4619      	mov	r1, r3
 8009eec:	481a      	ldr	r0, [pc, #104]	; (8009f58 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009eee:	f7fd fe37 	bl	8007b60 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ef2:	e026      	b.n	8009f42 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009ef4:	68fa      	ldr	r2, [r7, #12]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4413      	add	r3, r2
 8009efa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009efc:	4b14      	ldr	r3, [pc, #80]	; (8009f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	68ba      	ldr	r2, [r7, #8]
 8009f02:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009f04:	68ba      	ldr	r2, [r7, #8]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d209      	bcs.n	8009f20 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f0c:	4b13      	ldr	r3, [pc, #76]	; (8009f5c <prvAddCurrentTaskToDelayedList+0xc0>)
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	4b0f      	ldr	r3, [pc, #60]	; (8009f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	3304      	adds	r3, #4
 8009f16:	4619      	mov	r1, r3
 8009f18:	4610      	mov	r0, r2
 8009f1a:	f7fd fe45 	bl	8007ba8 <vListInsert>
}
 8009f1e:	e010      	b.n	8009f42 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f20:	4b0f      	ldr	r3, [pc, #60]	; (8009f60 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	4b0a      	ldr	r3, [pc, #40]	; (8009f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	3304      	adds	r3, #4
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	4610      	mov	r0, r2
 8009f2e:	f7fd fe3b 	bl	8007ba8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f32:	4b0c      	ldr	r3, [pc, #48]	; (8009f64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	68ba      	ldr	r2, [r7, #8]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d202      	bcs.n	8009f42 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009f3c:	4a09      	ldr	r2, [pc, #36]	; (8009f64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	6013      	str	r3, [r2, #0]
}
 8009f42:	bf00      	nop
 8009f44:	3710      	adds	r7, #16
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
 8009f4a:	bf00      	nop
 8009f4c:	20004d70 	.word	0x20004d70
 8009f50:	20004c6c 	.word	0x20004c6c
 8009f54:	20004d74 	.word	0x20004d74
 8009f58:	20004d58 	.word	0x20004d58
 8009f5c:	20004d28 	.word	0x20004d28
 8009f60:	20004d24 	.word	0x20004d24
 8009f64:	20004d8c 	.word	0x20004d8c

08009f68 <eARPProcessPacket>:
};

/*-----------------------------------------------------------*/

eFrameProcessingResult_t eARPProcessPacket( ARPPacket_t * const pxARPFrame )
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b086      	sub	sp, #24
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8009f70:	2300      	movs	r3, #0
 8009f72:	75fb      	strb	r3, [r7, #23]
ARPHeader_t *pxARPHeader;
uint32_t ulTargetProtocolAddress, ulSenderProtocolAddress;

	pxARPHeader = &( pxARPFrame->xARPHeader );
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	330e      	adds	r3, #14
 8009f78:	613b      	str	r3, [r7, #16]

	/* The field ulSenderProtocolAddress is badly aligned, copy byte-by-byte. */
	memcpy( ( void *)&( ulSenderProtocolAddress ), ( void * )pxARPHeader->ucSenderProtocolAddress, sizeof( ulSenderProtocolAddress ) );
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	330e      	adds	r3, #14
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	60bb      	str	r3, [r7, #8]
	/* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
	ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	699b      	ldr	r3, [r3, #24]
 8009f86:	60fb      	str	r3, [r7, #12]

	traceARP_PACKET_RECEIVED();

	/* Don't do anything if the local IP address is zero because
	that means a DHCP request has not completed. */
	if( *ipLOCAL_IP_ADDRESS_POINTER != 0UL )
 8009f88:	4b32      	ldr	r3, [pc, #200]	; (800a054 <eARPProcessPacket+0xec>)
 8009f8a:	695b      	ldr	r3, [r3, #20]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d05c      	beq.n	800a04a <eARPProcessPacket+0xe2>
	{
		switch( pxARPHeader->usOperation )
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	88db      	ldrh	r3, [r3, #6]
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f9a:	d003      	beq.n	8009fa4 <eARPProcessPacket+0x3c>
 8009f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fa0:	d04a      	beq.n	800a038 <eARPProcessPacket+0xd0>
				#endif /* ipconfigARP_USE_CLASH_DETECTION */
				break;

			default :
				/* Invalid. */
				break;
 8009fa2:	e052      	b.n	800a04a <eARPProcessPacket+0xe2>
				if( ulTargetProtocolAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 8009fa4:	4b2b      	ldr	r3, [pc, #172]	; (800a054 <eARPProcessPacket+0xec>)
 8009fa6:	695a      	ldr	r2, [r3, #20]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d14c      	bne.n	800a048 <eARPProcessPacket+0xe0>
					vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	3308      	adds	r3, #8
 8009fb2:	68ba      	ldr	r2, [r7, #8]
 8009fb4:	4611      	mov	r1, r2
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f000 f850 	bl	800a05c <vARPRefreshCacheEntry>
					pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	719a      	strb	r2, [r3, #6]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f042 0202 	orr.w	r2, r2, #2
 8009fc8:	71da      	strb	r2, [r3, #7]
					if( ulTargetProtocolAddress == ulSenderProtocolAddress )
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d117      	bne.n	800a002 <eARPProcessPacket+0x9a>
						memcpy( pxARPFrame->xEthernetHeader.xSourceAddress.ucBytes, xBroadcastMACAddress.ucBytes, sizeof( xBroadcastMACAddress ) );
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	3306      	adds	r3, #6
 8009fd6:	4a20      	ldr	r2, [pc, #128]	; (800a058 <eARPProcessPacket+0xf0>)
 8009fd8:	6811      	ldr	r1, [r2, #0]
 8009fda:	6019      	str	r1, [r3, #0]
 8009fdc:	8892      	ldrh	r2, [r2, #4]
 8009fde:	809a      	strh	r2, [r3, #4]
						memset( pxARPHeader->xTargetHardwareAddress.ucBytes, '\0', sizeof( MACAddress_t ) );
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	3312      	adds	r3, #18
 8009fe4:	2206      	movs	r2, #6
 8009fe6:	2100      	movs	r1, #0
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f007 f82d 	bl	8011048 <memset>
						pxARPHeader->ulTargetProtocolAddress = 0UL;
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	761a      	strb	r2, [r3, #24]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	765a      	strb	r2, [r3, #25]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	769a      	strb	r2, [r3, #26]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	76da      	strb	r2, [r3, #27]
 800a000:	e00b      	b.n	800a01a <eARPProcessPacket+0xb2>
						memcpy( pxARPHeader->xTargetHardwareAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBytes, sizeof( MACAddress_t ) );
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	f103 0012 	add.w	r0, r3, #18
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	3308      	adds	r3, #8
 800a00c:	2206      	movs	r2, #6
 800a00e:	4619      	mov	r1, r3
 800a010:	f006 fff5 	bl	8010ffe <memcpy>
						pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 800a014:	68ba      	ldr	r2, [r7, #8]
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	619a      	str	r2, [r3, #24]
					memcpy( pxARPHeader->xSenderHardwareAddress.ucBytes, ( void * ) ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) );
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	3308      	adds	r3, #8
 800a01e:	2206      	movs	r2, #6
 800a020:	490c      	ldr	r1, [pc, #48]	; (800a054 <eARPProcessPacket+0xec>)
 800a022:	4618      	mov	r0, r3
 800a024:	f006 ffeb 	bl	8010ffe <memcpy>
					memcpy( ( void* )pxARPHeader->ucSenderProtocolAddress, ( void* )ipLOCAL_IP_ADDRESS_POINTER, sizeof( pxARPHeader->ucSenderProtocolAddress ) );
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	330e      	adds	r3, #14
 800a02c:	4a09      	ldr	r2, [pc, #36]	; (800a054 <eARPProcessPacket+0xec>)
 800a02e:	6952      	ldr	r2, [r2, #20]
 800a030:	601a      	str	r2, [r3, #0]
					eReturn = eReturnEthernetFrame;
 800a032:	2302      	movs	r3, #2
 800a034:	75fb      	strb	r3, [r7, #23]
				break;
 800a036:	e007      	b.n	800a048 <eARPProcessPacket+0xe0>
				vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	3308      	adds	r3, #8
 800a03c:	68ba      	ldr	r2, [r7, #8]
 800a03e:	4611      	mov	r1, r2
 800a040:	4618      	mov	r0, r3
 800a042:	f000 f80b 	bl	800a05c <vARPRefreshCacheEntry>
				break;
 800a046:	e000      	b.n	800a04a <eARPProcessPacket+0xe2>
				break;
 800a048:	bf00      	nop
		}
	}

	return eReturn;
 800a04a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3718      	adds	r7, #24
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	200001b0 	.word	0x200001b0
 800a058:	080114e4 	.word	0x080114e4

0800a05c <vARPRefreshCacheEntry>:

#endif	/* ipconfigUSE_ARP_REMOVE_ENTRY != 0 */
/*-----------------------------------------------------------*/

void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress, const uint32_t ulIPAddress )
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b088      	sub	sp, #32
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
BaseType_t x = 0;
 800a066:	2300      	movs	r3, #0
 800a068:	61fb      	str	r3, [r7, #28]
BaseType_t xIpEntry = -1;
 800a06a:	f04f 33ff 	mov.w	r3, #4294967295
 800a06e:	61bb      	str	r3, [r7, #24]
BaseType_t xMacEntry = -1;
 800a070:	f04f 33ff 	mov.w	r3, #4294967295
 800a074:	617b      	str	r3, [r7, #20]
BaseType_t xUseEntry = 0;
 800a076:	2300      	movs	r3, #0
 800a078:	613b      	str	r3, [r7, #16]
uint8_t ucMinAgeFound = 0U;
 800a07a:	2300      	movs	r3, #0
 800a07c:	73fb      	strb	r3, [r7, #15]

	#if( ipconfigARP_STORES_REMOTE_ADDRESSES == 0 )
		/* Only process the IP address if it is on the local network.
		Unless: when '*ipLOCAL_IP_ADDRESS_POINTER' equals zero, the IP-address
		and netmask are still unknown. */
		if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 800a07e:	4b71      	ldr	r3, [pc, #452]	; (800a244 <vARPRefreshCacheEntry+0x1e8>)
 800a080:	695a      	ldr	r2, [r3, #20]
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	405a      	eors	r2, r3
 800a086:	4b70      	ldr	r3, [pc, #448]	; (800a248 <vARPRefreshCacheEntry+0x1ec>)
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	4013      	ands	r3, r2
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d004      	beq.n	800a09a <vARPRefreshCacheEntry+0x3e>
			( *ipLOCAL_IP_ADDRESS_POINTER == 0ul ) )
 800a090:	4b6c      	ldr	r3, [pc, #432]	; (800a244 <vARPRefreshCacheEntry+0x1e8>)
 800a092:	695b      	ldr	r3, [r3, #20]
		if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 800a094:	2b00      	cmp	r3, #0
 800a096:	f040 80d2 	bne.w	800a23e <vARPRefreshCacheEntry+0x1e2>
		zero the the gateway address is the only option. */
		if( pdTRUE )
	#endif
	{
		/* Start with the maximum possible number. */
		ucMinAgeFound--;
 800a09a:	7bfb      	ldrb	r3, [r7, #15]
 800a09c:	3b01      	subs	r3, #1
 800a09e:	73fb      	strb	r3, [r7, #15]

		/* For each entry in the ARP cache table. */
		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	61fb      	str	r3, [r7, #28]
 800a0a4:	e069      	b.n	800a17a <vARPRefreshCacheEntry+0x11e>
		{
			/* Does this line in the cache table hold an entry for the IP
			address	being queried? */
			if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 800a0a6:	4969      	ldr	r1, [pc, #420]	; (800a24c <vARPRefreshCacheEntry+0x1f0>)
 800a0a8:	69fa      	ldr	r2, [r7, #28]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	005b      	lsls	r3, r3, #1
 800a0ae:	4413      	add	r3, r2
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	440b      	add	r3, r1
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d12d      	bne.n	800a118 <vARPRefreshCacheEntry+0xbc>
			{
				if( pxMACAddress == NULL )
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d102      	bne.n	800a0c8 <vARPRefreshCacheEntry+0x6c>
				{
					/* In case the parameter pxMACAddress is NULL, an entry will be reserved to
					indicate that there is an outstanding ARP request, This entry will have
					"ucValid == pdFALSE". */
					xIpEntry = x;
 800a0c2:	69fb      	ldr	r3, [r7, #28]
 800a0c4:	61bb      	str	r3, [r7, #24]
					break;
 800a0c6:	e05b      	b.n	800a180 <vARPRefreshCacheEntry+0x124>
				}

				/* See if the MAC-address also matches. */
				if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 800a0c8:	69fa      	ldr	r2, [r7, #28]
 800a0ca:	4613      	mov	r3, r2
 800a0cc:	005b      	lsls	r3, r3, #1
 800a0ce:	4413      	add	r3, r2
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	4a5e      	ldr	r2, [pc, #376]	; (800a24c <vARPRefreshCacheEntry+0x1f0>)
 800a0d4:	4413      	add	r3, r2
 800a0d6:	3304      	adds	r3, #4
 800a0d8:	6879      	ldr	r1, [r7, #4]
 800a0da:	2206      	movs	r2, #6
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f006 ff7f 	bl	8010fe0 <memcmp>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d114      	bne.n	800a112 <vARPRefreshCacheEntry+0xb6>
				{
					/* This function will be called for each received packet
					As this is by far the most common path the coding standard
					is relaxed in this case and a return is permitted as an
					optimisation. */
					xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 800a0e8:	4958      	ldr	r1, [pc, #352]	; (800a24c <vARPRefreshCacheEntry+0x1f0>)
 800a0ea:	69fa      	ldr	r2, [r7, #28]
 800a0ec:	4613      	mov	r3, r2
 800a0ee:	005b      	lsls	r3, r3, #1
 800a0f0:	4413      	add	r3, r2
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	440b      	add	r3, r1
 800a0f6:	330a      	adds	r3, #10
 800a0f8:	2296      	movs	r2, #150	; 0x96
 800a0fa:	701a      	strb	r2, [r3, #0]
					xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 800a0fc:	4953      	ldr	r1, [pc, #332]	; (800a24c <vARPRefreshCacheEntry+0x1f0>)
 800a0fe:	69fa      	ldr	r2, [r7, #28]
 800a100:	4613      	mov	r3, r2
 800a102:	005b      	lsls	r3, r3, #1
 800a104:	4413      	add	r3, r2
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	440b      	add	r3, r1
 800a10a:	330b      	adds	r3, #11
 800a10c:	2201      	movs	r2, #1
 800a10e:	701a      	strb	r2, [r3, #0]
					return;
 800a110:	e095      	b.n	800a23e <vARPRefreshCacheEntry+0x1e2>
				/* Found an entry containing ulIPAddress, but the MAC address
				doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
				for an ARP reply.  Still want to see if there is match with the
				given MAC address.ucBytes.  If found, either of the two entries
				must be cleared. */
				xIpEntry = x;
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	61bb      	str	r3, [r7, #24]
 800a116:	e02d      	b.n	800a174 <vARPRefreshCacheEntry+0x118>
			}
			else if( ( pxMACAddress != NULL ) && ( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 ) )
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d012      	beq.n	800a144 <vARPRefreshCacheEntry+0xe8>
 800a11e:	69fa      	ldr	r2, [r7, #28]
 800a120:	4613      	mov	r3, r2
 800a122:	005b      	lsls	r3, r3, #1
 800a124:	4413      	add	r3, r2
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	4a48      	ldr	r2, [pc, #288]	; (800a24c <vARPRefreshCacheEntry+0x1f0>)
 800a12a:	4413      	add	r3, r2
 800a12c:	3304      	adds	r3, #4
 800a12e:	6879      	ldr	r1, [r7, #4]
 800a130:	2206      	movs	r2, #6
 800a132:	4618      	mov	r0, r3
 800a134:	f006 ff54 	bl	8010fe0 <memcmp>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d102      	bne.n	800a144 <vARPRefreshCacheEntry+0xe8>
				if( bIsLocal[ 0 ] == bIsLocal[ 1 ] )
				{
					xMacEntry = x;
				}
	#else
				xMacEntry = x;
 800a13e:	69fb      	ldr	r3, [r7, #28]
 800a140:	617b      	str	r3, [r7, #20]
 800a142:	e017      	b.n	800a174 <vARPRefreshCacheEntry+0x118>
	#endif
			}
			/* _HT_
			Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
			else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 800a144:	4941      	ldr	r1, [pc, #260]	; (800a24c <vARPRefreshCacheEntry+0x1f0>)
 800a146:	69fa      	ldr	r2, [r7, #28]
 800a148:	4613      	mov	r3, r2
 800a14a:	005b      	lsls	r3, r3, #1
 800a14c:	4413      	add	r3, r2
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	440b      	add	r3, r1
 800a152:	330a      	adds	r3, #10
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	7bfa      	ldrb	r2, [r7, #15]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d90b      	bls.n	800a174 <vARPRefreshCacheEntry+0x118>
			{
				/* As the table is traversed, remember the table row that
				contains the oldest entry (the lowest age count, as ages are
				decremented to zero) so the row can be re-used if this function
				needs to add an entry that does not already exist. */
				ucMinAgeFound = xARPCache[ x ].ucAge;
 800a15c:	493b      	ldr	r1, [pc, #236]	; (800a24c <vARPRefreshCacheEntry+0x1f0>)
 800a15e:	69fa      	ldr	r2, [r7, #28]
 800a160:	4613      	mov	r3, r2
 800a162:	005b      	lsls	r3, r3, #1
 800a164:	4413      	add	r3, r2
 800a166:	009b      	lsls	r3, r3, #2
 800a168:	440b      	add	r3, r1
 800a16a:	330a      	adds	r3, #10
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	73fb      	strb	r3, [r7, #15]
				xUseEntry = x;
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	613b      	str	r3, [r7, #16]
		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800a174:	69fb      	ldr	r3, [r7, #28]
 800a176:	3301      	adds	r3, #1
 800a178:	61fb      	str	r3, [r7, #28]
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	2b05      	cmp	r3, #5
 800a17e:	dd92      	ble.n	800a0a6 <vARPRefreshCacheEntry+0x4a>
			}
		}

		if( xMacEntry >= 0 )
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	2b00      	cmp	r3, #0
 800a184:	db11      	blt.n	800a1aa <vARPRefreshCacheEntry+0x14e>
		{
			xUseEntry = xMacEntry;
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	613b      	str	r3, [r7, #16]

			if( xIpEntry >= 0 )
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	db11      	blt.n	800a1b4 <vARPRefreshCacheEntry+0x158>
			{
				/* Both the MAC address as well as the IP address were found in
				different locations: clear the entry which matches the
				IP-address */
				memset( &xARPCache[ xIpEntry ], '\0', sizeof( xARPCache[ xIpEntry ] ) );
 800a190:	69ba      	ldr	r2, [r7, #24]
 800a192:	4613      	mov	r3, r2
 800a194:	005b      	lsls	r3, r3, #1
 800a196:	4413      	add	r3, r2
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	4a2c      	ldr	r2, [pc, #176]	; (800a24c <vARPRefreshCacheEntry+0x1f0>)
 800a19c:	4413      	add	r3, r2
 800a19e:	220c      	movs	r2, #12
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f006 ff50 	bl	8011048 <memset>
 800a1a8:	e004      	b.n	800a1b4 <vARPRefreshCacheEntry+0x158>
			}
		}
		else if( xIpEntry >= 0 )
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	db01      	blt.n	800a1b4 <vARPRefreshCacheEntry+0x158>
		{
			/* An entry containing the IP-address was found, but it had a different MAC address */
			xUseEntry = xIpEntry;
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	613b      	str	r3, [r7, #16]
		}

		/* If the entry was not found, we use the oldest entry and set the IPaddress */
		xARPCache[ xUseEntry ].ulIPAddress = ulIPAddress;
 800a1b4:	4925      	ldr	r1, [pc, #148]	; (800a24c <vARPRefreshCacheEntry+0x1f0>)
 800a1b6:	693a      	ldr	r2, [r7, #16]
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	005b      	lsls	r3, r3, #1
 800a1bc:	4413      	add	r3, r2
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	440b      	add	r3, r1
 800a1c2:	683a      	ldr	r2, [r7, #0]
 800a1c4:	601a      	str	r2, [r3, #0]

		if( pxMACAddress != NULL )
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d021      	beq.n	800a210 <vARPRefreshCacheEntry+0x1b4>
		{
			memcpy( xARPCache[ xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 800a1cc:	693a      	ldr	r2, [r7, #16]
 800a1ce:	4613      	mov	r3, r2
 800a1d0:	005b      	lsls	r3, r3, #1
 800a1d2:	4413      	add	r3, r2
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	4a1d      	ldr	r2, [pc, #116]	; (800a24c <vARPRefreshCacheEntry+0x1f0>)
 800a1d8:	4413      	add	r3, r2
 800a1da:	3304      	adds	r3, #4
 800a1dc:	6879      	ldr	r1, [r7, #4]
 800a1de:	2206      	movs	r2, #6
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f006 ff0c 	bl	8010ffe <memcpy>

			iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, (*pxMACAddress) );
			/* And this entry does not need immediate attention */
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 800a1e6:	4919      	ldr	r1, [pc, #100]	; (800a24c <vARPRefreshCacheEntry+0x1f0>)
 800a1e8:	693a      	ldr	r2, [r7, #16]
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	005b      	lsls	r3, r3, #1
 800a1ee:	4413      	add	r3, r2
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	440b      	add	r3, r1
 800a1f4:	330a      	adds	r3, #10
 800a1f6:	2296      	movs	r2, #150	; 0x96
 800a1f8:	701a      	strb	r2, [r3, #0]
			xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 800a1fa:	4914      	ldr	r1, [pc, #80]	; (800a24c <vARPRefreshCacheEntry+0x1f0>)
 800a1fc:	693a      	ldr	r2, [r7, #16]
 800a1fe:	4613      	mov	r3, r2
 800a200:	005b      	lsls	r3, r3, #1
 800a202:	4413      	add	r3, r2
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	440b      	add	r3, r1
 800a208:	330b      	adds	r3, #11
 800a20a:	2201      	movs	r2, #1
 800a20c:	701a      	strb	r2, [r3, #0]
 800a20e:	e016      	b.n	800a23e <vARPRefreshCacheEntry+0x1e2>
		}
		else if( xIpEntry < 0 )
 800a210:	69bb      	ldr	r3, [r7, #24]
 800a212:	2b00      	cmp	r3, #0
 800a214:	da13      	bge.n	800a23e <vARPRefreshCacheEntry+0x1e2>
		{
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 800a216:	490d      	ldr	r1, [pc, #52]	; (800a24c <vARPRefreshCacheEntry+0x1f0>)
 800a218:	693a      	ldr	r2, [r7, #16]
 800a21a:	4613      	mov	r3, r2
 800a21c:	005b      	lsls	r3, r3, #1
 800a21e:	4413      	add	r3, r2
 800a220:	009b      	lsls	r3, r3, #2
 800a222:	440b      	add	r3, r1
 800a224:	330a      	adds	r3, #10
 800a226:	2205      	movs	r2, #5
 800a228:	701a      	strb	r2, [r3, #0]
			xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 800a22a:	4908      	ldr	r1, [pc, #32]	; (800a24c <vARPRefreshCacheEntry+0x1f0>)
 800a22c:	693a      	ldr	r2, [r7, #16]
 800a22e:	4613      	mov	r3, r2
 800a230:	005b      	lsls	r3, r3, #1
 800a232:	4413      	add	r3, r2
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	440b      	add	r3, r1
 800a238:	330b      	adds	r3, #11
 800a23a:	2200      	movs	r2, #0
 800a23c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800a23e:	3720      	adds	r7, #32
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	200001b0 	.word	0x200001b0
 800a248:	20004e60 	.word	0x20004e60
 800a24c:	20004d98 	.word	0x20004d98

0800a250 <eARPGetCacheEntry>:
#endif /* ipconfigUSE_ARP_REVERSED_LOOKUP */

/*-----------------------------------------------------------*/

eARPLookupResult_t eARPGetCacheEntry( uint32_t *pulIPAddress, MACAddress_t * const pxMACAddress )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b084      	sub	sp, #16
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
eARPLookupResult_t eReturn;
uint32_t ulAddressToLookup;

#if( ipconfigUSE_LLMNR == 1 )
	if( *pulIPAddress == ipLLMNR_IP_ADDR )	/* Is in network byte order. */
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a2e      	ldr	r2, [pc, #184]	; (800a318 <eARPGetCacheEntry+0xc8>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d108      	bne.n	800a276 <eARPGetCacheEntry+0x26>
	{
		/* The LLMNR IP-address has a fixed virtual MAC address. */
		memcpy( pxMACAddress->ucBytes, xLLMNR_MacAdress.ucBytes, sizeof( MACAddress_t ) );
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	4a2d      	ldr	r2, [pc, #180]	; (800a31c <eARPGetCacheEntry+0xcc>)
 800a268:	6811      	ldr	r1, [r2, #0]
 800a26a:	6019      	str	r1, [r3, #0]
 800a26c:	8892      	ldrh	r2, [r2, #4]
 800a26e:	809a      	strh	r2, [r3, #4]
		eReturn = eARPCacheHit;
 800a270:	2301      	movs	r3, #1
 800a272:	73fb      	strb	r3, [r7, #15]
 800a274:	e04a      	b.n	800a30c <eARPGetCacheEntry+0xbc>
	}
	else
#endif
	if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||	/* Is it the general broadcast address 255.255.255.255? */
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a27e:	d005      	beq.n	800a28c <eARPGetCacheEntry+0x3c>
		( *pulIPAddress == xNetworkAddressing.ulBroadcastAddress ) )/* Or a local broadcast address, eg 192.168.1.255? */
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	4b26      	ldr	r3, [pc, #152]	; (800a320 <eARPGetCacheEntry+0xd0>)
 800a286:	691b      	ldr	r3, [r3, #16]
	if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||	/* Is it the general broadcast address 255.255.255.255? */
 800a288:	429a      	cmp	r2, r3
 800a28a:	d108      	bne.n	800a29e <eARPGetCacheEntry+0x4e>
	{
		/* This is a broadcast so uses the broadcast MAC address. */
		memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	4a25      	ldr	r2, [pc, #148]	; (800a324 <eARPGetCacheEntry+0xd4>)
 800a290:	6811      	ldr	r1, [r2, #0]
 800a292:	6019      	str	r1, [r3, #0]
 800a294:	8892      	ldrh	r2, [r2, #4]
 800a296:	809a      	strh	r2, [r3, #4]
		eReturn = eARPCacheHit;
 800a298:	2301      	movs	r3, #1
 800a29a:	73fb      	strb	r3, [r7, #15]
 800a29c:	e036      	b.n	800a30c <eARPGetCacheEntry+0xbc>
	}
	else if( *ipLOCAL_IP_ADDRESS_POINTER == 0UL )
 800a29e:	4b22      	ldr	r3, [pc, #136]	; (800a328 <eARPGetCacheEntry+0xd8>)
 800a2a0:	695b      	ldr	r3, [r3, #20]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d102      	bne.n	800a2ac <eARPGetCacheEntry+0x5c>
	{
		/* The IP address has not yet been assigned, so there is nothing that
		can be done. */
		eReturn = eCantSendPacket;
 800a2a6:	2302      	movs	r3, #2
 800a2a8:	73fb      	strb	r3, [r7, #15]
 800a2aa:	e02f      	b.n	800a30c <eARPGetCacheEntry+0xbc>
	}
	else
	{
		eReturn = eARPCacheMiss;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	73fb      	strb	r3, [r7, #15]

		if( ( *pulIPAddress & xNetworkAddressing.ulNetMask ) != ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) )
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	4b1c      	ldr	r3, [pc, #112]	; (800a328 <eARPGetCacheEntry+0xd8>)
 800a2b6:	695b      	ldr	r3, [r3, #20]
 800a2b8:	405a      	eors	r2, r3
 800a2ba:	4b19      	ldr	r3, [pc, #100]	; (800a320 <eARPGetCacheEntry+0xd0>)
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	4013      	ands	r3, r2
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d00b      	beq.n	800a2dc <eARPGetCacheEntry+0x8c>
			else
#endif
			{
				/* The IP address is off the local network, so look up the
				hardware address of the router, if any. */
				if( xNetworkAddressing.ulGatewayAddress != ( uint32_t )0u )
 800a2c4:	4b16      	ldr	r3, [pc, #88]	; (800a320 <eARPGetCacheEntry+0xd0>)
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d003      	beq.n	800a2d4 <eARPGetCacheEntry+0x84>
				{
					ulAddressToLookup = xNetworkAddressing.ulGatewayAddress;
 800a2cc:	4b14      	ldr	r3, [pc, #80]	; (800a320 <eARPGetCacheEntry+0xd0>)
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	60bb      	str	r3, [r7, #8]
 800a2d2:	e006      	b.n	800a2e2 <eARPGetCacheEntry+0x92>
				}
				else
				{
					ulAddressToLookup = *pulIPAddress;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	60bb      	str	r3, [r7, #8]
 800a2da:	e002      	b.n	800a2e2 <eARPGetCacheEntry+0x92>
		}
		else
		{
			/* The IP address is on the local network, so lookup the requested
			IP address directly. */
			ulAddressToLookup = *pulIPAddress;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	60bb      	str	r3, [r7, #8]
		}

		if( eReturn == eARPCacheMiss )
 800a2e2:	7bfb      	ldrb	r3, [r7, #15]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d111      	bne.n	800a30c <eARPGetCacheEntry+0xbc>
		{
			if( ulAddressToLookup == 0UL )
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d102      	bne.n	800a2f4 <eARPGetCacheEntry+0xa4>
			{
				/* The address is not on the local network, and there is not a
				router. */
				eReturn = eCantSendPacket;
 800a2ee:	2302      	movs	r3, #2
 800a2f0:	73fb      	strb	r3, [r7, #15]
 800a2f2:	e00b      	b.n	800a30c <eARPGetCacheEntry+0xbc>
			}
			else
			{
				eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress );
 800a2f4:	6839      	ldr	r1, [r7, #0]
 800a2f6:	68b8      	ldr	r0, [r7, #8]
 800a2f8:	f000 f818 	bl	800a32c <prvCacheLookup>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	73fb      	strb	r3, [r7, #15]

				if( eReturn == eARPCacheMiss )
 800a300:	7bfb      	ldrb	r3, [r7, #15]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d102      	bne.n	800a30c <eARPGetCacheEntry+0xbc>
				{
					/* It might be that the ARP has to go to the gateway. */
					*pulIPAddress = ulAddressToLookup;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	68ba      	ldr	r2, [r7, #8]
 800a30a:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}

	return eReturn;
 800a30c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3710      	adds	r7, #16
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	fc0000e0 	.word	0xfc0000e0
 800a31c:	080114dc 	.word	0x080114dc
 800a320:	20004e60 	.word	0x20004e60
 800a324:	080114e4 	.word	0x080114e4
 800a328:	200001b0 	.word	0x200001b0

0800a32c <prvCacheLookup>:

/*-----------------------------------------------------------*/

static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup, MACAddress_t * const pxMACAddress )
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
BaseType_t x;
eARPLookupResult_t eReturn = eARPCacheMiss;
 800a336:	2300      	movs	r3, #0
 800a338:	72fb      	strb	r3, [r7, #11]

	/* Loop through each entry in the ARP cache. */
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800a33a:	2300      	movs	r3, #0
 800a33c:	60fb      	str	r3, [r7, #12]
 800a33e:	e02b      	b.n	800a398 <prvCacheLookup+0x6c>
	{
		/* Does this row in the ARP cache table hold an entry for the IP address
		being queried? */
		if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 800a340:	4919      	ldr	r1, [pc, #100]	; (800a3a8 <prvCacheLookup+0x7c>)
 800a342:	68fa      	ldr	r2, [r7, #12]
 800a344:	4613      	mov	r3, r2
 800a346:	005b      	lsls	r3, r3, #1
 800a348:	4413      	add	r3, r2
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	440b      	add	r3, r1
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	429a      	cmp	r2, r3
 800a354:	d11d      	bne.n	800a392 <prvCacheLookup+0x66>
		{
			/* A matching valid entry was found. */
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800a356:	4914      	ldr	r1, [pc, #80]	; (800a3a8 <prvCacheLookup+0x7c>)
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	4613      	mov	r3, r2
 800a35c:	005b      	lsls	r3, r3, #1
 800a35e:	4413      	add	r3, r2
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	440b      	add	r3, r1
 800a364:	330b      	adds	r3, #11
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d102      	bne.n	800a372 <prvCacheLookup+0x46>
			{
				/* This entry is waiting an ARP reply, so is not valid. */
				eReturn = eCantSendPacket;
 800a36c:	2302      	movs	r3, #2
 800a36e:	72fb      	strb	r3, [r7, #11]
			{
				/* A valid entry was found. */
				memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
				eReturn = eARPCacheHit;
			}
			break;
 800a370:	e015      	b.n	800a39e <prvCacheLookup+0x72>
				memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800a372:	6838      	ldr	r0, [r7, #0]
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	4613      	mov	r3, r2
 800a378:	005b      	lsls	r3, r3, #1
 800a37a:	4413      	add	r3, r2
 800a37c:	009b      	lsls	r3, r3, #2
 800a37e:	4a0a      	ldr	r2, [pc, #40]	; (800a3a8 <prvCacheLookup+0x7c>)
 800a380:	4413      	add	r3, r2
 800a382:	3304      	adds	r3, #4
 800a384:	2206      	movs	r2, #6
 800a386:	4619      	mov	r1, r3
 800a388:	f006 fe39 	bl	8010ffe <memcpy>
				eReturn = eARPCacheHit;
 800a38c:	2301      	movs	r3, #1
 800a38e:	72fb      	strb	r3, [r7, #11]
			break;
 800a390:	e005      	b.n	800a39e <prvCacheLookup+0x72>
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	3301      	adds	r3, #1
 800a396:	60fb      	str	r3, [r7, #12]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2b05      	cmp	r3, #5
 800a39c:	ddd0      	ble.n	800a340 <prvCacheLookup+0x14>
		}
	}

	return eReturn;
 800a39e:	7afb      	ldrb	r3, [r7, #11]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3710      	adds	r7, #16
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	20004d98 	.word	0x20004d98

0800a3ac <vARPAgeCache>:
/*-----------------------------------------------------------*/

void vARPAgeCache( void )
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
BaseType_t x;
TickType_t xTimeNow;

	/* Loop through each entry in the ARP cache. */
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	607b      	str	r3, [r7, #4]
 800a3b6:	e063      	b.n	800a480 <vARPAgeCache+0xd4>
	{
		/* If the entry is valid (its age is greater than zero). */
		if( xARPCache[ x ].ucAge > 0U )
 800a3b8:	4940      	ldr	r1, [pc, #256]	; (800a4bc <vARPAgeCache+0x110>)
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	4613      	mov	r3, r2
 800a3be:	005b      	lsls	r3, r3, #1
 800a3c0:	4413      	add	r3, r2
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	440b      	add	r3, r1
 800a3c6:	330a      	adds	r3, #10
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d055      	beq.n	800a47a <vARPAgeCache+0xce>
		{
			/* Decrement the age value of the entry in this ARP cache table row.
			When the age reaches zero it is no longer considered valid. */
			( xARPCache[ x ].ucAge )--;
 800a3ce:	493b      	ldr	r1, [pc, #236]	; (800a4bc <vARPAgeCache+0x110>)
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	005b      	lsls	r3, r3, #1
 800a3d6:	4413      	add	r3, r2
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	440b      	add	r3, r1
 800a3dc:	330a      	adds	r3, #10
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	3b01      	subs	r3, #1
 800a3e2:	b2d8      	uxtb	r0, r3
 800a3e4:	4935      	ldr	r1, [pc, #212]	; (800a4bc <vARPAgeCache+0x110>)
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	005b      	lsls	r3, r3, #1
 800a3ec:	4413      	add	r3, r2
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	440b      	add	r3, r1
 800a3f2:	330a      	adds	r3, #10
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	701a      	strb	r2, [r3, #0]

			/* If the entry is not yet valid, then it is waiting an ARP
			reply, and the ARP request should be retransmitted. */
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800a3f8:	4930      	ldr	r1, [pc, #192]	; (800a4bc <vARPAgeCache+0x110>)
 800a3fa:	687a      	ldr	r2, [r7, #4]
 800a3fc:	4613      	mov	r3, r2
 800a3fe:	005b      	lsls	r3, r3, #1
 800a400:	4413      	add	r3, r2
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	440b      	add	r3, r1
 800a406:	330b      	adds	r3, #11
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d10b      	bne.n	800a426 <vARPAgeCache+0x7a>
			{
				FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 800a40e:	492b      	ldr	r1, [pc, #172]	; (800a4bc <vARPAgeCache+0x110>)
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	4613      	mov	r3, r2
 800a414:	005b      	lsls	r3, r3, #1
 800a416:	4413      	add	r3, r2
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	440b      	add	r3, r1
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4618      	mov	r0, r3
 800a420:	f000 f852 	bl	800a4c8 <FreeRTOS_OutputARPRequest>
 800a424:	e015      	b.n	800a452 <vARPAgeCache+0xa6>
			}
			else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 800a426:	4925      	ldr	r1, [pc, #148]	; (800a4bc <vARPAgeCache+0x110>)
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	4613      	mov	r3, r2
 800a42c:	005b      	lsls	r3, r3, #1
 800a42e:	4413      	add	r3, r2
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	440b      	add	r3, r1
 800a434:	330a      	adds	r3, #10
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	2b03      	cmp	r3, #3
 800a43a:	d80a      	bhi.n	800a452 <vARPAgeCache+0xa6>
			{
				/* This entry will get removed soon.  See if the MAC address is
				still valid to prevent this happening. */
				iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
				FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 800a43c:	491f      	ldr	r1, [pc, #124]	; (800a4bc <vARPAgeCache+0x110>)
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	4613      	mov	r3, r2
 800a442:	005b      	lsls	r3, r3, #1
 800a444:	4413      	add	r3, r2
 800a446:	009b      	lsls	r3, r3, #2
 800a448:	440b      	add	r3, r1
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4618      	mov	r0, r3
 800a44e:	f000 f83b 	bl	800a4c8 <FreeRTOS_OutputARPRequest>
			else
			{
				/* The age has just ticked down, with nothing to do. */
			}

			if( xARPCache[ x ].ucAge == 0u )
 800a452:	491a      	ldr	r1, [pc, #104]	; (800a4bc <vARPAgeCache+0x110>)
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	4613      	mov	r3, r2
 800a458:	005b      	lsls	r3, r3, #1
 800a45a:	4413      	add	r3, r2
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	440b      	add	r3, r1
 800a460:	330a      	adds	r3, #10
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d108      	bne.n	800a47a <vARPAgeCache+0xce>
			{
				/* The entry is no longer valid.  Wipe it out. */
				iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
				xARPCache[ x ].ulIPAddress = 0UL;
 800a468:	4914      	ldr	r1, [pc, #80]	; (800a4bc <vARPAgeCache+0x110>)
 800a46a:	687a      	ldr	r2, [r7, #4]
 800a46c:	4613      	mov	r3, r2
 800a46e:	005b      	lsls	r3, r3, #1
 800a470:	4413      	add	r3, r2
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	440b      	add	r3, r1
 800a476:	2200      	movs	r2, #0
 800a478:	601a      	str	r2, [r3, #0]
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	3301      	adds	r3, #1
 800a47e:	607b      	str	r3, [r7, #4]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2b05      	cmp	r3, #5
 800a484:	dd98      	ble.n	800a3b8 <vARPAgeCache+0xc>
			}
		}
	}

	xTimeNow = xTaskGetTickCount ();
 800a486:	f7fe ff65 	bl	8009354 <xTaskGetTickCount>
 800a48a:	6038      	str	r0, [r7, #0]

	if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 800a48c:	4b0c      	ldr	r3, [pc, #48]	; (800a4c0 <vARPAgeCache+0x114>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d007      	beq.n	800a4a4 <vARPAgeCache+0xf8>
 800a494:	4b0a      	ldr	r3, [pc, #40]	; (800a4c0 <vARPAgeCache+0x114>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	683a      	ldr	r2, [r7, #0]
 800a49a:	1ad3      	subs	r3, r2, r3
 800a49c:	f644 6220 	movw	r2, #20000	; 0x4e20
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d907      	bls.n	800a4b4 <vARPAgeCache+0x108>
	{
		FreeRTOS_OutputARPRequest( *ipLOCAL_IP_ADDRESS_POINTER );
 800a4a4:	4b07      	ldr	r3, [pc, #28]	; (800a4c4 <vARPAgeCache+0x118>)
 800a4a6:	695b      	ldr	r3, [r3, #20]
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f000 f80d 	bl	800a4c8 <FreeRTOS_OutputARPRequest>
		xLastGratuitousARPTime = xTimeNow;
 800a4ae:	4a04      	ldr	r2, [pc, #16]	; (800a4c0 <vARPAgeCache+0x114>)
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	6013      	str	r3, [r2, #0]
	}
}
 800a4b4:	bf00      	nop
 800a4b6:	3708      	adds	r7, #8
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}
 800a4bc:	20004d98 	.word	0x20004d98
 800a4c0:	20004de0 	.word	0x20004de0
 800a4c4:	200001b0 	.word	0x200001b0

0800a4c8 <FreeRTOS_OutputARPRequest>:
	xSendEventToIPTask( eARPTimerEvent );
}

/*-----------------------------------------------------------*/
void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
NetworkBufferDescriptor_t *pxNetworkBuffer;

	/* This is called from the context of the IP event task, so a block time
	must not be used. */
	pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0 );
 800a4d0:	2100      	movs	r1, #0
 800a4d2:	202a      	movs	r0, #42	; 0x2a
 800a4d4:	f006 fa06 	bl	80108e4 <pxGetNetworkBufferWithDescriptor>
 800a4d8:	60f8      	str	r0, [r7, #12]

	if( pxNetworkBuffer != NULL )
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d009      	beq.n	800a4f4 <FreeRTOS_OutputARPRequest+0x2c>
	{
		pxNetworkBuffer->ulIPAddress = ulIPAddress;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	615a      	str	r2, [r3, #20]
		vARPGenerateRequestPacket( pxNetworkBuffer );
 800a4e6:	68f8      	ldr	r0, [r7, #12]
 800a4e8:	f000 f808 	bl	800a4fc <vARPGenerateRequestPacket>
				pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
			}
		}
		#endif

		xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 800a4ec:	2101      	movs	r1, #1
 800a4ee:	68f8      	ldr	r0, [r7, #12]
 800a4f0:	f7fa fe9a 	bl	8005228 <xNetworkInterfaceOutput>
	}
}
 800a4f4:	bf00      	nop
 800a4f6:	3710      	adds	r7, #16
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <vARPGenerateRequestPacket>:

void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800a4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4fe:	b085      	sub	sp, #20
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
ARPPacket_t *pxARPPacket;

	pxARPPacket = ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	699b      	ldr	r3, [r3, #24]
 800a508:	60fb      	str	r3, [r7, #12]
		xARPHeader.ucHardwareAddressLength;
		xARPHeader.ucProtocolAddressLength;
		xARPHeader.usOperation;
		xARPHeader.xTargetHardwareAddress;
	*/
	memcpy( ( void * ) pxARPPacket, ( void * ) xDefaultPartARPPacketHeader, sizeof( xDefaultPartARPPacketHeader ) );
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	4a1a      	ldr	r2, [pc, #104]	; (800a578 <vARPGenerateRequestPacket+0x7c>)
 800a50e:	4614      	mov	r4, r2
 800a510:	469e      	mov	lr, r3
 800a512:	f104 0c20 	add.w	ip, r4, #32
 800a516:	4675      	mov	r5, lr
 800a518:	4626      	mov	r6, r4
 800a51a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a51c:	6028      	str	r0, [r5, #0]
 800a51e:	6069      	str	r1, [r5, #4]
 800a520:	60aa      	str	r2, [r5, #8]
 800a522:	60eb      	str	r3, [r5, #12]
 800a524:	3410      	adds	r4, #16
 800a526:	f10e 0e10 	add.w	lr, lr, #16
 800a52a:	4564      	cmp	r4, ip
 800a52c:	d1f3      	bne.n	800a516 <vARPGenerateRequestPacket+0x1a>
 800a52e:	4673      	mov	r3, lr
 800a530:	4622      	mov	r2, r4
 800a532:	6810      	ldr	r0, [r2, #0]
 800a534:	6018      	str	r0, [r3, #0]
 800a536:	8892      	ldrh	r2, [r2, #4]
 800a538:	809a      	strh	r2, [r3, #4]
	memcpy( ( void * ) pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	3306      	adds	r3, #6
 800a53e:	2206      	movs	r2, #6
 800a540:	490e      	ldr	r1, [pc, #56]	; (800a57c <vARPGenerateRequestPacket+0x80>)
 800a542:	4618      	mov	r0, r3
 800a544:	f006 fd5b 	bl	8010ffe <memcpy>
	memcpy( ( void * ) pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes, ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	3316      	adds	r3, #22
 800a54c:	2206      	movs	r2, #6
 800a54e:	490b      	ldr	r1, [pc, #44]	; (800a57c <vARPGenerateRequestPacket+0x80>)
 800a550:	4618      	mov	r0, r3
 800a552:	f006 fd54 	bl	8010ffe <memcpy>

	memcpy( ( void* )pxARPPacket->xARPHeader.ucSenderProtocolAddress, ( void* )ipLOCAL_IP_ADDRESS_POINTER, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	331c      	adds	r3, #28
 800a55a:	4a08      	ldr	r2, [pc, #32]	; (800a57c <vARPGenerateRequestPacket+0x80>)
 800a55c:	6952      	ldr	r2, [r2, #20]
 800a55e:	601a      	str	r2, [r3, #0]
	pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->ulIPAddress;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	695a      	ldr	r2, [r3, #20]
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26

	pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	222a      	movs	r2, #42	; 0x2a
 800a56e:	61da      	str	r2, [r3, #28]

	iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->ulIPAddress );
}
 800a570:	bf00      	nop
 800a572:	3714      	adds	r7, #20
 800a574:	46bd      	mov	sp, r7
 800a576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a578:	080114b4 	.word	0x080114b4
 800a57c:	200001b0 	.word	0x200001b0

0800a580 <usChar2u16>:
			( ( ( uint32_t )apChr[3] ) );
}

static portINLINE uint16_t usChar2u16 (const uint8_t *apChr);
static portINLINE uint16_t usChar2u16 (const uint8_t *apChr)
{
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
	return ( uint16_t )
			( ( ( ( uint32_t )apChr[0] ) << 8) |
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	021b      	lsls	r3, r3, #8
 800a590:	b29a      	uxth	r2, r3
			  ( ( ( uint32_t )apChr[1] ) ) );
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	3301      	adds	r3, #1
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	b29b      	uxth	r3, r3
	return ( uint16_t )
 800a59a:	4313      	orrs	r3, r2
 800a59c:	b29b      	uxth	r3, r3
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	370c      	adds	r7, #12
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <prvReadNameField>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_DNS_CACHE == 1 )

	static uint8_t *prvReadNameField( uint8_t *pucByte, size_t xSourceLen, char *pcName, size_t xDestLen )
	{
 800a5aa:	b480      	push	{r7}
 800a5ac:	b087      	sub	sp, #28
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	60f8      	str	r0, [r7, #12]
 800a5b2:	60b9      	str	r1, [r7, #8]
 800a5b4:	607a      	str	r2, [r7, #4]
 800a5b6:	603b      	str	r3, [r7, #0]
	size_t xNameLen = 0;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	617b      	str	r3, [r7, #20]
    BaseType_t xCount;

        if( 0 == xSourceLen )
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d101      	bne.n	800a5c6 <prvReadNameField+0x1c>
        {
            return NULL;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	e068      	b.n	800a698 <prvReadNameField+0xee>
        }

		/* Determine if the name is the fully coded name, or an offset to the name
		elsewhere in the message. */
		if( ( *pucByte & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a5ce:	2bc0      	cmp	r3, #192	; 0xc0
 800a5d0:	d140      	bne.n	800a654 <prvReadNameField+0xaa>
		{
			/* Jump over the two byte offset. */
            if( xSourceLen > sizeof( uint16_t ) )
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	2b02      	cmp	r3, #2
 800a5d6:	d903      	bls.n	800a5e0 <prvReadNameField+0x36>
            {
                pucByte += sizeof( uint16_t );
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	3302      	adds	r3, #2
 800a5dc:	60fb      	str	r3, [r7, #12]
 800a5de:	e05a      	b.n	800a696 <prvReadNameField+0xec>
            }
            else
            {
                pucByte = NULL;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	60fb      	str	r3, [r7, #12]
 800a5e4:	e057      	b.n	800a696 <prvReadNameField+0xec>
			/* pucByte points to the full name. Walk over the string. */
			while( NULL != pucByte && *pucByte != 0x00 && xSourceLen > 1 )
			{
                /* If this is not the first time through the loop, then add a 
                separator in the output. */
                if( xNameLen > 0 && xNameLen < xDestLen - 1 )
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d00b      	beq.n	800a604 <prvReadNameField+0x5a>
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	1e5a      	subs	r2, r3, #1
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d906      	bls.n	800a604 <prvReadNameField+0x5a>
                {
                    pcName[ xNameLen++ ] = '.';
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	1c5a      	adds	r2, r3, #1
 800a5fa:	617a      	str	r2, [r7, #20]
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	4413      	add	r3, r2
 800a600:	222e      	movs	r2, #46	; 0x2e
 800a602:	701a      	strb	r2, [r3, #0]
                }

                /* Process the first/next sub-string. */
				for( xCount = *(pucByte++), xSourceLen--;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	1c5a      	adds	r2, r3, #1
 800a608:	60fa      	str	r2, [r7, #12]
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	613b      	str	r3, [r7, #16]
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	3b01      	subs	r3, #1
 800a612:	60bb      	str	r3, [r7, #8]
 800a614:	e016      	b.n	800a644 <prvReadNameField+0x9a>
                     xCount-- && xSourceLen > 1; 
                     pucByte++, xSourceLen-- )
				{
                    if( xNameLen < xDestLen - 1 )
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	1e5a      	subs	r2, r3, #1
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d908      	bls.n	800a632 <prvReadNameField+0x88>
                    {
                        pcName[ xNameLen++ ] = *( ( char * )pucByte );
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	1c5a      	adds	r2, r3, #1
 800a624:	617a      	str	r2, [r7, #20]
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	4413      	add	r3, r2
 800a62a:	68fa      	ldr	r2, [r7, #12]
 800a62c:	7812      	ldrb	r2, [r2, #0]
 800a62e:	701a      	strb	r2, [r3, #0]
 800a630:	e002      	b.n	800a638 <prvReadNameField+0x8e>
                    }
                    else
                    {
                        /* DNS name is too big for the provided buffer. */
                        pucByte = NULL;
 800a632:	2300      	movs	r3, #0
 800a634:	60fb      	str	r3, [r7, #12]
                        break;
 800a636:	e00d      	b.n	800a654 <prvReadNameField+0xaa>
                     pucByte++, xSourceLen-- )
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	3301      	adds	r3, #1
 800a63c:	60fb      	str	r3, [r7, #12]
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	3b01      	subs	r3, #1
 800a642:	60bb      	str	r3, [r7, #8]
                     xCount-- && xSourceLen > 1; 
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	1e5a      	subs	r2, r3, #1
 800a648:	613a      	str	r2, [r7, #16]
				for( xCount = *(pucByte++), xSourceLen--;
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d002      	beq.n	800a654 <prvReadNameField+0xaa>
                     xCount-- && xSourceLen > 1; 
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	2b01      	cmp	r3, #1
 800a652:	d8e0      	bhi.n	800a616 <prvReadNameField+0x6c>
			while( NULL != pucByte && *pucByte != 0x00 && xSourceLen > 1 )
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d006      	beq.n	800a668 <prvReadNameField+0xbe>
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d002      	beq.n	800a668 <prvReadNameField+0xbe>
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	2b01      	cmp	r3, #1
 800a666:	d8be      	bhi.n	800a5e6 <prvReadNameField+0x3c>
                    }
				}
			}

            /* Confirm that a fully formed name was found. */
            if( NULL != pucByte )
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d013      	beq.n	800a696 <prvReadNameField+0xec>
            {
                if( 0x00 == *pucByte )
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d10d      	bne.n	800a692 <prvReadNameField+0xe8>
                {
                    pucByte++;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	3301      	adds	r3, #1
 800a67a:	60fb      	str	r3, [r7, #12]
                    xSourceLen--;
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	3b01      	subs	r3, #1
 800a680:	60bb      	str	r3, [r7, #8]
                    pcName[ xNameLen++ ] = '\0';
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	1c5a      	adds	r2, r3, #1
 800a686:	617a      	str	r2, [r7, #20]
 800a688:	687a      	ldr	r2, [r7, #4]
 800a68a:	4413      	add	r3, r2
 800a68c:	2200      	movs	r2, #0
 800a68e:	701a      	strb	r2, [r3, #0]
 800a690:	e001      	b.n	800a696 <prvReadNameField+0xec>
                }
                else
                {
                    pucByte = NULL;
 800a692:	2300      	movs	r3, #0
 800a694:	60fb      	str	r3, [r7, #12]
                }
            }
		}

		return pucByte;
 800a696:	68fb      	ldr	r3, [r7, #12]
	}
 800a698:	4618      	mov	r0, r3
 800a69a:	371c      	adds	r7, #28
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <prvSkipNameField>:
#endif	/* ipconfigUSE_DNS_CACHE == 1 */
/*-----------------------------------------------------------*/

static uint8_t *prvSkipNameField( uint8_t *pucByte, size_t xSourceLen )
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
    size_t xChunkLength;

    if( 0 == xSourceLen )
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d101      	bne.n	800a6b8 <prvSkipNameField+0x14>
    {
        return NULL;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	e038      	b.n	800a72a <prvSkipNameField+0x86>
    }

    /* Determine if the name is the fully coded name, or an offset to the name
	elsewhere in the message. */
	if( ( *pucByte & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a6c0:	2bc0      	cmp	r3, #192	; 0xc0
 800a6c2:	d11d      	bne.n	800a700 <prvSkipNameField+0x5c>
	{
		/* Jump over the two byte offset. */
        if( xSourceLen > sizeof( uint16_t ) )
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	2b02      	cmp	r3, #2
 800a6c8:	d903      	bls.n	800a6d2 <prvSkipNameField+0x2e>
        {
            pucByte += sizeof( uint16_t );
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	3302      	adds	r3, #2
 800a6ce:	607b      	str	r3, [r7, #4]
 800a6d0:	e02a      	b.n	800a728 <prvSkipNameField+0x84>
        }
        else
        {
            pucByte = NULL;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	607b      	str	r3, [r7, #4]
 800a6d6:	e027      	b.n	800a728 <prvSkipNameField+0x84>
	else
	{
		/* pucByte points to the full name. Walk over the string. */
		while( *pucByte != 0x00 && xSourceLen > 1 )
		{
            xChunkLength = *pucByte + 1;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	3301      	adds	r3, #1
 800a6de:	60fb      	str	r3, [r7, #12]

            if( xSourceLen > xChunkLength )
 800a6e0:	683a      	ldr	r2, [r7, #0]
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d908      	bls.n	800a6fa <prvSkipNameField+0x56>
            {
                xSourceLen -= xChunkLength;
 800a6e8:	683a      	ldr	r2, [r7, #0]
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	1ad3      	subs	r3, r2, r3
 800a6ee:	603b      	str	r3, [r7, #0]
                pucByte += xChunkLength;
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	4413      	add	r3, r2
 800a6f6:	607b      	str	r3, [r7, #4]
 800a6f8:	e002      	b.n	800a700 <prvSkipNameField+0x5c>
            }
            else
            {
                pucByte = NULL;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	607b      	str	r3, [r7, #4]
                break;
 800a6fe:	e006      	b.n	800a70e <prvSkipNameField+0x6a>
		while( *pucByte != 0x00 && xSourceLen > 1 )
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d002      	beq.n	800a70e <prvSkipNameField+0x6a>
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d8e4      	bhi.n	800a6d8 <prvSkipNameField+0x34>
            }
		}

        /* Confirm that a fully formed name was found. */
        if( NULL != pucByte )
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d009      	beq.n	800a728 <prvSkipNameField+0x84>
        {
            if( 0x00 == *pucByte )
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d103      	bne.n	800a724 <prvSkipNameField+0x80>
            {
                pucByte++;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	3301      	adds	r3, #1
 800a720:	607b      	str	r3, [r7, #4]
 800a722:	e001      	b.n	800a728 <prvSkipNameField+0x84>
            }
            else
            {
                pucByte = NULL;
 800a724:	2300      	movs	r3, #0
 800a726:	607b      	str	r3, [r7, #4]
            }
        }
	}

	return pucByte;
 800a728:	687b      	ldr	r3, [r7, #4]
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3714      	adds	r7, #20
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr

0800a736 <ulDNSHandlePacket>:
/*-----------------------------------------------------------*/

uint32_t ulDNSHandlePacket( NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800a736:	b580      	push	{r7, lr}
 800a738:	b086      	sub	sp, #24
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
uint8_t *pucUDPPayloadBuffer;
size_t xPlayloadBufferLength;
DNSMessage_t *pxDNSMessageHeader;

	xPlayloadBufferLength = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	69db      	ldr	r3, [r3, #28]
 800a742:	3b2a      	subs	r3, #42	; 0x2a
 800a744:	617b      	str	r3, [r7, #20]
	if ( xPlayloadBufferLength < sizeof( DNSMessage_t ) )
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	2b0b      	cmp	r3, #11
 800a74a:	d801      	bhi.n	800a750 <ulDNSHandlePacket+0x1a>
	{
		return pdFAIL;
 800a74c:	2300      	movs	r3, #0
 800a74e:	e012      	b.n	800a776 <ulDNSHandlePacket+0x40>
	}

	pucUDPPayloadBuffer = pxNetworkBuffer->pucEthernetBuffer + sizeof( UDPPacket_t );
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	699b      	ldr	r3, [r3, #24]
 800a754:	332a      	adds	r3, #42	; 0x2a
 800a756:	613b      	str	r3, [r7, #16]
	pxDNSMessageHeader = ( DNSMessage_t * ) pucUDPPayloadBuffer;
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	60fb      	str	r3, [r7, #12]

    if( pxNetworkBuffer->xDataLength > sizeof( UDPPacket_t ) )
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	69db      	ldr	r3, [r3, #28]
 800a760:	2b2a      	cmp	r3, #42	; 0x2a
 800a762:	d907      	bls.n	800a774 <ulDNSHandlePacket+0x3e>
    {
        prvParseDNSReply( pucUDPPayloadBuffer, 
            xPlayloadBufferLength,
            ( uint32_t )pxDNSMessageHeader->usIdentifier );
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	881b      	ldrh	r3, [r3, #0]
 800a768:	b29b      	uxth	r3, r3
        prvParseDNSReply( pucUDPPayloadBuffer, 
 800a76a:	461a      	mov	r2, r3
 800a76c:	6979      	ldr	r1, [r7, #20]
 800a76e:	6938      	ldr	r0, [r7, #16]
 800a770:	f000 f806 	bl	800a780 <prvParseDNSReply>
    }

	/* The packet was not consumed. */
	return pdFAIL;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	3718      	adds	r7, #24
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
	...

0800a780 <prvParseDNSReply>:

#endif /* ipconfigUSE_NBNS */
/*-----------------------------------------------------------*/

static uint32_t prvParseDNSReply( uint8_t *pucUDPPayloadBuffer, size_t xBufferLength, TickType_t xIdentifier )
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b09a      	sub	sp, #104	; 0x68
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	607a      	str	r2, [r7, #4]
DNSMessage_t *pxDNSMessageHeader;
DNSAnswerRecord_t *pxDNSAnswerRecord;
uint32_t ulIPAddress = 0UL;
 800a78c:	2300      	movs	r3, #0
 800a78e:	627b      	str	r3, [r7, #36]	; 0x24
#if( ipconfigUSE_LLMNR == 1 )
	char *pcRequestedName = NULL;
 800a790:	2300      	movs	r3, #0
 800a792:	663b      	str	r3, [r7, #96]	; 0x60
#endif
uint8_t *pucByte;
size_t xSourceBytesRemaining;
uint16_t x, usDataLength, usQuestions;
#if( ipconfigUSE_LLMNR == 1 )
	uint16_t usType = 0, usClass = 0;
 800a794:	2300      	movs	r3, #0
 800a796:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800a79a:	2300      	movs	r3, #0
 800a79c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
#endif
#if( ipconfigUSE_DNS_CACHE == 1 )
	char pcName[ ipconfigDNS_CACHE_NAME_LENGTH ] = ""; 
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	617b      	str	r3, [r7, #20]
 800a7a4:	f107 0318 	add.w	r3, r7, #24
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	601a      	str	r2, [r3, #0]
 800a7ac:	605a      	str	r2, [r3, #4]
 800a7ae:	609a      	str	r2, [r3, #8]
#endif

    /* Ensure that the buffer is of at least minimal DNS message length. */
    if( xBufferLength < sizeof( DNSMessage_t ) )
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	2b0b      	cmp	r3, #11
 800a7b4:	d801      	bhi.n	800a7ba <prvParseDNSReply+0x3a>
    {
        return dnsPARSE_ERROR;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	e212      	b.n	800abe0 <prvParseDNSReply+0x460>
    }
    else
    {
        xSourceBytesRemaining = xBufferLength;
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Parse the DNS message header. */
	pxDNSMessageHeader = ( DNSMessage_t * ) pucUDPPayloadBuffer;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	667b      	str	r3, [r7, #100]	; 0x64

	if( pxDNSMessageHeader->usIdentifier == ( uint16_t ) xIdentifier )
 800a7c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7c4:	881b      	ldrh	r3, [r3, #0]
 800a7c6:	b29a      	uxth	r2, r3
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	f040 8206 	bne.w	800abde <prvParseDNSReply+0x45e>
	{
		/* Start at the first byte after the header. */
		pucByte = pucUDPPayloadBuffer + sizeof( DNSMessage_t );
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	330c      	adds	r3, #12
 800a7d6:	65fb      	str	r3, [r7, #92]	; 0x5c
        xSourceBytesRemaining -= sizeof( DNSMessage_t );
 800a7d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a7da:	3b0c      	subs	r3, #12
 800a7dc:	65bb      	str	r3, [r7, #88]	; 0x58

		/* Skip any question records. */
		usQuestions = FreeRTOS_ntohs( pxDNSMessageHeader->usQuestions );
 800a7de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7e0:	889b      	ldrh	r3, [r3, #4]
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	021b      	lsls	r3, r3, #8
 800a7e6:	b21a      	sxth	r2, r3
 800a7e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7ea:	889b      	ldrh	r3, [r3, #4]
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	0a1b      	lsrs	r3, r3, #8
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	b21b      	sxth	r3, r3
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	b21b      	sxth	r3, r3
 800a7f8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		for( x = 0; x < usQuestions; x++ )
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a802:	e04e      	b.n	800a8a2 <prvParseDNSReply+0x122>
		{
			#if( ipconfigUSE_LLMNR == 1 )
			{
				if( x == 0 )
 800a804:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d101      	bne.n	800a810 <prvParseDNSReply+0x90>
				{
					pcRequestedName = ( char * ) pucByte;
 800a80c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a80e:	663b      	str	r3, [r7, #96]	; 0x60
				}
			}
			#endif

#if( ipconfigUSE_DNS_CACHE == 1 )
			if( x == 0 )
 800a810:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a814:	2b00      	cmp	r3, #0
 800a816:	d114      	bne.n	800a842 <prvParseDNSReply+0xc2>
			{
				pucByte = prvReadNameField( pucByte, 
 800a818:	f107 0214 	add.w	r2, r7, #20
 800a81c:	2310      	movs	r3, #16
 800a81e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a820:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a822:	f7ff fec2 	bl	800a5aa <prvReadNameField>
 800a826:	65f8      	str	r0, [r7, #92]	; 0x5c
                                            xSourceBytesRemaining,
                                            pcName, 
                                            sizeof( pcName ) );
                
                /* Check for a malformed response. */
                if( NULL == pucByte )
 800a828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d101      	bne.n	800a832 <prvParseDNSReply+0xb2>
                {
                    return dnsPARSE_ERROR;
 800a82e:	2300      	movs	r3, #0
 800a830:	e1d6      	b.n	800abe0 <prvParseDNSReply+0x460>
                }
                else
                {
                    xSourceBytesRemaining = ( pucUDPPayloadBuffer + xBufferLength ) - pucByte;
 800a832:	68fa      	ldr	r2, [r7, #12]
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	4413      	add	r3, r2
 800a838:	461a      	mov	r2, r3
 800a83a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a83c:	1ad3      	subs	r3, r2, r3
 800a83e:	65bb      	str	r3, [r7, #88]	; 0x58
 800a840:	e010      	b.n	800a864 <prvParseDNSReply+0xe4>
			}
			else
#endif /* ipconfigUSE_DNS_CACHE */
			{
				/* Skip the variable length pcName field. */
				pucByte = prvSkipNameField( pucByte, 
 800a842:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a844:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a846:	f7ff ff2d 	bl	800a6a4 <prvSkipNameField>
 800a84a:	65f8      	str	r0, [r7, #92]	; 0x5c
                                            xSourceBytesRemaining );
            
                /* Check for a malformed response. */
                if( NULL == pucByte )
 800a84c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d101      	bne.n	800a856 <prvParseDNSReply+0xd6>
                {
                    return dnsPARSE_ERROR;
 800a852:	2300      	movs	r3, #0
 800a854:	e1c4      	b.n	800abe0 <prvParseDNSReply+0x460>
                }
                else
                {
                    xSourceBytesRemaining = pucUDPPayloadBuffer + xBufferLength - pucByte;
 800a856:	68fa      	ldr	r2, [r7, #12]
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	4413      	add	r3, r2
 800a85c:	461a      	mov	r2, r3
 800a85e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a860:	1ad3      	subs	r3, r2, r3
 800a862:	65bb      	str	r3, [r7, #88]	; 0x58
                }
            }

            /* Check the remaining buffer size. */
            if( xSourceBytesRemaining >= sizeof( uint32_t ) )
 800a864:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a866:	2b03      	cmp	r3, #3
 800a868:	d914      	bls.n	800a894 <prvParseDNSReply+0x114>
            {
                #if( ipconfigUSE_LLMNR == 1 )
                {
                    /* usChar2u16 returns value in host endianness */
                    usType = usChar2u16( pucByte );
 800a86a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a86c:	f7ff fe88 	bl	800a580 <usChar2u16>
 800a870:	4603      	mov	r3, r0
 800a872:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                    usClass = usChar2u16( pucByte + 2 );
 800a876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a878:	3302      	adds	r3, #2
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7ff fe80 	bl	800a580 <usChar2u16>
 800a880:	4603      	mov	r3, r0
 800a882:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                }
                #endif /* ipconfigUSE_LLMNR */

                /* Skip the type and class fields. */
                pucByte += sizeof( uint32_t );
 800a886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a888:	3304      	adds	r3, #4
 800a88a:	65fb      	str	r3, [r7, #92]	; 0x5c
                xSourceBytesRemaining -= sizeof( uint32_t );
 800a88c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a88e:	3b04      	subs	r3, #4
 800a890:	65bb      	str	r3, [r7, #88]	; 0x58
 800a892:	e001      	b.n	800a898 <prvParseDNSReply+0x118>
            }
            else
            {
                /* Malformed response. */
                return dnsPARSE_ERROR;
 800a894:	2300      	movs	r3, #0
 800a896:	e1a3      	b.n	800abe0 <prvParseDNSReply+0x460>
		for( x = 0; x < usQuestions; x++ )
 800a898:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a89c:	3301      	adds	r3, #1
 800a89e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a8a2:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800a8a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d3aa      	bcc.n	800a804 <prvParseDNSReply+0x84>
            }
		}

		/* Search through the answer records. */
		pxDNSMessageHeader->usAnswers = FreeRTOS_ntohs( pxDNSMessageHeader->usAnswers );
 800a8ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8b0:	88db      	ldrh	r3, [r3, #6]
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	021b      	lsls	r3, r3, #8
 800a8b6:	b21a      	sxth	r2, r3
 800a8b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8ba:	88db      	ldrh	r3, [r3, #6]
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	0a1b      	lsrs	r3, r3, #8
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	b21b      	sxth	r3, r3
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	b21b      	sxth	r3, r3
 800a8c8:	b29a      	uxth	r2, r3
 800a8ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8cc:	80da      	strh	r2, [r3, #6]

		if( ( pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 800a8ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8d0:	885b      	ldrh	r3, [r3, #2]
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	f403 6378 	and.w	r3, r3, #3968	; 0xf80
 800a8d8:	2b80      	cmp	r3, #128	; 0x80
 800a8da:	d177      	bne.n	800a9cc <prvParseDNSReply+0x24c>
		{
			for( x = 0; x < pxDNSMessageHeader->usAnswers; x++ )
 800a8dc:	2300      	movs	r3, #0
 800a8de:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a8e2:	e06b      	b.n	800a9bc <prvParseDNSReply+0x23c>
			{
				pucByte = prvSkipNameField( pucByte,
 800a8e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a8e6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a8e8:	f7ff fedc 	bl	800a6a4 <prvSkipNameField>
 800a8ec:	65f8      	str	r0, [r7, #92]	; 0x5c
                                            xSourceBytesRemaining );

                /* Check for a malformed response. */
                if( NULL == pucByte )
 800a8ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d101      	bne.n	800a8f8 <prvParseDNSReply+0x178>
                {
                    return dnsPARSE_ERROR;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	e173      	b.n	800abe0 <prvParseDNSReply+0x460>
                }
                else
                {
                    xSourceBytesRemaining = pucUDPPayloadBuffer + xBufferLength - pucByte;
 800a8f8:	68fa      	ldr	r2, [r7, #12]
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	461a      	mov	r2, r3
 800a900:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a902:	1ad3      	subs	r3, r2, r3
 800a904:	65bb      	str	r3, [r7, #88]	; 0x58
                }

				/* Is there enough data for an IPv4 A record answer and, if so, 
                is this an A record? */
				if( xSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) + sizeof( uint32_t ) && 
 800a906:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a908:	2b0d      	cmp	r3, #13
 800a90a:	d92a      	bls.n	800a962 <prvParseDNSReply+0x1e2>
                    usChar2u16( pucByte ) == dnsTYPE_A_HOST )
 800a90c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a90e:	f7ff fe37 	bl	800a580 <usChar2u16>
 800a912:	4603      	mov	r3, r0
				if( xSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) + sizeof( uint32_t ) && 
 800a914:	2b01      	cmp	r3, #1
 800a916:	d124      	bne.n	800a962 <prvParseDNSReply+0x1e2>
				{
					/* This is the required record type and is of sufficient size. */
                    pxDNSAnswerRecord = ( DNSAnswerRecord_t * )pucByte;
 800a918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a91a:	643b      	str	r3, [r7, #64]	; 0x40

					/* Sanity check the data length of an IPv4 answer. */
					if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) == sizeof( uint32_t ) )
 800a91c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a91e:	891b      	ldrh	r3, [r3, #8]
 800a920:	b29b      	uxth	r3, r3
 800a922:	021b      	lsls	r3, r3, #8
 800a924:	b21a      	sxth	r2, r3
 800a926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a928:	891b      	ldrh	r3, [r3, #8]
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	0a1b      	lsrs	r3, r3, #8
 800a92e:	b29b      	uxth	r3, r3
 800a930:	b21b      	sxth	r3, r3
 800a932:	4313      	orrs	r3, r2
 800a934:	b21b      	sxth	r3, r3
 800a936:	2b04      	cmp	r3, #4
 800a938:	d10c      	bne.n	800a954 <prvParseDNSReply+0x1d4>
					{
						/* Copy the IP address out of the record. */
						memcpy( &ulIPAddress, 
                                pucByte + sizeof( DNSAnswerRecord_t ),
 800a93a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a93c:	330a      	adds	r3, #10
						memcpy( &ulIPAddress, 
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	627b      	str	r3, [r7, #36]	; 0x24
                                sizeof( uint32_t ) );

						#if( ipconfigUSE_DNS_CACHE == 1 )
						{
							prvProcessDNSCache( pcName, &ulIPAddress, pxDNSAnswerRecord->ulTTL, pdFALSE );
 800a942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a944:	685a      	ldr	r2, [r3, #4]
 800a946:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800a94a:	f107 0014 	add.w	r0, r7, #20
 800a94e:	2300      	movs	r3, #0
 800a950:	f000 f9e0 	bl	800ad14 <prvProcessDNSCache>
							vDNSDoCallback( ( TickType_t ) pxDNSMessageHeader->usIdentifier, pcName, ulIPAddress );
						}
						#endif	/* ipconfigDNS_USE_CALLBACKS != 0 */
					}

                    pucByte += sizeof( DNSAnswerRecord_t ) + sizeof( uint32_t );
 800a954:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a956:	330e      	adds	r3, #14
 800a958:	65fb      	str	r3, [r7, #92]	; 0x5c
                    xSourceBytesRemaining -= ( sizeof( DNSAnswerRecord_t ) + sizeof( uint32_t ) );
 800a95a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a95c:	3b0e      	subs	r3, #14
 800a95e:	65bb      	str	r3, [r7, #88]	; 0x58
					break;
 800a960:	e13d      	b.n	800abde <prvParseDNSReply+0x45e>
				}
				else if( xSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) )
 800a962:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a964:	2b09      	cmp	r3, #9
 800a966:	d924      	bls.n	800a9b2 <prvParseDNSReply+0x232>
				{
                    /* It's not an A record, so skip it. Get the header location 
                    and then jump over the header. */
                    pxDNSAnswerRecord = ( DNSAnswerRecord_t * )pucByte;
 800a968:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a96a:	643b      	str	r3, [r7, #64]	; 0x40
                    pucByte += sizeof( DNSAnswerRecord_t );
 800a96c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a96e:	330a      	adds	r3, #10
 800a970:	65fb      	str	r3, [r7, #92]	; 0x5c
                    xSourceBytesRemaining -= sizeof( DNSAnswerRecord_t );
 800a972:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a974:	3b0a      	subs	r3, #10
 800a976:	65bb      	str	r3, [r7, #88]	; 0x58
                    
					/* Determine the length of the answer data from the header. */
					usDataLength = FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength );
 800a978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a97a:	891b      	ldrh	r3, [r3, #8]
 800a97c:	b29b      	uxth	r3, r3
 800a97e:	021b      	lsls	r3, r3, #8
 800a980:	b21a      	sxth	r2, r3
 800a982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a984:	891b      	ldrh	r3, [r3, #8]
 800a986:	b29b      	uxth	r3, r3
 800a988:	0a1b      	lsrs	r3, r3, #8
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	b21b      	sxth	r3, r3
 800a98e:	4313      	orrs	r3, r2
 800a990:	b21b      	sxth	r3, r3
 800a992:	87fb      	strh	r3, [r7, #62]	; 0x3e

					/* Jump over the answer. */
                    if( xSourceBytesRemaining >= usDataLength )
 800a994:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800a996:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a998:	429a      	cmp	r2, r3
 800a99a:	d808      	bhi.n	800a9ae <prvParseDNSReply+0x22e>
                    {
                        pucByte += usDataLength;
 800a99c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a99e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a9a0:	4413      	add	r3, r2
 800a9a2:	65fb      	str	r3, [r7, #92]	; 0x5c
                        xSourceBytesRemaining -= usDataLength;
 800a9a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a9a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a9a8:	1ad3      	subs	r3, r2, r3
 800a9aa:	65bb      	str	r3, [r7, #88]	; 0x58
 800a9ac:	e001      	b.n	800a9b2 <prvParseDNSReply+0x232>
                    }
                    else
                    {
                        /* Malformed response. */
                        return dnsPARSE_ERROR;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	e116      	b.n	800abe0 <prvParseDNSReply+0x460>
			for( x = 0; x < pxDNSMessageHeader->usAnswers; x++ )
 800a9b2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a9bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9be:	88db      	ldrh	r3, [r3, #6]
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d38c      	bcc.n	800a8e4 <prvParseDNSReply+0x164>
 800a9ca:	e108      	b.n	800abde <prvParseDNSReply+0x45e>
                    }
				}
			}
		}
#if( ipconfigUSE_LLMNR == 1 )
		else if( usQuestions && ( usType == dnsTYPE_A_HOST ) && ( usClass == dnsCLASS_IN ) )
 800a9cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	f000 8104 	beq.w	800abde <prvParseDNSReply+0x45e>
 800a9d6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	f040 80ff 	bne.w	800abde <prvParseDNSReply+0x45e>
 800a9e0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	f040 80fa 	bne.w	800abde <prvParseDNSReply+0x45e>
		{
			/* If this is not a reply to our DNS request, it might an LLMNR
			request. */
			if( xApplicationDNSQueryHook ( ( pcRequestedName + 1 ) ) )
 800a9ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9ec:	3301      	adds	r3, #1
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f006 f930 	bl	8010c54 <xApplicationDNSQueryHook>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	f000 80f1 	beq.w	800abde <prvParseDNSReply+0x45e>
			{
			int16_t usLength;
			NetworkBufferDescriptor_t *pxNewBuffer = NULL;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	64fb      	str	r3, [r7, #76]	; 0x4c
			NetworkBufferDescriptor_t *pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 800aa00:	68f8      	ldr	r0, [r7, #12]
 800aa02:	f000 fc92 	bl	800b32a <pxUDPPayloadBuffer_to_NetworkBuffer>
 800aa06:	64b8      	str	r0, [r7, #72]	; 0x48
			LLMNRAnswer_t *pxAnswer;

				if( ( xBufferAllocFixedSize == pdFALSE ) && ( pxNetworkBuffer != NULL ) )
 800aa08:	4b77      	ldr	r3, [pc, #476]	; (800abe8 <prvParseDNSReply+0x468>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d12d      	bne.n	800aa6c <prvParseDNSReply+0x2ec>
 800aa10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d02a      	beq.n	800aa6c <prvParseDNSReply+0x2ec>
				{
				BaseType_t xDataLength = xBufferLength + sizeof( UDPHeader_t ) +
					sizeof( EthernetHeader_t ) + sizeof( IPHeader_t );
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	332a      	adds	r3, #42	; 0x2a
				BaseType_t xDataLength = xBufferLength + sizeof( UDPHeader_t ) +
 800aa1a:	63bb      	str	r3, [r7, #56]	; 0x38

					/* The field xDataLength was set to the length of the UDP payload.
					The answer (reply) will be longer than the request, so the packet
					must be duplicaed into a bigger buffer */
					pxNetworkBuffer->xDataLength = xDataLength;
 800aa1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa20:	61da      	str	r2, [r3, #28]
					pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, xDataLength + 16 );
 800aa22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa24:	3310      	adds	r3, #16
 800aa26:	4619      	mov	r1, r3
 800aa28:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800aa2a:	f000 fc53 	bl	800b2d4 <pxDuplicateNetworkBufferWithDescriptor>
 800aa2e:	64f8      	str	r0, [r7, #76]	; 0x4c
					if( pxNewBuffer != NULL )
 800aa30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d018      	beq.n	800aa68 <prvParseDNSReply+0x2e8>
					{
					BaseType_t xOffset1, xOffset2;

						xOffset1 = ( BaseType_t ) ( pucByte - pucUDPPayloadBuffer );
 800aa36:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	1ad3      	subs	r3, r2, r3
 800aa3c:	637b      	str	r3, [r7, #52]	; 0x34
						xOffset2 = ( BaseType_t ) ( ( ( uint8_t * ) pcRequestedName ) - pucUDPPayloadBuffer );
 800aa3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	1ad3      	subs	r3, r2, r3
 800aa44:	633b      	str	r3, [r7, #48]	; 0x30

						pxNetworkBuffer = pxNewBuffer;
 800aa46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa48:	64bb      	str	r3, [r7, #72]	; 0x48
						pucUDPPayloadBuffer = pxNetworkBuffer->pucEthernetBuffer + ipUDP_PAYLOAD_OFFSET_IPv4;
 800aa4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa4c:	699b      	ldr	r3, [r3, #24]
 800aa4e:	332a      	adds	r3, #42	; 0x2a
 800aa50:	60fb      	str	r3, [r7, #12]

						pucByte = pucUDPPayloadBuffer + xOffset1;
 800aa52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa54:	68fa      	ldr	r2, [r7, #12]
 800aa56:	4413      	add	r3, r2
 800aa58:	65fb      	str	r3, [r7, #92]	; 0x5c
						pcRequestedName = ( char * ) ( pucUDPPayloadBuffer + xOffset2 );
 800aa5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5c:	68fa      	ldr	r2, [r7, #12]
 800aa5e:	4413      	add	r3, r2
 800aa60:	663b      	str	r3, [r7, #96]	; 0x60
						pxDNSMessageHeader = ( DNSMessage_t * ) pucUDPPayloadBuffer;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	667b      	str	r3, [r7, #100]	; 0x64
 800aa66:	e001      	b.n	800aa6c <prvParseDNSReply+0x2ec>

					}
					else
					{
						/* Just to indicate that the message may not be answered. */
						pxNetworkBuffer = NULL;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	64bb      	str	r3, [r7, #72]	; 0x48
					}
				}
				if( pxNetworkBuffer != NULL )
 800aa6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	f000 80b5 	beq.w	800abde <prvParseDNSReply+0x45e>
				{
					pxAnswer = (LLMNRAnswer_t *)pucByte;
 800aa74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa76:	62fb      	str	r3, [r7, #44]	; 0x2c

					/* We leave 'usIdentifier' and 'usQuestions' untouched */
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_REPONSE );	/* Set the response flag */
 800aa78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa7a:	3302      	adds	r3, #2
 800aa7c:	2280      	movs	r2, #128	; 0x80
 800aa7e:	701a      	strb	r2, [r3, #0]
 800aa80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa82:	3303      	adds	r3, #3
 800aa84:	2200      	movs	r2, #0
 800aa86:	701a      	strb	r2, [r3, #0]
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );	/* Provide a single answer */
 800aa88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa8a:	3306      	adds	r3, #6
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	701a      	strb	r2, [r3, #0]
 800aa90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa92:	3307      	adds	r3, #7
 800aa94:	2201      	movs	r2, #1
 800aa96:	701a      	strb	r2, [r3, #0]
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAuthorityRRs, 0 );	/* No authority */
 800aa98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa9a:	3308      	adds	r3, #8
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	701a      	strb	r2, [r3, #0]
 800aaa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aaa2:	3309      	adds	r3, #9
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	701a      	strb	r2, [r3, #0]
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );	/* No additional info */
 800aaa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aaaa:	330a      	adds	r3, #10
 800aaac:	2200      	movs	r2, #0
 800aaae:	701a      	strb	r2, [r3, #0]
 800aab0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aab2:	330b      	adds	r3, #11
 800aab4:	2200      	movs	r2, #0
 800aab6:	701a      	strb	r2, [r3, #0]

					pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 800aab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaba:	22c0      	movs	r2, #192	; 0xc0
 800aabc:	701a      	strb	r2, [r3, #0]
					pxAnswer->ucNameOffset = ( uint8_t )( pcRequestedName - ( char * ) pucUDPPayloadBuffer );
 800aabe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	1ad3      	subs	r3, r2, r3
 800aac4:	b2da      	uxtb	r2, r3
 800aac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac8:	705a      	strb	r2, [r3, #1]

					vSetField16( pxAnswer, LLMNRAnswer_t, usType, dnsTYPE_A_HOST );	/* Type A: host */
 800aaca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aacc:	3302      	adds	r3, #2
 800aace:	2200      	movs	r2, #0
 800aad0:	701a      	strb	r2, [r3, #0]
 800aad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad4:	3303      	adds	r3, #3
 800aad6:	2201      	movs	r2, #1
 800aad8:	701a      	strb	r2, [r3, #0]
					vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN );	/* 1: Class IN */
 800aada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aadc:	3304      	adds	r3, #4
 800aade:	2200      	movs	r2, #0
 800aae0:	701a      	strb	r2, [r3, #0]
 800aae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae4:	3305      	adds	r3, #5
 800aae6:	2201      	movs	r2, #1
 800aae8:	701a      	strb	r2, [r3, #0]
					vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 800aaea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaec:	3306      	adds	r3, #6
 800aaee:	2200      	movs	r2, #0
 800aaf0:	701a      	strb	r2, [r3, #0]
 800aaf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf4:	3307      	adds	r3, #7
 800aaf6:	2204      	movs	r2, #4
 800aaf8:	701a      	strb	r2, [r3, #0]
 800aafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafc:	3308      	adds	r3, #8
 800aafe:	2293      	movs	r2, #147	; 0x93
 800ab00:	701a      	strb	r2, [r3, #0]
 800ab02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab04:	3309      	adds	r3, #9
 800ab06:	22e0      	movs	r2, #224	; 0xe0
 800ab08:	701a      	strb	r2, [r3, #0]
					vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, 4 );
 800ab0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0c:	330a      	adds	r3, #10
 800ab0e:	2200      	movs	r2, #0
 800ab10:	701a      	strb	r2, [r3, #0]
 800ab12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab14:	330b      	adds	r3, #11
 800ab16:	2204      	movs	r2, #4
 800ab18:	701a      	strb	r2, [r3, #0]
					vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( *ipLOCAL_IP_ADDRESS_POINTER ) );
 800ab1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab1c:	330c      	adds	r3, #12
 800ab1e:	4a33      	ldr	r2, [pc, #204]	; (800abec <prvParseDNSReply+0x46c>)
 800ab20:	6952      	ldr	r2, [r2, #20]
 800ab22:	0611      	lsls	r1, r2, #24
 800ab24:	4a31      	ldr	r2, [pc, #196]	; (800abec <prvParseDNSReply+0x46c>)
 800ab26:	6952      	ldr	r2, [r2, #20]
 800ab28:	0212      	lsls	r2, r2, #8
 800ab2a:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800ab2e:	4311      	orrs	r1, r2
 800ab30:	4a2e      	ldr	r2, [pc, #184]	; (800abec <prvParseDNSReply+0x46c>)
 800ab32:	6952      	ldr	r2, [r2, #20]
 800ab34:	0a12      	lsrs	r2, r2, #8
 800ab36:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800ab3a:	4311      	orrs	r1, r2
 800ab3c:	4a2b      	ldr	r2, [pc, #172]	; (800abec <prvParseDNSReply+0x46c>)
 800ab3e:	6952      	ldr	r2, [r2, #20]
 800ab40:	0e12      	lsrs	r2, r2, #24
 800ab42:	430a      	orrs	r2, r1
 800ab44:	0e12      	lsrs	r2, r2, #24
 800ab46:	b2d2      	uxtb	r2, r2
 800ab48:	701a      	strb	r2, [r3, #0]
 800ab4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab4c:	330d      	adds	r3, #13
 800ab4e:	4a27      	ldr	r2, [pc, #156]	; (800abec <prvParseDNSReply+0x46c>)
 800ab50:	6952      	ldr	r2, [r2, #20]
 800ab52:	0611      	lsls	r1, r2, #24
 800ab54:	4a25      	ldr	r2, [pc, #148]	; (800abec <prvParseDNSReply+0x46c>)
 800ab56:	6952      	ldr	r2, [r2, #20]
 800ab58:	0212      	lsls	r2, r2, #8
 800ab5a:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800ab5e:	4311      	orrs	r1, r2
 800ab60:	4a22      	ldr	r2, [pc, #136]	; (800abec <prvParseDNSReply+0x46c>)
 800ab62:	6952      	ldr	r2, [r2, #20]
 800ab64:	0a12      	lsrs	r2, r2, #8
 800ab66:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800ab6a:	4311      	orrs	r1, r2
 800ab6c:	4a1f      	ldr	r2, [pc, #124]	; (800abec <prvParseDNSReply+0x46c>)
 800ab6e:	6952      	ldr	r2, [r2, #20]
 800ab70:	0e12      	lsrs	r2, r2, #24
 800ab72:	430a      	orrs	r2, r1
 800ab74:	0c12      	lsrs	r2, r2, #16
 800ab76:	b2d2      	uxtb	r2, r2
 800ab78:	701a      	strb	r2, [r3, #0]
 800ab7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab7c:	330e      	adds	r3, #14
 800ab7e:	4a1b      	ldr	r2, [pc, #108]	; (800abec <prvParseDNSReply+0x46c>)
 800ab80:	6952      	ldr	r2, [r2, #20]
 800ab82:	0611      	lsls	r1, r2, #24
 800ab84:	4a19      	ldr	r2, [pc, #100]	; (800abec <prvParseDNSReply+0x46c>)
 800ab86:	6952      	ldr	r2, [r2, #20]
 800ab88:	0212      	lsls	r2, r2, #8
 800ab8a:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800ab8e:	4311      	orrs	r1, r2
 800ab90:	4a16      	ldr	r2, [pc, #88]	; (800abec <prvParseDNSReply+0x46c>)
 800ab92:	6952      	ldr	r2, [r2, #20]
 800ab94:	0a12      	lsrs	r2, r2, #8
 800ab96:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800ab9a:	4311      	orrs	r1, r2
 800ab9c:	4a13      	ldr	r2, [pc, #76]	; (800abec <prvParseDNSReply+0x46c>)
 800ab9e:	6952      	ldr	r2, [r2, #20]
 800aba0:	0e12      	lsrs	r2, r2, #24
 800aba2:	430a      	orrs	r2, r1
 800aba4:	0a12      	lsrs	r2, r2, #8
 800aba6:	b2d2      	uxtb	r2, r2
 800aba8:	701a      	strb	r2, [r3, #0]
 800abaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abac:	330f      	adds	r3, #15
 800abae:	4a0f      	ldr	r2, [pc, #60]	; (800abec <prvParseDNSReply+0x46c>)
 800abb0:	6952      	ldr	r2, [r2, #20]
 800abb2:	0e12      	lsrs	r2, r2, #24
 800abb4:	b2d2      	uxtb	r2, r2
 800abb6:	701a      	strb	r2, [r3, #0]

					usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( pucByte - pucUDPPayloadBuffer ) );
 800abb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	1ad3      	subs	r3, r2, r3
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	3310      	adds	r3, #16
 800abc2:	b29b      	uxth	r3, r3
 800abc4:	857b      	strh	r3, [r7, #42]	; 0x2a

					prvReplyDNSMessage( pxNetworkBuffer, usLength );
 800abc6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800abca:	4619      	mov	r1, r3
 800abcc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800abce:	f000 f80f 	bl	800abf0 <prvReplyDNSMessage>

					if( pxNewBuffer != NULL )
 800abd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d002      	beq.n	800abde <prvParseDNSReply+0x45e>
					{
						vReleaseNetworkBufferAndDescriptor( pxNewBuffer );
 800abd8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800abda:	f005 fefb 	bl	80109d4 <vReleaseNetworkBufferAndDescriptor>
			}
		}
#endif /* ipconfigUSE_LLMNR == 1 */
	}

	return ulIPAddress;
 800abde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3768      	adds	r7, #104	; 0x68
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	080114fc 	.word	0x080114fc
 800abec:	200001b0 	.word	0x200001b0

0800abf0 <prvReplyDNSMessage>:
/*-----------------------------------------------------------*/

#if( ( ipconfigUSE_NBNS == 1 ) || ( ipconfigUSE_LLMNR == 1 ) )

	static void prvReplyDNSMessage( NetworkBufferDescriptor_t *pxNetworkBuffer, BaseType_t lNetLength )
	{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b086      	sub	sp, #24
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
	UDPPacket_t *pxUDPPacket;
	IPHeader_t *pxIPHeader;
	UDPHeader_t *pxUDPHeader;

		pxUDPPacket = (UDPPacket_t *) pxNetworkBuffer->pucEthernetBuffer;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	699b      	ldr	r3, [r3, #24]
 800abfe:	617b      	str	r3, [r7, #20]
		pxIPHeader = &pxUDPPacket->xIPHeader;
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	330e      	adds	r3, #14
 800ac04:	613b      	str	r3, [r7, #16]
		pxUDPHeader = &pxUDPPacket->xUDPHeader;
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	3322      	adds	r3, #34	; 0x22
 800ac0a:	60fb      	str	r3, [r7, #12]
		/* HT: started using defines like 'ipSIZE_OF_xxx' */
		pxIPHeader->usLength               = FreeRTOS_htons( lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	331c      	adds	r3, #28
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	021b      	lsls	r3, r3, #8
 800ac16:	b29a      	uxth	r2, r3
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	331c      	adds	r3, #28
 800ac1c:	0a1b      	lsrs	r3, r3, #8
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	4313      	orrs	r3, r2
 800ac22:	b29a      	uxth	r2, r3
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	805a      	strh	r2, [r3, #2]
		/* HT:endian: should not be translated, copying from packet to packet */
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	68da      	ldr	r2, [r3, #12]
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	611a      	str	r2, [r3, #16]
		pxIPHeader->ulSourceIPAddress      = *ipLOCAL_IP_ADDRESS_POINTER;
 800ac30:	4b36      	ldr	r3, [pc, #216]	; (800ad0c <prvReplyDNSMessage+0x11c>)
 800ac32:	695a      	ldr	r2, [r3, #20]
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	60da      	str	r2, [r3, #12]
		pxIPHeader->ucTimeToLive           = ipconfigUDP_TIME_TO_LIVE;
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	2280      	movs	r2, #128	; 0x80
 800ac3c:	721a      	strb	r2, [r3, #8]
		pxIPHeader->usIdentification       = FreeRTOS_htons( usPacketIdentifier );
 800ac3e:	4b34      	ldr	r3, [pc, #208]	; (800ad10 <prvReplyDNSMessage+0x120>)
 800ac40:	881b      	ldrh	r3, [r3, #0]
 800ac42:	021b      	lsls	r3, r3, #8
 800ac44:	b21a      	sxth	r2, r3
 800ac46:	4b32      	ldr	r3, [pc, #200]	; (800ad10 <prvReplyDNSMessage+0x120>)
 800ac48:	881b      	ldrh	r3, [r3, #0]
 800ac4a:	0a1b      	lsrs	r3, r3, #8
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	b21b      	sxth	r3, r3
 800ac50:	4313      	orrs	r3, r2
 800ac52:	b21b      	sxth	r3, r3
 800ac54:	b29a      	uxth	r2, r3
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	809a      	strh	r2, [r3, #4]
		usPacketIdentifier++;
 800ac5a:	4b2d      	ldr	r3, [pc, #180]	; (800ad10 <prvReplyDNSMessage+0x120>)
 800ac5c:	881b      	ldrh	r3, [r3, #0]
 800ac5e:	3301      	adds	r3, #1
 800ac60:	b29a      	uxth	r2, r3
 800ac62:	4b2b      	ldr	r3, [pc, #172]	; (800ad10 <prvReplyDNSMessage+0x120>)
 800ac64:	801a      	strh	r2, [r3, #0]
		pxUDPHeader->usLength              = FreeRTOS_htons( lNetLength + ipSIZE_OF_UDP_HEADER );
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	3308      	adds	r3, #8
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	021b      	lsls	r3, r3, #8
 800ac70:	b29a      	uxth	r2, r3
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	3308      	adds	r3, #8
 800ac76:	0a1b      	lsrs	r3, r3, #8
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	b29a      	uxth	r2, r3
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	809a      	strh	r2, [r3, #4]
		vFlip_16( pxUDPPacket->xUDPHeader.usSourcePort, pxUDPPacket->xUDPHeader.usDestinationPort );
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800ac88:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800ac8c:	021b      	lsls	r3, r3, #8
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	817b      	strh	r3, [r7, #10]
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ac96:	b29a      	uxth	r2, r3
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	845a      	strh	r2, [r3, #34]	; 0x22
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	897a      	ldrh	r2, [r7, #10]
 800aca0:	849a      	strh	r2, [r3, #36]	; 0x24

		#if( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
		{
			/* calculate the IP header checksum */
			pxIPHeader->usHeaderChecksum       = 0x00;
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	2200      	movs	r2, #0
 800aca6:	729a      	strb	r2, [r3, #10]
 800aca8:	2200      	movs	r2, #0
 800acaa:	72da      	strb	r2, [r3, #11]
			pxIPHeader->usHeaderChecksum       = usGenerateChecksum( 0UL, ( uint8_t * ) &( pxIPHeader->ucVersionHeaderLength ), ipSIZE_OF_IPv4_HEADER );
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	2214      	movs	r2, #20
 800acb0:	4619      	mov	r1, r3
 800acb2:	2000      	movs	r0, #0
 800acb4:	f001 f828 	bl	800bd08 <usGenerateChecksum>
 800acb8:	4603      	mov	r3, r0
 800acba:	461a      	mov	r2, r3
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	815a      	strh	r2, [r3, #10]
			pxIPHeader->usHeaderChecksum       = ~FreeRTOS_htons( pxIPHeader->usHeaderChecksum );
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	895b      	ldrh	r3, [r3, #10]
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	021b      	lsls	r3, r3, #8
 800acc8:	b21a      	sxth	r2, r3
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	895b      	ldrh	r3, [r3, #10]
 800acce:	b29b      	uxth	r3, r3
 800acd0:	0a1b      	lsrs	r3, r3, #8
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	b21b      	sxth	r3, r3
 800acd6:	4313      	orrs	r3, r2
 800acd8:	b21b      	sxth	r3, r3
 800acda:	b29b      	uxth	r3, r3
 800acdc:	43db      	mvns	r3, r3
 800acde:	b29a      	uxth	r2, r3
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	815a      	strh	r2, [r3, #10]

			/* calculate the UDP checksum for outgoing package */
			usGenerateProtocolChecksum( ( uint8_t* ) pxUDPPacket, lNetLength, pdTRUE );
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	2201      	movs	r2, #1
 800ace8:	4619      	mov	r1, r3
 800acea:	6978      	ldr	r0, [r7, #20]
 800acec:	f000 ff24 	bl	800bb38 <usGenerateProtocolChecksum>
		}
		#endif

		/* Important: tell NIC driver how many bytes must be sent */
		pxNetworkBuffer->xDataLength = ( size_t ) ( lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER );
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	61da      	str	r2, [r3, #28]

		/* This function will fill in the eth addresses and send the packet */
		vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 800acfa:	2100      	movs	r1, #0
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f001 f8d7 	bl	800beb0 <vReturnEthernetFrame>
	}
 800ad02:	bf00      	nop
 800ad04:	3718      	adds	r7, #24
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	200001b0 	.word	0x200001b0
 800ad10:	20004e5c 	.word	0x20004e5c

0800ad14 <prvProcessDNSCache>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_DNS_CACHE == 1 )

	static void prvProcessDNSCache( const char *pcName, uint32_t *pulIP, uint32_t ulTTL, BaseType_t xLookUp )
	{
 800ad14:	b590      	push	{r4, r7, lr}
 800ad16:	b089      	sub	sp, #36	; 0x24
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	607a      	str	r2, [r7, #4]
 800ad20:	603b      	str	r3, [r7, #0]
	BaseType_t x;
	BaseType_t xFound = pdFALSE;
 800ad22:	2300      	movs	r3, #0
 800ad24:	61bb      	str	r3, [r7, #24]
    uint32_t ulCurrentTimeSeconds = 
        xTaskGetTickCount( ) / portTICK_PERIOD_MS / 1000;
 800ad26:	f7fe fb15 	bl	8009354 <xTaskGetTickCount>
 800ad2a:	4602      	mov	r2, r0
    uint32_t ulCurrentTimeSeconds = 
 800ad2c:	4b78      	ldr	r3, [pc, #480]	; (800af10 <prvProcessDNSCache+0x1fc>)
 800ad2e:	fba3 2302 	umull	r2, r3, r3, r2
 800ad32:	099b      	lsrs	r3, r3, #6
 800ad34:	617b      	str	r3, [r7, #20]
	static BaseType_t xFreeEntry = 0;

		/* For each entry in the DNS cache table. */
		for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 800ad36:	2300      	movs	r3, #0
 800ad38:	61fb      	str	r3, [r7, #28]
 800ad3a:	e093      	b.n	800ae64 <prvProcessDNSCache+0x150>
		{
			if( xDNSCache[ x ].pcName[ 0 ] == 0 )
 800ad3c:	4975      	ldr	r1, [pc, #468]	; (800af14 <prvProcessDNSCache+0x200>)
 800ad3e:	69fa      	ldr	r2, [r7, #28]
 800ad40:	4613      	mov	r3, r2
 800ad42:	00db      	lsls	r3, r3, #3
 800ad44:	1a9b      	subs	r3, r3, r2
 800ad46:	009b      	lsls	r3, r3, #2
 800ad48:	440b      	add	r3, r1
 800ad4a:	3304      	adds	r3, #4
 800ad4c:	781b      	ldrb	r3, [r3, #0]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	f000 808d 	beq.w	800ae6e <prvProcessDNSCache+0x15a>
			{
				break;
			}

			if( 0 == strcmp( xDNSCache[ x ].pcName, pcName ) )
 800ad54:	69fa      	ldr	r2, [r7, #28]
 800ad56:	4613      	mov	r3, r2
 800ad58:	00db      	lsls	r3, r3, #3
 800ad5a:	1a9b      	subs	r3, r3, r2
 800ad5c:	009b      	lsls	r3, r3, #2
 800ad5e:	4a6d      	ldr	r2, [pc, #436]	; (800af14 <prvProcessDNSCache+0x200>)
 800ad60:	4413      	add	r3, r2
 800ad62:	3304      	adds	r3, #4
 800ad64:	68f9      	ldr	r1, [r7, #12]
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7f5 fa3a 	bl	80001e0 <strcmp>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d175      	bne.n	800ae5e <prvProcessDNSCache+0x14a>
			{
				/* Is this function called for a lookup or to add/update an IP address? */
				if( xLookUp != pdFALSE )
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d051      	beq.n	800ae1c <prvProcessDNSCache+0x108>
				{
                    /* Confirm that the record is still fresh. */
                    if( ulCurrentTimeSeconds < 
                            xDNSCache[ x ].ulTimeWhenAddedInSeconds + 
 800ad78:	4966      	ldr	r1, [pc, #408]	; (800af14 <prvProcessDNSCache+0x200>)
 800ad7a:	69fa      	ldr	r2, [r7, #28]
 800ad7c:	4613      	mov	r3, r2
 800ad7e:	00db      	lsls	r3, r3, #3
 800ad80:	1a9b      	subs	r3, r3, r2
 800ad82:	009b      	lsls	r3, r3, #2
 800ad84:	440b      	add	r3, r1
 800ad86:	3318      	adds	r3, #24
 800ad88:	6819      	ldr	r1, [r3, #0]
                            FreeRTOS_ntohl( xDNSCache[ x ].ulTTL ) )
 800ad8a:	4862      	ldr	r0, [pc, #392]	; (800af14 <prvProcessDNSCache+0x200>)
 800ad8c:	69fa      	ldr	r2, [r7, #28]
 800ad8e:	4613      	mov	r3, r2
 800ad90:	00db      	lsls	r3, r3, #3
 800ad92:	1a9b      	subs	r3, r3, r2
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	4403      	add	r3, r0
 800ad98:	3314      	adds	r3, #20
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	0618      	lsls	r0, r3, #24
 800ad9e:	4c5d      	ldr	r4, [pc, #372]	; (800af14 <prvProcessDNSCache+0x200>)
 800ada0:	69fa      	ldr	r2, [r7, #28]
 800ada2:	4613      	mov	r3, r2
 800ada4:	00db      	lsls	r3, r3, #3
 800ada6:	1a9b      	subs	r3, r3, r2
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	4423      	add	r3, r4
 800adac:	3314      	adds	r3, #20
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	021b      	lsls	r3, r3, #8
 800adb2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800adb6:	4318      	orrs	r0, r3
 800adb8:	4c56      	ldr	r4, [pc, #344]	; (800af14 <prvProcessDNSCache+0x200>)
 800adba:	69fa      	ldr	r2, [r7, #28]
 800adbc:	4613      	mov	r3, r2
 800adbe:	00db      	lsls	r3, r3, #3
 800adc0:	1a9b      	subs	r3, r3, r2
 800adc2:	009b      	lsls	r3, r3, #2
 800adc4:	4423      	add	r3, r4
 800adc6:	3314      	adds	r3, #20
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	0a1b      	lsrs	r3, r3, #8
 800adcc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800add0:	4318      	orrs	r0, r3
 800add2:	4c50      	ldr	r4, [pc, #320]	; (800af14 <prvProcessDNSCache+0x200>)
 800add4:	69fa      	ldr	r2, [r7, #28]
 800add6:	4613      	mov	r3, r2
 800add8:	00db      	lsls	r3, r3, #3
 800adda:	1a9b      	subs	r3, r3, r2
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	4423      	add	r3, r4
 800ade0:	3314      	adds	r3, #20
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	0e1b      	lsrs	r3, r3, #24
 800ade6:	4303      	orrs	r3, r0
                            xDNSCache[ x ].ulTimeWhenAddedInSeconds + 
 800ade8:	18ca      	adds	r2, r1, r3
                    if( ulCurrentTimeSeconds < 
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	429a      	cmp	r2, r3
 800adee:	d90a      	bls.n	800ae06 <prvProcessDNSCache+0xf2>
                    {
                        *pulIP = xDNSCache[ x ].ulIPAddress;
 800adf0:	4948      	ldr	r1, [pc, #288]	; (800af14 <prvProcessDNSCache+0x200>)
 800adf2:	69fa      	ldr	r2, [r7, #28]
 800adf4:	4613      	mov	r3, r2
 800adf6:	00db      	lsls	r3, r3, #3
 800adf8:	1a9b      	subs	r3, r3, r2
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	440b      	add	r3, r1
 800adfe:	681a      	ldr	r2, [r3, #0]
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	601a      	str	r2, [r3, #0]
 800ae04:	e028      	b.n	800ae58 <prvProcessDNSCache+0x144>
                    }
                    else
                    {
                        /* Age out the old cached record. */
                        xDNSCache[ x ].pcName[ 0 ] = 0;
 800ae06:	4943      	ldr	r1, [pc, #268]	; (800af14 <prvProcessDNSCache+0x200>)
 800ae08:	69fa      	ldr	r2, [r7, #28]
 800ae0a:	4613      	mov	r3, r2
 800ae0c:	00db      	lsls	r3, r3, #3
 800ae0e:	1a9b      	subs	r3, r3, r2
 800ae10:	009b      	lsls	r3, r3, #2
 800ae12:	440b      	add	r3, r1
 800ae14:	3304      	adds	r3, #4
 800ae16:	2200      	movs	r2, #0
 800ae18:	701a      	strb	r2, [r3, #0]
 800ae1a:	e01d      	b.n	800ae58 <prvProcessDNSCache+0x144>
                    }
				}
				else
				{
					xDNSCache[ x ].ulIPAddress = *pulIP;
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	6819      	ldr	r1, [r3, #0]
 800ae20:	483c      	ldr	r0, [pc, #240]	; (800af14 <prvProcessDNSCache+0x200>)
 800ae22:	69fa      	ldr	r2, [r7, #28]
 800ae24:	4613      	mov	r3, r2
 800ae26:	00db      	lsls	r3, r3, #3
 800ae28:	1a9b      	subs	r3, r3, r2
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	4403      	add	r3, r0
 800ae2e:	6019      	str	r1, [r3, #0]
                    xDNSCache[ x ].ulTTL = ulTTL;
 800ae30:	4938      	ldr	r1, [pc, #224]	; (800af14 <prvProcessDNSCache+0x200>)
 800ae32:	69fa      	ldr	r2, [r7, #28]
 800ae34:	4613      	mov	r3, r2
 800ae36:	00db      	lsls	r3, r3, #3
 800ae38:	1a9b      	subs	r3, r3, r2
 800ae3a:	009b      	lsls	r3, r3, #2
 800ae3c:	440b      	add	r3, r1
 800ae3e:	3314      	adds	r3, #20
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	601a      	str	r2, [r3, #0]
                    xDNSCache[ x ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 800ae44:	4933      	ldr	r1, [pc, #204]	; (800af14 <prvProcessDNSCache+0x200>)
 800ae46:	69fa      	ldr	r2, [r7, #28]
 800ae48:	4613      	mov	r3, r2
 800ae4a:	00db      	lsls	r3, r3, #3
 800ae4c:	1a9b      	subs	r3, r3, r2
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	440b      	add	r3, r1
 800ae52:	3318      	adds	r3, #24
 800ae54:	697a      	ldr	r2, [r7, #20]
 800ae56:	601a      	str	r2, [r3, #0]
				}

				xFound = pdTRUE;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	61bb      	str	r3, [r7, #24]
				break;
 800ae5c:	e008      	b.n	800ae70 <prvProcessDNSCache+0x15c>
		for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 800ae5e:	69fb      	ldr	r3, [r7, #28]
 800ae60:	3301      	adds	r3, #1
 800ae62:	61fb      	str	r3, [r7, #28]
 800ae64:	69fb      	ldr	r3, [r7, #28]
 800ae66:	2b03      	cmp	r3, #3
 800ae68:	f77f af68 	ble.w	800ad3c <prvProcessDNSCache+0x28>
 800ae6c:	e000      	b.n	800ae70 <prvProcessDNSCache+0x15c>
				break;
 800ae6e:	bf00      	nop
			}
		}

		if( xFound == pdFALSE )
 800ae70:	69bb      	ldr	r3, [r7, #24]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d146      	bne.n	800af04 <prvProcessDNSCache+0x1f0>
		{
			if( xLookUp != pdFALSE )
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d003      	beq.n	800ae84 <prvProcessDNSCache+0x170>
			{
				*pulIP = 0;
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	601a      	str	r2, [r3, #0]
 800ae82:	e03f      	b.n	800af04 <prvProcessDNSCache+0x1f0>
			}
			else
			{
				/* Add or update the item. */
                if( strlen( pcName ) < ipconfigDNS_CACHE_NAME_LENGTH )
 800ae84:	68f8      	ldr	r0, [r7, #12]
 800ae86:	f7f5 f9b5 	bl	80001f4 <strlen>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	2b0f      	cmp	r3, #15
 800ae8e:	d839      	bhi.n	800af04 <prvProcessDNSCache+0x1f0>
                {
                    strcpy( xDNSCache[ xFreeEntry ].pcName, pcName );
 800ae90:	4b21      	ldr	r3, [pc, #132]	; (800af18 <prvProcessDNSCache+0x204>)
 800ae92:	681a      	ldr	r2, [r3, #0]
 800ae94:	4613      	mov	r3, r2
 800ae96:	00db      	lsls	r3, r3, #3
 800ae98:	1a9b      	subs	r3, r3, r2
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	4a1d      	ldr	r2, [pc, #116]	; (800af14 <prvProcessDNSCache+0x200>)
 800ae9e:	4413      	add	r3, r2
 800aea0:	3304      	adds	r3, #4
 800aea2:	68f9      	ldr	r1, [r7, #12]
 800aea4:	4618      	mov	r0, r3
 800aea6:	f006 f9eb 	bl	8011280 <strcpy>

                    xDNSCache[ xFreeEntry ].ulIPAddress = *pulIP;
 800aeaa:	4b1b      	ldr	r3, [pc, #108]	; (800af18 <prvProcessDNSCache+0x204>)
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	6819      	ldr	r1, [r3, #0]
 800aeb2:	4818      	ldr	r0, [pc, #96]	; (800af14 <prvProcessDNSCache+0x200>)
 800aeb4:	4613      	mov	r3, r2
 800aeb6:	00db      	lsls	r3, r3, #3
 800aeb8:	1a9b      	subs	r3, r3, r2
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	4403      	add	r3, r0
 800aebe:	6019      	str	r1, [r3, #0]
                    xDNSCache[ xFreeEntry ].ulTTL = ulTTL;
 800aec0:	4b15      	ldr	r3, [pc, #84]	; (800af18 <prvProcessDNSCache+0x204>)
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	4913      	ldr	r1, [pc, #76]	; (800af14 <prvProcessDNSCache+0x200>)
 800aec6:	4613      	mov	r3, r2
 800aec8:	00db      	lsls	r3, r3, #3
 800aeca:	1a9b      	subs	r3, r3, r2
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	440b      	add	r3, r1
 800aed0:	3314      	adds	r3, #20
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	601a      	str	r2, [r3, #0]
                    xDNSCache[ xFreeEntry ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 800aed6:	4b10      	ldr	r3, [pc, #64]	; (800af18 <prvProcessDNSCache+0x204>)
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	490e      	ldr	r1, [pc, #56]	; (800af14 <prvProcessDNSCache+0x200>)
 800aedc:	4613      	mov	r3, r2
 800aede:	00db      	lsls	r3, r3, #3
 800aee0:	1a9b      	subs	r3, r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	440b      	add	r3, r1
 800aee6:	3318      	adds	r3, #24
 800aee8:	697a      	ldr	r2, [r7, #20]
 800aeea:	601a      	str	r2, [r3, #0]

                    xFreeEntry++;
 800aeec:	4b0a      	ldr	r3, [pc, #40]	; (800af18 <prvProcessDNSCache+0x204>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	3301      	adds	r3, #1
 800aef2:	4a09      	ldr	r2, [pc, #36]	; (800af18 <prvProcessDNSCache+0x204>)
 800aef4:	6013      	str	r3, [r2, #0]
                    if( xFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 800aef6:	4b08      	ldr	r3, [pc, #32]	; (800af18 <prvProcessDNSCache+0x204>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	2b04      	cmp	r3, #4
 800aefc:	d102      	bne.n	800af04 <prvProcessDNSCache+0x1f0>
                    {
                        xFreeEntry = 0;
 800aefe:	4b06      	ldr	r3, [pc, #24]	; (800af18 <prvProcessDNSCache+0x204>)
 800af00:	2200      	movs	r2, #0
 800af02:	601a      	str	r2, [r3, #0]
                    }
                }
			}
		}

		if( ( xLookUp == 0 ) || ( *pulIP != 0 ) )
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	2b00      	cmp	r3, #0
		{
			FreeRTOS_debug_printf( ( "prvProcessDNSCache: %s: '%s' @ %lxip\n", xLookUp ? "look-up" : "add", pcName, FreeRTOS_ntohl( *pulIP ) ) );
		}
	}
 800af08:	bf00      	nop
 800af0a:	3724      	adds	r7, #36	; 0x24
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd90      	pop	{r4, r7, pc}
 800af10:	10624dd3 	.word	0x10624dd3
 800af14:	20004de4 	.word	0x20004de4
 800af18:	20004e54 	.word	0x20004e54

0800af1c <prvIPTask>:
#endif

/*-----------------------------------------------------------*/

static void prvIPTask( void *pvParameters )
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b088      	sub	sp, #32
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]

	/* Generate a dummy message to say that the network connection has gone
	down.  This will cause this task to initialise the network interface.  After
	this it is the responsibility of the network interface hardware driver to
	send this message if a previously connected network is disconnected. */
	FreeRTOS_NetworkDown();
 800af24:	f000 f998 	bl	800b258 <FreeRTOS_NetworkDown>

	#if( ipconfigUSE_TCP == 1 )
	{
		/* Initialise the TCP timer. */
		prvIPTimerReload( &xTCPTimer, pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 800af28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800af2c:	484e      	ldr	r0, [pc, #312]	; (800b068 <prvIPTask+0x14c>)
 800af2e:	f000 f953 	bl	800b1d8 <prvIPTimerReload>
	}
	#endif

	/* Initialisation is complete and events can now be processed. */
	xIPTaskInitialised = pdTRUE;
 800af32:	4b4e      	ldr	r3, [pc, #312]	; (800b06c <prvIPTask+0x150>)
 800af34:	2201      	movs	r2, #1
 800af36:	601a      	str	r2, [r3, #0]
	{
		ipconfigWATCHDOG_TIMER();

		/* Check the ARP, DHCP and TCP timers to see if there is any periodic
		or timeout processing to perform. */
		prvCheckNetworkTimers();
 800af38:	f000 f8ea 	bl	800b110 <prvCheckNetworkTimers>

		/* Calculate the acceptable maximum sleep time. */
		xNextIPSleep = prvCalculateSleepTime();
 800af3c:	f000 f8c0 	bl	800b0c0 <prvCalculateSleepTime>
 800af40:	61f8      	str	r0, [r7, #28]

		/* Wait until there is something to do. If the following call exits
		 * due to a time out rather than a message being received, set a
		 * 'NoEvent' value. */
		if ( xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep ) == pdFALSE ) {
 800af42:	4b4b      	ldr	r3, [pc, #300]	; (800b070 <prvIPTask+0x154>)
 800af44:	6818      	ldr	r0, [r3, #0]
 800af46:	f107 0110 	add.w	r1, r7, #16
 800af4a:	2300      	movs	r3, #0
 800af4c:	69fa      	ldr	r2, [r7, #28]
 800af4e:	f7fd fcfd 	bl	800894c <xQueueGenericReceive>
 800af52:	4603      	mov	r3, r0
 800af54:	2b00      	cmp	r3, #0
 800af56:	d101      	bne.n	800af5c <prvIPTask+0x40>
			xReceivedEvent.eEventType = eNoEvent;
 800af58:	23ff      	movs	r3, #255	; 0xff
 800af5a:	743b      	strb	r3, [r7, #16]
		}
		#endif /* ipconfigCHECK_IP_QUEUE_SPACE */

		iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );

		switch( xReceivedEvent.eEventType )
 800af5c:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800af60:	2b0b      	cmp	r3, #11
 800af62:	d875      	bhi.n	800b050 <prvIPTask+0x134>
 800af64:	a201      	add	r2, pc, #4	; (adr r2, 800af6c <prvIPTask+0x50>)
 800af66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af6a:	bf00      	nop
 800af6c:	0800af9d 	.word	0x0800af9d
 800af70:	0800afa9 	.word	0x0800afa9
 800af74:	0800afb3 	.word	0x0800afb3
 800af78:	0800b00d 	.word	0x0800b00d
 800af7c:	0800b051 	.word	0x0800b051
 800af80:	0800b021 	.word	0x0800b021
 800af84:	0800b02d 	.word	0x0800b02d
 800af88:	0800b051 	.word	0x0800b051
 800af8c:	0800afb9 	.word	0x0800afb9
 800af90:	0800b003 	.word	0x0800b003
 800af94:	0800b017 	.word	0x0800b017
 800af98:	0800b051 	.word	0x0800b051
		{
			case eNetworkDownEvent :
				/* Attempt to establish a connection. */
				xNetworkUp = pdFALSE;
 800af9c:	4b35      	ldr	r3, [pc, #212]	; (800b074 <prvIPTask+0x158>)
 800af9e:	2200      	movs	r2, #0
 800afa0:	601a      	str	r2, [r3, #0]
				prvProcessNetworkDownEvent();
 800afa2:	f000 fb97 	bl	800b6d4 <prvProcessNetworkDownEvent>
				break;
 800afa6:	e056      	b.n	800b056 <prvIPTask+0x13a>

			case eNetworkRxEvent:
				/* The network hardware driver has received a new packet.  A
				pointer to the received buffer is located in the pvData member
				of the received event structure. */
				prvHandleEthernetPacket( ( NetworkBufferDescriptor_t * ) ( xReceivedEvent.pvData ) );
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	4618      	mov	r0, r3
 800afac:	f000 f87c 	bl	800b0a8 <prvHandleEthernetPacket>
				break;
 800afb0:	e051      	b.n	800b056 <prvIPTask+0x13a>

			case eARPTimerEvent :
				/* The ARP timer has expired, process the ARP cache. */
				vARPAgeCache();
 800afb2:	f7ff f9fb 	bl	800a3ac <vARPAgeCache>
				break;
 800afb6:	e04e      	b.n	800b056 <prvIPTask+0x13a>
				/* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
				to a port. The port number is communicated in the socket field
				usLocalPort. vSocketBind() will actually bind the socket and the
				API will unblock as soon as the eSOCKET_BOUND event is
				triggered. */
				pxSocket = ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData );
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	61bb      	str	r3, [r7, #24]
				xAddress.sin_addr = 0u;	/* For the moment. */
 800afbc:	2300      	movs	r3, #0
 800afbe:	60fb      	str	r3, [r7, #12]
				xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 800afc0:	69bb      	ldr	r3, [r7, #24]
 800afc2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800afc4:	021b      	lsls	r3, r3, #8
 800afc6:	b21a      	sxth	r2, r3
 800afc8:	69bb      	ldr	r3, [r7, #24]
 800afca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800afcc:	0a1b      	lsrs	r3, r3, #8
 800afce:	b29b      	uxth	r3, r3
 800afd0:	b21b      	sxth	r3, r3
 800afd2:	4313      	orrs	r3, r2
 800afd4:	b21b      	sxth	r3, r3
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	817b      	strh	r3, [r7, #10]
				pxSocket->usLocalPort = 0u;
 800afda:	69bb      	ldr	r3, [r7, #24]
 800afdc:	2200      	movs	r2, #0
 800afde:	849a      	strh	r2, [r3, #36]	; 0x24
				vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 800afe0:	f107 0108 	add.w	r1, r7, #8
 800afe4:	2300      	movs	r3, #0
 800afe6:	2208      	movs	r2, #8
 800afe8:	69b8      	ldr	r0, [r7, #24]
 800afea:	f001 f95b 	bl	800c2a4 <vSocketBind>

				/* Before 'eSocketBindEvent' was sent it was tested that
				( xEventGroup != NULL ) so it can be used now to wake up the
				user. */
				pxSocket->xEventBits |= eSOCKET_BOUND;
 800afee:	69bb      	ldr	r3, [r7, #24]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f043 0210 	orr.w	r2, r3, #16
 800aff6:	69bb      	ldr	r3, [r7, #24]
 800aff8:	601a      	str	r2, [r3, #0]
				vSocketWakeUpUser( pxSocket );
 800affa:	69b8      	ldr	r0, [r7, #24]
 800affc:	f001 fb58 	bl	800c6b0 <vSocketWakeUpUser>
				break;
 800b000:	e029      	b.n	800b056 <prvIPTask+0x13a>
			case eSocketCloseEvent :
				/* The user API FreeRTOS_closesocket() has sent a message to the
				IP-task to actually close a socket. This is handled in
				vSocketClose().  As the socket gets closed, there is no way to
				report back to the API, so the API won't wait for the result */
				vSocketClose( ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData ) );
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	4618      	mov	r0, r3
 800b006:	f001 fa0b 	bl	800c420 <vSocketClose>
				break;
 800b00a:	e024      	b.n	800b056 <prvIPTask+0x13a>

			case eStackTxEvent :
				/* The network stack has generated a packet to send.  A
				pointer to the generated buffer is located in the pvData
				member of the received event structure. */
				vProcessGeneratedUDPPacket( ( NetworkBufferDescriptor_t * ) ( xReceivedEvent.pvData ) );
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	4618      	mov	r0, r3
 800b010:	f005 fa88 	bl	8010524 <vProcessGeneratedUDPPacket>
				break;
 800b014:	e01f      	b.n	800b056 <prvIPTask+0x13a>
				/* FreeRTOS_select() has got unblocked by a socket event,
				vSocketSelect() will check which sockets actually have an event
				and update the socket field xSocketBits. */
				#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
				{
					vSocketSelect( ( SocketSelect_t * ) ( xReceivedEvent.pvData ) );
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	4618      	mov	r0, r3
 800b01a:	f001 fd45 	bl	800caa8 <vSocketSelect>
				}
				#endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
				break;
 800b01e:	e01a      	b.n	800b056 <prvIPTask+0x13a>
			case eTCPTimerEvent :
				#if( ipconfigUSE_TCP == 1 )
				{
					/* Simply mark the TCP timer as expired so it gets processed
					the next time prvCheckNetworkTimers() is called. */
					xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 800b020:	4a11      	ldr	r2, [pc, #68]	; (800b068 <prvIPTask+0x14c>)
 800b022:	7813      	ldrb	r3, [r2, #0]
 800b024:	f043 0302 	orr.w	r3, r3, #2
 800b028:	7013      	strb	r3, [r2, #0]
				}
				#endif /* ipconfigUSE_TCP */
				break;
 800b02a:	e014      	b.n	800b056 <prvIPTask+0x13a>
				/* The API FreeRTOS_accept() was called, the IP-task will now
				check if the listening socket (communicated in pvData) actually
				received a new connection. */
				#if( ipconfigUSE_TCP == 1 )
				{
					pxSocket = ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData );
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	61bb      	str	r3, [r7, #24]

					if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 800b030:	69b8      	ldr	r0, [r7, #24]
 800b032:	f004 fa77 	bl	800f524 <xTCPCheckNewClient>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d00b      	beq.n	800b054 <prvIPTask+0x138>
					{
						pxSocket->xEventBits |= eSOCKET_ACCEPT;
 800b03c:	69bb      	ldr	r3, [r7, #24]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f043 0204 	orr.w	r2, r3, #4
 800b044:	69bb      	ldr	r3, [r7, #24]
 800b046:	601a      	str	r2, [r3, #0]
						vSocketWakeUpUser( pxSocket );
 800b048:	69b8      	ldr	r0, [r7, #24]
 800b04a:	f001 fb31 	bl	800c6b0 <vSocketWakeUpUser>
					}
				}
				#endif /* ipconfigUSE_TCP */
				break;
 800b04e:	e001      	b.n	800b054 <prvIPTask+0x138>
				#endif /* ipconfigUSE_TCP */
				break;

			default :
				/* Should not get here. */
				break;
 800b050:	bf00      	nop
 800b052:	e000      	b.n	800b056 <prvIPTask+0x13a>
				break;
 800b054:	bf00      	nop
		}

		if( xNetworkDownEventPending != pdFALSE )
 800b056:	4b08      	ldr	r3, [pc, #32]	; (800b078 <prvIPTask+0x15c>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	f43f af6c 	beq.w	800af38 <prvIPTask+0x1c>
		{
			/* A network down event could not be posted to the network event
			queue because the queue was full.  Try posting again. */
			FreeRTOS_NetworkDown();
 800b060:	f000 f8fa 	bl	800b258 <FreeRTOS_NetworkDown>
		prvCheckNetworkTimers();
 800b064:	e768      	b.n	800af38 <prvIPTask+0x1c>
 800b066:	bf00      	nop
 800b068:	20004eac 	.word	0x20004eac
 800b06c:	20004ec0 	.word	0x20004ec0
 800b070:	20004e58 	.word	0x20004e58
 800b074:	20004e94 	.word	0x20004e94
 800b078:	20004e88 	.word	0x20004e88

0800b07c <xIsCallingFromIPTask>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xIsCallingFromIPTask( void )
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b082      	sub	sp, #8
 800b080:	af00      	add	r7, sp, #0
BaseType_t xReturn;

	if( xTaskGetCurrentTaskHandle() == xIPTaskHandle )
 800b082:	f7fe fcf7 	bl	8009a74 <xTaskGetCurrentTaskHandle>
 800b086:	4602      	mov	r2, r0
 800b088:	4b06      	ldr	r3, [pc, #24]	; (800b0a4 <xIsCallingFromIPTask+0x28>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d102      	bne.n	800b096 <xIsCallingFromIPTask+0x1a>
	{
		xReturn = pdTRUE;
 800b090:	2301      	movs	r3, #1
 800b092:	607b      	str	r3, [r7, #4]
 800b094:	e001      	b.n	800b09a <xIsCallingFromIPTask+0x1e>
	}
	else
	{
		xReturn = pdFALSE;
 800b096:	2300      	movs	r3, #0
 800b098:	607b      	str	r3, [r7, #4]
	}

	return xReturn;
 800b09a:	687b      	ldr	r3, [r7, #4]
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3708      	adds	r7, #8
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}
 800b0a4:	20004e8c 	.word	0x20004e8c

0800b0a8 <prvHandleEthernetPacket>:
/*-----------------------------------------------------------*/

static void prvHandleEthernetPacket( NetworkBufferDescriptor_t *pxBuffer )
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
	#if( ipconfigUSE_LINKED_RX_MESSAGES == 0 )
	{
		/* When ipconfigUSE_LINKED_RX_MESSAGES is not set to 0 then only one
		buffer will be sent at a time.  This is the default way for +TCP to pass
		messages from the MAC to the TCP/IP stack. */
		prvProcessEthernetPacket( pxBuffer );
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 fb39 	bl	800b728 <prvProcessEthernetPacket>

		/* While there is another packet in the chain. */
		} while( pxBuffer != NULL );
	}
	#endif /* ipconfigUSE_LINKED_RX_MESSAGES */
}
 800b0b6:	bf00      	nop
 800b0b8:	3708      	adds	r7, #8
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
	...

0800b0c0 <prvCalculateSleepTime>:
/*-----------------------------------------------------------*/

static TickType_t prvCalculateSleepTime( void )
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
TickType_t xMaximumSleepTime;

	/* Start with the maximum sleep time, then check this against the remaining
	time in any other timers that are active. */
	xMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 800b0c6:	f242 7310 	movw	r3, #10000	; 0x2710
 800b0ca:	607b      	str	r3, [r7, #4]

	if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 800b0cc:	4b0e      	ldr	r3, [pc, #56]	; (800b108 <prvCalculateSleepTime+0x48>)
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	f003 0301 	and.w	r3, r3, #1
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d007      	beq.n	800b0ea <prvCalculateSleepTime+0x2a>
	{
		if( xARPTimer.ulRemainingTime < xMaximumSleepTime )
 800b0da:	4b0b      	ldr	r3, [pc, #44]	; (800b108 <prvCalculateSleepTime+0x48>)
 800b0dc:	68da      	ldr	r2, [r3, #12]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d202      	bcs.n	800b0ea <prvCalculateSleepTime+0x2a>
		{
			xMaximumSleepTime = xARPTimer.ulReloadTime;
 800b0e4:	4b08      	ldr	r3, [pc, #32]	; (800b108 <prvCalculateSleepTime+0x48>)
 800b0e6:	691b      	ldr	r3, [r3, #16]
 800b0e8:	607b      	str	r3, [r7, #4]
	}
	#endif /* ipconfigUSE_DHCP */

	#if( ipconfigUSE_TCP == 1 )
	{
		if( xTCPTimer.ulRemainingTime < xMaximumSleepTime )
 800b0ea:	4b08      	ldr	r3, [pc, #32]	; (800b10c <prvCalculateSleepTime+0x4c>)
 800b0ec:	68da      	ldr	r2, [r3, #12]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d202      	bcs.n	800b0fa <prvCalculateSleepTime+0x3a>
		{
			xMaximumSleepTime = xTCPTimer.ulRemainingTime;
 800b0f4:	4b05      	ldr	r3, [pc, #20]	; (800b10c <prvCalculateSleepTime+0x4c>)
 800b0f6:	68db      	ldr	r3, [r3, #12]
 800b0f8:	607b      	str	r3, [r7, #4]
			}
		}
	}
	#endif

	return xMaximumSleepTime;
 800b0fa:	687b      	ldr	r3, [r7, #4]
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	370c      	adds	r7, #12
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr
 800b108:	20004e98 	.word	0x20004e98
 800b10c:	20004eac 	.word	0x20004eac

0800b110 <prvCheckNetworkTimers>:
/*-----------------------------------------------------------*/

static void prvCheckNetworkTimers( void )
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
	/* Is it time for ARP processing? */
	if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 800b116:	481a      	ldr	r0, [pc, #104]	; (800b180 <prvCheckNetworkTimers+0x70>)
 800b118:	f000 f86e 	bl	800b1f8 <prvIPTimerCheck>
 800b11c:	4603      	mov	r3, r0
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d002      	beq.n	800b128 <prvCheckNetworkTimers+0x18>
	{
		xSendEventToIPTask( eARPTimerEvent );
 800b122:	2002      	movs	r0, #2
 800b124:	f000 fa26 	bl	800b574 <xSendEventToIPTask>
	{
	BaseType_t xWillSleep;
	TickType_t xNextTime;
	BaseType_t xCheckTCPSockets;

		if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0u )
 800b128:	4b16      	ldr	r3, [pc, #88]	; (800b184 <prvCheckNetworkTimers+0x74>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4618      	mov	r0, r3
 800b12e:	f7fd fd1f 	bl	8008b70 <uxQueueMessagesWaiting>
 800b132:	4603      	mov	r3, r0
 800b134:	2b00      	cmp	r3, #0
 800b136:	d102      	bne.n	800b13e <prvCheckNetworkTimers+0x2e>
		{
			xWillSleep = pdTRUE;
 800b138:	2301      	movs	r3, #1
 800b13a:	60fb      	str	r3, [r7, #12]
 800b13c:	e001      	b.n	800b142 <prvCheckNetworkTimers+0x32>
		}
		else
		{
			xWillSleep = pdFALSE;
 800b13e:	2300      	movs	r3, #0
 800b140:	60fb      	str	r3, [r7, #12]
		}

		/* Sockets need to be checked if the TCP timer has expired. */
		xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 800b142:	4811      	ldr	r0, [pc, #68]	; (800b188 <prvCheckNetworkTimers+0x78>)
 800b144:	f000 f858 	bl	800b1f8 <prvIPTimerCheck>
 800b148:	60b8      	str	r0, [r7, #8]

		/* Sockets will also be checked if there are TCP messages but the
		message queue is empty (indicated by xWillSleep being true). */
		if( ( xProcessedTCPMessage != pdFALSE ) && ( xWillSleep != pdFALSE ) )
 800b14a:	4b10      	ldr	r3, [pc, #64]	; (800b18c <prvCheckNetworkTimers+0x7c>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d004      	beq.n	800b15c <prvCheckNetworkTimers+0x4c>
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d001      	beq.n	800b15c <prvCheckNetworkTimers+0x4c>
		{
			xCheckTCPSockets = pdTRUE;
 800b158:	2301      	movs	r3, #1
 800b15a:	60bb      	str	r3, [r7, #8]
		}

		if( xCheckTCPSockets != pdFALSE )
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d00a      	beq.n	800b178 <prvCheckNetworkTimers+0x68>
		{
			/* Attend to the sockets, returning the period after which the
			check must be repeated. */
			xNextTime = xTCPTimerCheck( xWillSleep );
 800b162:	68f8      	ldr	r0, [r7, #12]
 800b164:	f001 fae0 	bl	800c728 <xTCPTimerCheck>
 800b168:	6078      	str	r0, [r7, #4]
			prvIPTimerStart( &xTCPTimer, xNextTime );
 800b16a:	6879      	ldr	r1, [r7, #4]
 800b16c:	4806      	ldr	r0, [pc, #24]	; (800b188 <prvCheckNetworkTimers+0x78>)
 800b16e:	f000 f80f 	bl	800b190 <prvIPTimerStart>
			xProcessedTCPMessage = 0;
 800b172:	4b06      	ldr	r3, [pc, #24]	; (800b18c <prvCheckNetworkTimers+0x7c>)
 800b174:	2200      	movs	r2, #0
 800b176:	601a      	str	r2, [r3, #0]
		}
	}
	#endif /* ipconfigUSE_TCP == 1 */
}
 800b178:	bf00      	nop
 800b17a:	3710      	adds	r7, #16
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	20004e98 	.word	0x20004e98
 800b184:	20004e58 	.word	0x20004e58
 800b188:	20004eac 	.word	0x20004eac
 800b18c:	20004e90 	.word	0x20004e90

0800b190 <prvIPTimerStart>:
/*-----------------------------------------------------------*/

static void prvIPTimerStart( IPTimer_t *pxTimer, TickType_t xTime )
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b082      	sub	sp, #8
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	3304      	adds	r3, #4
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7fe fb10 	bl	80097c4 <vTaskSetTimeOutState>
	pxTimer->ulRemainingTime = xTime;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	683a      	ldr	r2, [r7, #0]
 800b1a8:	60da      	str	r2, [r3, #12]

	if( xTime == ( TickType_t ) 0 )
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d105      	bne.n	800b1bc <prvIPTimerStart+0x2c>
	{
		pxTimer->bExpired = pdTRUE_UNSIGNED;
 800b1b0:	687a      	ldr	r2, [r7, #4]
 800b1b2:	7813      	ldrb	r3, [r2, #0]
 800b1b4:	f043 0302 	orr.w	r3, r3, #2
 800b1b8:	7013      	strb	r3, [r2, #0]
 800b1ba:	e004      	b.n	800b1c6 <prvIPTimerStart+0x36>
	}
	else
	{
		pxTimer->bExpired = pdFALSE_UNSIGNED;
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	7813      	ldrb	r3, [r2, #0]
 800b1c0:	f36f 0341 	bfc	r3, #1, #1
 800b1c4:	7013      	strb	r3, [r2, #0]
	}

	pxTimer->bActive = pdTRUE_UNSIGNED;
 800b1c6:	687a      	ldr	r2, [r7, #4]
 800b1c8:	7813      	ldrb	r3, [r2, #0]
 800b1ca:	f043 0301 	orr.w	r3, r3, #1
 800b1ce:	7013      	strb	r3, [r2, #0]
}
 800b1d0:	bf00      	nop
 800b1d2:	3708      	adds	r7, #8
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <prvIPTimerReload>:
/*-----------------------------------------------------------*/

static void prvIPTimerReload( IPTimer_t *pxTimer, TickType_t xTime )
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
	pxTimer->ulReloadTime = xTime;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	683a      	ldr	r2, [r7, #0]
 800b1e6:	611a      	str	r2, [r3, #16]
	prvIPTimerStart( pxTimer, xTime );
 800b1e8:	6839      	ldr	r1, [r7, #0]
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f7ff ffd0 	bl	800b190 <prvIPTimerStart>
}
 800b1f0:	bf00      	nop
 800b1f2:	3708      	adds	r7, #8
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <prvIPTimerCheck>:
/*-----------------------------------------------------------*/

static BaseType_t prvIPTimerCheck( IPTimer_t *pxTimer )
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b084      	sub	sp, #16
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	if( pxTimer->bActive == pdFALSE_UNSIGNED )
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	f003 0301 	and.w	r3, r3, #1
 800b208:	b2db      	uxtb	r3, r3
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d102      	bne.n	800b214 <prvIPTimerCheck+0x1c>
	{
		/* The timer is not enabled. */
		xReturn = pdFALSE;
 800b20e:	2300      	movs	r3, #0
 800b210:	60fb      	str	r3, [r7, #12]
 800b212:	e01c      	b.n	800b24e <prvIPTimerCheck+0x56>
	}
	else
	{
		/* The timer might have set the bExpired flag already, if not, check the
		value of xTimeOut against ulRemainingTime. */
		if( ( pxTimer->bExpired != pdFALSE_UNSIGNED ) ||
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	f003 0302 	and.w	r3, r3, #2
 800b21c:	b2db      	uxtb	r3, r3
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d10a      	bne.n	800b238 <prvIPTimerCheck+0x40>
			( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE ) )
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	1d1a      	adds	r2, r3, #4
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	330c      	adds	r3, #12
 800b22a:	4619      	mov	r1, r3
 800b22c:	4610      	mov	r0, r2
 800b22e:	f7fe faed 	bl	800980c <xTaskCheckForTimeOut>
 800b232:	4603      	mov	r3, r0
		if( ( pxTimer->bExpired != pdFALSE_UNSIGNED ) ||
 800b234:	2b00      	cmp	r3, #0
 800b236:	d008      	beq.n	800b24a <prvIPTimerCheck+0x52>
		{
			prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	691b      	ldr	r3, [r3, #16]
 800b23c:	4619      	mov	r1, r3
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f7ff ffa6 	bl	800b190 <prvIPTimerStart>
			xReturn = pdTRUE;
 800b244:	2301      	movs	r3, #1
 800b246:	60fb      	str	r3, [r7, #12]
 800b248:	e001      	b.n	800b24e <prvIPTimerCheck+0x56>
		}
		else
		{
			xReturn = pdFALSE;
 800b24a:	2300      	movs	r3, #0
 800b24c:	60fb      	str	r3, [r7, #12]
		}
	}

	return xReturn;
 800b24e:	68fb      	ldr	r3, [r7, #12]
}
 800b250:	4618      	mov	r0, r3
 800b252:	3710      	adds	r7, #16
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <FreeRTOS_NetworkDown>:
/*-----------------------------------------------------------*/

void FreeRTOS_NetworkDown( void )
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
static const IPStackEvent_t xNetworkDownEvent = { eNetworkDownEvent, NULL };
const TickType_t xDontBlock = ( TickType_t ) 0;
 800b25e:	2300      	movs	r3, #0
 800b260:	607b      	str	r3, [r7, #4]

	/* Simply send the network task the appropriate event. */
	if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 800b262:	6879      	ldr	r1, [r7, #4]
 800b264:	4808      	ldr	r0, [pc, #32]	; (800b288 <FreeRTOS_NetworkDown+0x30>)
 800b266:	f000 f99b 	bl	800b5a0 <xSendEventStructToIPTask>
 800b26a:	4603      	mov	r3, r0
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d003      	beq.n	800b278 <FreeRTOS_NetworkDown+0x20>
	{
		/* Could not send the message, so it is still pending. */
		xNetworkDownEventPending = pdTRUE;
 800b270:	4b06      	ldr	r3, [pc, #24]	; (800b28c <FreeRTOS_NetworkDown+0x34>)
 800b272:	2201      	movs	r2, #1
 800b274:	601a      	str	r2, [r3, #0]
		/* Message was sent so it is not pending. */
		xNetworkDownEventPending = pdFALSE;
	}

	iptraceNETWORK_DOWN();
}
 800b276:	e002      	b.n	800b27e <FreeRTOS_NetworkDown+0x26>
		xNetworkDownEventPending = pdFALSE;
 800b278:	4b04      	ldr	r3, [pc, #16]	; (800b28c <FreeRTOS_NetworkDown+0x34>)
 800b27a:	2200      	movs	r2, #0
 800b27c:	601a      	str	r2, [r3, #0]
}
 800b27e:	bf00      	nop
 800b280:	3708      	adds	r7, #8
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}
 800b286:	bf00      	nop
 800b288:	080114ec 	.word	0x080114ec
 800b28c:	20004e88 	.word	0x20004e88

0800b290 <FreeRTOS_NetworkDownFromISR>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_NetworkDownFromISR( void )
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
static const IPStackEvent_t xNetworkDownEvent = { eNetworkDownEvent, NULL };
BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800b296:	2300      	movs	r3, #0
 800b298:	607b      	str	r3, [r7, #4]

	/* Simply send the network task the appropriate event. */
	if( xQueueSendToBackFromISR( xNetworkEventQueue, &xNetworkDownEvent, &xHigherPriorityTaskWoken ) != pdPASS )
 800b29a:	4b0b      	ldr	r3, [pc, #44]	; (800b2c8 <FreeRTOS_NetworkDownFromISR+0x38>)
 800b29c:	6818      	ldr	r0, [r3, #0]
 800b29e:	1d3a      	adds	r2, r7, #4
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	490a      	ldr	r1, [pc, #40]	; (800b2cc <FreeRTOS_NetworkDownFromISR+0x3c>)
 800b2a4:	f7fd fabe 	bl	8008824 <xQueueGenericSendFromISR>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d003      	beq.n	800b2b6 <FreeRTOS_NetworkDownFromISR+0x26>
	{
		xNetworkDownEventPending = pdTRUE;
 800b2ae:	4b08      	ldr	r3, [pc, #32]	; (800b2d0 <FreeRTOS_NetworkDownFromISR+0x40>)
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	601a      	str	r2, [r3, #0]
 800b2b4:	e002      	b.n	800b2bc <FreeRTOS_NetworkDownFromISR+0x2c>
	}
	else
	{
		xNetworkDownEventPending = pdFALSE;
 800b2b6:	4b06      	ldr	r3, [pc, #24]	; (800b2d0 <FreeRTOS_NetworkDownFromISR+0x40>)
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	601a      	str	r2, [r3, #0]
	}

	iptraceNETWORK_DOWN();

	return xHigherPriorityTaskWoken;
 800b2bc:	687b      	ldr	r3, [r7, #4]
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3708      	adds	r7, #8
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	20004e58 	.word	0x20004e58
 800b2cc:	080114f4 	.word	0x080114f4
 800b2d0:	20004e88 	.word	0x20004e88

0800b2d4 <pxDuplicateNetworkBufferWithDescriptor>:
}
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t *pxDuplicateNetworkBufferWithDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer,
	BaseType_t xNewLength )
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
NetworkBufferDescriptor_t * pxNewBuffer;

	/* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
	The transmit routine wants to have ownership of the network buffer
	descriptor, because it will pass the buffer straight to DMA. */
	pxNewBuffer = pxGetNetworkBufferWithDescriptor( ( size_t ) xNewLength, ( TickType_t ) 0 );
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	2100      	movs	r1, #0
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f005 fafe 	bl	80108e4 <pxGetNetworkBufferWithDescriptor>
 800b2e8:	60f8      	str	r0, [r7, #12]

	if( pxNewBuffer != NULL )
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d017      	beq.n	800b320 <pxDuplicateNetworkBufferWithDescriptor+0x4c>
	{
        /* Set the actual packet size in case a bigger buffer than requested 
        was returned. */
        pxNewBuffer->xDataLength = xNewLength;
 800b2f0:	683a      	ldr	r2, [r7, #0]
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	61da      	str	r2, [r3, #28]

        /* Copy the original packet information. */
		pxNewBuffer->ulIPAddress = pxNetworkBuffer->ulIPAddress;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	695a      	ldr	r2, [r3, #20]
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	615a      	str	r2, [r3, #20]
		pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	8c1a      	ldrh	r2, [r3, #32]
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	841a      	strh	r2, [r3, #32]
		pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	845a      	strh	r2, [r3, #34]	; 0x22
		memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	6998      	ldr	r0, [r3, #24]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6999      	ldr	r1, [r3, #24]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	69db      	ldr	r3, [r3, #28]
 800b31a:	461a      	mov	r2, r3
 800b31c:	f005 fe6f 	bl	8010ffe <memcpy>
	}

	return pxNewBuffer;
 800b320:	68fb      	ldr	r3, [r7, #12]
}
 800b322:	4618      	mov	r0, r3
 800b324:	3710      	adds	r7, #16
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}

0800b32a <pxUDPPayloadBuffer_to_NetworkBuffer>:

#endif /* ipconfigZERO_COPY_TX_DRIVER != 0 */
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t *pxUDPPayloadBuffer_to_NetworkBuffer( void *pvBuffer )
{
 800b32a:	b480      	push	{r7}
 800b32c:	b085      	sub	sp, #20
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
uint8_t *pucBuffer;
NetworkBufferDescriptor_t *pxResult;

	if( pvBuffer == NULL )
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d102      	bne.n	800b33e <pxUDPPayloadBuffer_to_NetworkBuffer+0x14>
	{
		pxResult = NULL;
 800b338:	2300      	movs	r3, #0
 800b33a:	60fb      	str	r3, [r7, #12]
 800b33c:	e00f      	b.n	800b35e <pxUDPPayloadBuffer_to_NetworkBuffer+0x34>
	}
	else
	{
		/* Obtain the network buffer from the zero copy pointer. */
		pucBuffer = ( uint8_t * ) pvBuffer;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	60bb      	str	r3, [r7, #8]

		/* The input here is a pointer to a payload buffer.  Subtract
		the total size of a UDP/IP header plus the size of the header in
		the network buffer, usually 8 + 2 bytes. */
		pucBuffer -= ( sizeof( UDPPacket_t ) + ipBUFFER_PADDING );
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	3b34      	subs	r3, #52	; 0x34
 800b346:	60bb      	str	r3, [r7, #8]

		/* Here a pointer was placed to the network descriptor,
		As a pointer is dereferenced, make sure it is well aligned */
		if( ( ( ( uint32_t ) pucBuffer ) & ( sizeof( pucBuffer ) - 1 ) ) == 0 )
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	f003 0303 	and.w	r3, r3, #3
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d103      	bne.n	800b35a <pxUDPPayloadBuffer_to_NetworkBuffer+0x30>
		{
			/* The following statement may trigger a:
			warning: cast increases required alignment of target type [-Wcast-align].
			It has been confirmed though that the alignment is suitable. */
			pxResult = * ( ( NetworkBufferDescriptor_t ** ) pucBuffer );
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	60fb      	str	r3, [r7, #12]
 800b358:	e001      	b.n	800b35e <pxUDPPayloadBuffer_to_NetworkBuffer+0x34>
		}
		else
		{
			pxResult = NULL;
 800b35a:	2300      	movs	r3, #0
 800b35c:	60fb      	str	r3, [r7, #12]
		}
	}

	return pxResult;
 800b35e:	68fb      	ldr	r3, [r7, #12]
}
 800b360:	4618      	mov	r0, r3
 800b362:	3714      	adds	r7, #20
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr

0800b36c <FreeRTOS_IPInit>:
/*_RB_ Should we add an error or assert if the task priorities are set such that the servers won't function as expected? */
/*_HT_ There was a bug in FreeRTOS_TCP_IP.c that only occurred when the applications' priority was too high.
 As that bug has been repaired, there is not an urgent reason to warn.
 It is better though to use the advised priority scheme. */
BaseType_t FreeRTOS_IPInit( const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
{
 800b36c:	b5b0      	push	{r4, r5, r7, lr}
 800b36e:	b08c      	sub	sp, #48	; 0x30
 800b370:	af02      	add	r7, sp, #8
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	60b9      	str	r1, [r7, #8]
 800b376:	607a      	str	r2, [r7, #4]
 800b378:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFALSE;
 800b37a:	2300      	movs	r3, #0
 800b37c:	627b      	str	r3, [r7, #36]	; 0x24

	/* This function should only be called once. */
	configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 800b37e:	f000 fdb7 	bl	800bef0 <xIPIsNetworkTaskReady>
 800b382:	4603      	mov	r3, r0
 800b384:	2b00      	cmp	r3, #0
 800b386:	d009      	beq.n	800b39c <FreeRTOS_IPInit+0x30>
	__asm volatile
 800b388:	f04f 0340 	mov.w	r3, #64	; 0x40
 800b38c:	f383 8811 	msr	BASEPRI, r3
 800b390:	f3bf 8f6f 	isb	sy
 800b394:	f3bf 8f4f 	dsb	sy
 800b398:	623b      	str	r3, [r7, #32]
 800b39a:	e7fe      	b.n	800b39a <FreeRTOS_IPInit+0x2e>
	configASSERT( xNetworkEventQueue == NULL );
 800b39c:	4b6d      	ldr	r3, [pc, #436]	; (800b554 <FreeRTOS_IPInit+0x1e8>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d009      	beq.n	800b3b8 <FreeRTOS_IPInit+0x4c>
 800b3a4:	f04f 0340 	mov.w	r3, #64	; 0x40
 800b3a8:	f383 8811 	msr	BASEPRI, r3
 800b3ac:	f3bf 8f6f 	isb	sy
 800b3b0:	f3bf 8f4f 	dsb	sy
 800b3b4:	61fb      	str	r3, [r7, #28]
 800b3b6:	e7fe      	b.n	800b3b6 <FreeRTOS_IPInit+0x4a>
	configASSERT( xIPTaskHandle == NULL );
 800b3b8:	4b67      	ldr	r3, [pc, #412]	; (800b558 <FreeRTOS_IPInit+0x1ec>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d009      	beq.n	800b3d4 <FreeRTOS_IPInit+0x68>
 800b3c0:	f04f 0340 	mov.w	r3, #64	; 0x40
 800b3c4:	f383 8811 	msr	BASEPRI, r3
 800b3c8:	f3bf 8f6f 	isb	sy
 800b3cc:	f3bf 8f4f 	dsb	sy
 800b3d0:	61bb      	str	r3, [r7, #24]
 800b3d2:	e7fe      	b.n	800b3d2 <FreeRTOS_IPInit+0x66>
	configASSERT( sizeof( IPHeader_t ) == ipEXPECTED_IPHeader_t_SIZE );
	configASSERT( sizeof( ICMPHeader_t ) == ipEXPECTED_ICMPHeader_t_SIZE );
	configASSERT( sizeof( UDPHeader_t ) == ipEXPECTED_UDPHeader_t_SIZE );

	/* Attempt to create the queue used to communicate with the IP task. */
	xNetworkEventQueue = xQueueCreate( ( UBaseType_t ) ipconfigEVENT_QUEUE_LENGTH, ( UBaseType_t ) sizeof( IPStackEvent_t ) );
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	2108      	movs	r1, #8
 800b3d8:	2041      	movs	r0, #65	; 0x41
 800b3da:	f7fd f89f 	bl	800851c <xQueueGenericCreate>
 800b3de:	4602      	mov	r2, r0
 800b3e0:	4b5c      	ldr	r3, [pc, #368]	; (800b554 <FreeRTOS_IPInit+0x1e8>)
 800b3e2:	601a      	str	r2, [r3, #0]
	configASSERT( xNetworkEventQueue );
 800b3e4:	4b5b      	ldr	r3, [pc, #364]	; (800b554 <FreeRTOS_IPInit+0x1e8>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d109      	bne.n	800b400 <FreeRTOS_IPInit+0x94>
 800b3ec:	f04f 0340 	mov.w	r3, #64	; 0x40
 800b3f0:	f383 8811 	msr	BASEPRI, r3
 800b3f4:	f3bf 8f6f 	isb	sy
 800b3f8:	f3bf 8f4f 	dsb	sy
 800b3fc:	617b      	str	r3, [r7, #20]
 800b3fe:	e7fe      	b.n	800b3fe <FreeRTOS_IPInit+0x92>

	if( xNetworkEventQueue != NULL )
 800b400:	4b54      	ldr	r3, [pc, #336]	; (800b554 <FreeRTOS_IPInit+0x1e8>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	f000 80a0 	beq.w	800b54a <FreeRTOS_IPInit+0x1de>
		#if ( configQUEUE_REGISTRY_SIZE > 0 )
		{
			/* A queue registry is normally used to assist a kernel aware
			debugger.  If one is in use then it will be helpful for the debugger
			to show information about the network event queue. */
			vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 800b40a:	4b52      	ldr	r3, [pc, #328]	; (800b554 <FreeRTOS_IPInit+0x1e8>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4953      	ldr	r1, [pc, #332]	; (800b55c <FreeRTOS_IPInit+0x1f0>)
 800b410:	4618      	mov	r0, r3
 800b412:	f7fd fcf7 	bl	8008e04 <vQueueAddToRegistry>
		}
		#endif /* configQUEUE_REGISTRY_SIZE */

		if( xNetworkBuffersInitialise() == pdPASS )
 800b416:	f005 f9d7 	bl	80107c8 <xNetworkBuffersInitialise>
 800b41a:	4603      	mov	r3, r0
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	f040 808c 	bne.w	800b53a <FreeRTOS_IPInit+0x1ce>
		{
			/* Store the local IP and MAC address. */
			xNetworkAddressing.ulDefaultIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	3303      	adds	r3, #3
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	061a      	lsls	r2, r3, #24
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	3302      	adds	r3, #2
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	041b      	lsls	r3, r3, #16
 800b432:	431a      	orrs	r2, r3
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	3301      	adds	r3, #1
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	021b      	lsls	r3, r3, #8
 800b43c:	4313      	orrs	r3, r2
 800b43e:	68fa      	ldr	r2, [r7, #12]
 800b440:	7812      	ldrb	r2, [r2, #0]
 800b442:	4313      	orrs	r3, r2
 800b444:	4a46      	ldr	r2, [pc, #280]	; (800b560 <FreeRTOS_IPInit+0x1f4>)
 800b446:	6013      	str	r3, [r2, #0]
			xNetworkAddressing.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	3303      	adds	r3, #3
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	061a      	lsls	r2, r3, #24
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	3302      	adds	r3, #2
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	041b      	lsls	r3, r3, #16
 800b458:	431a      	orrs	r2, r3
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	3301      	adds	r3, #1
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	021b      	lsls	r3, r3, #8
 800b462:	4313      	orrs	r3, r2
 800b464:	68ba      	ldr	r2, [r7, #8]
 800b466:	7812      	ldrb	r2, [r2, #0]
 800b468:	4313      	orrs	r3, r2
 800b46a:	4a3d      	ldr	r2, [pc, #244]	; (800b560 <FreeRTOS_IPInit+0x1f4>)
 800b46c:	6053      	str	r3, [r2, #4]
			xNetworkAddressing.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	3303      	adds	r3, #3
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	061a      	lsls	r2, r3, #24
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	3302      	adds	r3, #2
 800b47a:	781b      	ldrb	r3, [r3, #0]
 800b47c:	041b      	lsls	r3, r3, #16
 800b47e:	431a      	orrs	r2, r3
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	3301      	adds	r3, #1
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	021b      	lsls	r3, r3, #8
 800b488:	4313      	orrs	r3, r2
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	7812      	ldrb	r2, [r2, #0]
 800b48e:	4313      	orrs	r3, r2
 800b490:	4a33      	ldr	r2, [pc, #204]	; (800b560 <FreeRTOS_IPInit+0x1f4>)
 800b492:	6093      	str	r3, [r2, #8]
			xNetworkAddressing.ulDNSServerAddress = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	3303      	adds	r3, #3
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	061a      	lsls	r2, r3, #24
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	3302      	adds	r3, #2
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	041b      	lsls	r3, r3, #16
 800b4a4:	431a      	orrs	r2, r3
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	021b      	lsls	r3, r3, #8
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	683a      	ldr	r2, [r7, #0]
 800b4b2:	7812      	ldrb	r2, [r2, #0]
 800b4b4:	4313      	orrs	r3, r2
 800b4b6:	4a2a      	ldr	r2, [pc, #168]	; (800b560 <FreeRTOS_IPInit+0x1f4>)
 800b4b8:	60d3      	str	r3, [r2, #12]
			xNetworkAddressing.ulBroadcastAddress = ( xNetworkAddressing.ulDefaultIPAddress & xNetworkAddressing.ulNetMask ) |  ~xNetworkAddressing.ulNetMask;
 800b4ba:	4b29      	ldr	r3, [pc, #164]	; (800b560 <FreeRTOS_IPInit+0x1f4>)
 800b4bc:	681a      	ldr	r2, [r3, #0]
 800b4be:	4b28      	ldr	r3, [pc, #160]	; (800b560 <FreeRTOS_IPInit+0x1f4>)
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	43db      	mvns	r3, r3
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	4a26      	ldr	r2, [pc, #152]	; (800b560 <FreeRTOS_IPInit+0x1f4>)
 800b4c8:	6113      	str	r3, [r2, #16]

			memcpy( &xDefaultAddressing, &xNetworkAddressing, sizeof( xDefaultAddressing ) );
 800b4ca:	4a26      	ldr	r2, [pc, #152]	; (800b564 <FreeRTOS_IPInit+0x1f8>)
 800b4cc:	4b24      	ldr	r3, [pc, #144]	; (800b560 <FreeRTOS_IPInit+0x1f4>)
 800b4ce:	4614      	mov	r4, r2
 800b4d0:	461d      	mov	r5, r3
 800b4d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b4d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b4d6:	682b      	ldr	r3, [r5, #0]
 800b4d8:	6023      	str	r3, [r4, #0]
				*ipLOCAL_IP_ADDRESS_POINTER = 0x00UL;
			}
			#else
			{
				/* The IP address is set from the value passed in. */
				*ipLOCAL_IP_ADDRESS_POINTER = xNetworkAddressing.ulDefaultIPAddress;
 800b4da:	4b21      	ldr	r3, [pc, #132]	; (800b560 <FreeRTOS_IPInit+0x1f4>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4a22      	ldr	r2, [pc, #136]	; (800b568 <FreeRTOS_IPInit+0x1fc>)
 800b4e0:	6153      	str	r3, [r2, #20]

				/* Added to prevent ARP flood to gateway.  Ensure the
				gateway is on the same subnet as the IP	address. */
				configASSERT( ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) == ( xNetworkAddressing.ulGatewayAddress & xNetworkAddressing.ulNetMask ) );
 800b4e2:	4b21      	ldr	r3, [pc, #132]	; (800b568 <FreeRTOS_IPInit+0x1fc>)
 800b4e4:	695a      	ldr	r2, [r3, #20]
 800b4e6:	4b1e      	ldr	r3, [pc, #120]	; (800b560 <FreeRTOS_IPInit+0x1f4>)
 800b4e8:	689b      	ldr	r3, [r3, #8]
 800b4ea:	405a      	eors	r2, r3
 800b4ec:	4b1c      	ldr	r3, [pc, #112]	; (800b560 <FreeRTOS_IPInit+0x1f4>)
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	4013      	ands	r3, r2
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d009      	beq.n	800b50a <FreeRTOS_IPInit+0x19e>
 800b4f6:	f04f 0340 	mov.w	r3, #64	; 0x40
 800b4fa:	f383 8811 	msr	BASEPRI, r3
 800b4fe:	f3bf 8f6f 	isb	sy
 800b502:	f3bf 8f4f 	dsb	sy
 800b506:	613b      	str	r3, [r7, #16]
 800b508:	e7fe      	b.n	800b508 <FreeRTOS_IPInit+0x19c>
			}
			#endif /* ipconfigUSE_DHCP == 1 */

			/* The MAC address is stored in the start of the default packet
			header fragment, which is used when sending UDP packets. */
			memcpy( ( void * ) ipLOCAL_MAC_ADDRESS, ( void * ) ucMACAddress, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800b50a:	2206      	movs	r2, #6
 800b50c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b50e:	4816      	ldr	r0, [pc, #88]	; (800b568 <FreeRTOS_IPInit+0x1fc>)
 800b510:	f005 fd75 	bl	8010ffe <memcpy>

			/* Prepare the sockets interface. */
            xReturn = vNetworkSocketsInit();
 800b514:	f000 fd96 	bl	800c044 <vNetworkSocketsInit>
 800b518:	6278      	str	r0, [r7, #36]	; 0x24
            
            if( pdTRUE == xReturn )
 800b51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d114      	bne.n	800b54a <FreeRTOS_IPInit+0x1de>
            {
                /* Create the task that processes Ethernet and stack events. */
                xReturn = xTaskCreate( prvIPTask, "IP-task", ( uint16_t )ipconfigIP_TASK_STACK_SIZE_WORDS, NULL, ( UBaseType_t )ipconfigIP_TASK_PRIORITY, &xIPTaskHandle );
 800b520:	4b0d      	ldr	r3, [pc, #52]	; (800b558 <FreeRTOS_IPInit+0x1ec>)
 800b522:	9301      	str	r3, [sp, #4]
 800b524:	2305      	movs	r3, #5
 800b526:	9300      	str	r3, [sp, #0]
 800b528:	2300      	movs	r3, #0
 800b52a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b52e:	490f      	ldr	r1, [pc, #60]	; (800b56c <FreeRTOS_IPInit+0x200>)
 800b530:	480f      	ldr	r0, [pc, #60]	; (800b570 <FreeRTOS_IPInit+0x204>)
 800b532:	f7fd fcb9 	bl	8008ea8 <xTaskCreate>
 800b536:	6278      	str	r0, [r7, #36]	; 0x24
 800b538:	e007      	b.n	800b54a <FreeRTOS_IPInit+0x1de>
		else
		{
			FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: xNetworkBuffersInitialise() failed\n") );

			/* Clean up. */
			vQueueDelete( xNetworkEventQueue );
 800b53a:	4b06      	ldr	r3, [pc, #24]	; (800b554 <FreeRTOS_IPInit+0x1e8>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4618      	mov	r0, r3
 800b540:	f7fd fb33 	bl	8008baa <vQueueDelete>
			xNetworkEventQueue = NULL;
 800b544:	4b03      	ldr	r3, [pc, #12]	; (800b554 <FreeRTOS_IPInit+0x1e8>)
 800b546:	2200      	movs	r2, #0
 800b548:	601a      	str	r2, [r3, #0]
	else
	{
		FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: Network event queue could not be created\n") );
	}

	return xReturn;
 800b54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3728      	adds	r7, #40	; 0x28
 800b550:	46bd      	mov	sp, r7
 800b552:	bdb0      	pop	{r4, r5, r7, pc}
 800b554:	20004e58 	.word	0x20004e58
 800b558:	20004e8c 	.word	0x20004e8c
 800b55c:	080113c0 	.word	0x080113c0
 800b560:	20004e60 	.word	0x20004e60
 800b564:	20004e74 	.word	0x20004e74
 800b568:	200001b0 	.word	0x200001b0
 800b56c:	080113c8 	.word	0x080113c8
 800b570:	0800af1d 	.word	0x0800af1d

0800b574 <xSendEventToIPTask>:

#endif /* ipconfigSUPPORT_OUTGOING_PINGS == 1 */
/*-----------------------------------------------------------*/

BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b086      	sub	sp, #24
 800b578:	af00      	add	r7, sp, #0
 800b57a:	4603      	mov	r3, r0
 800b57c:	71fb      	strb	r3, [r7, #7]
IPStackEvent_t xEventMessage;
const TickType_t xDontBlock = ( TickType_t ) 0;
 800b57e:	2300      	movs	r3, #0
 800b580:	617b      	str	r3, [r7, #20]

	xEventMessage.eEventType = eEvent;
 800b582:	79fb      	ldrb	r3, [r7, #7]
 800b584:	733b      	strb	r3, [r7, #12]
	xEventMessage.pvData = ( void* )NULL;
 800b586:	2300      	movs	r3, #0
 800b588:	613b      	str	r3, [r7, #16]

	return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 800b58a:	f107 030c 	add.w	r3, r7, #12
 800b58e:	6979      	ldr	r1, [r7, #20]
 800b590:	4618      	mov	r0, r3
 800b592:	f000 f805 	bl	800b5a0 <xSendEventStructToIPTask>
 800b596:	4603      	mov	r3, r0
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3718      	adds	r7, #24
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <xSendEventStructToIPTask>:
/*-----------------------------------------------------------*/

BaseType_t xSendEventStructToIPTask( const IPStackEvent_t *pxEvent, TickType_t xTimeout )
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn, xSendMessage;

	if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 800b5aa:	f000 fca1 	bl	800bef0 <xIPIsNetworkTaskReady>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d107      	bne.n	800b5c4 <xSendEventStructToIPTask+0x24>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f993 3000 	ldrsb.w	r3, [r3]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d002      	beq.n	800b5c4 <xSendEventStructToIPTask+0x24>
	{
		/* Only allow eNetworkDownEvent events if the IP task is not ready
		yet.  Not going to attempt to send the message so the send failed. */
		xReturn = pdFAIL;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	60fb      	str	r3, [r7, #12]
 800b5c2:	e02d      	b.n	800b620 <xSendEventStructToIPTask+0x80>
	}
	else
	{
		xSendMessage = pdTRUE;
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	60bb      	str	r3, [r7, #8]

		#if( ipconfigUSE_TCP == 1 )
		{
			if( pxEvent->eEventType == eTCPTimerEvent )
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f993 3000 	ldrsb.w	r3, [r3]
 800b5ce:	2b05      	cmp	r3, #5
 800b5d0:	d10e      	bne.n	800b5f0 <xSendEventStructToIPTask+0x50>
			{
				/* TCP timer events are sent to wake the timer task when
				xTCPTimer has expired, but there is no point sending them if the
				IP task is already awake processing other message. */
				xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 800b5d2:	4a16      	ldr	r2, [pc, #88]	; (800b62c <xSendEventStructToIPTask+0x8c>)
 800b5d4:	7813      	ldrb	r3, [r2, #0]
 800b5d6:	f043 0302 	orr.w	r3, r3, #2
 800b5da:	7013      	strb	r3, [r2, #0]

				if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0u )
 800b5dc:	4b14      	ldr	r3, [pc, #80]	; (800b630 <xSendEventStructToIPTask+0x90>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f7fd fac5 	bl	8008b70 <uxQueueMessagesWaiting>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d001      	beq.n	800b5f0 <xSendEventStructToIPTask+0x50>
				{
					/* Not actually going to send the message but this is not a
					failure as the message didn't need to be sent. */
					xSendMessage = pdFALSE;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	60bb      	str	r3, [r7, #8]
				}
			}
		}
		#endif /* ipconfigUSE_TCP */

		if( xSendMessage != pdFALSE )
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d012      	beq.n	800b61c <xSendEventStructToIPTask+0x7c>
		{
			/* The IP task cannot block itself while waiting for itself to
			respond. */
			if( ( xIsCallingFromIPTask() == pdTRUE ) && ( xTimeout > ( TickType_t ) 0 ) )
 800b5f6:	f7ff fd41 	bl	800b07c <xIsCallingFromIPTask>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d104      	bne.n	800b60a <xSendEventStructToIPTask+0x6a>
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d001      	beq.n	800b60a <xSendEventStructToIPTask+0x6a>
			{
				xTimeout = ( TickType_t ) 0;
 800b606:	2300      	movs	r3, #0
 800b608:	603b      	str	r3, [r7, #0]
			}

			xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, xTimeout );
 800b60a:	4b09      	ldr	r3, [pc, #36]	; (800b630 <xSendEventStructToIPTask+0x90>)
 800b60c:	6818      	ldr	r0, [r3, #0]
 800b60e:	2300      	movs	r3, #0
 800b610:	683a      	ldr	r2, [r7, #0]
 800b612:	6879      	ldr	r1, [r7, #4]
 800b614:	f7fd f80c 	bl	8008630 <xQueueGenericSend>
 800b618:	60f8      	str	r0, [r7, #12]
 800b61a:	e001      	b.n	800b620 <xSendEventStructToIPTask+0x80>
		}
		else
		{
			/* It was not necessary to send the message to process the event so
			even though the message was not sent the call was successful. */
			xReturn = pdPASS;
 800b61c:	2301      	movs	r3, #1
 800b61e:	60fb      	str	r3, [r7, #12]
		}
	}

	return xReturn;
 800b620:	68fb      	ldr	r3, [r7, #12]
}
 800b622:	4618      	mov	r0, r3
 800b624:	3710      	adds	r7, #16
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	20004eac 	.word	0x20004eac
 800b630:	20004e58 	.word	0x20004e58

0800b634 <eConsiderFrameForProcessing>:
/*-----------------------------------------------------------*/

eFrameProcessingResult_t eConsiderFrameForProcessing( const uint8_t * const pucEthernetBuffer )
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b086      	sub	sp, #24
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
eFrameProcessingResult_t eReturn;
const EthernetHeader_t *pxEthernetHeader;

	pxEthernetHeader = ( const EthernetHeader_t * ) pucEthernetBuffer;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	613b      	str	r3, [r7, #16]

	if( memcmp( ( void * ) ipLOCAL_MAC_ADDRESS, ( void * ) &( pxEthernetHeader->xDestinationAddress ), sizeof( MACAddress_t ) ) == 0 )
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	2206      	movs	r2, #6
 800b644:	4619      	mov	r1, r3
 800b646:	4820      	ldr	r0, [pc, #128]	; (800b6c8 <eConsiderFrameForProcessing+0x94>)
 800b648:	f005 fcca 	bl	8010fe0 <memcmp>
 800b64c:	4603      	mov	r3, r0
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d102      	bne.n	800b658 <eConsiderFrameForProcessing+0x24>
	{
		/* The packet was directed to this node directly - process it. */
		eReturn = eProcessBuffer;
 800b652:	2301      	movs	r3, #1
 800b654:	75fb      	strb	r3, [r7, #23]
 800b656:	e019      	b.n	800b68c <eConsiderFrameForProcessing+0x58>
	}
	else if( memcmp( ( void * ) xBroadcastMACAddress.ucBytes, ( void * ) pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	2206      	movs	r2, #6
 800b65c:	4619      	mov	r1, r3
 800b65e:	481b      	ldr	r0, [pc, #108]	; (800b6cc <eConsiderFrameForProcessing+0x98>)
 800b660:	f005 fcbe 	bl	8010fe0 <memcmp>
 800b664:	4603      	mov	r3, r0
 800b666:	2b00      	cmp	r3, #0
 800b668:	d102      	bne.n	800b670 <eConsiderFrameForProcessing+0x3c>
	{
		/* The packet was a broadcast - process it. */
		eReturn = eProcessBuffer;
 800b66a:	2301      	movs	r3, #1
 800b66c:	75fb      	strb	r3, [r7, #23]
 800b66e:	e00d      	b.n	800b68c <eConsiderFrameForProcessing+0x58>
	}
	else
#if( ipconfigUSE_LLMNR == 1 )
	if( memcmp( ( void * ) xLLMNR_MacAdress.ucBytes, ( void * ) pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	2206      	movs	r2, #6
 800b674:	4619      	mov	r1, r3
 800b676:	4816      	ldr	r0, [pc, #88]	; (800b6d0 <eConsiderFrameForProcessing+0x9c>)
 800b678:	f005 fcb2 	bl	8010fe0 <memcmp>
 800b67c:	4603      	mov	r3, r0
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d102      	bne.n	800b688 <eConsiderFrameForProcessing+0x54>
	{
		/* The packet is a request for LLMNR - process it. */
		eReturn = eProcessBuffer;
 800b682:	2301      	movs	r3, #1
 800b684:	75fb      	strb	r3, [r7, #23]
 800b686:	e001      	b.n	800b68c <eConsiderFrameForProcessing+0x58>
	else
#endif /* ipconfigUSE_LLMNR */
	{
		/* The packet was not a broadcast, or for this node, just release
		the buffer without taking any other action. */
		eReturn = eReleaseBuffer;
 800b688:	2300      	movs	r3, #0
 800b68a:	75fb      	strb	r3, [r7, #23]

	#if( ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1 )
	{
	uint16_t usFrameType;

		if( eReturn == eProcessBuffer )
 800b68c:	7dfb      	ldrb	r3, [r7, #23]
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d115      	bne.n	800b6be <eConsiderFrameForProcessing+0x8a>
		{
			usFrameType = pxEthernetHeader->usFrameType;
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	7b1a      	ldrb	r2, [r3, #12]
 800b696:	7b5b      	ldrb	r3, [r3, #13]
 800b698:	021b      	lsls	r3, r3, #8
 800b69a:	4313      	orrs	r3, r2
 800b69c:	81fb      	strh	r3, [r7, #14]
			usFrameType = FreeRTOS_ntohs( usFrameType );
 800b69e:	89fb      	ldrh	r3, [r7, #14]
 800b6a0:	021b      	lsls	r3, r3, #8
 800b6a2:	b21a      	sxth	r2, r3
 800b6a4:	89fb      	ldrh	r3, [r7, #14]
 800b6a6:	0a1b      	lsrs	r3, r3, #8
 800b6a8:	b29b      	uxth	r3, r3
 800b6aa:	b21b      	sxth	r3, r3
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	b21b      	sxth	r3, r3
 800b6b0:	81fb      	strh	r3, [r7, #14]

			if( usFrameType <= 0x600U )
 800b6b2:	89fb      	ldrh	r3, [r7, #14]
 800b6b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b6b8:	d801      	bhi.n	800b6be <eConsiderFrameForProcessing+0x8a>
			{
				/* Not an Ethernet II frame. */
				eReturn = eReleaseBuffer;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	75fb      	strb	r3, [r7, #23]
			}
		}
	}
	#endif /* ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1  */

	return eReturn;
 800b6be:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3718      	adds	r7, #24
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}
 800b6c8:	200001b0 	.word	0x200001b0
 800b6cc:	080114e4 	.word	0x080114e4
 800b6d0:	080114dc 	.word	0x080114dc

0800b6d4 <prvProcessNetworkDownEvent>:
/*-----------------------------------------------------------*/

static void prvProcessNetworkDownEvent( void )
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	af00      	add	r7, sp, #0
	/* Stop the ARP timer while there is no network. */
	xARPTimer.bActive = pdFALSE_UNSIGNED;
 800b6d8:	4a0a      	ldr	r2, [pc, #40]	; (800b704 <prvProcessNetworkDownEvent+0x30>)
 800b6da:	7813      	ldrb	r3, [r2, #0]
 800b6dc:	f36f 0300 	bfc	r3, #0, #1
 800b6e0:	7013      	strb	r3, [r2, #0]
	#endif

	/* The network has been disconnected (or is being initialised for the first
	time).  Perform whatever hardware processing is necessary to bring it up
	again, or wait for it to be available again.  This is hardware dependent. */
	if( xNetworkInterfaceInitialise() != pdPASS )
 800b6e2:	f7f9 fd79 	bl	80051d8 <xNetworkInterfaceInitialise>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	d006      	beq.n	800b6fa <prvProcessNetworkDownEvent+0x26>
	{
		/* Ideally the network interface initialisation function will only
		return when the network is available.  In case this is not the case,
		wait a while before retrying the initialisation. */
		vTaskDelay( ipINITIALISATION_RETRY_DELAY );
 800b6ec:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800b6f0:	f7fd fd0c 	bl	800910c <vTaskDelay>
		FreeRTOS_NetworkDown();
 800b6f4:	f7ff fdb0 	bl	800b258 <FreeRTOS_NetworkDown>
			/* Perform any necessary 'network up' processing. */
			vIPNetworkUpCalls();
		}
		#endif
	}
}
 800b6f8:	e001      	b.n	800b6fe <prvProcessNetworkDownEvent+0x2a>
			vIPNetworkUpCalls();
 800b6fa:	f000 f805 	bl	800b708 <vIPNetworkUpCalls>
}
 800b6fe:	bf00      	nop
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	20004e98 	.word	0x20004e98

0800b708 <vIPNetworkUpCalls>:
/*-----------------------------------------------------------*/

void vIPNetworkUpCalls( void )
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	af00      	add	r7, sp, #0
	xNetworkUp = pdTRUE;
 800b70c:	4b04      	ldr	r3, [pc, #16]	; (800b720 <vIPNetworkUpCalls+0x18>)
 800b70e:	2201      	movs	r2, #1
 800b710:	601a      	str	r2, [r3, #0]
		vDNSInitialise();
	}
	#endif /* ipconfigDNS_USE_CALLBACKS != 0 */

	/* Set remaining time to 0 so it will become active immediately. */
	prvIPTimerReload( &xARPTimer, pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 800b712:	f242 7110 	movw	r1, #10000	; 0x2710
 800b716:	4803      	ldr	r0, [pc, #12]	; (800b724 <vIPNetworkUpCalls+0x1c>)
 800b718:	f7ff fd5e 	bl	800b1d8 <prvIPTimerReload>
}
 800b71c:	bf00      	nop
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	20004e94 	.word	0x20004e94
 800b724:	20004e98 	.word	0x20004e98

0800b728 <prvProcessEthernetPacket>:
/*-----------------------------------------------------------*/

static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b086      	sub	sp, #24
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
EthernetHeader_t *pxEthernetHeader;
eFrameProcessingResult_t eReturned = eReleaseBuffer;
 800b730:	2300      	movs	r3, #0
 800b732:	75fb      	strb	r3, [r7, #23]

	configASSERT( pxNetworkBuffer );
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d109      	bne.n	800b74e <prvProcessEthernetPacket+0x26>
 800b73a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800b73e:	f383 8811 	msr	BASEPRI, r3
 800b742:	f3bf 8f6f 	isb	sy
 800b746:	f3bf 8f4f 	dsb	sy
 800b74a:	60fb      	str	r3, [r7, #12]
 800b74c:	e7fe      	b.n	800b74c <prvProcessEthernetPacket+0x24>

	/* Interpret the Ethernet frame. */
    if( pxNetworkBuffer->xDataLength >= sizeof( EthernetHeader_t ) )
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	69db      	ldr	r3, [r3, #28]
 800b752:	2b0d      	cmp	r3, #13
 800b754:	d931      	bls.n	800b7ba <prvProcessEthernetPacket+0x92>
    {
        eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 800b756:	2301      	movs	r3, #1
 800b758:	75fb      	strb	r3, [r7, #23]
        pxEthernetHeader = ( EthernetHeader_t * )( pxNetworkBuffer->pucEthernetBuffer );
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	699b      	ldr	r3, [r3, #24]
 800b75e:	613b      	str	r3, [r7, #16]

        if( eReturned == eProcessBuffer )
 800b760:	7dfb      	ldrb	r3, [r7, #23]
 800b762:	2b01      	cmp	r3, #1
 800b764:	d129      	bne.n	800b7ba <prvProcessEthernetPacket+0x92>
        {
            /* Interpret the received Ethernet packet. */
            switch( pxEthernetHeader->usFrameType )
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	899b      	ldrh	r3, [r3, #12]
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	2b08      	cmp	r3, #8
 800b76e:	d011      	beq.n	800b794 <prvProcessEthernetPacket+0x6c>
 800b770:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800b774:	d11e      	bne.n	800b7b4 <prvProcessEthernetPacket+0x8c>
            {
            case ipARP_FRAME_TYPE:
                /* The Ethernet frame contains an ARP packet. */
                if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	69db      	ldr	r3, [r3, #28]
 800b77a:	2b29      	cmp	r3, #41	; 0x29
 800b77c:	d907      	bls.n	800b78e <prvProcessEthernetPacket+0x66>
                {
                    eReturned = eARPProcessPacket( ( ARPPacket_t * )pxNetworkBuffer->pucEthernetBuffer );
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	699b      	ldr	r3, [r3, #24]
 800b782:	4618      	mov	r0, r3
 800b784:	f7fe fbf0 	bl	8009f68 <eARPProcessPacket>
 800b788:	4603      	mov	r3, r0
 800b78a:	75fb      	strb	r3, [r7, #23]
                }
                else
                {
                    eReturned = eReleaseBuffer;
                }
                break;
 800b78c:	e015      	b.n	800b7ba <prvProcessEthernetPacket+0x92>
                    eReturned = eReleaseBuffer;
 800b78e:	2300      	movs	r3, #0
 800b790:	75fb      	strb	r3, [r7, #23]
                break;
 800b792:	e012      	b.n	800b7ba <prvProcessEthernetPacket+0x92>

            case ipIPv4_FRAME_TYPE:
                /* The Ethernet frame contains an IP packet. */
                if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	69db      	ldr	r3, [r3, #28]
 800b798:	2b21      	cmp	r3, #33	; 0x21
 800b79a:	d908      	bls.n	800b7ae <prvProcessEthernetPacket+0x86>
                {
                    eReturned = prvProcessIPPacket( ( IPPacket_t * )pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer );
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	699b      	ldr	r3, [r3, #24]
 800b7a0:	6879      	ldr	r1, [r7, #4]
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f000 f868 	bl	800b878 <prvProcessIPPacket>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	75fb      	strb	r3, [r7, #23]
                }
                else
                {
                    eReturned = eReleaseBuffer;
                }
                break;
 800b7ac:	e005      	b.n	800b7ba <prvProcessEthernetPacket+0x92>
                    eReturned = eReleaseBuffer;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	75fb      	strb	r3, [r7, #23]
                break;
 800b7b2:	e002      	b.n	800b7ba <prvProcessEthernetPacket+0x92>

            default:
                /* No other packet types are handled.  Nothing to do. */
                eReturned = eReleaseBuffer;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	75fb      	strb	r3, [r7, #23]
                break;
 800b7b8:	bf00      	nop
            }
        }
    }

	/* Perform any actions that resulted from processing the Ethernet frame. */
	switch( eReturned )
 800b7ba:	7dfb      	ldrb	r3, [r7, #23]
 800b7bc:	2b02      	cmp	r3, #2
 800b7be:	d002      	beq.n	800b7c6 <prvProcessEthernetPacket+0x9e>
 800b7c0:	2b03      	cmp	r3, #3
 800b7c2:	d009      	beq.n	800b7d8 <prvProcessEthernetPacket+0xb0>
 800b7c4:	e004      	b.n	800b7d0 <prvProcessEthernetPacket+0xa8>
	{
		case eReturnEthernetFrame :
			/* The Ethernet frame will have been updated (maybe it was
			an ARP request or a PING request?) and should be sent back to
			its source. */
			vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 800b7c6:	2101      	movs	r1, #1
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 fb71 	bl	800beb0 <vReturnEthernetFrame>
			/* parameter pdTRUE: the buffer must be released once
			the frame has been transmitted */
			break;
 800b7ce:	e004      	b.n	800b7da <prvProcessEthernetPacket+0xb2>

		default :
			/* The frame is not being used anywhere, and the
			NetworkBufferDescriptor_t structure containing the frame should
			just be	released back to the list of free buffers. */
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f005 f8ff 	bl	80109d4 <vReleaseNetworkBufferAndDescriptor>
			break;
 800b7d6:	e000      	b.n	800b7da <prvProcessEthernetPacket+0xb2>
			break;
 800b7d8:	bf00      	nop
	}
}
 800b7da:	bf00      	nop
 800b7dc:	3718      	adds	r7, #24
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
	...

0800b7e4 <prvAllowIPPacket>:
/*-----------------------------------------------------------*/

static eFrameProcessingResult_t prvAllowIPPacket( const IPPacket_t * const pxIPPacket,
	NetworkBufferDescriptor_t * const pxNetworkBuffer, UBaseType_t uxHeaderLength )
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b089      	sub	sp, #36	; 0x24
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	60f8      	str	r0, [r7, #12]
 800b7ec:	60b9      	str	r1, [r7, #8]
 800b7ee:	607a      	str	r2, [r7, #4]
eFrameProcessingResult_t eReturn = eProcessBuffer;
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	77fb      	strb	r3, [r7, #31]

#if( ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) || ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) )
	const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	330e      	adds	r3, #14
 800b7f8:	61bb      	str	r3, [r7, #24]
	#if( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 )
	{
		/* In systems with a very small amount of RAM, it might be advantageous
		to have incoming messages checked earlier, by the network card driver.
		This method may decrease the usage of sparse network buffers. */
		uint32_t ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 800b7fa:	69bb      	ldr	r3, [r7, #24]
 800b7fc:	691b      	ldr	r3, [r3, #16]
 800b7fe:	617b      	str	r3, [r7, #20]

			/* Ensure that the incoming packet is not fragmented (only outgoing
			packets can be fragmented) as these are the only handled IP frames
			currently. */
			if( ( pxIPHeader->usFragmentOffset & ipFRAGMENT_OFFSET_BIT_MASK ) != 0U )
 800b800:	69bb      	ldr	r3, [r7, #24]
 800b802:	88db      	ldrh	r3, [r3, #6]
 800b804:	b29b      	uxth	r3, r3
 800b806:	461a      	mov	r2, r3
 800b808:	f64f 730f 	movw	r3, #65295	; 0xff0f
 800b80c:	4013      	ands	r3, r2
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d002      	beq.n	800b818 <prvAllowIPPacket+0x34>
			{
				/* Can not handle, fragmented packet. */
				eReturn = eReleaseBuffer;
 800b812:	2300      	movs	r3, #0
 800b814:	77fb      	strb	r3, [r7, #31]
 800b816:	e022      	b.n	800b85e <prvAllowIPPacket+0x7a>
			}
			/* 0x45 means: IPv4 with an IP header of 5 x 4 = 20 bytes
			 * 0x47 means: IPv4 with an IP header of 7 x 4 = 28 bytes */
			else if( ( pxIPHeader->ucVersionHeaderLength < 0x45u ) || ( pxIPHeader->ucVersionHeaderLength > 0x4Fu ) )
 800b818:	69bb      	ldr	r3, [r7, #24]
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	2b44      	cmp	r3, #68	; 0x44
 800b81e:	d903      	bls.n	800b828 <prvAllowIPPacket+0x44>
 800b820:	69bb      	ldr	r3, [r7, #24]
 800b822:	781b      	ldrb	r3, [r3, #0]
 800b824:	2b4f      	cmp	r3, #79	; 0x4f
 800b826:	d902      	bls.n	800b82e <prvAllowIPPacket+0x4a>
			{
				/* Can not handle, unknown or invalid header version. */
				eReturn = eReleaseBuffer;
 800b828:	2300      	movs	r3, #0
 800b82a:	77fb      	strb	r3, [r7, #31]
 800b82c:	e017      	b.n	800b85e <prvAllowIPPacket+0x7a>
			}
				/* Is the packet for this IP address? */
			else if( ( ulDestinationIPAddress != *ipLOCAL_IP_ADDRESS_POINTER ) &&
 800b82e:	4b0f      	ldr	r3, [pc, #60]	; (800b86c <prvAllowIPPacket+0x88>)
 800b830:	695a      	ldr	r2, [r3, #20]
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	429a      	cmp	r2, r3
 800b836:	d012      	beq.n	800b85e <prvAllowIPPacket+0x7a>
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b83e:	d00e      	beq.n	800b85e <prvAllowIPPacket+0x7a>
				/* Is it the global broadcast address 255.255.255.255 ? */
				( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
				/* Is it a specific broadcast address 192.168.1.255 ? */
				( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 800b840:	4b0b      	ldr	r3, [pc, #44]	; (800b870 <prvAllowIPPacket+0x8c>)
 800b842:	691a      	ldr	r2, [r3, #16]
				( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	429a      	cmp	r2, r3
 800b848:	d009      	beq.n	800b85e <prvAllowIPPacket+0x7a>
				( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	4a09      	ldr	r2, [pc, #36]	; (800b874 <prvAllowIPPacket+0x90>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d005      	beq.n	800b85e <prvAllowIPPacket+0x7a>
			#if( ipconfigUSE_LLMNR == 1 )
				/* Is it the LLMNR multicast address? */
				( ulDestinationIPAddress != ipLLMNR_IP_ADDR ) &&
			#endif
				/* Or (during DHCP negotiation) we have no IP-address yet? */
				( *ipLOCAL_IP_ADDRESS_POINTER != 0UL ) )
 800b852:	4b06      	ldr	r3, [pc, #24]	; (800b86c <prvAllowIPPacket+0x88>)
 800b854:	695b      	ldr	r3, [r3, #20]
				( ulDestinationIPAddress != ipLLMNR_IP_ADDR ) &&
 800b856:	2b00      	cmp	r3, #0
 800b858:	d001      	beq.n	800b85e <prvAllowIPPacket+0x7a>
			{
				/* Packet is not for this node, release it */
				eReturn = eReleaseBuffer;
 800b85a:	2300      	movs	r3, #0
 800b85c:	77fb      	strb	r3, [r7, #31]
		( void ) pxNetworkBuffer;
		( void ) uxHeaderLength;
	}
	#endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */

	return eReturn;
 800b85e:	7ffb      	ldrb	r3, [r7, #31]
}
 800b860:	4618      	mov	r0, r3
 800b862:	3724      	adds	r7, #36	; 0x24
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr
 800b86c:	200001b0 	.word	0x200001b0
 800b870:	20004e60 	.word	0x20004e60
 800b874:	fc0000e0 	.word	0xfc0000e0

0800b878 <prvProcessIPPacket>:
/*-----------------------------------------------------------*/

static eFrameProcessingResult_t prvProcessIPPacket( IPPacket_t * const pxIPPacket, NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b08c      	sub	sp, #48	; 0x30
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	6039      	str	r1, [r7, #0]
eFrameProcessingResult_t eReturn;
IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	330e      	adds	r3, #14
 800b886:	62bb      	str	r3, [r7, #40]	; 0x28
UBaseType_t uxHeaderLength = ( UBaseType_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0x0Fu ) << 2 );
 800b888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88a:	781b      	ldrb	r3, [r3, #0]
 800b88c:	009b      	lsls	r3, r3, #2
 800b88e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800b892:	627b      	str	r3, [r7, #36]	; 0x24
uint8_t ucProtocol;

    /* Bound the calculated header length: take away the Ethernet header size,
    then check if the IP header is claiming to be longer than the remaining
    total packet size. Also check for minimal header field length. */
    if( uxHeaderLength > pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ||
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	69db      	ldr	r3, [r3, #28]
 800b898:	f1a3 020e 	sub.w	r2, r3, #14
 800b89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d302      	bcc.n	800b8a8 <prvProcessIPPacket+0x30>
 800b8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a4:	2b13      	cmp	r3, #19
 800b8a6:	d801      	bhi.n	800b8ac <prvProcessIPPacket+0x34>
        uxHeaderLength < ipSIZE_OF_IPv4_HEADER )
    {
        return eReleaseBuffer;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	e0cb      	b.n	800ba44 <prvProcessIPPacket+0x1cc>
    }

	ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	7ddb      	ldrb	r3, [r3, #23]
 800b8b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	/* Check if the IP headers are acceptable and if it has our destination. */
	eReturn = prvAllowIPPacket( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 800b8b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8b6:	6839      	ldr	r1, [r7, #0]
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f7ff ff93 	bl	800b7e4 <prvAllowIPPacket>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if( eReturn == eProcessBuffer )
 800b8c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	f040 80b9 	bne.w	800ba40 <prvProcessIPPacket+0x1c8>
	{
		if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 800b8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d0:	2b14      	cmp	r3, #20
 800b8d2:	d927      	bls.n	800b924 <prvProcessIPPacket+0xac>
		{
			/* All structs of headers expect a IP header size of 20 bytes
			 * IP header options were included, we'll ignore them and cut them out
			 * Note: IP options are mostly use in Multi-cast protocols */
			const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 800b8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d6:	3b14      	subs	r3, #20
 800b8d8:	61fb      	str	r3, [r7, #28]
			/* From: the previous start of UDP/ICMP/TCP data */
			uint8_t *pucSource = ( uint8_t* )(pxNetworkBuffer->pucEthernetBuffer + sizeof( EthernetHeader_t ) + uxHeaderLength);
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	699a      	ldr	r2, [r3, #24]
 800b8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e0:	330e      	adds	r3, #14
 800b8e2:	4413      	add	r3, r2
 800b8e4:	61bb      	str	r3, [r7, #24]
			/* To: the usual start of UDP/ICMP/TCP data at offset 20 from IP header */
			uint8_t *pucTarget = ( uint8_t* )(pxNetworkBuffer->pucEthernetBuffer + sizeof( EthernetHeader_t ) + ipSIZE_OF_IPv4_HEADER);
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	699b      	ldr	r3, [r3, #24]
 800b8ea:	3322      	adds	r3, #34	; 0x22
 800b8ec:	617b      	str	r3, [r7, #20]
			/* How many: total length minus the options and the lower headers */
			const size_t  xMoveLen = pxNetworkBuffer->xDataLength - optlen - ipSIZE_OF_IPv4_HEADER - ipSIZE_OF_ETH_HEADER;
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	69da      	ldr	r2, [r3, #28]
 800b8f2:	69fb      	ldr	r3, [r7, #28]
 800b8f4:	1ad3      	subs	r3, r2, r3
 800b8f6:	3b22      	subs	r3, #34	; 0x22
 800b8f8:	613b      	str	r3, [r7, #16]

			memmove( pucTarget, pucSource, xMoveLen );
 800b8fa:	693a      	ldr	r2, [r7, #16]
 800b8fc:	69b9      	ldr	r1, [r7, #24]
 800b8fe:	6978      	ldr	r0, [r7, #20]
 800b900:	f005 fb88 	bl	8011014 <memmove>
			pxNetworkBuffer->xDataLength -= optlen;
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	69da      	ldr	r2, [r3, #28]
 800b908:	69fb      	ldr	r3, [r7, #28]
 800b90a:	1ad2      	subs	r2, r2, r3
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	61da      	str	r2, [r3, #28]

            /* Fix-up new version/header length field in IP packet. */
            pxIPHeader->ucVersionHeaderLength =
                ( pxIPHeader->ucVersionHeaderLength & 0xF0 ) | /* High nibble is the version. */
 800b910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	f023 030f 	bic.w	r3, r3, #15
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	f043 0305 	orr.w	r3, r3, #5
 800b91e:	b2da      	uxtb	r2, r3
            pxIPHeader->ucVersionHeaderLength =
 800b920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b922:	701a      	strb	r2, [r3, #0]
		}

		/* Add the IP and MAC addresses to the ARP table if they are not
		already there - otherwise refresh the age of the existing
		entry. */
		if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 800b924:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b928:	2b11      	cmp	r3, #17
 800b92a:	d007      	beq.n	800b93c <prvProcessIPPacket+0xc4>
			 * For UDP packets, this will be done later in xProcessReceivedUDPPacket()
			 * as soon as know that the message will be handled by someone
			 * This will prevent that the ARP cache will get overwritten
			 * with the IP-address of useless broadcast packets
			 */
			vARPRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	1d9a      	adds	r2, r3, #6
 800b930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b932:	68db      	ldr	r3, [r3, #12]
 800b934:	4619      	mov	r1, r3
 800b936:	4610      	mov	r0, r2
 800b938:	f7fe fb90 	bl	800a05c <vARPRefreshCacheEntry>
		}
		switch( ucProtocol )
 800b93c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b940:	2b06      	cmp	r3, #6
 800b942:	d06b      	beq.n	800ba1c <prvProcessIPPacket+0x1a4>
 800b944:	2b11      	cmp	r3, #17
 800b946:	d01a      	beq.n	800b97e <prvProcessIPPacket+0x106>
 800b948:	2b01      	cmp	r3, #1
 800b94a:	d000      	beq.n	800b94e <prvProcessIPPacket+0xd6>
				}
				break;
#endif
			default	:
				/* Not a supported frame type. */
				break;
 800b94c:	e078      	b.n	800ba40 <prvProcessIPPacket+0x1c8>
                    if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	69db      	ldr	r3, [r3, #28]
 800b952:	2b29      	cmp	r3, #41	; 0x29
 800b954:	d90f      	bls.n	800b976 <prvProcessIPPacket+0xfe>
                        ICMPPacket_t *pxICMPPacket = ( ICMPPacket_t * )( pxNetworkBuffer->pucEthernetBuffer );
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	699b      	ldr	r3, [r3, #24]
 800b95a:	60fb      	str	r3, [r7, #12]
                        if( pxIPHeader->ulDestinationIPAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 800b95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b95e:	691a      	ldr	r2, [r3, #16]
 800b960:	4b3a      	ldr	r3, [pc, #232]	; (800ba4c <prvProcessIPPacket+0x1d4>)
 800b962:	695b      	ldr	r3, [r3, #20]
 800b964:	429a      	cmp	r2, r3
 800b966:	d168      	bne.n	800ba3a <prvProcessIPPacket+0x1c2>
                            eReturn = prvProcessICMPPacket( pxICMPPacket );
 800b968:	68f8      	ldr	r0, [r7, #12]
 800b96a:	f000 f8cb 	bl	800bb04 <prvProcessICMPPacket>
 800b96e:	4603      	mov	r3, r0
 800b970:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800b974:	e061      	b.n	800ba3a <prvProcessIPPacket+0x1c2>
                        eReturn = eReleaseBuffer;
 800b976:	2300      	movs	r3, #0
 800b978:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800b97c:	e05d      	b.n	800ba3a <prvProcessIPPacket+0x1c2>
					UDPPacket_t *pxUDPPacket = ( UDPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	699b      	ldr	r3, [r3, #24]
 800b982:	60bb      	str	r3, [r7, #8]
                    if ( pxNetworkBuffer->xDataLength >= sizeof( UDPPacket_t ) )
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	69db      	ldr	r3, [r3, #28]
 800b988:	2b29      	cmp	r3, #41	; 0x29
 800b98a:	d943      	bls.n	800ba14 <prvProcessIPPacket+0x19c>
                        pxNetworkBuffer->xDataLength -= sizeof( UDPPacket_t );
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	69db      	ldr	r3, [r3, #28]
 800b990:	f1a3 022a 	sub.w	r2, r3, #42	; 0x2a
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	61da      	str	r2, [r3, #28]
                        if( ( FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usLength ) - sizeof( UDPHeader_t ) ) <
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	021b      	lsls	r3, r3, #8
 800b9a0:	b21a      	sxth	r2, r3
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	0a1b      	lsrs	r3, r3, #8
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	b21b      	sxth	r3, r3
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	b21b      	sxth	r3, r3
 800b9b2:	b29b      	uxth	r3, r3
 800b9b4:	f1a3 0208 	sub.w	r2, r3, #8
                                pxNetworkBuffer->xDataLength )
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	69db      	ldr	r3, [r3, #28]
                        if( ( FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usLength ) - sizeof( UDPHeader_t ) ) <
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d211      	bcs.n	800b9e4 <prvProcessIPPacket+0x16c>
                            pxNetworkBuffer->xDataLength = FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usLength ) - 
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	021b      	lsls	r3, r3, #8
 800b9c8:	b21a      	sxth	r2, r3
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b9ce:	b29b      	uxth	r3, r3
 800b9d0:	0a1b      	lsrs	r3, r3, #8
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	b21b      	sxth	r3, r3
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	b21b      	sxth	r3, r3
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	f1a3 0208 	sub.w	r2, r3, #8
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	61da      	str	r2, [r3, #28]
                        pxNetworkBuffer->usPort = pxUDPPacket->xUDPHeader.usSourcePort;
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b9e8:	b29a      	uxth	r2, r3
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	841a      	strh	r2, [r3, #32]
                        pxNetworkBuffer->ulIPAddress = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	f8d3 201a 	ldr.w	r2, [r3, #26]
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	615a      	str	r2, [r3, #20]
                        if( xProcessReceivedUDPPacket( pxNetworkBuffer, 
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	4619      	mov	r1, r3
 800ba00:	6838      	ldr	r0, [r7, #0]
 800ba02:	f004 fe71 	bl	80106e8 <xProcessReceivedUDPPacket>
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d118      	bne.n	800ba3e <prvProcessIPPacket+0x1c6>
                            eReturn = eFrameConsumed;
 800ba0c:	2303      	movs	r3, #3
 800ba0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800ba12:	e014      	b.n	800ba3e <prvProcessIPPacket+0x1c6>
                        eReturn = eReleaseBuffer;
 800ba14:	2300      	movs	r3, #0
 800ba16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800ba1a:	e010      	b.n	800ba3e <prvProcessIPPacket+0x1c6>
					if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 800ba1c:	6838      	ldr	r0, [r7, #0]
 800ba1e:	f003 fb37 	bl	800f090 <xProcessReceivedTCPPacket>
 800ba22:	4603      	mov	r3, r0
 800ba24:	2b01      	cmp	r3, #1
 800ba26:	d102      	bne.n	800ba2e <prvProcessIPPacket+0x1b6>
						eReturn = eFrameConsumed;
 800ba28:	2303      	movs	r3, #3
 800ba2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					xProcessedTCPMessage++;
 800ba2e:	4b08      	ldr	r3, [pc, #32]	; (800ba50 <prvProcessIPPacket+0x1d8>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	3301      	adds	r3, #1
 800ba34:	4a06      	ldr	r2, [pc, #24]	; (800ba50 <prvProcessIPPacket+0x1d8>)
 800ba36:	6013      	str	r3, [r2, #0]
				break;
 800ba38:	e002      	b.n	800ba40 <prvProcessIPPacket+0x1c8>
				break;
 800ba3a:	bf00      	nop
 800ba3c:	e000      	b.n	800ba40 <prvProcessIPPacket+0x1c8>
				break;
 800ba3e:	bf00      	nop
		}
	}

	return eReturn;
 800ba40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3730      	adds	r7, #48	; 0x30
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}
 800ba4c:	200001b0 	.word	0x200001b0
 800ba50:	20004e90 	.word	0x20004e90

0800ba54 <prvProcessICMPEchoRequest>:
/*-----------------------------------------------------------*/

#if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )

	static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket )
	{
 800ba54:	b480      	push	{r7}
 800ba56:	b087      	sub	sp, #28
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
	ICMPHeader_t *pxICMPHeader;
	IPHeader_t *pxIPHeader;
	uint16_t usRequest;

		pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	3322      	adds	r3, #34	; 0x22
 800ba60:	617b      	str	r3, [r7, #20]
		pxIPHeader = &( pxICMPPacket->xIPHeader );
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	330e      	adds	r3, #14
 800ba66:	613b      	str	r3, [r7, #16]

		/* The checksum can be checked here - but a ping reply should be
		returned even if the checksum is incorrect so the other end can
		tell that the ping was received - even if the ping reply contains
		invalid data. */
		pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	701a      	strb	r2, [r3, #0]
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	68da      	ldr	r2, [r3, #12]
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	611a      	str	r2, [r3, #16]
		pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800ba76:	4b22      	ldr	r3, [pc, #136]	; (800bb00 <prvProcessICMPEchoRequest+0xac>)
 800ba78:	695a      	ldr	r2, [r3, #20]
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	60da      	str	r2, [r3, #12]
		has been changed to ipICMP_ECHO_REPLY.  This is faster than calling
		usGenerateChecksum(). */

		/* due to compiler warning "integer operation result is out of range" */

		usRequest = ( uint16_t ) ( ( uint16_t )ipICMP_ECHO_REQUEST << 8 );
 800ba7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ba82:	81fb      	strh	r3, [r7, #14]

		if( pxICMPHeader->usChecksum >= FreeRTOS_htons( 0xFFFFu - usRequest ) )
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	885b      	ldrh	r3, [r3, #2]
 800ba88:	b29a      	uxth	r2, r3
 800ba8a:	89fb      	ldrh	r3, [r7, #14]
 800ba8c:	43db      	mvns	r3, r3
 800ba8e:	b29b      	uxth	r3, r3
 800ba90:	021b      	lsls	r3, r3, #8
 800ba92:	b299      	uxth	r1, r3
 800ba94:	89fb      	ldrh	r3, [r7, #14]
 800ba96:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800ba9a:	33ff      	adds	r3, #255	; 0xff
 800ba9c:	0a1b      	lsrs	r3, r3, #8
 800ba9e:	b29b      	uxth	r3, r3
 800baa0:	430b      	orrs	r3, r1
 800baa2:	b29b      	uxth	r3, r3
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d312      	bcc.n	800bace <prvProcessICMPEchoRequest+0x7a>
		{
			pxICMPHeader->usChecksum = ( uint16_t )
				( ( ( uint32_t ) pxICMPHeader->usChecksum ) +
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	885b      	ldrh	r3, [r3, #2]
 800baac:	b29a      	uxth	r2, r3
					FreeRTOS_htons( usRequest + 1UL ) );
 800baae:	89fb      	ldrh	r3, [r7, #14]
 800bab0:	3301      	adds	r3, #1
 800bab2:	b29b      	uxth	r3, r3
 800bab4:	021b      	lsls	r3, r3, #8
 800bab6:	b299      	uxth	r1, r3
 800bab8:	89fb      	ldrh	r3, [r7, #14]
 800baba:	3301      	adds	r3, #1
 800babc:	0a1b      	lsrs	r3, r3, #8
 800babe:	b29b      	uxth	r3, r3
 800bac0:	430b      	orrs	r3, r1
 800bac2:	b29b      	uxth	r3, r3
			pxICMPHeader->usChecksum = ( uint16_t )
 800bac4:	4413      	add	r3, r2
 800bac6:	b29a      	uxth	r2, r3
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	805a      	strh	r2, [r3, #2]
 800bacc:	e010      	b.n	800baf0 <prvProcessICMPEchoRequest+0x9c>
		}
		else
		{
			pxICMPHeader->usChecksum = ( uint16_t )
				( ( ( uint32_t ) pxICMPHeader->usChecksum ) +
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	885b      	ldrh	r3, [r3, #2]
 800bad2:	b29a      	uxth	r2, r3
					FreeRTOS_htons( usRequest ) );
 800bad4:	89fb      	ldrh	r3, [r7, #14]
 800bad6:	021b      	lsls	r3, r3, #8
 800bad8:	b219      	sxth	r1, r3
 800bada:	89fb      	ldrh	r3, [r7, #14]
 800badc:	0a1b      	lsrs	r3, r3, #8
 800bade:	b29b      	uxth	r3, r3
 800bae0:	b21b      	sxth	r3, r3
 800bae2:	430b      	orrs	r3, r1
 800bae4:	b21b      	sxth	r3, r3
 800bae6:	b29b      	uxth	r3, r3
			pxICMPHeader->usChecksum = ( uint16_t )
 800bae8:	4413      	add	r3, r2
 800baea:	b29a      	uxth	r2, r3
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	805a      	strh	r2, [r3, #2]
		}
		return eReturnEthernetFrame;
 800baf0:	2302      	movs	r3, #2
	}
 800baf2:	4618      	mov	r0, r3
 800baf4:	371c      	adds	r7, #28
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr
 800bafe:	bf00      	nop
 800bb00:	200001b0 	.word	0x200001b0

0800bb04 <prvProcessICMPPacket>:
/*-----------------------------------------------------------*/

#if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

	static eFrameProcessingResult_t prvProcessICMPPacket( ICMPPacket_t * const pxICMPPacket )
	{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
	eFrameProcessingResult_t eReturn = eReleaseBuffer;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	73fb      	strb	r3, [r7, #15]

		iptraceICMP_PACKET_RECEIVED();
		switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d008      	beq.n	800bb2c <prvProcessICMPPacket+0x28>
 800bb1a:	2b08      	cmp	r3, #8
 800bb1c:	d000      	beq.n	800bb20 <prvProcessICMPPacket+0x1c>
				}
				#endif /* ipconfigSUPPORT_OUTGOING_PINGS */
				break;

			default	:
				break;
 800bb1e:	e006      	b.n	800bb2e <prvProcessICMPPacket+0x2a>
					eReturn = prvProcessICMPEchoRequest( pxICMPPacket );
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f7ff ff97 	bl	800ba54 <prvProcessICMPEchoRequest>
 800bb26:	4603      	mov	r3, r0
 800bb28:	73fb      	strb	r3, [r7, #15]
				break;
 800bb2a:	e000      	b.n	800bb2e <prvProcessICMPPacket+0x2a>
				break;
 800bb2c:	bf00      	nop
		}

		return eReturn;
 800bb2e:	7bfb      	ldrb	r3, [r7, #15]
	}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3710      	adds	r7, #16
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <usGenerateProtocolChecksum>:

#endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 ) */
/*-----------------------------------------------------------*/

uint16_t usGenerateProtocolChecksum( const uint8_t * const pucEthernetBuffer, size_t uxBufferLength, BaseType_t xOutgoingPacket )
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b08c      	sub	sp, #48	; 0x30
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	607a      	str	r2, [r7, #4]
#if( ipconfigHAS_DEBUG_PRINTF != 0 )
	const char *pcType;
#endif

    /* Check for minimum packet size. */
    if( uxBufferLength < sizeof( IPPacket_t ) )
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	2b21      	cmp	r3, #33	; 0x21
 800bb48:	d802      	bhi.n	800bb50 <usGenerateProtocolChecksum+0x18>
    {
        return ipINVALID_LENGTH;
 800bb4a:	f241 2334 	movw	r3, #4660	; 0x1234
 800bb4e:	e0d7      	b.n	800bd00 <usGenerateProtocolChecksum+0x1c8>
    }

    /* Parse the packet length. */
	pxIPPacket = ( const IPPacket_t * ) pucEthernetBuffer;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* Per https://tools.ietf.org/html/rfc791, the four-bit Internet Header 
    Length field contains the length of the internet header in 32-bit words. */
	uxIPHeaderLength = ( UBaseType_t ) 
        ( sizeof( uint32_t ) * ( pxIPPacket->xIPHeader.ucVersionHeaderLength & 0x0Fu ) ); 
 800bb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb56:	7b9b      	ldrb	r3, [r3, #14]
 800bb58:	f003 030f 	and.w	r3, r3, #15
	uxIPHeaderLength = ( UBaseType_t ) 
 800bb5c:	009b      	lsls	r3, r3, #2
 800bb5e:	623b      	str	r3, [r7, #32]

    /* Check for minimum packet size. */
    if( uxBufferLength < sizeof( IPPacket_t ) + uxIPHeaderLength - ipSIZE_OF_IPv4_HEADER )
 800bb60:	6a3b      	ldr	r3, [r7, #32]
 800bb62:	f103 020e 	add.w	r2, r3, #14
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d902      	bls.n	800bb72 <usGenerateProtocolChecksum+0x3a>
    {
        return ipINVALID_LENGTH;
 800bb6c:	f241 2334 	movw	r3, #4660	; 0x1234
 800bb70:	e0c6      	b.n	800bd00 <usGenerateProtocolChecksum+0x1c8>
    }
    if( uxBufferLength < FreeRTOS_ntohs( pxIPPacket->xIPHeader.usLength ) )
 800bb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb74:	8a1b      	ldrh	r3, [r3, #16]
 800bb76:	b29b      	uxth	r3, r3
 800bb78:	021b      	lsls	r3, r3, #8
 800bb7a:	b21a      	sxth	r2, r3
 800bb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb7e:	8a1b      	ldrh	r3, [r3, #16]
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	0a1b      	lsrs	r3, r3, #8
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	b21b      	sxth	r3, r3
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	b21b      	sxth	r3, r3
 800bb8c:	b29b      	uxth	r3, r3
 800bb8e:	461a      	mov	r2, r3
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d902      	bls.n	800bb9c <usGenerateProtocolChecksum+0x64>
    {
        return ipINVALID_LENGTH;
 800bb96:	f241 2334 	movw	r3, #4660	; 0x1234
 800bb9a:	e0b1      	b.n	800bd00 <usGenerateProtocolChecksum+0x1c8>
    }

    /* Identify the next protocol. */
    ucProtocol = pxIPPacket->xIPHeader.ucProtocol; 
 800bb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9e:	7ddb      	ldrb	r3, [r3, #23]
 800bba0:	77fb      	strb	r3, [r7, #31]
    /* N.B., if this IP packet header includes Options, then the following 
    assignment results in a pointer into the protocol packet with the Ethernet 
    and IP headers incorrectly aligned. However, either way, the "third"
    protocol (Layer 3 or 4) header will be aligned, which is the convenience 
    of this calculation. */
    pxProtPack = ( ProtocolPacket_t * ) ( pucEthernetBuffer + ( uxIPHeaderLength - ipSIZE_OF_IPv4_HEADER ) );
 800bba2:	6a3b      	ldr	r3, [r7, #32]
 800bba4:	3b14      	subs	r3, #20
 800bba6:	68fa      	ldr	r2, [r7, #12]
 800bba8:	4413      	add	r3, r2
 800bbaa:	61bb      	str	r3, [r7, #24]

    /* Switch on the Layer 3/4 protocol. */
	if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800bbac:	7ffb      	ldrb	r3, [r7, #31]
 800bbae:	2b11      	cmp	r3, #17
 800bbb0:	d10c      	bne.n	800bbcc <usGenerateProtocolChecksum+0x94>
	{
        if( uxBufferLength < uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER )
 800bbb2:	6a3b      	ldr	r3, [r7, #32]
 800bbb4:	f103 0216 	add.w	r2, r3, #22
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d902      	bls.n	800bbc4 <usGenerateProtocolChecksum+0x8c>
        {
            return ipINVALID_LENGTH;
 800bbbe:	f241 2334 	movw	r3, #4660	; 0x1234
 800bbc2:	e09d      	b.n	800bd00 <usGenerateProtocolChecksum+0x1c8>
        }

		pusChecksum = ( uint16_t * ) ( &( pxProtPack->xUDPPacket.xUDPHeader.usChecksum ) );
 800bbc4:	69bb      	ldr	r3, [r7, #24]
 800bbc6:	3328      	adds	r3, #40	; 0x28
 800bbc8:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbca:	e025      	b.n	800bc18 <usGenerateProtocolChecksum+0xe0>
		{
			pcType = "UDP";
		}
		#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */
	}
	else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 800bbcc:	7ffb      	ldrb	r3, [r7, #31]
 800bbce:	2b06      	cmp	r3, #6
 800bbd0:	d10c      	bne.n	800bbec <usGenerateProtocolChecksum+0xb4>
	{
        if( uxBufferLength < uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER )
 800bbd2:	6a3b      	ldr	r3, [r7, #32]
 800bbd4:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d902      	bls.n	800bbe4 <usGenerateProtocolChecksum+0xac>
        {
            return ipINVALID_LENGTH;
 800bbde:	f241 2334 	movw	r3, #4660	; 0x1234
 800bbe2:	e08d      	b.n	800bd00 <usGenerateProtocolChecksum+0x1c8>
        }
        
        pusChecksum = ( uint16_t * ) ( &( pxProtPack->xTCPPacket.xTCPHeader.usChecksum ) );
 800bbe4:	69bb      	ldr	r3, [r7, #24]
 800bbe6:	3332      	adds	r3, #50	; 0x32
 800bbe8:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbea:	e015      	b.n	800bc18 <usGenerateProtocolChecksum+0xe0>
		{
			pcType = "TCP";
		}
		#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */
	}
	else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 800bbec:	7ffb      	ldrb	r3, [r7, #31]
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d002      	beq.n	800bbf8 <usGenerateProtocolChecksum+0xc0>
 800bbf2:	7ffb      	ldrb	r3, [r7, #31]
 800bbf4:	2b02      	cmp	r3, #2
 800bbf6:	d10c      	bne.n	800bc12 <usGenerateProtocolChecksum+0xda>
			( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
	{
        if( uxBufferLength < uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMP_HEADER )
 800bbf8:	6a3b      	ldr	r3, [r7, #32]
 800bbfa:	f103 0216 	add.w	r2, r3, #22
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d902      	bls.n	800bc0a <usGenerateProtocolChecksum+0xd2>
        {
            return ipINVALID_LENGTH;
 800bc04:	f241 2334 	movw	r3, #4660	; 0x1234
 800bc08:	e07a      	b.n	800bd00 <usGenerateProtocolChecksum+0x1c8>
        }
        
        pusChecksum = ( uint16_t * ) ( &( pxProtPack->xICMPPacket.xICMPHeader.usChecksum ) );
 800bc0a:	69bb      	ldr	r3, [r7, #24]
 800bc0c:	3324      	adds	r3, #36	; 0x24
 800bc0e:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc10:	e002      	b.n	800bc18 <usGenerateProtocolChecksum+0xe0>
		#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */
	}
	else
	{
		/* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
		return ipUNHANDLED_PROTOCOL;
 800bc12:	f244 3321 	movw	r3, #17185	; 0x4321
 800bc16:	e073      	b.n	800bd00 <usGenerateProtocolChecksum+0x1c8>
	}

    /* The protocol and checksum field have been identified. Check the direction
    of the packet. */
	if( xOutgoingPacket != pdFALSE )
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d003      	beq.n	800bc26 <usGenerateProtocolChecksum+0xee>
	{
		/* This is an outgoing packet. Before calculating the checksum, set it
		to zero. */
		*( pusChecksum ) = 0u;
 800bc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc20:	2200      	movs	r2, #0
 800bc22:	801a      	strh	r2, [r3, #0]
 800bc24:	e009      	b.n	800bc3a <usGenerateProtocolChecksum+0x102>
	}
	else if( ( *pusChecksum == 0u ) && ( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP ) )
 800bc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc28:	881b      	ldrh	r3, [r3, #0]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d105      	bne.n	800bc3a <usGenerateProtocolChecksum+0x102>
 800bc2e:	7ffb      	ldrb	r3, [r7, #31]
 800bc30:	2b11      	cmp	r3, #17
 800bc32:	d102      	bne.n	800bc3a <usGenerateProtocolChecksum+0x102>
	{
		/* Sender hasn't set the checksum, no use to calculate it. */
		return ipCORRECT_CRC;
 800bc34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc38:	e062      	b.n	800bd00 <usGenerateProtocolChecksum+0x1c8>
	}

	ulLength = ( uint32_t )
		( FreeRTOS_ntohs( pxIPPacket->xIPHeader.usLength ) - ( ( uint16_t ) uxIPHeaderLength ) ); /* normally minus 20 */
 800bc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc3c:	8a1b      	ldrh	r3, [r3, #16]
 800bc3e:	b29b      	uxth	r3, r3
 800bc40:	021b      	lsls	r3, r3, #8
 800bc42:	b21a      	sxth	r2, r3
 800bc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc46:	8a1b      	ldrh	r3, [r3, #16]
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	0a1b      	lsrs	r3, r3, #8
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	b21b      	sxth	r3, r3
 800bc50:	4313      	orrs	r3, r2
 800bc52:	b21b      	sxth	r3, r3
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	461a      	mov	r2, r3
 800bc58:	6a3b      	ldr	r3, [r7, #32]
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	1ad3      	subs	r3, r2, r3
	ulLength = ( uint32_t )
 800bc5e:	617b      	str	r3, [r7, #20]

	if( ( ulLength < sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ||
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	2b07      	cmp	r3, #7
 800bc64:	d905      	bls.n	800bc72 <usGenerateProtocolChecksum+0x13a>
		( ulLength > ( uint32_t )( ipconfigNETWORK_MTU - uxIPHeaderLength ) ) )
 800bc66:	6a3b      	ldr	r3, [r7, #32]
 800bc68:	f5c3 6296 	rsb	r2, r3, #1200	; 0x4b0
	if( ( ulLength < sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ||
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d202      	bcs.n	800bc78 <usGenerateProtocolChecksum+0x140>

		/* Again, in a 16-bit return value there is no space to indicate an
		error.  For incoming packets, 0x1234 will cause dropping of the packet.
		For outgoing packets, there is a serious problem with the
		format/length */
		return ipINVALID_LENGTH;
 800bc72:	f241 2334 	movw	r3, #4660	; 0x1234
 800bc76:	e043      	b.n	800bd00 <usGenerateProtocolChecksum+0x1c8>
	}
	if( ucProtocol <= ( uint8_t ) ipPROTOCOL_IGMP )
 800bc78:	7ffb      	ldrb	r3, [r7, #31]
 800bc7a:	2b02      	cmp	r3, #2
 800bc7c:	d80a      	bhi.n	800bc94 <usGenerateProtocolChecksum+0x15c>
	{
		/* ICMP/IGMP do not have a pseudo header for CRC-calculation. */
		usChecksum = ( uint16_t )
			( ~usGenerateChecksum( 0UL,
				( uint8_t * ) &( pxProtPack->xTCPPacket.xTCPHeader ), ( size_t ) ulLength ) );
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	3322      	adds	r3, #34	; 0x22
			( ~usGenerateChecksum( 0UL,
 800bc82:	697a      	ldr	r2, [r7, #20]
 800bc84:	4619      	mov	r1, r3
 800bc86:	2000      	movs	r0, #0
 800bc88:	f000 f83e 	bl	800bd08 <usGenerateChecksum>
 800bc8c:	4603      	mov	r3, r0
		usChecksum = ( uint16_t )
 800bc8e:	43db      	mvns	r3, r3
 800bc90:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bc92:	e011      	b.n	800bcb8 <usGenerateProtocolChecksum+0x180>
	}
	else
	{
		/* For UDP and TCP, sum the pseudo header, i.e. IP protocol + length
		fields */
		usChecksum = ( uint16_t ) ( ulLength + ( ( uint16_t ) ucProtocol ) );
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	b29a      	uxth	r2, r3
 800bc98:	7ffb      	ldrb	r3, [r7, #31]
 800bc9a:	b29b      	uxth	r3, r3
 800bc9c:	4413      	add	r3, r2
 800bc9e:	85fb      	strh	r3, [r7, #46]	; 0x2e

		/* And then continue at the IPv4 source and destination addresses. */
		usChecksum = ( uint16_t )
			( ~usGenerateChecksum( ( uint32_t ) usChecksum, ( uint8_t * )&( pxIPPacket->xIPHeader.ulSourceIPAddress ),
 800bca0:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 800bca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca4:	f103 011a 	add.w	r1, r3, #26
				( 2u * sizeof( pxIPPacket->xIPHeader.ulSourceIPAddress ) + ulLength ) ) );
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	3308      	adds	r3, #8
			( ~usGenerateChecksum( ( uint32_t ) usChecksum, ( uint8_t * )&( pxIPPacket->xIPHeader.ulSourceIPAddress ),
 800bcac:	461a      	mov	r2, r3
 800bcae:	f000 f82b 	bl	800bd08 <usGenerateChecksum>
 800bcb2:	4603      	mov	r3, r0
		usChecksum = ( uint16_t )
 800bcb4:	43db      	mvns	r3, r3
 800bcb6:	85fb      	strh	r3, [r7, #46]	; 0x2e

		/* Sum TCP header and data. */
	}

	if( xOutgoingPacket == pdFALSE )
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d106      	bne.n	800bccc <usGenerateProtocolChecksum+0x194>
	{
		/* This is in incoming packet. If the CRC is correct, it should be zero. */
		if( usChecksum == 0u )
 800bcbe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d10c      	bne.n	800bcde <usGenerateProtocolChecksum+0x1a6>
		{
			usChecksum = ( uint16_t )ipCORRECT_CRC;
 800bcc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bcc8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bcca:	e008      	b.n	800bcde <usGenerateProtocolChecksum+0x1a6>
		}
	}
	else
	{
		if( ( usChecksum == 0u ) && ( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP ) )
 800bccc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d105      	bne.n	800bcde <usGenerateProtocolChecksum+0x1a6>
 800bcd2:	7ffb      	ldrb	r3, [r7, #31]
 800bcd4:	2b11      	cmp	r3, #17
 800bcd6:	d102      	bne.n	800bcde <usGenerateProtocolChecksum+0x1a6>
					FreeRTOS_debug_printf( ( "usGenerateProtocolChecksum[%s]: crc swap: %04X\n", pcType, usChecksum ) );
				}
			}
			#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */

			usChecksum = ( uint16_t )0xffffu;
 800bcd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bcdc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		}
	}
	usChecksum = FreeRTOS_htons( usChecksum );
 800bcde:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bce0:	021b      	lsls	r3, r3, #8
 800bce2:	b21a      	sxth	r2, r3
 800bce4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bce6:	0a1b      	lsrs	r3, r3, #8
 800bce8:	b29b      	uxth	r3, r3
 800bcea:	b21b      	sxth	r3, r3
 800bcec:	4313      	orrs	r3, r2
 800bcee:	b21b      	sxth	r3, r3
 800bcf0:	85fb      	strh	r3, [r7, #46]	; 0x2e

	if( xOutgoingPacket != pdFALSE )
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d002      	beq.n	800bcfe <usGenerateProtocolChecksum+0x1c6>
	{
		*( pusChecksum ) = usChecksum;
 800bcf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcfa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bcfc:	801a      	strh	r2, [r3, #0]
			FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulDestinationIPAddress ),
			FreeRTOS_ntohs( *pusChecksum ) ) );
	}
	#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */

	return usChecksum;
 800bcfe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3730      	adds	r7, #48	; 0x30
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <usGenerateChecksum>:
 *     method should process. The method's memory iterator is initialized to this value.
 *   uxDataLengthBytes: This argument contains the number of bytes that this method
 *     should process.
 */
uint16_t usGenerateChecksum( uint32_t ulSum, const uint8_t * pucNextData, size_t uxDataLengthBytes )
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b08d      	sub	sp, #52	; 0x34
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	60f8      	str	r0, [r7, #12]
 800bd10:	60b9      	str	r1, [r7, #8]
 800bd12:	607a      	str	r2, [r7, #4]
xUnion32 xSum2, xSum, xTerm;
xUnionPtr xSource;		/* Points to first byte */
xUnionPtr xLastSource;	/* Points to last byte plus one */
uint32_t ulAlignBits, ulCarry = 0ul;
 800bd14:	2300      	movs	r3, #0
 800bd16:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Small MCUs often spend up to 30% of the time doing checksum calculations
	This function is optimised for 32-bit CPUs; Each time it will try to fetch
	32-bits, sums it with an accumulator and counts the number of carries. */

	/* Swap the input (little endian platform only). */
	xSum.u32 = FreeRTOS_ntohs( ulSum );
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	021b      	lsls	r3, r3, #8
 800bd1e:	b29a      	uxth	r2, r3
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	0a1b      	lsrs	r3, r3, #8
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	4313      	orrs	r3, r2
 800bd28:	b29b      	uxth	r3, r3
 800bd2a:	623b      	str	r3, [r7, #32]
	xTerm.u32 = 0ul;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	61fb      	str	r3, [r7, #28]

	xSource.u8ptr = ( uint8_t * ) pucNextData;
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	61bb      	str	r3, [r7, #24]
	ulAlignBits = ( ( ( uint32_t ) pucNextData ) & 0x03u ); /* gives 0, 1, 2, or 3 */
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	f003 0303 	and.w	r3, r3, #3
 800bd3a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* If byte (8-bit) aligned... */
	if( ( ( ulAlignBits & 1ul ) != 0ul ) && ( uxDataLengthBytes >= ( size_t ) 1 ) )
 800bd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd3e:	f003 0301 	and.w	r3, r3, #1
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d00b      	beq.n	800bd5e <usGenerateChecksum+0x56>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d008      	beq.n	800bd5e <usGenerateChecksum+0x56>
	{
		xTerm.u8[ 1 ] = *( xSource.u8ptr );
 800bd4c:	69bb      	ldr	r3, [r7, #24]
 800bd4e:	781b      	ldrb	r3, [r3, #0]
 800bd50:	777b      	strb	r3, [r7, #29]
		( xSource.u8ptr )++;
 800bd52:	69bb      	ldr	r3, [r7, #24]
 800bd54:	3301      	adds	r3, #1
 800bd56:	61bb      	str	r3, [r7, #24]
		uxDataLengthBytes--;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	607b      	str	r3, [r7, #4]
		/* Now xSource is word (16-bit) aligned. */
	}

	/* If half-word (16-bit) aligned... */
	if( ( ( ulAlignBits == 1u ) || ( ulAlignBits == 2u ) ) && ( uxDataLengthBytes >= 2u ) )
 800bd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d002      	beq.n	800bd6a <usGenerateChecksum+0x62>
 800bd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd66:	2b02      	cmp	r3, #2
 800bd68:	d10d      	bne.n	800bd86 <usGenerateChecksum+0x7e>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d90a      	bls.n	800bd86 <usGenerateChecksum+0x7e>
	{
		xSum.u32 += *(xSource.u16ptr);
 800bd70:	6a3b      	ldr	r3, [r7, #32]
 800bd72:	69ba      	ldr	r2, [r7, #24]
 800bd74:	8812      	ldrh	r2, [r2, #0]
 800bd76:	4413      	add	r3, r2
 800bd78:	623b      	str	r3, [r7, #32]
		( xSource.u16ptr )++;
 800bd7a:	69bb      	ldr	r3, [r7, #24]
 800bd7c:	3302      	adds	r3, #2
 800bd7e:	61bb      	str	r3, [r7, #24]
		uxDataLengthBytes -= 2u;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	3b02      	subs	r3, #2
 800bd84:	607b      	str	r3, [r7, #4]
		/* Now xSource is word (32-bit) aligned. */
	}

	/* Word (32-bit) aligned, do the most part. */
	xLastSource.u32ptr = ( xSource.u32ptr + ( uxDataLengthBytes / 4u ) ) - 3u;
 800bd86:	69ba      	ldr	r2, [r7, #24]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f023 0303 	bic.w	r3, r3, #3
 800bd8e:	3b0c      	subs	r3, #12
 800bd90:	4413      	add	r3, r2
 800bd92:	617b      	str	r3, [r7, #20]

	/* In this loop, four 32-bit additions will be done, in total 16 bytes.
	Indexing with constants (0,1,2,3) gives faster code than using
	post-increments. */
	while( xSource.u32ptr < xLastSource.u32ptr )
 800bd94:	e035      	b.n	800be02 <usGenerateChecksum+0xfa>
	{
		/* Use a secondary Sum2, just to see if the addition produced an
		overflow. */
		xSum2.u32 = xSum.u32 + xSource.u32ptr[ 0 ];
 800bd96:	6a3a      	ldr	r2, [r7, #32]
 800bd98:	69bb      	ldr	r3, [r7, #24]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	4413      	add	r3, r2
 800bd9e:	627b      	str	r3, [r7, #36]	; 0x24
		if( xSum2.u32 < xSum.u32 )
 800bda0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bda2:	6a3b      	ldr	r3, [r7, #32]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d202      	bcs.n	800bdae <usGenerateChecksum+0xa6>
		{
			ulCarry++;
 800bda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdaa:	3301      	adds	r3, #1
 800bdac:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		/* Now add the secondary sum to the major sum, and remember if there was
		a carry. */
		xSum.u32 = xSum2.u32 + xSource.u32ptr[ 1 ];
 800bdae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdb0:	69bb      	ldr	r3, [r7, #24]
 800bdb2:	3304      	adds	r3, #4
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4413      	add	r3, r2
 800bdb8:	623b      	str	r3, [r7, #32]
		if( xSum2.u32 > xSum.u32 )
 800bdba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdbc:	6a3b      	ldr	r3, [r7, #32]
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d902      	bls.n	800bdc8 <usGenerateChecksum+0xc0>
		{
			ulCarry++;
 800bdc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		/* And do the same trick once again for indexes 2 and 3 */
		xSum2.u32 = xSum.u32 + xSource.u32ptr[ 2 ];
 800bdc8:	6a3a      	ldr	r2, [r7, #32]
 800bdca:	69bb      	ldr	r3, [r7, #24]
 800bdcc:	3308      	adds	r3, #8
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4413      	add	r3, r2
 800bdd2:	627b      	str	r3, [r7, #36]	; 0x24
		if( xSum2.u32 < xSum.u32 )
 800bdd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdd6:	6a3b      	ldr	r3, [r7, #32]
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	d202      	bcs.n	800bde2 <usGenerateChecksum+0xda>
		{
			ulCarry++;
 800bddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdde:	3301      	adds	r3, #1
 800bde0:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		xSum.u32 = xSum2.u32 + xSource.u32ptr[ 3 ];
 800bde2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bde4:	69bb      	ldr	r3, [r7, #24]
 800bde6:	330c      	adds	r3, #12
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	4413      	add	r3, r2
 800bdec:	623b      	str	r3, [r7, #32]

		if( xSum2.u32 > xSum.u32 )
 800bdee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdf0:	6a3b      	ldr	r3, [r7, #32]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d902      	bls.n	800bdfc <usGenerateChecksum+0xf4>
		{
			ulCarry++;
 800bdf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		/* And finally advance the pointer 4 * 4 = 16 bytes. */
		xSource.u32ptr += 4;
 800bdfc:	69bb      	ldr	r3, [r7, #24]
 800bdfe:	3310      	adds	r3, #16
 800be00:	61bb      	str	r3, [r7, #24]
	while( xSource.u32ptr < xLastSource.u32ptr )
 800be02:	69ba      	ldr	r2, [r7, #24]
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	429a      	cmp	r2, r3
 800be08:	d3c5      	bcc.n	800bd96 <usGenerateChecksum+0x8e>
	}

	/* Now add all carries. */
	xSum.u32 = ( uint32_t )xSum.u16[ 0 ] + xSum.u16[ 1 ] + ulCarry;
 800be0a:	8c3b      	ldrh	r3, [r7, #32]
 800be0c:	461a      	mov	r2, r3
 800be0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be10:	441a      	add	r2, r3
 800be12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be14:	4413      	add	r3, r2
 800be16:	623b      	str	r3, [r7, #32]

	uxDataLengthBytes %= 16u;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f003 030f 	and.w	r3, r3, #15
 800be1e:	607b      	str	r3, [r7, #4]
	xLastSource.u8ptr = ( uint8_t * ) ( xSource.u8ptr + ( uxDataLengthBytes & ~( ( size_t ) 1 ) ) );
 800be20:	69ba      	ldr	r2, [r7, #24]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f023 0301 	bic.w	r3, r3, #1
 800be28:	4413      	add	r3, r2
 800be2a:	617b      	str	r3, [r7, #20]

	/* Half-word aligned. */
	while( xSource.u16ptr < xLastSource.u16ptr )
 800be2c:	e007      	b.n	800be3e <usGenerateChecksum+0x136>
	{
		/* At least one more short. */
		xSum.u32 += xSource.u16ptr[ 0 ];
 800be2e:	6a3b      	ldr	r3, [r7, #32]
 800be30:	69ba      	ldr	r2, [r7, #24]
 800be32:	8812      	ldrh	r2, [r2, #0]
 800be34:	4413      	add	r3, r2
 800be36:	623b      	str	r3, [r7, #32]
		xSource.u16ptr++;
 800be38:	69bb      	ldr	r3, [r7, #24]
 800be3a:	3302      	adds	r3, #2
 800be3c:	61bb      	str	r3, [r7, #24]
	while( xSource.u16ptr < xLastSource.u16ptr )
 800be3e:	69ba      	ldr	r2, [r7, #24]
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	429a      	cmp	r2, r3
 800be44:	d3f3      	bcc.n	800be2e <usGenerateChecksum+0x126>
	}

	if( ( uxDataLengthBytes & ( size_t ) 1 ) != 0u )	/* Maybe one more ? */
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f003 0301 	and.w	r3, r3, #1
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d002      	beq.n	800be56 <usGenerateChecksum+0x14e>
	{
		xTerm.u8[ 0 ] = xSource.u8ptr[ 0 ];
 800be50:	69bb      	ldr	r3, [r7, #24]
 800be52:	781b      	ldrb	r3, [r3, #0]
 800be54:	773b      	strb	r3, [r7, #28]
	}
	xSum.u32 += xTerm.u32;
 800be56:	6a3a      	ldr	r2, [r7, #32]
 800be58:	69fb      	ldr	r3, [r7, #28]
 800be5a:	4413      	add	r3, r2
 800be5c:	623b      	str	r3, [r7, #32]

	/* Now add all carries again. */
	xSum.u32 = ( uint32_t ) xSum.u16[ 0 ] + xSum.u16[ 1 ];
 800be5e:	8c3b      	ldrh	r3, [r7, #32]
 800be60:	461a      	mov	r2, r3
 800be62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be64:	4413      	add	r3, r2
 800be66:	623b      	str	r3, [r7, #32]

	/* The previous summation might have given a 16-bit carry. */
	xSum.u32 = ( uint32_t ) xSum.u16[ 0 ] + xSum.u16[ 1 ];
 800be68:	8c3b      	ldrh	r3, [r7, #32]
 800be6a:	461a      	mov	r2, r3
 800be6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be6e:	4413      	add	r3, r2
 800be70:	623b      	str	r3, [r7, #32]

	if( ( ulAlignBits & 1u ) != 0u )
 800be72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be74:	f003 0301 	and.w	r3, r3, #1
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d007      	beq.n	800be8c <usGenerateChecksum+0x184>
	{
		/* Quite unlikely, but pucNextData might be non-aligned, which would
		 mean that a checksum is calculated starting at an odd position. */
		xSum.u32 = ( ( xSum.u32 & 0xffu ) << 8 ) | ( ( xSum.u32 & 0xff00u ) >> 8 );
 800be7c:	6a3b      	ldr	r3, [r7, #32]
 800be7e:	021b      	lsls	r3, r3, #8
 800be80:	b29a      	uxth	r2, r3
 800be82:	6a3b      	ldr	r3, [r7, #32]
 800be84:	0a1b      	lsrs	r3, r3, #8
 800be86:	b2db      	uxtb	r3, r3
 800be88:	4313      	orrs	r3, r2
 800be8a:	623b      	str	r3, [r7, #32]
	}

	/* swap the output (little endian platform only). */
	return FreeRTOS_htons( ( (uint16_t) xSum.u32 ) );
 800be8c:	6a3b      	ldr	r3, [r7, #32]
 800be8e:	b29b      	uxth	r3, r3
 800be90:	021b      	lsls	r3, r3, #8
 800be92:	b21a      	sxth	r2, r3
 800be94:	6a3b      	ldr	r3, [r7, #32]
 800be96:	b29b      	uxth	r3, r3
 800be98:	0a1b      	lsrs	r3, r3, #8
 800be9a:	b29b      	uxth	r3, r3
 800be9c:	b21b      	sxth	r3, r3
 800be9e:	4313      	orrs	r3, r2
 800bea0:	b21b      	sxth	r3, r3
 800bea2:	b29b      	uxth	r3, r3
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3734      	adds	r7, #52	; 0x34
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr

0800beb0 <vReturnEthernetFrame>:
/*-----------------------------------------------------------*/

void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer, BaseType_t xReleaseAfterSend )
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
	}

	if( pxNetworkBuffer != NULL )
#endif
	{
		pxEthernetHeader = ( EthernetHeader_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	699b      	ldr	r3, [r3, #24]
 800bebe:	60fb      	str	r3, [r7, #12]

		/* Swap source and destination MAC addresses. */
		memcpy( ( void * ) &( pxEthernetHeader->xDestinationAddress ), ( void * ) &( pxEthernetHeader->xSourceAddress ), sizeof( pxEthernetHeader->xDestinationAddress ) );
 800bec0:	68f8      	ldr	r0, [r7, #12]
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	3306      	adds	r3, #6
 800bec6:	2206      	movs	r2, #6
 800bec8:	4619      	mov	r1, r3
 800beca:	f005 f898 	bl	8010ffe <memcpy>
		memcpy( ( void * ) &( pxEthernetHeader->xSourceAddress) , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	3306      	adds	r3, #6
 800bed2:	2206      	movs	r2, #6
 800bed4:	4905      	ldr	r1, [pc, #20]	; (800beec <vReturnEthernetFrame+0x3c>)
 800bed6:	4618      	mov	r0, r3
 800bed8:	f005 f891 	bl	8010ffe <memcpy>

		/* Send! */
		xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 800bedc:	6839      	ldr	r1, [r7, #0]
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f7f9 f9a2 	bl	8005228 <xNetworkInterfaceOutput>
	}
}
 800bee4:	bf00      	nop
 800bee6:	3710      	adds	r7, #16
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	200001b0 	.word	0x200001b0

0800bef0 <xIPIsNetworkTaskReady>:
	}
#endif /* ipconfigDNS_USE_CALLBACKS != 0 */
/*-----------------------------------------------------------*/

BaseType_t xIPIsNetworkTaskReady( void )
{
 800bef0:	b480      	push	{r7}
 800bef2:	af00      	add	r7, sp, #0
	return xIPTaskInitialised;
 800bef4:	4b03      	ldr	r3, [pc, #12]	; (800bf04 <xIPIsNetworkTaskReady+0x14>)
 800bef6:	681b      	ldr	r3, [r3, #0]
}
 800bef8:	4618      	mov	r0, r3
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr
 800bf02:	bf00      	nop
 800bf04:	20004ec0 	.word	0x20004ec0

0800bf08 <FreeRTOS_max_uint32>:
	static portINLINE UBaseType_t FreeRTOS_max_UBaseType (UBaseType_t a, UBaseType_t b);
	static portINLINE UBaseType_t  	FreeRTOS_min_UBaseType (UBaseType_t  a, UBaseType_t  b);


	static portINLINE int32_t  FreeRTOS_max_int32  (int32_t  a, int32_t  b) { return a >= b ? a : b; }
	static portINLINE uint32_t FreeRTOS_max_uint32 (uint32_t a, uint32_t b) { return a >= b ? a : b; }
 800bf08:	b480      	push	{r7}
 800bf0a:	b083      	sub	sp, #12
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	4293      	cmp	r3, r2
 800bf18:	bf38      	it	cc
 800bf1a:	4613      	movcc	r3, r2
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	370c      	adds	r7, #12
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr

0800bf28 <FreeRTOS_round_up>:
	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
	static portINLINE uint32_t FreeRTOS_round_up   (uint32_t a, uint32_t d) { return d * ( ( a + d - 1u ) / d ); }
 800bf28:	b480      	push	{r7}
 800bf2a:	b083      	sub	sp, #12
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	6039      	str	r1, [r7, #0]
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	4413      	add	r3, r2
 800bf38:	1e5a      	subs	r2, r3, #1
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf40:	683a      	ldr	r2, [r7, #0]
 800bf42:	fb02 f303 	mul.w	r3, r2, r3
 800bf46:	4618      	mov	r0, r3
 800bf48:	370c      	adds	r7, #12
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf50:	4770      	bx	lr

0800bf52 <uxStreamBufferSpace>:
}
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferSpace( const StreamBuffer_t *pxBuffer, const size_t uxLower, const size_t uxUpper );
static portINLINE size_t uxStreamBufferSpace( const StreamBuffer_t *pxBuffer, const size_t uxLower, const size_t uxUpper )
{
 800bf52:	b480      	push	{r7}
 800bf54:	b087      	sub	sp, #28
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	60f8      	str	r0, [r7, #12]
 800bf5a:	60b9      	str	r1, [r7, #8]
 800bf5c:	607a      	str	r2, [r7, #4]
/* Returns the space between uxLower and uxUpper, which equals to the distance minus 1 */
size_t uxCount;

	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	691a      	ldr	r2, [r3, #16]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	441a      	add	r2, r3
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	1ad3      	subs	r3, r2, r3
 800bf6a:	3b01      	subs	r3, #1
 800bf6c:	617b      	str	r3, [r7, #20]
	if( uxCount >= pxBuffer->LENGTH )
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	691a      	ldr	r2, [r3, #16]
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d804      	bhi.n	800bf82 <uxStreamBufferSpace+0x30>
	{
		uxCount -= pxBuffer->LENGTH;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	691b      	ldr	r3, [r3, #16]
 800bf7c:	697a      	ldr	r2, [r7, #20]
 800bf7e:	1ad3      	subs	r3, r2, r3
 800bf80:	617b      	str	r3, [r7, #20]
	}

	return uxCount;
 800bf82:	697b      	ldr	r3, [r7, #20]
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	371c      	adds	r7, #28
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr

0800bf90 <uxStreamBufferDistance>:
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferDistance( const StreamBuffer_t *pxBuffer, const size_t uxLower, const size_t uxUpper );
static portINLINE size_t uxStreamBufferDistance( const StreamBuffer_t *pxBuffer, const size_t uxLower, const size_t uxUpper )
{
 800bf90:	b480      	push	{r7}
 800bf92:	b087      	sub	sp, #28
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	60f8      	str	r0, [r7, #12]
 800bf98:	60b9      	str	r1, [r7, #8]
 800bf9a:	607a      	str	r2, [r7, #4]
/* Returns the distance between uxLower and uxUpper */
size_t uxCount;

	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	691a      	ldr	r2, [r3, #16]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	441a      	add	r2, r3
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	1ad3      	subs	r3, r2, r3
 800bfa8:	617b      	str	r3, [r7, #20]
	if ( uxCount >= pxBuffer->LENGTH )
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	691a      	ldr	r2, [r3, #16]
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d804      	bhi.n	800bfbe <uxStreamBufferDistance+0x2e>
	{
		uxCount -= pxBuffer->LENGTH;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	691b      	ldr	r3, [r3, #16]
 800bfb8:	697a      	ldr	r2, [r7, #20]
 800bfba:	1ad3      	subs	r3, r2, r3
 800bfbc:	617b      	str	r3, [r7, #20]
	}

	return uxCount;
 800bfbe:	697b      	ldr	r3, [r7, #20]
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	371c      	adds	r7, #28
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr

0800bfcc <uxStreamBufferGetSpace>:
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t *pxBuffer );
static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t *pxBuffer )
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
/* Returns the number of items which can still be added to uxHead
before hitting on uxTail */
size_t uxHead = pxBuffer->uxHead;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	689b      	ldr	r3, [r3, #8]
 800bfd8:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	60bb      	str	r3, [r7, #8]

	return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800bfe0:	68ba      	ldr	r2, [r7, #8]
 800bfe2:	68f9      	ldr	r1, [r7, #12]
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f7ff ffb4 	bl	800bf52 <uxStreamBufferSpace>
 800bfea:	4603      	mov	r3, r0
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	3710      	adds	r7, #16
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}

0800bff4 <uxStreamBufferFrontSpace>:
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t *pxBuffer );
static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t *pxBuffer )
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
/* Distance between uxFront and uxTail
or the number of items which can still be added to uxFront,
before hitting on uxTail */

size_t uxFront = pxBuffer->uxFront;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	68db      	ldr	r3, [r3, #12]
 800c000:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	60bb      	str	r3, [r7, #8]

	return uxStreamBufferSpace( pxBuffer, uxFront, uxTail );
 800c008:	68ba      	ldr	r2, [r7, #8]
 800c00a:	68f9      	ldr	r1, [r7, #12]
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f7ff ffa0 	bl	800bf52 <uxStreamBufferSpace>
 800c012:	4603      	mov	r3, r0
}
 800c014:	4618      	mov	r0, r3
 800c016:	3710      	adds	r7, #16
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <uxStreamBufferGetSize>:
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t *pxBuffer );
static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t *pxBuffer )
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b084      	sub	sp, #16
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
/* Returns the number of items which can be read from uxTail
before reaching uxHead */
size_t uxHead = pxBuffer->uxHead;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	689b      	ldr	r3, [r3, #8]
 800c028:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	60bb      	str	r3, [r7, #8]

	return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
 800c030:	68fa      	ldr	r2, [r7, #12]
 800c032:	68b9      	ldr	r1, [r7, #8]
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f7ff ffab 	bl	800bf90 <uxStreamBufferDistance>
 800c03a:	4603      	mov	r3, r0
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3710      	adds	r7, #16
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}

0800c044 <vNetworkSocketsInit>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t vNetworkSocketsInit( void )
{
 800c044:	b580      	push	{r7, lr}
 800c046:	af00      	add	r7, sp, #0
    vListInitialise( &xBoundUDPSocketsList );
 800c048:	4804      	ldr	r0, [pc, #16]	; (800c05c <vNetworkSocketsInit+0x18>)
 800c04a:	f7fb fd5c 	bl	8007b06 <vListInitialise>

    #if( ipconfigUSE_TCP == 1 )
    {
        vListInitialise( &xBoundTCPSocketsList );
 800c04e:	4804      	ldr	r0, [pc, #16]	; (800c060 <vNetworkSocketsInit+0x1c>)
 800c050:	f7fb fd59 	bl	8007b06 <vListInitialise>
    }
    #endif  /* ipconfigUSE_TCP == 1 */

    return pdTRUE;
 800c054:	2301      	movs	r3, #1
}
 800c056:	4618      	mov	r0, r3
 800c058:	bd80      	pop	{r7, pc}
 800c05a:	bf00      	nop
 800c05c:	200069a4 	.word	0x200069a4
 800c060:	20006990 	.word	0x20006990

0800c064 <prvDetermineSocketSize>:
/*-----------------------------------------------------------*/

static BaseType_t prvDetermineSocketSize( BaseType_t xDomain, BaseType_t xType, BaseType_t xProtocol, size_t *pxSocketSize )
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b08c      	sub	sp, #48	; 0x30
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	607a      	str	r2, [r7, #4]
 800c070:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdPASS;
 800c072:	2301      	movs	r3, #1
 800c074:	62fb      	str	r3, [r7, #44]	; 0x2c
FreeRTOS_Socket_t *pxSocket;

	/* Asserts must not appear before it has been determined that the network
	task is ready - otherwise the asserts will fail. */
	if( xIPIsNetworkTaskReady() == pdFALSE )
 800c076:	f7ff ff3b 	bl	800bef0 <xIPIsNetworkTaskReady>
 800c07a:	4603      	mov	r3, r0
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d102      	bne.n	800c086 <prvDetermineSocketSize+0x22>
	{
		xReturn = pdFAIL;
 800c080:	2300      	movs	r3, #0
 800c082:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c084:	e06c      	b.n	800c160 <prvDetermineSocketSize+0xfc>
	}
	else
	{
		/* Only Ethernet is currently supported. */
		configASSERT( xDomain == FREERTOS_AF_INET );
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	2b02      	cmp	r3, #2
 800c08a:	d009      	beq.n	800c0a0 <prvDetermineSocketSize+0x3c>
 800c08c:	f04f 0340 	mov.w	r3, #64	; 0x40
 800c090:	f383 8811 	msr	BASEPRI, r3
 800c094:	f3bf 8f6f 	isb	sy
 800c098:	f3bf 8f4f 	dsb	sy
 800c09c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c09e:	e7fe      	b.n	800c09e <prvDetermineSocketSize+0x3a>

		/* Check if the UDP socket-list has been initialised. */
		configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 800c0a0:	4b32      	ldr	r3, [pc, #200]	; (800c16c <prvDetermineSocketSize+0x108>)
 800c0a2:	689b      	ldr	r3, [r3, #8]
 800c0a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0a8:	d009      	beq.n	800c0be <prvDetermineSocketSize+0x5a>
 800c0aa:	f04f 0340 	mov.w	r3, #64	; 0x40
 800c0ae:	f383 8811 	msr	BASEPRI, r3
 800c0b2:	f3bf 8f6f 	isb	sy
 800c0b6:	f3bf 8f4f 	dsb	sy
 800c0ba:	627b      	str	r3, [r7, #36]	; 0x24
 800c0bc:	e7fe      	b.n	800c0bc <prvDetermineSocketSize+0x58>
		#if( ipconfigUSE_TCP == 1 )
		{
			/* Check if the TCP socket-list has been initialised. */
			configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 800c0be:	4b2c      	ldr	r3, [pc, #176]	; (800c170 <prvDetermineSocketSize+0x10c>)
 800c0c0:	689b      	ldr	r3, [r3, #8]
 800c0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0c6:	d009      	beq.n	800c0dc <prvDetermineSocketSize+0x78>
 800c0c8:	f04f 0340 	mov.w	r3, #64	; 0x40
 800c0cc:	f383 8811 	msr	BASEPRI, r3
 800c0d0:	f3bf 8f6f 	isb	sy
 800c0d4:	f3bf 8f4f 	dsb	sy
 800c0d8:	623b      	str	r3, [r7, #32]
 800c0da:	e7fe      	b.n	800c0da <prvDetermineSocketSize+0x76>
		}
		#endif  /* ipconfigUSE_TCP == 1 */

		if( xProtocol == FREERTOS_IPPROTO_UDP )
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2b11      	cmp	r3, #17
 800c0e0:	d115      	bne.n	800c10e <prvDetermineSocketSize+0xaa>
		{
			if( xType != FREERTOS_SOCK_DGRAM )
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	2b02      	cmp	r3, #2
 800c0e6:	d00e      	beq.n	800c106 <prvDetermineSocketSize+0xa2>
			{
				xReturn = pdFAIL;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                configASSERT( xReturn );
 800c0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d109      	bne.n	800c106 <prvDetermineSocketSize+0xa2>
 800c0f2:	f04f 0340 	mov.w	r3, #64	; 0x40
 800c0f6:	f383 8811 	msr	BASEPRI, r3
 800c0fa:	f3bf 8f6f 	isb	sy
 800c0fe:	f3bf 8f4f 	dsb	sy
 800c102:	61fb      	str	r3, [r7, #28]
 800c104:	e7fe      	b.n	800c104 <prvDetermineSocketSize+0xa0>
			}
			/* In case a UDP socket is created, do not allocate space for TCP data. */
			*pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	224c      	movs	r2, #76	; 0x4c
 800c10a:	601a      	str	r2, [r3, #0]
 800c10c:	e028      	b.n	800c160 <prvDetermineSocketSize+0xfc>
		}
#if( ipconfigUSE_TCP == 1 )
		else if( xProtocol == FREERTOS_IPPROTO_TCP )
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2b06      	cmp	r3, #6
 800c112:	d116      	bne.n	800c142 <prvDetermineSocketSize+0xde>
		{
			if( xType != FREERTOS_SOCK_STREAM )
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	2b01      	cmp	r3, #1
 800c118:	d00e      	beq.n	800c138 <prvDetermineSocketSize+0xd4>
			{
				xReturn = pdFAIL;
 800c11a:	2300      	movs	r3, #0
 800c11c:	62fb      	str	r3, [r7, #44]	; 0x2c
                configASSERT( xReturn );
 800c11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c120:	2b00      	cmp	r3, #0
 800c122:	d109      	bne.n	800c138 <prvDetermineSocketSize+0xd4>
 800c124:	f04f 0340 	mov.w	r3, #64	; 0x40
 800c128:	f383 8811 	msr	BASEPRI, r3
 800c12c:	f3bf 8f6f 	isb	sy
 800c130:	f3bf 8f4f 	dsb	sy
 800c134:	61bb      	str	r3, [r7, #24]
 800c136:	e7fe      	b.n	800c136 <prvDetermineSocketSize+0xd2>
			}

			*pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800c13e:	601a      	str	r2, [r3, #0]
 800c140:	e00e      	b.n	800c160 <prvDetermineSocketSize+0xfc>
		}
#endif  /* ipconfigUSE_TCP == 1 */
		else
		{
			xReturn = pdFAIL;
 800c142:	2300      	movs	r3, #0
 800c144:	62fb      	str	r3, [r7, #44]	; 0x2c
            configASSERT( xReturn );
 800c146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d109      	bne.n	800c160 <prvDetermineSocketSize+0xfc>
 800c14c:	f04f 0340 	mov.w	r3, #64	; 0x40
 800c150:	f383 8811 	msr	BASEPRI, r3
 800c154:	f3bf 8f6f 	isb	sy
 800c158:	f3bf 8f4f 	dsb	sy
 800c15c:	617b      	str	r3, [r7, #20]
 800c15e:	e7fe      	b.n	800c15e <prvDetermineSocketSize+0xfa>
		}
	}
	/* In case configASSERT() is not used */
	( void )xDomain;
	return xReturn;
 800c160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c162:	4618      	mov	r0, r3
 800c164:	3730      	adds	r7, #48	; 0x30
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}
 800c16a:	bf00      	nop
 800c16c:	200069a4 	.word	0x200069a4
 800c170:	20006990 	.word	0x20006990

0800c174 <FreeRTOS_socket>:
/*-----------------------------------------------------------*/

/* FreeRTOS_socket() allocates and initiates a socket */
Socket_t FreeRTOS_socket( BaseType_t xDomain, BaseType_t xType, BaseType_t xProtocol )
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b088      	sub	sp, #32
 800c178:	af00      	add	r7, sp, #0
 800c17a:	60f8      	str	r0, [r7, #12]
 800c17c:	60b9      	str	r1, [r7, #8]
 800c17e:	607a      	str	r2, [r7, #4]
FreeRTOS_Socket_t *pxSocket;
size_t uxSocketSize;
EventGroupHandle_t xEventGroup;
Socket_t xReturn;

	if( prvDetermineSocketSize( xDomain, xType, xProtocol, &uxSocketSize ) == pdFAIL )
 800c180:	f107 0310 	add.w	r3, r7, #16
 800c184:	687a      	ldr	r2, [r7, #4]
 800c186:	68b9      	ldr	r1, [r7, #8]
 800c188:	68f8      	ldr	r0, [r7, #12]
 800c18a:	f7ff ff6b 	bl	800c064 <prvDetermineSocketSize>
 800c18e:	4603      	mov	r3, r0
 800c190:	2b00      	cmp	r3, #0
 800c192:	d103      	bne.n	800c19c <FreeRTOS_socket+0x28>
	{
		xReturn = FREERTOS_INVALID_SOCKET;
 800c194:	f04f 33ff 	mov.w	r3, #4294967295
 800c198:	61bb      	str	r3, [r7, #24]
 800c19a:	e07b      	b.n	800c294 <FreeRTOS_socket+0x120>
	{
		/* Allocate the structure that will hold the socket information.  The
		size depends on the type of socket: UDP sockets need less space.  A
		define 'pvPortMallocSocket' will used to allocate the necessary space.
		By default it points to the FreeRTOS function 'pvPortMalloc()'. */
		pxSocket = ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize );
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7fb ff7e 	bl	80080a0 <pvPortMalloc>
 800c1a4:	61f8      	str	r0, [r7, #28]

		if( pxSocket == NULL )
 800c1a6:	69fb      	ldr	r3, [r7, #28]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d103      	bne.n	800c1b4 <FreeRTOS_socket+0x40>
		{
			pxSocket = ( FreeRTOS_Socket_t * ) FREERTOS_INVALID_SOCKET;
 800c1ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c1b0:	61fb      	str	r3, [r7, #28]
 800c1b2:	e06d      	b.n	800c290 <FreeRTOS_socket+0x11c>
			iptraceFAILED_TO_CREATE_SOCKET();
		}
		else if( ( xEventGroup = xEventGroupCreate() ) == NULL )
 800c1b4:	f7fb fba1 	bl	80078fa <xEventGroupCreate>
 800c1b8:	6178      	str	r0, [r7, #20]
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d106      	bne.n	800c1ce <FreeRTOS_socket+0x5a>
		{
			vPortFreeSocket( pxSocket );
 800c1c0:	69f8      	ldr	r0, [r7, #28]
 800c1c2:	f7fc f82f 	bl	8008224 <vPortFree>
			pxSocket = ( FreeRTOS_Socket_t * ) FREERTOS_INVALID_SOCKET;
 800c1c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c1ca:	61fb      	str	r3, [r7, #28]
 800c1cc:	e060      	b.n	800c290 <FreeRTOS_socket+0x11c>
			iptraceFAILED_TO_CREATE_EVENT_GROUP();
		}
		else
		{
			/* Clear the entire space to avoid nulling individual entries */
			memset( pxSocket, '\0', uxSocketSize );
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	2100      	movs	r1, #0
 800c1d4:	69f8      	ldr	r0, [r7, #28]
 800c1d6:	f004 ff37 	bl	8011048 <memset>

			pxSocket->xEventGroup = xEventGroup;
 800c1da:	69fb      	ldr	r3, [r7, #28]
 800c1dc:	697a      	ldr	r2, [r7, #20]
 800c1de:	605a      	str	r2, [r3, #4]

			/* Initialise the socket's members.  The semaphore will be created
			if the socket is bound to an address, for now the pointer to the
			semaphore is just set to NULL to show it has not been created. */
			if( xProtocol == FREERTOS_IPPROTO_UDP )
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2b11      	cmp	r3, #17
 800c1e4:	d104      	bne.n	800c1f0 <FreeRTOS_socket+0x7c>
			{
				vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800c1e6:	69fb      	ldr	r3, [r7, #28]
 800c1e8:	3338      	adds	r3, #56	; 0x38
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f7fb fc8b 	bl	8007b06 <vListInitialise>
					pxSocket->u.xUDP.uxMaxPackets = ( UBaseType_t ) ipconfigUDP_MAX_RX_PACKETS;
				}
				#endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
			}

			vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800c1f0:	69fb      	ldr	r3, [r7, #28]
 800c1f2:	3308      	adds	r3, #8
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7fb fca6 	bl	8007b46 <vListInitialiseItem>
			listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ( void * ) pxSocket );
 800c1fa:	69fb      	ldr	r3, [r7, #28]
 800c1fc:	69fa      	ldr	r2, [r7, #28]
 800c1fe:	615a      	str	r2, [r3, #20]

			pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 800c200:	69fb      	ldr	r3, [r7, #28]
 800c202:	f241 3288 	movw	r2, #5000	; 0x1388
 800c206:	61da      	str	r2, [r3, #28]
			pxSocket->xSendBlockTime    = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 800c208:	69fb      	ldr	r3, [r7, #28]
 800c20a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c20e:	621a      	str	r2, [r3, #32]
			pxSocket->ucSocketOptions   = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	2202      	movs	r2, #2
 800c214:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			pxSocket->ucProtocol        = ( uint8_t ) xProtocol; /* protocol: UDP or TCP */
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	b2da      	uxtb	r2, r3
 800c21c:	69fb      	ldr	r3, [r7, #28]
 800c21e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

			#if( ipconfigUSE_TCP == 1 )
			{
				if( xProtocol == FREERTOS_IPPROTO_TCP )
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2b06      	cmp	r3, #6
 800c226:	d133      	bne.n	800c290 <FreeRTOS_socket+0x11c>
				{
					/* StreamSize is expressed in number of bytes */
					/* Round up buffer sizes to nearest multiple of MSS */
					pxSocket->u.xTCP.usInitMSS    = pxSocket->u.xTCP.usCurMSS = ipconfigTCP_MSS;
 800c228:	69fb      	ldr	r3, [r7, #28]
 800c22a:	f44f 6291 	mov.w	r2, #1160	; 0x488
 800c22e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800c232:	69fb      	ldr	r3, [r7, #28]
 800c234:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c238:	69fb      	ldr	r3, [r7, #28]
 800c23a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
					pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 800c23e:	69fb      	ldr	r3, [r7, #28]
 800c240:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c244:	66da      	str	r2, [r3, #108]	; 0x6c
					pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 800c246:	f44f 6191 	mov.w	r1, #1160	; 0x488
 800c24a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c24e:	f7ff fe6b 	bl	800bf28 <FreeRTOS_round_up>
 800c252:	4602      	mov	r2, r0
 800c254:	69fb      	ldr	r3, [r7, #28]
 800c256:	671a      	str	r2, [r3, #112]	; 0x70
					/* Use half of the buffer size of the TCP windows */
					#if ( ipconfigUSE_TCP_WIN == 1 )
					{
						pxSocket->u.xTCP.uxRxWinSize  = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxRxStreamSize / 2 ) / ipconfigTCP_MSS );
 800c258:	69fb      	ldr	r3, [r7, #28]
 800c25a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c25c:	4a10      	ldr	r2, [pc, #64]	; (800c2a0 <FreeRTOS_socket+0x12c>)
 800c25e:	fba2 2303 	umull	r2, r3, r2, r3
 800c262:	0adb      	lsrs	r3, r3, #11
 800c264:	4619      	mov	r1, r3
 800c266:	2001      	movs	r0, #1
 800c268:	f7ff fe4e 	bl	800bf08 <FreeRTOS_max_uint32>
 800c26c:	4602      	mov	r2, r0
 800c26e:	69fb      	ldr	r3, [r7, #28]
 800c270:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
						pxSocket->u.xTCP.uxTxWinSize  = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxTxStreamSize / 2 ) / ipconfigTCP_MSS );
 800c274:	69fb      	ldr	r3, [r7, #28]
 800c276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c278:	4a09      	ldr	r2, [pc, #36]	; (800c2a0 <FreeRTOS_socket+0x12c>)
 800c27a:	fba2 2303 	umull	r2, r3, r2, r3
 800c27e:	0adb      	lsrs	r3, r3, #11
 800c280:	4619      	mov	r1, r3
 800c282:	2001      	movs	r0, #1
 800c284:	f7ff fe40 	bl	800bf08 <FreeRTOS_max_uint32>
 800c288:	4602      	mov	r2, r0
 800c28a:	69fb      	ldr	r3, [r7, #28]
 800c28c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				}
			}
			#endif  /* ipconfigUSE_TCP == 1 */
		}

		xReturn = ( Socket_t ) pxSocket;
 800c290:	69fb      	ldr	r3, [r7, #28]
 800c292:	61bb      	str	r3, [r7, #24]
	}

	/* Remove compiler warnings in the case the configASSERT() is not defined. */
	( void ) xDomain;

	return xReturn;
 800c294:	69bb      	ldr	r3, [r7, #24]
}
 800c296:	4618      	mov	r0, r3
 800c298:	3720      	adds	r7, #32
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}
 800c29e:	bf00      	nop
 800c2a0:	e1fc780f 	.word	0xe1fc780f

0800c2a4 <vSocketBind>:
 * vSocketBind(): internal version of bind() that should not be called directly.
 * 'xInternal' is used for TCP sockets only: it allows to have several
 * (connected) child sockets bound to the same server port.
 */
BaseType_t vSocketBind( FreeRTOS_Socket_t *pxSocket, struct freertos_sockaddr * pxAddress, size_t uxAddressLength, BaseType_t xInternal )
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b08c      	sub	sp, #48	; 0x30
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	60f8      	str	r0, [r7, #12]
 800c2ac:	60b9      	str	r1, [r7, #8]
 800c2ae:	607a      	str	r2, [r7, #4]
 800c2b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
	struct freertos_sockaddr xAddress;
#endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */

#if( ipconfigUSE_TCP == 1 )
	if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800c2bc:	2b06      	cmp	r3, #6
 800c2be:	d102      	bne.n	800c2c6 <vSocketBind+0x22>
	{
		pxSocketList = &xBoundTCPSocketsList;
 800c2c0:	4b42      	ldr	r3, [pc, #264]	; (800c3cc <vSocketBind+0x128>)
 800c2c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2c4:	e001      	b.n	800c2ca <vSocketBind+0x26>
	}
	else
#endif  /* ipconfigUSE_TCP == 1 */
	{
		pxSocketList = &xBoundUDPSocketsList;
 800c2c6:	4b42      	ldr	r3, [pc, #264]	; (800c3d0 <vSocketBind+0x12c>)
 800c2c8:	62bb      	str	r3, [r7, #40]	; 0x28

	/* The function prototype is designed to maintain the expected Berkeley
	sockets standard, but this implementation does not use all the parameters. */
	( void ) uxAddressLength;

	configASSERT( pxSocket );
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d109      	bne.n	800c2e4 <vSocketBind+0x40>
 800c2d0:	f04f 0340 	mov.w	r3, #64	; 0x40
 800c2d4:	f383 8811 	msr	BASEPRI, r3
 800c2d8:	f3bf 8f6f 	isb	sy
 800c2dc:	f3bf 8f4f 	dsb	sy
 800c2e0:	627b      	str	r3, [r7, #36]	; 0x24
 800c2e2:	e7fe      	b.n	800c2e2 <vSocketBind+0x3e>
	configASSERT( pxSocket != FREERTOS_INVALID_SOCKET );
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ea:	d109      	bne.n	800c300 <vSocketBind+0x5c>
 800c2ec:	f04f 0340 	mov.w	r3, #64	; 0x40
 800c2f0:	f383 8811 	msr	BASEPRI, r3
 800c2f4:	f3bf 8f6f 	isb	sy
 800c2f8:	f3bf 8f4f 	dsb	sy
 800c2fc:	623b      	str	r3, [r7, #32]
 800c2fe:	e7fe      	b.n	800c2fe <vSocketBind+0x5a>
	#if( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
	{
		/* pxAddress will be NULL if sendto() was called on a socket without the
		socket being bound to an address. In this case, automatically allocate
		an address and port to the socket. */
		if( pxAddress == NULL )
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d105      	bne.n	800c312 <vSocketBind+0x6e>
		{
			pxAddress = &xAddress;
 800c306:	f107 0314 	add.w	r3, r7, #20
 800c30a:	60bb      	str	r3, [r7, #8]
			/* Put the port to zero to be assigned later. */
			pxAddress->sin_port = 0u;
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	2200      	movs	r2, #0
 800c310:	805a      	strh	r2, [r3, #2]
	}
	#endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */

	/* Sockets must be bound before calling FreeRTOS_sendto() if
	ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
	configASSERT( pxAddress );
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d109      	bne.n	800c32c <vSocketBind+0x88>
 800c318:	f04f 0340 	mov.w	r3, #64	; 0x40
 800c31c:	f383 8811 	msr	BASEPRI, r3
 800c320:	f3bf 8f6f 	isb	sy
 800c324:	f3bf 8f4f 	dsb	sy
 800c328:	61fb      	str	r3, [r7, #28]
 800c32a:	e7fe      	b.n	800c32a <vSocketBind+0x86>

	if( pxAddress != NULL )
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d043      	beq.n	800c3ba <vSocketBind+0x116>
	{
		if( pxAddress->sin_port == 0u )
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	885b      	ldrh	r3, [r3, #2]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d110      	bne.n	800c35c <vSocketBind+0xb8>
		{
			pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t )pxSocket->ucProtocol );            
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800c340:	4618      	mov	r0, r3
 800c342:	f000 f905 	bl	800c550 <prvGetPrivatePortNumber>
 800c346:	4603      	mov	r3, r0
 800c348:	461a      	mov	r2, r3
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	805a      	strh	r2, [r3, #2]
            if( 0 == pxAddress->sin_port )
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	885b      	ldrh	r3, [r3, #2]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d102      	bne.n	800c35c <vSocketBind+0xb8>
            {
                return -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 800c356:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800c35a:	e032      	b.n	800c3c2 <vSocketBind+0x11e>
		confirmed that the socket was not yet bound to a port.  If it is called
		from the IP-task, no such check is necessary. */

		/* Check to ensure the port is not already in use.  If the bind is
		called internally, a port MAY be used by more than one socket. */
		if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d004      	beq.n	800c36c <vSocketBind+0xc8>
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800c368:	2b06      	cmp	r3, #6
 800c36a:	d00c      	beq.n	800c386 <vSocketBind+0xe2>
			( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	885b      	ldrh	r3, [r3, #2]
 800c370:	4619      	mov	r1, r3
 800c372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c374:	f000 f94c 	bl	800c610 <pxListFindListItemWithValue>
 800c378:	4603      	mov	r3, r0
		if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d003      	beq.n	800c386 <vSocketBind+0xe2>
		{
			FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
				pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ? "TC" : "UD",
				FreeRTOS_ntohs( pxAddress->sin_port ) ) );
			xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 800c37e:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 800c382:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c384:	e01c      	b.n	800c3c0 <vSocketBind+0x11c>
		}
		else
		{
			/* Allocate the port number to the socket.
			This macro will set 'xBoundSocketListItem->xItemValue' */
			socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	885b      	ldrh	r3, [r3, #2]
 800c38a:	461a      	mov	r2, r3
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	609a      	str	r2, [r3, #8]

			/* And also store it in a socket field 'usLocalPort' in host-byte-order,
			mostly used for logging and debugging purposes */
			pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	885b      	ldrh	r3, [r3, #2]
 800c394:	021b      	lsls	r3, r3, #8
 800c396:	b21a      	sxth	r2, r3
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	885b      	ldrh	r3, [r3, #2]
 800c39c:	0a1b      	lsrs	r3, r3, #8
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	b21b      	sxth	r3, r3
 800c3a2:	4313      	orrs	r3, r2
 800c3a4:	b21b      	sxth	r3, r3
 800c3a6:	b29a      	uxth	r2, r3
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	849a      	strh	r2, [r3, #36]	; 0x24
					vTaskSuspendAll();
				}
				#endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

				/* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
				vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	3308      	adds	r3, #8
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3b4:	f7fb fbd4 	bl	8007b60 <vListInsertEnd>
 800c3b8:	e002      	b.n	800c3c0 <vSocketBind+0x11c>
			}
		}
	}
	else
	{
		xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 800c3ba:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800c3be:	62fb      	str	r3, [r7, #44]	; 0x2c
	if( xReturn != 0 )
	{
		iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
	}

	return xReturn;
 800c3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
} /* Tested */
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3730      	adds	r7, #48	; 0x30
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}
 800c3ca:	bf00      	nop
 800c3cc:	20006990 	.word	0x20006990
 800c3d0:	200069a4 	.word	0x200069a4

0800c3d4 <FreeRTOS_closesocket>:
 * In case of a TCP socket: the connection will not be closed automatically
 * Subsequent messages for the closed socket will be responded to with a RST
 * The IP-task will actually close the socket, after receiving a 'eSocketCloseEvent' message
 */
BaseType_t FreeRTOS_closesocket( Socket_t xSocket )
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b086      	sub	sp, #24
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
BaseType_t xResult;
#if( ipconfigUSE_TCP == 1 ) && ( ipconfigUSE_CALLBACKS == 1 )
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * )xSocket;
#endif
IPStackEvent_t xCloseEvent;
xCloseEvent.eEventType = eSocketCloseEvent;
 800c3dc:	2309      	movs	r3, #9
 800c3de:	733b      	strb	r3, [r7, #12]
xCloseEvent.pvData = ( void * ) xSocket;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	613b      	str	r3, [r7, #16]

	if( ( xSocket == NULL ) || ( xSocket == FREERTOS_INVALID_SOCKET ) )
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d003      	beq.n	800c3f2 <FreeRTOS_closesocket+0x1e>
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3f0:	d102      	bne.n	800c3f8 <FreeRTOS_closesocket+0x24>
	{
		xResult = 0;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	617b      	str	r3, [r7, #20]
 800c3f6:	e00e      	b.n	800c416 <FreeRTOS_closesocket+0x42>
		packet handling. */

		/* Note when changing the time-out value below, it must be checked who is calling
		this function. If it is called by the IP-task, a deadlock could occur.
		The IP-task would only call it in case of a user call-back */
		if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) 0 ) == pdFAIL )
 800c3f8:	f107 030c 	add.w	r3, r7, #12
 800c3fc:	2100      	movs	r1, #0
 800c3fe:	4618      	mov	r0, r3
 800c400:	f7ff f8ce 	bl	800b5a0 <xSendEventStructToIPTask>
 800c404:	4603      	mov	r3, r0
 800c406:	2b00      	cmp	r3, #0
 800c408:	d103      	bne.n	800c412 <FreeRTOS_closesocket+0x3e>
		{
			FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
			xResult = -1;
 800c40a:	f04f 33ff 	mov.w	r3, #4294967295
 800c40e:	617b      	str	r3, [r7, #20]
 800c410:	e001      	b.n	800c416 <FreeRTOS_closesocket+0x42>
		}
		else
		{
			xResult = 1;
 800c412:	2301      	movs	r3, #1
 800c414:	617b      	str	r3, [r7, #20]
		}
	}

	return xResult;
 800c416:	697b      	ldr	r3, [r7, #20]
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3718      	adds	r7, #24
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <vSocketClose>:

/* This is the internal version of FreeRTOS_closesocket()
 * It will be called by the IPtask only to avoid problems with synchronicity
 */
void *vSocketClose( FreeRTOS_Socket_t *pxSocket )
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
NetworkBufferDescriptor_t *pxNetworkBuffer;

	#if( ipconfigUSE_TCP == 1 )
	{
		/* For TCP: clean up a little more. */
		if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800c42e:	2b06      	cmp	r3, #6
 800c430:	d122      	bne.n	800c478 <vSocketClose+0x58>
		{
			#if( ipconfigUSE_TCP_WIN == 1 )
			{
				if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c436:	2b00      	cmp	r3, #0
 800c438:	d004      	beq.n	800c444 <vSocketClose+0x24>
				{
					vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c43e:	4618      	mov	r0, r3
 800c440:	f004 fac8 	bl	80109d4 <vReleaseNetworkBufferAndDescriptor>
				}
				/* Free the resources which were claimed by the tcpWin member */
				vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	33dc      	adds	r3, #220	; 0xdc
 800c448:	4618      	mov	r0, r3
 800c44a:	f003 fac9 	bl	800f9e0 <vTCPWindowDestroy>
			}
			#endif /* ipconfigUSE_TCP_WIN */

			/* Free the input and output streams */
			if( pxSocket->u.xTCP.rxStream != NULL )
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c452:	2b00      	cmp	r3, #0
 800c454:	d004      	beq.n	800c460 <vSocketClose+0x40>
			{
				vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c45a:	4618      	mov	r0, r3
 800c45c:	f7fb fee2 	bl	8008224 <vPortFree>
			}

			if( pxSocket->u.xTCP.txStream != NULL )
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c464:	2b00      	cmp	r3, #0
 800c466:	d004      	beq.n	800c472 <vSocketClose+0x52>
			{
				vPortFreeLarge( pxSocket->u.xTCP.txStream );
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7fb fed9 	bl	8008224 <vPortFree>
			}

			/* In case this is a child socket, make sure the child-count of the
			parent socket is decreased. */
			prvTCPSetSocketCount( pxSocket );
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 f834 	bl	800c4e0 <prvTCPSetSocketCount>
	}
	#endif  /* ipconfigUSE_TCP == 1 */

	/* Socket must be unbound first, to ensure no more packets are queued on
	it. */
	if( socketSOCKET_IS_BOUND( pxSocket ) != pdFALSE )
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	699b      	ldr	r3, [r3, #24]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d001      	beq.n	800c484 <vSocketClose+0x64>
 800c480:	2301      	movs	r3, #1
 800c482:	e000      	b.n	800c486 <vSocketClose+0x66>
 800c484:	2300      	movs	r3, #0
 800c486:	2b00      	cmp	r3, #0
 800c488:	d004      	beq.n	800c494 <vSocketClose+0x74>
		{
			vTaskSuspendAll();
		}
		#endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

		uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	3308      	adds	r3, #8
 800c48e:	4618      	mov	r0, r3
 800c490:	f7fb fbc3 	bl	8007c1a <uxListRemove>
		#endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
	}

	/* Now the socket is not bound the list of waiting packets can be
	drained. */
	if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800c49a:	2b11      	cmp	r3, #17
 800c49c:	d10f      	bne.n	800c4be <vSocketClose+0x9e>
	{
		while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800c49e:	e00a      	b.n	800c4b6 <vSocketClose+0x96>
		{
			pxNetworkBuffer = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4a4:	68db      	ldr	r3, [r3, #12]
 800c4a6:	60fb      	str	r3, [r7, #12]
			uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7fb fbb5 	bl	8007c1a <uxListRemove>
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800c4b0:	68f8      	ldr	r0, [r7, #12]
 800c4b2:	f004 fa8f 	bl	80109d4 <vReleaseNetworkBufferAndDescriptor>
		while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d1f0      	bne.n	800c4a0 <vSocketClose+0x80>
		}
	}

	if( pxSocket->xEventGroup )
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d004      	beq.n	800c4d0 <vSocketClose+0xb0>
	{
		vEventGroupDelete( pxSocket->xEventGroup );
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	685b      	ldr	r3, [r3, #4]
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7fb faeb 	bl	8007aa6 <vEventGroupDelete>
		}
	}
	#endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

	/* Anf finally, after all resources have been freed, free the socket space */
	vPortFreeSocket( pxSocket );
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f7fb fea7 	bl	8008224 <vPortFree>

	return 0;
 800c4d6:	2300      	movs	r3, #0
} /* Tested */
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3710      	adds	r7, #16
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <prvTCPSetSocketCount>:
	 * When a child socket gets closed, make sure to update the child-count of the
	 * parent.  When a listening parent socket is closed, make sure no child-sockets
	 * keep a pointer to it.
	 */
	static void prvTCPSetSocketCount( FreeRTOS_Socket_t *pxSocketToDelete )
	{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b087      	sub	sp, #28
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
	const ListItem_t *pxIterator;
	const MiniListItem_t *pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xBoundTCPSocketsList );
 800c4e8:	4b18      	ldr	r3, [pc, #96]	; (800c54c <prvTCPSetSocketCount+0x6c>)
 800c4ea:	613b      	str	r3, [r7, #16]
	FreeRTOS_Socket_t *pxOtherSocket;
	uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c4f0:	81fb      	strh	r3, [r7, #14]

		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	617b      	str	r3, [r7, #20]
 800c4f8:	e01d      	b.n	800c536 <prvTCPSetSocketCount+0x56>
			 pxIterator != ( const ListItem_t * ) pxEnd;
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			pxOtherSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	68db      	ldr	r3, [r3, #12]
 800c4fe:	60bb      	str	r3, [r7, #8]
			if( ( pxOtherSocket->u.xTCP.ucTCPState == eTCP_LISTEN ) &&
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c506:	2b01      	cmp	r3, #1
 800c508:	d112      	bne.n	800c530 <prvTCPSetSocketCount+0x50>
				( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			if( ( pxOtherSocket->u.xTCP.ucTCPState == eTCP_LISTEN ) &&
 800c50e:	89fa      	ldrh	r2, [r7, #14]
 800c510:	429a      	cmp	r2, r3
 800c512:	d10d      	bne.n	800c530 <prvTCPSetSocketCount+0x50>
				( pxOtherSocket->u.xTCP.usChildCount ) )
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
				( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d008      	beq.n	800c530 <prvTCPSetSocketCount+0x50>
			{
				pxOtherSocket->u.xTCP.usChildCount--;
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800c524:	3b01      	subs	r3, #1
 800c526:	b29a      	uxth	r2, r3
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
				FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
					pxOtherSocket->usLocalPort,
					pxOtherSocket->u.xTCP.usChildCount,
					pxOtherSocket->u.xTCP.usBacklog,
					pxOtherSocket->u.xTCP.usChildCount == 1u ? "" : "ren" ) );
				break;
 800c52e:	e006      	b.n	800c53e <prvTCPSetSocketCount+0x5e>
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	617b      	str	r3, [r7, #20]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800c536:	697a      	ldr	r2, [r7, #20]
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d1dd      	bne.n	800c4fa <prvTCPSetSocketCount+0x1a>
			}
		}
	}
 800c53e:	bf00      	nop
 800c540:	371c      	adds	r7, #28
 800c542:	46bd      	mov	sp, r7
 800c544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c548:	4770      	bx	lr
 800c54a:	bf00      	nop
 800c54c:	20006998 	.word	0x20006998

0800c550 <prvGetPrivatePortNumber>:

/*-----------------------------------------------------------*/

/* Find an available port number per https://tools.ietf.org/html/rfc6056. */
static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b088      	sub	sp, #32
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
const uint16_t usEphemeralPortCount = 
 800c558:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800c55c:	827b      	strh	r3, [r7, #18]
    socketAUTO_PORT_ALLOCATION_MAX_NUMBER - socketAUTO_PORT_ALLOCATION_START_NUMBER + 1;
uint16_t usIterations = usEphemeralPortCount; 
 800c55e:	8a7b      	ldrh	r3, [r7, #18]
 800c560:	83fb      	strh	r3, [r7, #30]
uint32_t ulRandomSeed = 0;
 800c562:	2300      	movs	r3, #0
 800c564:	60fb      	str	r3, [r7, #12]
uint16_t usResult = 0;
 800c566:	2300      	movs	r3, #0
 800c568:	83bb      	strh	r3, [r7, #28]
BaseType_t xGotZeroOnce = pdFALSE;
 800c56a:	2300      	movs	r3, #0
 800c56c:	61bb      	str	r3, [r7, #24]
const List_t *pxList;

#if ipconfigUSE_TCP == 1
	if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2b06      	cmp	r3, #6
 800c572:	d102      	bne.n	800c57a <prvGetPrivatePortNumber+0x2a>
	{
		pxList = &xBoundTCPSocketsList;
 800c574:	4b24      	ldr	r3, [pc, #144]	; (800c608 <prvGetPrivatePortNumber+0xb8>)
 800c576:	617b      	str	r3, [r7, #20]
 800c578:	e001      	b.n	800c57e <prvGetPrivatePortNumber+0x2e>
	}
	else
#endif
	{
		pxList = &xBoundUDPSocketsList;
 800c57a:	4b24      	ldr	r3, [pc, #144]	; (800c60c <prvGetPrivatePortNumber+0xbc>)
 800c57c:	617b      	str	r3, [r7, #20]
    /* Find the next available port using the random seed as a starting 
    point. */
    do
    {
        /* Generate a random seed. */
        ulRandomSeed = ipconfigRAND32( );
 800c57e:	f004 fe17 	bl	80111b0 <rand>
 800c582:	4603      	mov	r3, r0
 800c584:	60fb      	str	r3, [r7, #12]

        /* Only proceed if the random number generator succeeded. */
        if( 0 == ulRandomSeed )
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d105      	bne.n	800c598 <prvGetPrivatePortNumber+0x48>
        {
            if( pdFALSE == xGotZeroOnce )
 800c58c:	69bb      	ldr	r3, [r7, #24]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d133      	bne.n	800c5fa <prvGetPrivatePortNumber+0xaa>
            {
                xGotZeroOnce = pdTRUE;
 800c592:	2301      	movs	r3, #1
 800c594:	61bb      	str	r3, [r7, #24]
                continue;
 800c596:	e02c      	b.n	800c5f2 <prvGetPrivatePortNumber+0xa2>
        }

        /* Map the random to a candidate port. */
        usResult =
            socketAUTO_PORT_ALLOCATION_START_NUMBER +
            ( ( ( uint16_t )ulRandomSeed ) % usEphemeralPortCount );
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	b29b      	uxth	r3, r3
            socketAUTO_PORT_ALLOCATION_START_NUMBER +
 800c59c:	8a7a      	ldrh	r2, [r7, #18]
 800c59e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c5a2:	fb02 f201 	mul.w	r2, r2, r1
 800c5a6:	1a9b      	subs	r3, r3, r2
 800c5a8:	b29b      	uxth	r3, r3
        usResult =
 800c5aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c5ae:	83bb      	strh	r3, [r7, #28]

        /* Check if there's already an open socket with the same protocol
        and port. */
        if( NULL == pxListFindListItemWithValue( 
            pxList, 
            ( TickType_t )FreeRTOS_htons( usResult ) ) )
 800c5b0:	8bbb      	ldrh	r3, [r7, #28]
 800c5b2:	021b      	lsls	r3, r3, #8
 800c5b4:	b21a      	sxth	r2, r3
 800c5b6:	8bbb      	ldrh	r3, [r7, #28]
 800c5b8:	0a1b      	lsrs	r3, r3, #8
 800c5ba:	b29b      	uxth	r3, r3
 800c5bc:	b21b      	sxth	r3, r3
 800c5be:	4313      	orrs	r3, r2
 800c5c0:	b21b      	sxth	r3, r3
 800c5c2:	b29b      	uxth	r3, r3
        if( NULL == pxListFindListItemWithValue( 
 800c5c4:	4619      	mov	r1, r3
 800c5c6:	6978      	ldr	r0, [r7, #20]
 800c5c8:	f000 f822 	bl	800c610 <pxListFindListItemWithValue>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d10a      	bne.n	800c5e8 <prvGetPrivatePortNumber+0x98>
        {
            usResult = FreeRTOS_htons( usResult );
 800c5d2:	8bbb      	ldrh	r3, [r7, #28]
 800c5d4:	021b      	lsls	r3, r3, #8
 800c5d6:	b21a      	sxth	r2, r3
 800c5d8:	8bbb      	ldrh	r3, [r7, #28]
 800c5da:	0a1b      	lsrs	r3, r3, #8
 800c5dc:	b29b      	uxth	r3, r3
 800c5de:	b21b      	sxth	r3, r3
 800c5e0:	4313      	orrs	r3, r2
 800c5e2:	b21b      	sxth	r3, r3
 800c5e4:	83bb      	strh	r3, [r7, #28]
            break;
 800c5e6:	e009      	b.n	800c5fc <prvGetPrivatePortNumber+0xac>
        }
        else
        {
            usResult = 0;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	83bb      	strh	r3, [r7, #28]
        }

        usIterations--;
 800c5ec:	8bfb      	ldrh	r3, [r7, #30]
 800c5ee:	3b01      	subs	r3, #1
 800c5f0:	83fb      	strh	r3, [r7, #30]
    }
    while( usIterations > 0 );
 800c5f2:	8bfb      	ldrh	r3, [r7, #30]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d1c2      	bne.n	800c57e <prvGetPrivatePortNumber+0x2e>
 800c5f8:	e000      	b.n	800c5fc <prvGetPrivatePortNumber+0xac>
                break;
 800c5fa:	bf00      	nop
    
    return usResult;
 800c5fc:	8bbb      	ldrh	r3, [r7, #28]
} 
 800c5fe:	4618      	mov	r0, r3
 800c600:	3720      	adds	r7, #32
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
 800c606:	bf00      	nop
 800c608:	20006990 	.word	0x20006990
 800c60c:	200069a4 	.word	0x200069a4

0800c610 <pxListFindListItemWithValue>:
/*-----------------------------------------------------------*/

/* pxListFindListItemWithValue: find a list item in a bound socket list
'xWantedItemValue' refers to a port number */
static const ListItem_t * pxListFindListItemWithValue( const List_t *pxList, TickType_t xWantedItemValue )
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b086      	sub	sp, #24
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
const ListItem_t * pxResult = NULL;
 800c61a:	2300      	movs	r3, #0
 800c61c:	617b      	str	r3, [r7, #20]

	if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 800c61e:	f7ff fc67 	bl	800bef0 <xIPIsNetworkTaskReady>
 800c622:	4603      	mov	r3, r0
 800c624:	2b00      	cmp	r3, #0
 800c626:	d018      	beq.n	800c65a <pxListFindListItemWithValue+0x4a>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d015      	beq.n	800c65a <pxListFindListItemWithValue+0x4a>
	{
		const ListItem_t *pxIterator;
		const MiniListItem_t *pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( pxList );
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	3308      	adds	r3, #8
 800c632:	60fb      	str	r3, [r7, #12]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	613b      	str	r3, [r7, #16]
 800c63a:	e00a      	b.n	800c652 <pxListFindListItemWithValue+0x42>
			 pxIterator != ( const ListItem_t * ) pxEnd;
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	429a      	cmp	r2, r3
 800c644:	d102      	bne.n	800c64c <pxListFindListItemWithValue+0x3c>
			{
				pxResult = pxIterator;
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	617b      	str	r3, [r7, #20]
				break;
 800c64a:	e006      	b.n	800c65a <pxListFindListItemWithValue+0x4a>
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	613b      	str	r3, [r7, #16]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800c652:	693a      	ldr	r2, [r7, #16]
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	429a      	cmp	r2, r3
 800c658:	d1f0      	bne.n	800c63c <pxListFindListItemWithValue+0x2c>
			}
		}
	}

	return pxResult;
 800c65a:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800c65c:	4618      	mov	r0, r3
 800c65e:	3718      	adds	r7, #24
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <pxUDPSocketLookup>:

/*-----------------------------------------------------------*/

FreeRTOS_Socket_t *pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b086      	sub	sp, #24
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
const ListItem_t *pxListItem;
FreeRTOS_Socket_t *pxSocket = NULL;
 800c66c:	2300      	movs	r3, #0
 800c66e:	617b      	str	r3, [r7, #20]

	/* Looking up a socket is quite simple, find a match with the local port.

	See if there is a list item associated with the port number on the
	list of bound sockets. */
	pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 800c670:	6879      	ldr	r1, [r7, #4]
 800c672:	480e      	ldr	r0, [pc, #56]	; (800c6ac <pxUDPSocketLookup+0x48>)
 800c674:	f7ff ffcc 	bl	800c610 <pxListFindListItemWithValue>
 800c678:	6138      	str	r0, [r7, #16]

	if( pxListItem != NULL )
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d00f      	beq.n	800c6a0 <pxUDPSocketLookup+0x3c>
	{
		/* The owner of the list item is the socket itself. */
		pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxListItem );
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	68db      	ldr	r3, [r3, #12]
 800c684:	617b      	str	r3, [r7, #20]
		configASSERT( pxSocket != NULL );
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d109      	bne.n	800c6a0 <pxUDPSocketLookup+0x3c>
 800c68c:	f04f 0340 	mov.w	r3, #64	; 0x40
 800c690:	f383 8811 	msr	BASEPRI, r3
 800c694:	f3bf 8f6f 	isb	sy
 800c698:	f3bf 8f4f 	dsb	sy
 800c69c:	60fb      	str	r3, [r7, #12]
 800c69e:	e7fe      	b.n	800c69e <pxUDPSocketLookup+0x3a>
	}
	return pxSocket;
 800c6a0:	697b      	ldr	r3, [r7, #20]
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3718      	adds	r7, #24
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
 800c6aa:	bf00      	nop
 800c6ac:	200069a4 	.word	0x200069a4

0800c6b0 <vSocketWakeUpUser>:
}

/*-----------------------------------------------------------*/

void vSocketWakeUpUser( FreeRTOS_Socket_t *pxSocket )
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b084      	sub	sp, #16
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
	}
	#endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
	{
		if( pxSocket->pxSocketSet != NULL )
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d015      	beq.n	800c6ec <vSocketWakeUpUser+0x3c>
		{
			EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & eSELECT_ALL;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	0a1b      	lsrs	r3, r3, #8
 800c6c6:	f003 030f 	and.w	r3, r3, #15
 800c6ca:	60fb      	str	r3, [r7, #12]
			if( xSelectBits != 0ul )
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d00c      	beq.n	800c6ec <vSocketWakeUpUser+0x3c>
			{
				pxSocket->xSocketBits |= xSelectBits;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	431a      	orrs	r2, r3
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	631a      	str	r2, [r3, #48]	; 0x30
				xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	68f9      	ldr	r1, [r7, #12]
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7fb f954 	bl	8007994 <xEventGroupSetBits>
			}
		}

		pxSocket->xEventBits &= eSOCKET_ALL;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	601a      	str	r2, [r3, #0]
	}
	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */

	if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0u ) )
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	685b      	ldr	r3, [r3, #4]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d00b      	beq.n	800c718 <vSocketWakeUpUser+0x68>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d007      	beq.n	800c718 <vSocketWakeUpUser+0x68>
	{
		xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	685a      	ldr	r2, [r3, #4]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4619      	mov	r1, r3
 800c712:	4610      	mov	r0, r2
 800c714:	f7fb f93e 	bl	8007994 <xEventGroupSetBits>
	}

	pxSocket->xEventBits = 0ul;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2200      	movs	r2, #0
 800c71c:	601a      	str	r2, [r3, #0]
}
 800c71e:	bf00      	nop
 800c720:	3710      	adds	r7, #16
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
	...

0800c728 <xTCPTimerCheck>:
	 * - Send new data
	 * - Send a keep-alive packet
	 * - Check for timeout (in non-connected states only)
	 */
	TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
	{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b08a      	sub	sp, #40	; 0x28
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
	FreeRTOS_Socket_t *pxSocket;
	TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
 800c730:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c734:	627b      	str	r3, [r7, #36]	; 0x24
	TickType_t xNow = xTaskGetTickCount();
 800c736:	f7fc fe0d 	bl	8009354 <xTaskGetTickCount>
 800c73a:	61b8      	str	r0, [r7, #24]
	static TickType_t xLastTime = 0u;
	TickType_t xDelta = xNow - xLastTime;
 800c73c:	4b31      	ldr	r3, [pc, #196]	; (800c804 <xTCPTimerCheck+0xdc>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	69ba      	ldr	r2, [r7, #24]
 800c742:	1ad3      	subs	r3, r2, r3
 800c744:	623b      	str	r3, [r7, #32]
	ListItem_t* pxEnd = ( ListItem_t * ) listGET_END_MARKER( &xBoundTCPSocketsList );
 800c746:	4b30      	ldr	r3, [pc, #192]	; (800c808 <xTCPTimerCheck+0xe0>)
 800c748:	617b      	str	r3, [r7, #20]
	ListItem_t *pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800c74a:	4b30      	ldr	r3, [pc, #192]	; (800c80c <xTCPTimerCheck+0xe4>)
 800c74c:	68db      	ldr	r3, [r3, #12]
 800c74e:	61fb      	str	r3, [r7, #28]

		xLastTime = xNow;
 800c750:	4a2c      	ldr	r2, [pc, #176]	; (800c804 <xTCPTimerCheck+0xdc>)
 800c752:	69bb      	ldr	r3, [r7, #24]
 800c754:	6013      	str	r3, [r2, #0]

		if( xDelta == 0u )
 800c756:	6a3b      	ldr	r3, [r7, #32]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d149      	bne.n	800c7f0 <xTCPTimerCheck+0xc8>
		{
			xDelta = 1u;
 800c75c:	2301      	movs	r3, #1
 800c75e:	623b      	str	r3, [r7, #32]
		}

		while( pxIterator != pxEnd )
 800c760:	e046      	b.n	800c7f0 <xTCPTimerCheck+0xc8>
		{
			pxSocket = ( FreeRTOS_Socket_t * )listGET_LIST_ITEM_OWNER( pxIterator );
 800c762:	69fb      	ldr	r3, [r7, #28]
 800c764:	68db      	ldr	r3, [r3, #12]
 800c766:	613b      	str	r3, [r7, #16]
			pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 800c768:	69fb      	ldr	r3, [r7, #28]
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	61fb      	str	r3, [r7, #28]

			/* Sockets with 'tmout == 0' do not need any regular attention. */
			if( pxSocket->u.xTCP.usTimeout == 0u )
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c774:	2b00      	cmp	r3, #0
 800c776:	d100      	bne.n	800c77a <xTCPTimerCheck+0x52>
			{
				continue;
 800c778:	e03a      	b.n	800c7f0 <xTCPTimerCheck+0xc8>
			}

			if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c780:	461a      	mov	r2, r3
 800c782:	6a3b      	ldr	r3, [r7, #32]
 800c784:	429a      	cmp	r2, r3
 800c786:	d90a      	bls.n	800c79e <xTCPTimerCheck+0x76>
			{
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c78e:	6a3b      	ldr	r3, [r7, #32]
 800c790:	b29b      	uxth	r3, r3
 800c792:	1ad3      	subs	r3, r2, r3
 800c794:	b29a      	uxth	r2, r3
 800c796:	693b      	ldr	r3, [r7, #16]
 800c798:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c79c:	e00b      	b.n	800c7b6 <xTCPTimerCheck+0x8e>
			}
			else
			{
			int rc ;
				pxSocket->u.xTCP.usTimeout = 0u;
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
				rc = xTCPSocketCheck( pxSocket );
 800c7a6:	6938      	ldr	r0, [r7, #16]
 800c7a8:	f000 fdba 	bl	800d320 <xTCPSocketCheck>
 800c7ac:	60f8      	str	r0, [r7, #12]

				/* Within this function, the socket might want to send a delayed
				ack or send out data or whatever it needs to do. */
				if( rc < 0 )
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	da00      	bge.n	800c7b6 <xTCPTimerCheck+0x8e>
				{
					/* Continue because the socket was deleted. */
					continue;
 800c7b4:	e01c      	b.n	800c7f0 <xTCPTimerCheck+0xc8>
			}

			/* In xEventBits the driver may indicate that the socket has
			important events for the user.  These are only done just before the
			IP-task goes to sleep. */
			if( pxSocket->xEventBits != 0u )
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d008      	beq.n	800c7d0 <xTCPTimerCheck+0xa8>
			{
				if( xWillSleep != pdFALSE )
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d003      	beq.n	800c7cc <xTCPTimerCheck+0xa4>
				{
					/* The IP-task is about to go to sleep, so messages can be
					sent to the socket owners. */
					vSocketWakeUpUser( pxSocket );
 800c7c4:	6938      	ldr	r0, [r7, #16]
 800c7c6:	f7ff ff73 	bl	800c6b0 <vSocketWakeUpUser>
 800c7ca:	e001      	b.n	800c7d0 <xTCPTimerCheck+0xa8>
				}
				else
				{
					/* Or else make sure this will be called again to wake-up
					the sockets' owner. */
					xShortest = ( TickType_t ) 0;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	627b      	str	r3, [r7, #36]	; 0x24
				}
			}

			if( ( pxSocket->u.xTCP.usTimeout != 0u ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d00a      	beq.n	800c7f0 <xTCPTimerCheck+0xc8>
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c7e0:	461a      	mov	r2, r3
 800c7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d203      	bcs.n	800c7f0 <xTCPTimerCheck+0xc8>
			{
				xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c7ee:	627b      	str	r3, [r7, #36]	; 0x24
		while( pxIterator != pxEnd )
 800c7f0:	69fa      	ldr	r2, [r7, #28]
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d1b4      	bne.n	800c762 <xTCPTimerCheck+0x3a>
			}
		}

		return xShortest;
 800c7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3728      	adds	r7, #40	; 0x28
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}
 800c802:	bf00      	nop
 800c804:	20004ec4 	.word	0x20004ec4
 800c808:	20006998 	.word	0x20006998
 800c80c:	20006990 	.word	0x20006990

0800c810 <pxTCPSocketLookup>:
	 * looking up a socket is a little more complex:
	 * Both a local port, and a remote port and IP address are being used
	 * For a socket in listening mode, the remote port and IP address are both 0
	 */
	FreeRTOS_Socket_t *pxTCPSocketLookup( uint32_t ulLocalIP, UBaseType_t uxLocalPort, uint32_t ulRemoteIP, UBaseType_t uxRemotePort )
	{
 800c810:	b480      	push	{r7}
 800c812:	b08b      	sub	sp, #44	; 0x2c
 800c814:	af00      	add	r7, sp, #0
 800c816:	60f8      	str	r0, [r7, #12]
 800c818:	60b9      	str	r1, [r7, #8]
 800c81a:	607a      	str	r2, [r7, #4]
 800c81c:	603b      	str	r3, [r7, #0]
	ListItem_t *pxIterator;
	FreeRTOS_Socket_t *pxResult = NULL, *pxListenSocket = NULL;
 800c81e:	2300      	movs	r3, #0
 800c820:	623b      	str	r3, [r7, #32]
 800c822:	2300      	movs	r3, #0
 800c824:	61fb      	str	r3, [r7, #28]
	MiniListItem_t *pxEnd = ( MiniListItem_t* )listGET_END_MARKER( &xBoundTCPSocketsList );
 800c826:	4b1c      	ldr	r3, [pc, #112]	; (800c898 <pxTCPSocketLookup+0x88>)
 800c828:	61bb      	str	r3, [r7, #24]

		/* Parameter not yet supported. */
		( void ) ulLocalIP;

		for( pxIterator  = ( ListItem_t * ) listGET_NEXT( pxEnd );
 800c82a:	69bb      	ldr	r3, [r7, #24]
 800c82c:	685b      	ldr	r3, [r3, #4]
 800c82e:	627b      	str	r3, [r7, #36]	; 0x24
 800c830:	e021      	b.n	800c876 <pxTCPSocketLookup+0x66>
			 pxIterator != ( ListItem_t * ) pxEnd;
			 pxIterator  = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800c832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c834:	68db      	ldr	r3, [r3, #12]
 800c836:	617b      	str	r3, [r7, #20]

			if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	b29b      	uxth	r3, r3
 800c840:	429a      	cmp	r2, r3
 800c842:	d115      	bne.n	800c870 <pxTCPSocketLookup+0x60>
			{
				if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c84a:	2b01      	cmp	r3, #1
 800c84c:	d102      	bne.n	800c854 <pxTCPSocketLookup+0x44>
				{
					/* If this is a socket listening to uxLocalPort, remember it
					in case there is no perfect match. */
					pxListenSocket = pxSocket;
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	61fb      	str	r3, [r7, #28]
 800c852:	e00d      	b.n	800c870 <pxTCPSocketLookup+0x60>
				}
				else if( ( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort ) && ( pxSocket->u.xTCP.ulRemoteIP == ulRemoteIP ) )
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	b29b      	uxth	r3, r3
 800c85c:	429a      	cmp	r2, r3
 800c85e:	d107      	bne.n	800c870 <pxTCPSocketLookup+0x60>
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	429a      	cmp	r2, r3
 800c868:	d102      	bne.n	800c870 <pxTCPSocketLookup+0x60>
				{
					/* For sockets not in listening mode, find a match with
					xLocalPort, ulRemoteIP AND xRemotePort. */
					pxResult = pxSocket;
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	623b      	str	r3, [r7, #32]
					break;
 800c86e:	e006      	b.n	800c87e <pxTCPSocketLookup+0x6e>
			 pxIterator  = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
 800c870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c872:	685b      	ldr	r3, [r3, #4]
 800c874:	627b      	str	r3, [r7, #36]	; 0x24
		for( pxIterator  = ( ListItem_t * ) listGET_NEXT( pxEnd );
 800c876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c878:	69bb      	ldr	r3, [r7, #24]
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d1d9      	bne.n	800c832 <pxTCPSocketLookup+0x22>
				}
			}
		}
		if( pxResult == NULL )
 800c87e:	6a3b      	ldr	r3, [r7, #32]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d101      	bne.n	800c888 <pxTCPSocketLookup+0x78>
		{
			/* An exact match was not found, maybe a listening socket was
			found. */
			pxResult = pxListenSocket;
 800c884:	69fb      	ldr	r3, [r7, #28]
 800c886:	623b      	str	r3, [r7, #32]
		}

		return pxResult;
 800c888:	6a3b      	ldr	r3, [r7, #32]
	}
 800c88a:	4618      	mov	r0, r3
 800c88c:	372c      	adds	r7, #44	; 0x2c
 800c88e:	46bd      	mov	sp, r7
 800c890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c894:	4770      	bx	lr
 800c896:	bf00      	nop
 800c898:	20006998 	.word	0x20006998

0800c89c <prvTCPCreateStream>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP == 1 )

	static StreamBuffer_t *prvTCPCreateStream ( FreeRTOS_Socket_t *pxSocket, BaseType_t xIsInputStream )
	{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b086      	sub	sp, #24
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	6039      	str	r1, [r7, #0]
	size_t uxLength;
	size_t uxSize;

		/* Now that a stream is created, the maximum size is fixed before
		creation, it could still be changed with setsockopt(). */
		if( xIsInputStream != pdFALSE )
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d01c      	beq.n	800c8e6 <prvTCPCreateStream+0x4a>
		{
			uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8b0:	617b      	str	r3, [r7, #20]

			if( pxSocket->u.xTCP.uxLittleSpace == 0ul )
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d107      	bne.n	800c8ca <prvTCPCreateStream+0x2e>
			{
				pxSocket->u.xTCP.uxLittleSpace  = ( 1ul * pxSocket->u.xTCP.uxRxStreamSize ) / 5u; /*_RB_ Why divide by 5?  Can this be changed to a #define? */
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8be:	4a25      	ldr	r2, [pc, #148]	; (800c954 <prvTCPCreateStream+0xb8>)
 800c8c0:	fba2 2303 	umull	r2, r3, r2, r3
 800c8c4:	089a      	lsrs	r2, r3, #2
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	665a      	str	r2, [r3, #100]	; 0x64
			}

			if( pxSocket->u.xTCP.uxEnoughSpace == 0ul )
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d10c      	bne.n	800c8ec <prvTCPCreateStream+0x50>
			{
				pxSocket->u.xTCP.uxEnoughSpace = ( 4ul * pxSocket->u.xTCP.uxRxStreamSize ) / 5u; /*_RB_ Why multiply by 4?  Maybe sock80_PERCENT?*/
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8d6:	009b      	lsls	r3, r3, #2
 800c8d8:	4a1e      	ldr	r2, [pc, #120]	; (800c954 <prvTCPCreateStream+0xb8>)
 800c8da:	fba2 2303 	umull	r2, r3, r2, r3
 800c8de:	089a      	lsrs	r2, r3, #2
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	669a      	str	r2, [r3, #104]	; 0x68
 800c8e4:	e002      	b.n	800c8ec <prvTCPCreateStream+0x50>
			}
		}
		else
		{
			uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8ea:	617b      	str	r3, [r7, #20]
		}

		/* Add an extra 4 (or 8) bytes. */
		uxLength += sizeof( size_t );
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	3304      	adds	r3, #4
 800c8f0:	617b      	str	r3, [r7, #20]

		/* And make the length a multiple of sizeof( size_t ). */
		uxLength &= ~( sizeof( size_t ) - 1u );
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	f023 0303 	bic.w	r3, r3, #3
 800c8f8:	617b      	str	r3, [r7, #20]

		uxSize = sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) + uxLength;
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	3314      	adds	r3, #20
 800c8fe:	613b      	str	r3, [r7, #16]

		pxBuffer = ( StreamBuffer_t * )pvPortMallocLarge( uxSize );
 800c900:	6938      	ldr	r0, [r7, #16]
 800c902:	f7fb fbcd 	bl	80080a0 <pvPortMalloc>
 800c906:	60f8      	str	r0, [r7, #12]

		if( pxBuffer == NULL )
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d10b      	bne.n	800c926 <prvTCPCreateStream+0x8a>
		{
			FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
			pxSocket->u.xTCP.bits.bMallocError = pdTRUE_UNSIGNED;
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800c914:	f043 0308 	orr.w	r3, r3, #8
 800c918:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800c91c:	2108      	movs	r1, #8
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f001 fa89 	bl	800de36 <vTCPStateChange>
 800c924:	e011      	b.n	800c94a <prvTCPCreateStream+0xae>
		}
		else
		{
			/* Clear the markers of the stream */
			memset( pxBuffer, '\0', sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 800c926:	2214      	movs	r2, #20
 800c928:	2100      	movs	r1, #0
 800c92a:	68f8      	ldr	r0, [r7, #12]
 800c92c:	f004 fb8c 	bl	8011048 <memset>
			pxBuffer->LENGTH = ( size_t ) uxLength ;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	697a      	ldr	r2, [r7, #20]
 800c934:	611a      	str	r2, [r3, #16]
			if( xTCPWindowLoggingLevel != 0 )
			{
				FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %lu bytes (total %lu)\n", xIsInputStream ? 'R' : 'T', uxLength, uxSize ) );
			}

			if( xIsInputStream != 0 )
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d003      	beq.n	800c944 <prvTCPCreateStream+0xa8>
			{
				pxSocket->u.xTCP.rxStream = pxBuffer;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	68fa      	ldr	r2, [r7, #12]
 800c940:	675a      	str	r2, [r3, #116]	; 0x74
 800c942:	e002      	b.n	800c94a <prvTCPCreateStream+0xae>
			}
			else
			{
				pxSocket->u.xTCP.txStream = pxBuffer;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	68fa      	ldr	r2, [r7, #12]
 800c948:	679a      	str	r2, [r3, #120]	; 0x78
			}
		}

		return pxBuffer;
 800c94a:	68fb      	ldr	r3, [r7, #12]
	}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3718      	adds	r7, #24
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}
 800c954:	cccccccd 	.word	0xcccccccd

0800c958 <lTCPAddRxdata>:
	/*
	 * Add data to the RxStream.  When uxOffset > 0, data has come in out-of-order
	 * and will be put in front of the head so it can not be popped by the user.
	 */
	int32_t lTCPAddRxdata( FreeRTOS_Socket_t *pxSocket, size_t uxOffset, const uint8_t *pcData, uint32_t ulByteCount )
	{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b088      	sub	sp, #32
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	60f8      	str	r0, [r7, #12]
 800c960:	60b9      	str	r1, [r7, #8]
 800c962:	607a      	str	r2, [r7, #4]
 800c964:	603b      	str	r3, [r7, #0]
	StreamBuffer_t *pxStream = pxSocket->u.xTCP.rxStream;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c96a:	61fb      	str	r3, [r7, #28]
		/* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
		if( pucData != NULL ) copy data the the buffer
		if( pucData == NULL ) no copying, just advance rxHead
		if( uxOffset != 0 ) Just store data which has come out-of-order
		if( uxOffset == 0 ) Also advance rxHead */
		if( pxStream == NULL )
 800c96c:	69fb      	ldr	r3, [r7, #28]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d10a      	bne.n	800c988 <lTCPAddRxdata+0x30>
		{
			pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 800c972:	2101      	movs	r1, #1
 800c974:	68f8      	ldr	r0, [r7, #12]
 800c976:	f7ff ff91 	bl	800c89c <prvTCPCreateStream>
 800c97a:	61f8      	str	r0, [r7, #28]
			if( pxStream == NULL )
 800c97c:	69fb      	ldr	r3, [r7, #28]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d102      	bne.n	800c988 <lTCPAddRxdata+0x30>
			{
				return -1;
 800c982:	f04f 33ff 	mov.w	r3, #4294967295
 800c986:	e045      	b.n	800ca14 <lTCPAddRxdata+0xbc>
				pcData = NULL;
			}
		}
		#endif /* ipconfigUSE_CALLBACKS */

		xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	68b9      	ldr	r1, [r7, #8]
 800c98e:	69f8      	ldr	r0, [r7, #28]
 800c990:	f000 fa52 	bl	800ce38 <uxStreamBufferAdd>
 800c994:	4603      	mov	r3, r0
 800c996:	61bb      	str	r3, [r7, #24]
					pxStream->uxFront ) );
			}
		}
		#endif /* ipconfigHAS_DEBUG_PRINTF */

		if( uxOffset == 0u )
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d139      	bne.n	800ca12 <lTCPAddRxdata+0xba>
					}
				} else
			#endif /* ipconfigUSE_CALLBACKS */
			{
				/* See if running out of space. */
				if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c9a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c9a8:	b2db      	uxtb	r3, r3
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d11f      	bne.n	800c9ee <lTCPAddRxdata+0x96>
				{
					size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7ff fb1e 	bl	800bff4 <uxStreamBufferFrontSpace>
 800c9b8:	6178      	str	r0, [r7, #20]
					if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace  )
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d314      	bcc.n	800c9ee <lTCPAddRxdata+0x96>
					{
						pxSocket->u.xTCP.bits.bLowWater = pdTRUE_UNSIGNED;
 800c9c4:	68fa      	ldr	r2, [r7, #12]
 800c9c6:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800c9ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9ce:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
						pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800c9d2:	68fa      	ldr	r2, [r7, #12]
 800c9d4:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c9d8:	f043 0301 	orr.w	r3, r3, #1
 800c9dc:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

						/* bLowWater was reached, send the changed window size. */
						pxSocket->u.xTCP.usTimeout = 1u;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
						xSendEventToIPTask( eTCPTimerEvent );
 800c9e8:	2005      	movs	r0, #5
 800c9ea:	f7fe fdc3 	bl	800b574 <xSendEventToIPTask>
					}
				}

				/* New incoming data is available, wake up the user.   User's
				semaphores will be set just before the IP-task goes asleep. */
				pxSocket->xEventBits |= eSOCKET_RECEIVE;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f043 0201 	orr.w	r2, r3, #1
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	601a      	str	r2, [r3, #0]

				#if ipconfigSUPPORT_SELECT_FUNCTION == 1
				{
					if( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 )
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9fe:	f003 0301 	and.w	r3, r3, #1
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d005      	beq.n	800ca12 <lTCPAddRxdata+0xba>
					{
						pxSocket->xEventBits |= ( eSELECT_READ << SOCKET_EVENT_BIT_COUNT );
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	601a      	str	r2, [r3, #0]
				}
				#endif
			}
		}

		return xResult;
 800ca12:	69bb      	ldr	r3, [r7, #24]
	}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3720      	adds	r7, #32
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <FreeRTOS_tx_space>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP ==1 )

	BaseType_t FreeRTOS_tx_space( Socket_t xSocket )
	{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b084      	sub	sp, #16
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800ca2e:	2b06      	cmp	r3, #6
 800ca30:	d003      	beq.n	800ca3a <FreeRTOS_tx_space+0x1e>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ca32:	f06f 0315 	mvn.w	r3, #21
 800ca36:	60fb      	str	r3, [r7, #12]
 800ca38:	e00e      	b.n	800ca58 <FreeRTOS_tx_space+0x3c>
		}
		else
		{
			if( pxSocket->u.xTCP.txStream != NULL )
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d007      	beq.n	800ca52 <FreeRTOS_tx_space+0x36>
			{
				xReturn = ( BaseType_t ) uxStreamBufferGetSpace ( pxSocket->u.xTCP.txStream );
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7ff fac0 	bl	800bfcc <uxStreamBufferGetSpace>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	60fb      	str	r3, [r7, #12]
 800ca50:	e002      	b.n	800ca58 <FreeRTOS_tx_space+0x3c>
			}
			else
			{
				xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca56:	60fb      	str	r3, [r7, #12]
			}
		}

		return xReturn;
 800ca58:	68fb      	ldr	r3, [r7, #12]
	}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3710      	adds	r7, #16
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}

0800ca62 <FreeRTOS_rx_size>:

	/*
	 * Returns the number of bytes which can be read.
	 */
	BaseType_t FreeRTOS_rx_size( Socket_t xSocket )
	{
 800ca62:	b580      	push	{r7, lr}
 800ca64:	b084      	sub	sp, #16
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	6078      	str	r0, [r7, #4]
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800ca74:	2b06      	cmp	r3, #6
 800ca76:	d003      	beq.n	800ca80 <FreeRTOS_rx_size+0x1e>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ca78:	f06f 0315 	mvn.w	r3, #21
 800ca7c:	60fb      	str	r3, [r7, #12]
 800ca7e:	e00d      	b.n	800ca9c <FreeRTOS_rx_size+0x3a>
		}
		else if( pxSocket->u.xTCP.rxStream != NULL )
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d007      	beq.n	800ca98 <FreeRTOS_rx_size+0x36>
		{
			xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f7ff fac5 	bl	800c01c <uxStreamBufferGetSize>
 800ca92:	4603      	mov	r3, r0
 800ca94:	60fb      	str	r3, [r7, #12]
 800ca96:	e001      	b.n	800ca9c <FreeRTOS_rx_size+0x3a>
		}
		else
		{
			xReturn = 0;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
	}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3710      	adds	r7, #16
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}
	...

0800caa8 <vSocketSelect>:
/*-----------------------------------------------------------*/

#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )

	void vSocketSelect( SocketSelect_t *pxSocketSet )
	{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b08c      	sub	sp, #48	; 0x30
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
	BaseType_t xRound;
	EventBits_t xSocketBits, xBitsToClear;
	#if ipconfigUSE_TCP == 1
		BaseType_t xLastRound = 1;
 800cab0:	2301      	movs	r3, #1
 800cab2:	613b      	str	r3, [r7, #16]
	#else
		BaseType_t xLastRound = 0;
	#endif

		/* These flags will be switched on after checking the socket status. */
		EventBits_t xGroupBits = 0;
 800cab4:	2300      	movs	r3, #0
 800cab6:	627b      	str	r3, [r7, #36]	; 0x24
		pxSocketSet->pxSocket = NULL;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2200      	movs	r2, #0
 800cabc:	609a      	str	r2, [r3, #8]

		for( xRound = 0; xRound <= xLastRound; xRound++ )
 800cabe:	2300      	movs	r3, #0
 800cac0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cac2:	e0e1      	b.n	800cc88 <vSocketSelect+0x1e0>
		{
			const ListItem_t *pxIterator;
			const MiniListItem_t *pxEnd;
			if( xRound == 0 )
 800cac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d102      	bne.n	800cad0 <vSocketSelect+0x28>
			{
				pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xBoundUDPSocketsList );
 800caca:	4b84      	ldr	r3, [pc, #528]	; (800ccdc <vSocketSelect+0x234>)
 800cacc:	61fb      	str	r3, [r7, #28]
 800cace:	e001      	b.n	800cad4 <vSocketSelect+0x2c>
			}
		#if ipconfigUSE_TCP == 1
			else
			{
				pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xBoundTCPSocketsList );
 800cad0:	4b83      	ldr	r3, [pc, #524]	; (800cce0 <vSocketSelect+0x238>)
 800cad2:	61fb      	str	r3, [r7, #28]
			}
		#endif /* ipconfigUSE_TCP == 1 */
			for( pxIterator = ( const ListItem_t * ) ( listGET_NEXT( pxEnd ) );
 800cad4:	69fb      	ldr	r3, [r7, #28]
 800cad6:	685b      	ldr	r3, [r3, #4]
 800cad8:	623b      	str	r3, [r7, #32]
 800cada:	e0cd      	b.n	800cc78 <vSocketSelect+0x1d0>
				 pxIterator != ( const ListItem_t * ) pxEnd;
				 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
			{
				FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800cadc:	6a3b      	ldr	r3, [r7, #32]
 800cade:	68db      	ldr	r3, [r3, #12]
 800cae0:	60fb      	str	r3, [r7, #12]
				if( pxSocket->pxSocketSet != pxSocketSet )
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	429a      	cmp	r2, r3
 800caea:	f040 80c1 	bne.w	800cc70 <vSocketSelect+0x1c8>
				{
					/* Socket does not belong to this select group. */
					continue;
				}
				xSocketBits = 0;
 800caee:	2300      	movs	r3, #0
 800caf0:	62bb      	str	r3, [r7, #40]	; 0x28

				#if( ipconfigUSE_TCP == 1 )
					if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP )
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800caf8:	2b06      	cmp	r3, #6
 800cafa:	f040 80a3 	bne.w	800cc44 <vSocketSelect+0x19c>
					{
						/* Check if the socket has already been accepted by the
						owner.  If not, it is useless to return it from a
						select(). */
						BaseType_t bAccepted = pdFALSE;
 800cafe:	2300      	movs	r3, #0
 800cb00:	61bb      	str	r3, [r7, #24]

						if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cb08:	f003 0304 	and.w	r3, r3, #4
 800cb0c:	b2db      	uxtb	r3, r3
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d109      	bne.n	800cb26 <vSocketSelect+0x7e>
						{
							if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cb18:	f003 0302 	and.w	r3, r3, #2
 800cb1c:	b2db      	uxtb	r3, r3
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d101      	bne.n	800cb26 <vSocketSelect+0x7e>
							{
								bAccepted = pdTRUE;
 800cb22:	2301      	movs	r3, #1
 800cb24:	61bb      	str	r3, [r7, #24]
							}
						}

						/* Is the set owner interested in READ events? */
						if( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 )
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb2a:	f003 0301 	and.w	r3, r3, #1
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d038      	beq.n	800cba4 <vSocketSelect+0xfc>
						{
							if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cb38:	2b01      	cmp	r3, #1
 800cb3a:	d111      	bne.n	800cb60 <vSocketSelect+0xb8>
							{
								if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != 0 ) )
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d02f      	beq.n	800cba4 <vSocketSelect+0xfc>
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cb4c:	f003 0302 	and.w	r3, r3, #2
 800cb50:	b2db      	uxtb	r3, r3
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d026      	beq.n	800cba4 <vSocketSelect+0xfc>
								{
									xSocketBits |= eSELECT_READ;
 800cb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb58:	f043 0301 	orr.w	r3, r3, #1
 800cb5c:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb5e:	e021      	b.n	800cba4 <vSocketSelect+0xfc>
								}
							}
							else if( ( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cb66:	f003 0308 	and.w	r3, r3, #8
 800cb6a:	b2db      	uxtb	r3, r3
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d00c      	beq.n	800cb8a <vSocketSelect+0xe2>
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cb76:	f003 0302 	and.w	r3, r3, #2
 800cb7a:	b2db      	uxtb	r3, r3
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d004      	beq.n	800cb8a <vSocketSelect+0xe2>
							{
								/* This socket has the re-use flag. After connecting it turns into
								aconnected socket. Set the READ event, so that accept() will be called. */
								xSocketBits |= eSELECT_READ;
 800cb80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb82:	f043 0301 	orr.w	r3, r3, #1
 800cb86:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb88:	e00c      	b.n	800cba4 <vSocketSelect+0xfc>
							}
							else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 800cb8a:	69bb      	ldr	r3, [r7, #24]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d009      	beq.n	800cba4 <vSocketSelect+0xfc>
 800cb90:	68f8      	ldr	r0, [r7, #12]
 800cb92:	f7ff ff66 	bl	800ca62 <FreeRTOS_rx_size>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	dd03      	ble.n	800cba4 <vSocketSelect+0xfc>
							{
								xSocketBits |= eSELECT_READ;
 800cb9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb9e:	f043 0301 	orr.w	r3, r3, #1
 800cba2:	62bb      	str	r3, [r7, #40]	; 0x28
							}
						}
						/* Is the set owner interested in EXCEPTION events? */
						if( ( pxSocket->xSelectBits & eSELECT_EXCEPT ) != 0 )
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cba8:	f003 0304 	and.w	r3, r3, #4
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d00d      	beq.n	800cbcc <vSocketSelect+0x124>
						{
							if( ( pxSocket->u.xTCP.ucTCPState == eCLOSE_WAIT ) || ( pxSocket->u.xTCP.ucTCPState == eCLOSED ) )
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cbb6:	2b08      	cmp	r3, #8
 800cbb8:	d004      	beq.n	800cbc4 <vSocketSelect+0x11c>
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d103      	bne.n	800cbcc <vSocketSelect+0x124>
							{
								xSocketBits |= eSELECT_EXCEPT;
 800cbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc6:	f043 0304 	orr.w	r3, r3, #4
 800cbca:	62bb      	str	r3, [r7, #40]	; 0x28
							}
						}

						/* Is the set owner interested in WRITE events? */
						if( ( pxSocket->xSelectBits & eSELECT_WRITE ) != 0 )
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbd0:	f003 0302 	and.w	r3, r3, #2
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d043      	beq.n	800cc60 <vSocketSelect+0x1b8>
						{
							BaseType_t bMatch = pdFALSE;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	617b      	str	r3, [r7, #20]

							if( bAccepted != 0 )
 800cbdc:	69bb      	ldr	r3, [r7, #24]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d007      	beq.n	800cbf2 <vSocketSelect+0x14a>
							{
								if( FreeRTOS_tx_space( pxSocket ) > 0 )
 800cbe2:	68f8      	ldr	r0, [r7, #12]
 800cbe4:	f7ff ff1a 	bl	800ca1c <FreeRTOS_tx_space>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	dd01      	ble.n	800cbf2 <vSocketSelect+0x14a>
								{
									bMatch = pdTRUE;
 800cbee:	2301      	movs	r3, #1
 800cbf0:	617b      	str	r3, [r7, #20]
								}
							}

							if( bMatch == pdFALSE )
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d11d      	bne.n	800cc34 <vSocketSelect+0x18c>
							{
								if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cbfe:	f003 0308 	and.w	r3, r3, #8
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d015      	beq.n	800cc34 <vSocketSelect+0x18c>
									( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) &&
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
								if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800cc0e:	2b04      	cmp	r3, #4
 800cc10:	d910      	bls.n	800cc34 <vSocketSelect+0x18c>
									( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc18:	f003 0310 	and.w	r3, r3, #16
 800cc1c:	b2db      	uxtb	r3, r3
									( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) &&
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d108      	bne.n	800cc34 <vSocketSelect+0x18c>
								{
									pxSocket->u.xTCP.bits.bConnPassed = pdTRUE_UNSIGNED;
 800cc22:	68fa      	ldr	r2, [r7, #12]
 800cc24:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800cc28:	f043 0310 	orr.w	r3, r3, #16
 800cc2c:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
									bMatch = pdTRUE;
 800cc30:	2301      	movs	r3, #1
 800cc32:	617b      	str	r3, [r7, #20]
								}
							}

							if( bMatch != pdFALSE )
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d012      	beq.n	800cc60 <vSocketSelect+0x1b8>
							{
								xSocketBits |= eSELECT_WRITE;
 800cc3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc3c:	f043 0302 	orr.w	r3, r3, #2
 800cc40:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc42:	e00d      	b.n	800cc60 <vSocketSelect+0x1b8>
					}
					else
				#endif /* ipconfigUSE_TCP == 1 */
				{
					/* Select events for UDP are simpler. */
					if( ( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 ) &&
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc48:	f003 0301 	and.w	r3, r3, #1
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d007      	beq.n	800cc60 <vSocketSelect+0x1b8>
						( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
					if( ( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 ) &&
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d003      	beq.n	800cc60 <vSocketSelect+0x1b8>
					{
						xSocketBits |= eSELECT_READ;
 800cc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc5a:	f043 0301 	orr.w	r3, r3, #1
 800cc5e:	62bb      	str	r3, [r7, #40]	; 0x28
					/* The WRITE and EXCEPT bits are not used for UDP */
				}	/* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

				/* Each socket keeps its own event flags, which are looked-up
				by FreeRTOS_FD_ISSSET() */
				pxSocket->xSocketBits = xSocketBits;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc64:	631a      	str	r2, [r3, #48]	; 0x30

				/* The ORed value will be used to set the bits in the event
				group. */
				xGroupBits |= xSocketBits;
 800cc66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc6a:	4313      	orrs	r3, r2
 800cc6c:	627b      	str	r3, [r7, #36]	; 0x24
 800cc6e:	e000      	b.n	800cc72 <vSocketSelect+0x1ca>
					continue;
 800cc70:	bf00      	nop
				 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800cc72:	6a3b      	ldr	r3, [r7, #32]
 800cc74:	685b      	ldr	r3, [r3, #4]
 800cc76:	623b      	str	r3, [r7, #32]
			for( pxIterator = ( const ListItem_t * ) ( listGET_NEXT( pxEnd ) );
 800cc78:	6a3a      	ldr	r2, [r7, #32]
 800cc7a:	69fb      	ldr	r3, [r7, #28]
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	f47f af2d 	bne.w	800cadc <vSocketSelect+0x34>
		for( xRound = 0; xRound <= xLastRound; xRound++ )
 800cc82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc84:	3301      	adds	r3, #1
 800cc86:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	f77f af19 	ble.w	800cac4 <vSocketSelect+0x1c>

			}	/* for( pxIterator ... ) */
		}	/* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

		xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	2100      	movs	r1, #0
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f7fa fe45 	bl	8007928 <xEventGroupClearBits>
 800cc9e:	60b8      	str	r0, [r7, #8]

		/* Now set the necessary bits. */
		xBitsToClear = ( xBitsToClear & ~xGroupBits ) & eSELECT_ALL;
 800cca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca2:	43da      	mvns	r2, r3
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	4013      	ands	r3, r2
 800cca8:	f003 030f 	and.w	r3, r3, #15
 800ccac:	60bb      	str	r3, [r7, #8]
			and cleared in FreeRTOS_select(). */
			xBitsToClear &= ( EventBits_t ) ~eSELECT_INTR;
		}
		#endif /* ipconfigSUPPORT_SIGNALS */

		if( xBitsToClear != 0 )
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d005      	beq.n	800ccc0 <vSocketSelect+0x218>
		{
			xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	68b9      	ldr	r1, [r7, #8]
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f7fa fe34 	bl	8007928 <xEventGroupClearBits>
		}

		/* Now include eSELECT_CALL_IP to wakeup the caller. */
		xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | eSELECT_CALL_IP );
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681a      	ldr	r2, [r3, #0]
 800ccc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc6:	f043 0310 	orr.w	r3, r3, #16
 800ccca:	4619      	mov	r1, r3
 800cccc:	4610      	mov	r0, r2
 800ccce:	f7fa fe61 	bl	8007994 <xEventGroupSetBits>
	}
 800ccd2:	bf00      	nop
 800ccd4:	3730      	adds	r7, #48	; 0x30
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}
 800ccda:	bf00      	nop
 800ccdc:	200069ac 	.word	0x200069ac
 800cce0:	20006998 	.word	0x20006998

0800cce4 <FreeRTOS_min_uint32>:
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
 800cce4:	b480      	push	{r7}
 800cce6:	b083      	sub	sp, #12
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	6039      	str	r1, [r7, #0]
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	4293      	cmp	r3, r2
 800ccf4:	bf28      	it	cs
 800ccf6:	4613      	movcs	r3, r2
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	370c      	adds	r7, #12
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd02:	4770      	bx	lr

0800cd04 <uxStreamBufferSpace>:
{
 800cd04:	b480      	push	{r7}
 800cd06:	b087      	sub	sp, #28
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	60f8      	str	r0, [r7, #12]
 800cd0c:	60b9      	str	r1, [r7, #8]
 800cd0e:	607a      	str	r2, [r7, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	691a      	ldr	r2, [r3, #16]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	441a      	add	r2, r3
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	1ad3      	subs	r3, r2, r3
 800cd1c:	3b01      	subs	r3, #1
 800cd1e:	617b      	str	r3, [r7, #20]
	if( uxCount >= pxBuffer->LENGTH )
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	691a      	ldr	r2, [r3, #16]
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d804      	bhi.n	800cd34 <uxStreamBufferSpace+0x30>
		uxCount -= pxBuffer->LENGTH;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	691b      	ldr	r3, [r3, #16]
 800cd2e:	697a      	ldr	r2, [r7, #20]
 800cd30:	1ad3      	subs	r3, r2, r3
 800cd32:	617b      	str	r3, [r7, #20]
	return uxCount;
 800cd34:	697b      	ldr	r3, [r7, #20]
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	371c      	adds	r7, #28
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd40:	4770      	bx	lr

0800cd42 <uxStreamBufferDistance>:
{
 800cd42:	b480      	push	{r7}
 800cd44:	b087      	sub	sp, #28
 800cd46:	af00      	add	r7, sp, #0
 800cd48:	60f8      	str	r0, [r7, #12]
 800cd4a:	60b9      	str	r1, [r7, #8]
 800cd4c:	607a      	str	r2, [r7, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	691a      	ldr	r2, [r3, #16]
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	441a      	add	r2, r3
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	1ad3      	subs	r3, r2, r3
 800cd5a:	617b      	str	r3, [r7, #20]
	if ( uxCount >= pxBuffer->LENGTH )
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	691a      	ldr	r2, [r3, #16]
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d804      	bhi.n	800cd70 <uxStreamBufferDistance+0x2e>
		uxCount -= pxBuffer->LENGTH;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	691b      	ldr	r3, [r3, #16]
 800cd6a:	697a      	ldr	r2, [r7, #20]
 800cd6c:	1ad3      	subs	r3, r2, r3
 800cd6e:	617b      	str	r3, [r7, #20]
	return uxCount;
 800cd70:	697b      	ldr	r3, [r7, #20]
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	371c      	adds	r7, #28
 800cd76:	46bd      	mov	sp, r7
 800cd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7c:	4770      	bx	lr

0800cd7e <uxStreamBufferGetSpace>:
{
 800cd7e:	b580      	push	{r7, lr}
 800cd80:	b084      	sub	sp, #16
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6078      	str	r0, [r7, #4]
size_t uxHead = pxBuffer->uxHead;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	689b      	ldr	r3, [r3, #8]
 800cd8a:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800cd92:	68ba      	ldr	r2, [r7, #8]
 800cd94:	68f9      	ldr	r1, [r7, #12]
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f7ff ffb4 	bl	800cd04 <uxStreamBufferSpace>
 800cd9c:	4603      	mov	r3, r0
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3710      	adds	r7, #16
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}

0800cda6 <uxStreamBufferGetSize>:
{
 800cda6:	b580      	push	{r7, lr}
 800cda8:	b084      	sub	sp, #16
 800cdaa:	af00      	add	r7, sp, #0
 800cdac:	6078      	str	r0, [r7, #4]
size_t uxHead = pxBuffer->uxHead;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	689b      	ldr	r3, [r3, #8]
 800cdb2:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
 800cdba:	68fa      	ldr	r2, [r7, #12]
 800cdbc:	68b9      	ldr	r1, [r7, #8]
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f7ff ffbf 	bl	800cd42 <uxStreamBufferDistance>
 800cdc4:	4603      	mov	r3, r0
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3710      	adds	r7, #16
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}

0800cdce <xStreamBufferLessThenEqual>:
}
/*-----------------------------------------------------------*/

static portINLINE BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t *pxBuffer, const size_t uxLeft, const size_t uxRight );
static portINLINE BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t *pxBuffer, const size_t uxLeft, const size_t uxRight )
{
 800cdce:	b480      	push	{r7}
 800cdd0:	b087      	sub	sp, #28
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	60f8      	str	r0, [r7, #12]
 800cdd6:	60b9      	str	r1, [r7, #8]
 800cdd8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
size_t uxTail = pxBuffer->uxTail;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	613b      	str	r3, [r7, #16]

	/* Returns true if ( uxLeft < uxRight ) */
	if( ( uxLeft < uxTail ) ^ ( uxRight < uxTail ) )
 800cde0:	68ba      	ldr	r2, [r7, #8]
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	bf34      	ite	cc
 800cde8:	2301      	movcc	r3, #1
 800cdea:	2300      	movcs	r3, #0
 800cdec:	b2da      	uxtb	r2, r3
 800cdee:	6879      	ldr	r1, [r7, #4]
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	4299      	cmp	r1, r3
 800cdf4:	bf34      	ite	cc
 800cdf6:	2301      	movcc	r3, #1
 800cdf8:	2300      	movcs	r3, #0
 800cdfa:	b2db      	uxtb	r3, r3
 800cdfc:	4053      	eors	r3, r2
 800cdfe:	b2db      	uxtb	r3, r3
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d009      	beq.n	800ce18 <xStreamBufferLessThenEqual+0x4a>
	{
		if( uxRight < uxTail )
 800ce04:	687a      	ldr	r2, [r7, #4]
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d202      	bcs.n	800ce12 <xStreamBufferLessThenEqual+0x44>
		{
			xReturn = pdTRUE;
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	617b      	str	r3, [r7, #20]
 800ce10:	e00b      	b.n	800ce2a <xStreamBufferLessThenEqual+0x5c>
		}
		else
		{
			xReturn = pdFALSE;
 800ce12:	2300      	movs	r3, #0
 800ce14:	617b      	str	r3, [r7, #20]
 800ce16:	e008      	b.n	800ce2a <xStreamBufferLessThenEqual+0x5c>
		}
	}
	else
	{
		if( uxLeft <= uxRight )
 800ce18:	68ba      	ldr	r2, [r7, #8]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d802      	bhi.n	800ce26 <xStreamBufferLessThenEqual+0x58>
		{
			xReturn = pdTRUE;
 800ce20:	2301      	movs	r3, #1
 800ce22:	617b      	str	r3, [r7, #20]
 800ce24:	e001      	b.n	800ce2a <xStreamBufferLessThenEqual+0x5c>
		}
		else
		{
			xReturn = pdFALSE;
 800ce26:	2300      	movs	r3, #0
 800ce28:	617b      	str	r3, [r7, #20]
		}
	}
	return xReturn;
 800ce2a:	697b      	ldr	r3, [r7, #20]
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	371c      	adds	r7, #28
 800ce30:	46bd      	mov	sp, r7
 800ce32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce36:	4770      	bx	lr

0800ce38 <uxStreamBufferAdd>:
 * an offset from uxHead while uxHead will not be moved yet.  This possibility
 * will be used when TCP data is received while earlier data is still missing.
 * If 'pucData' equals NULL, the function is called to advance 'uxHead' only.
 */
size_t uxStreamBufferAdd( StreamBuffer_t *pxBuffer, size_t uxOffset, const uint8_t *pucData, size_t uxCount )
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b088      	sub	sp, #32
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	607a      	str	r2, [r7, #4]
 800ce44:	603b      	str	r3, [r7, #0]
size_t uxSpace, uxNextHead, uxFirst;

	uxSpace = uxStreamBufferGetSpace( pxBuffer );
 800ce46:	68f8      	ldr	r0, [r7, #12]
 800ce48:	f7ff ff99 	bl	800cd7e <uxStreamBufferGetSpace>
 800ce4c:	61f8      	str	r0, [r7, #28]

	/* If uxOffset > 0, items can be placed in front of uxHead */
	if( uxSpace > uxOffset )
 800ce4e:	69fa      	ldr	r2, [r7, #28]
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d904      	bls.n	800ce60 <uxStreamBufferAdd+0x28>
	{
		uxSpace -= uxOffset;
 800ce56:	69fa      	ldr	r2, [r7, #28]
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	1ad3      	subs	r3, r2, r3
 800ce5c:	61fb      	str	r3, [r7, #28]
 800ce5e:	e001      	b.n	800ce64 <uxStreamBufferAdd+0x2c>
	}
	else
	{
		uxSpace = 0u;
 800ce60:	2300      	movs	r3, #0
 800ce62:	61fb      	str	r3, [r7, #28]
	}

	/* The number of bytes that can be written is the minimum of the number of
	bytes requested and the number available. */
	uxCount = FreeRTOS_min_uint32( uxSpace, uxCount );
 800ce64:	6839      	ldr	r1, [r7, #0]
 800ce66:	69f8      	ldr	r0, [r7, #28]
 800ce68:	f7ff ff3c 	bl	800cce4 <FreeRTOS_min_uint32>
 800ce6c:	6038      	str	r0, [r7, #0]

	if( uxCount != 0u )
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d05a      	beq.n	800cf2a <uxStreamBufferAdd+0xf2>
	{
		uxNextHead = pxBuffer->uxHead;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	689b      	ldr	r3, [r3, #8]
 800ce78:	61bb      	str	r3, [r7, #24]

		if( uxOffset != 0u )
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d00d      	beq.n	800ce9c <uxStreamBufferAdd+0x64>
		{
			/* ( uxOffset > 0 ) means: write in front if the uxHead marker */
			uxNextHead += uxOffset;
 800ce80:	69ba      	ldr	r2, [r7, #24]
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	4413      	add	r3, r2
 800ce86:	61bb      	str	r3, [r7, #24]
			if( uxNextHead >= pxBuffer->LENGTH )
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	691a      	ldr	r2, [r3, #16]
 800ce8c:	69bb      	ldr	r3, [r7, #24]
 800ce8e:	429a      	cmp	r2, r3
 800ce90:	d804      	bhi.n	800ce9c <uxStreamBufferAdd+0x64>
			{
				uxNextHead -= pxBuffer->LENGTH;
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	691b      	ldr	r3, [r3, #16]
 800ce96:	69ba      	ldr	r2, [r7, #24]
 800ce98:	1ad3      	subs	r3, r2, r3
 800ce9a:	61bb      	str	r3, [r7, #24]
			}
		}

		if( pucData != NULL )
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d022      	beq.n	800cee8 <uxStreamBufferAdd+0xb0>
		{
			/* Calculate the number of bytes that can be added in the first
			write - which may be less than the total number of bytes that need
			to be added if the buffer will wrap back to the beginning. */
			uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextHead, uxCount );
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	691a      	ldr	r2, [r3, #16]
 800cea6:	69bb      	ldr	r3, [r7, #24]
 800cea8:	1ad3      	subs	r3, r2, r3
 800ceaa:	6839      	ldr	r1, [r7, #0]
 800ceac:	4618      	mov	r0, r3
 800ceae:	f7ff ff19 	bl	800cce4 <FreeRTOS_min_uint32>
 800ceb2:	6178      	str	r0, [r7, #20]

			/* Write as many bytes as can be written in the first write. */
			memcpy( ( void* ) ( pxBuffer->ucArray + uxNextHead ), pucData, uxFirst );
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f103 0214 	add.w	r2, r3, #20
 800ceba:	69bb      	ldr	r3, [r7, #24]
 800cebc:	4413      	add	r3, r2
 800cebe:	697a      	ldr	r2, [r7, #20]
 800cec0:	6879      	ldr	r1, [r7, #4]
 800cec2:	4618      	mov	r0, r3
 800cec4:	f004 f89b 	bl	8010ffe <memcpy>

			/* If the number of bytes written was less than the number that
			could be written in the first write... */
			if( uxCount > uxFirst )
 800cec8:	683a      	ldr	r2, [r7, #0]
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	429a      	cmp	r2, r3
 800cece:	d90b      	bls.n	800cee8 <uxStreamBufferAdd+0xb0>
			{
				/* ...then write the remaining bytes to the start of the
				buffer. */
				memcpy( ( void * )pxBuffer->ucArray, pucData + uxFirst, uxCount - uxFirst );
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	f103 0014 	add.w	r0, r3, #20
 800ced6:	687a      	ldr	r2, [r7, #4]
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	18d1      	adds	r1, r2, r3
 800cedc:	683a      	ldr	r2, [r7, #0]
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	1ad3      	subs	r3, r2, r3
 800cee2:	461a      	mov	r2, r3
 800cee4:	f004 f88b 	bl	8010ffe <memcpy>
			}
		}

		if( uxOffset == 0u )
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d110      	bne.n	800cf10 <uxStreamBufferAdd+0xd8>
		{
			/* ( uxOffset == 0 ) means: write at uxHead position */
			uxNextHead += uxCount;
 800ceee:	69ba      	ldr	r2, [r7, #24]
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	4413      	add	r3, r2
 800cef4:	61bb      	str	r3, [r7, #24]
			if( uxNextHead >= pxBuffer->LENGTH )
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	691a      	ldr	r2, [r3, #16]
 800cefa:	69bb      	ldr	r3, [r7, #24]
 800cefc:	429a      	cmp	r2, r3
 800cefe:	d804      	bhi.n	800cf0a <uxStreamBufferAdd+0xd2>
			{
				uxNextHead -= pxBuffer->LENGTH;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	691b      	ldr	r3, [r3, #16]
 800cf04:	69ba      	ldr	r2, [r7, #24]
 800cf06:	1ad3      	subs	r3, r2, r3
 800cf08:	61bb      	str	r3, [r7, #24]
			}
			pxBuffer->uxHead = uxNextHead;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	69ba      	ldr	r2, [r7, #24]
 800cf0e:	609a      	str	r2, [r3, #8]
		}

		if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	68db      	ldr	r3, [r3, #12]
 800cf14:	69ba      	ldr	r2, [r7, #24]
 800cf16:	4619      	mov	r1, r3
 800cf18:	68f8      	ldr	r0, [r7, #12]
 800cf1a:	f7ff ff58 	bl	800cdce <xStreamBufferLessThenEqual>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d002      	beq.n	800cf2a <uxStreamBufferAdd+0xf2>
		{
			/* Advance the front pointer */
			pxBuffer->uxFront = uxNextHead;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	69ba      	ldr	r2, [r7, #24]
 800cf28:	60da      	str	r2, [r3, #12]
		}
	}

	return uxCount;
 800cf2a:	683b      	ldr	r3, [r7, #0]
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3720      	adds	r7, #32
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <uxStreamBufferGet>:
 * If 'pucData' equals NULL, the function is called to advance 'lTail' only.
 * if 'xPeek' is pdTRUE, or if 'uxOffset' is non-zero, the 'lTail' pointer will
 * not be advanced.
 */
size_t uxStreamBufferGet( StreamBuffer_t *pxBuffer, size_t uxOffset, uint8_t *pucData, size_t uxMaxCount, BaseType_t xPeek )
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b088      	sub	sp, #32
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	60f8      	str	r0, [r7, #12]
 800cf3c:	60b9      	str	r1, [r7, #8]
 800cf3e:	607a      	str	r2, [r7, #4]
 800cf40:	603b      	str	r3, [r7, #0]
size_t uxSize, uxCount, uxFirst, uxNextTail;

	/* How much data is available? */
	uxSize = uxStreamBufferGetSize( pxBuffer );
 800cf42:	68f8      	ldr	r0, [r7, #12]
 800cf44:	f7ff ff2f 	bl	800cda6 <uxStreamBufferGetSize>
 800cf48:	61f8      	str	r0, [r7, #28]

	if( uxSize > uxOffset )
 800cf4a:	69fa      	ldr	r2, [r7, #28]
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d904      	bls.n	800cf5c <uxStreamBufferGet+0x28>
	{
		uxSize -= uxOffset;
 800cf52:	69fa      	ldr	r2, [r7, #28]
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	1ad3      	subs	r3, r2, r3
 800cf58:	61fb      	str	r3, [r7, #28]
 800cf5a:	e001      	b.n	800cf60 <uxStreamBufferGet+0x2c>
	}
	else
	{
		uxSize = 0u;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	61fb      	str	r3, [r7, #28]
	}

	/* Use the minimum of the wanted bytes and the available bytes. */
	uxCount = FreeRTOS_min_uint32( uxSize, uxMaxCount );
 800cf60:	6839      	ldr	r1, [r7, #0]
 800cf62:	69f8      	ldr	r0, [r7, #28]
 800cf64:	f7ff febe 	bl	800cce4 <FreeRTOS_min_uint32>
 800cf68:	6178      	str	r0, [r7, #20]

	if( uxCount > 0u )
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d050      	beq.n	800d012 <uxStreamBufferGet+0xde>
	{
		uxNextTail = pxBuffer->uxTail;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	61bb      	str	r3, [r7, #24]

		if( uxOffset != 0u )
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d00d      	beq.n	800cf98 <uxStreamBufferGet+0x64>
		{
			uxNextTail += uxOffset;
 800cf7c:	69ba      	ldr	r2, [r7, #24]
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	4413      	add	r3, r2
 800cf82:	61bb      	str	r3, [r7, #24]
			if( uxNextTail >= pxBuffer->LENGTH )
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	691a      	ldr	r2, [r3, #16]
 800cf88:	69bb      	ldr	r3, [r7, #24]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d804      	bhi.n	800cf98 <uxStreamBufferGet+0x64>
			{
				uxNextTail -= pxBuffer->LENGTH;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	691b      	ldr	r3, [r3, #16]
 800cf92:	69ba      	ldr	r2, [r7, #24]
 800cf94:	1ad3      	subs	r3, r2, r3
 800cf96:	61bb      	str	r3, [r7, #24]
			}
		}

		if( pucData != NULL )
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d022      	beq.n	800cfe4 <uxStreamBufferGet+0xb0>
		{
			/* Calculate the number of bytes that can be read - which may be
			less than the number wanted if the data wraps around to the start of
			the buffer. */
			uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextTail, uxCount );
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	691a      	ldr	r2, [r3, #16]
 800cfa2:	69bb      	ldr	r3, [r7, #24]
 800cfa4:	1ad3      	subs	r3, r2, r3
 800cfa6:	6979      	ldr	r1, [r7, #20]
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f7ff fe9b 	bl	800cce4 <FreeRTOS_min_uint32>
 800cfae:	6138      	str	r0, [r7, #16]

			/* Obtain the number of bytes it is possible to obtain in the first
			read. */
			memcpy( pucData, pxBuffer->ucArray + uxNextTail, uxFirst );
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	f103 0214 	add.w	r2, r3, #20
 800cfb6:	69bb      	ldr	r3, [r7, #24]
 800cfb8:	4413      	add	r3, r2
 800cfba:	693a      	ldr	r2, [r7, #16]
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f004 f81d 	bl	8010ffe <memcpy>

			/* If the total number of wanted bytes is greater than the number
			that could be read in the first read... */
			if( uxCount > uxFirst )
 800cfc4:	697a      	ldr	r2, [r7, #20]
 800cfc6:	693b      	ldr	r3, [r7, #16]
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	d90b      	bls.n	800cfe4 <uxStreamBufferGet+0xb0>
			{
				/*...then read the remaining bytes from the start of the buffer. */
				memcpy( pucData + uxFirst, pxBuffer->ucArray, uxCount - uxFirst );
 800cfcc:	687a      	ldr	r2, [r7, #4]
 800cfce:	693b      	ldr	r3, [r7, #16]
 800cfd0:	18d0      	adds	r0, r2, r3
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	f103 0114 	add.w	r1, r3, #20
 800cfd8:	697a      	ldr	r2, [r7, #20]
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	1ad3      	subs	r3, r2, r3
 800cfde:	461a      	mov	r2, r3
 800cfe0:	f004 f80d 	bl	8010ffe <memcpy>
			}
		}

		if( ( xPeek == pdFALSE ) && ( uxOffset == 0UL ) )
 800cfe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d113      	bne.n	800d012 <uxStreamBufferGet+0xde>
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d110      	bne.n	800d012 <uxStreamBufferGet+0xde>
		{
			/* Move the tail pointer to effecively remove the data read from
			the buffer. */
			uxNextTail += uxCount;
 800cff0:	69ba      	ldr	r2, [r7, #24]
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	4413      	add	r3, r2
 800cff6:	61bb      	str	r3, [r7, #24]

			if( uxNextTail >= pxBuffer->LENGTH )
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	691a      	ldr	r2, [r3, #16]
 800cffc:	69bb      	ldr	r3, [r7, #24]
 800cffe:	429a      	cmp	r2, r3
 800d000:	d804      	bhi.n	800d00c <uxStreamBufferGet+0xd8>
			{
				uxNextTail -= pxBuffer->LENGTH;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	691b      	ldr	r3, [r3, #16]
 800d006:	69ba      	ldr	r2, [r7, #24]
 800d008:	1ad3      	subs	r3, r2, r3
 800d00a:	61bb      	str	r3, [r7, #24]
			}

			pxBuffer->uxTail = uxNextTail;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	69ba      	ldr	r2, [r7, #24]
 800d010:	601a      	str	r2, [r3, #0]
		}
	}

	return uxCount;
 800d012:	697b      	ldr	r3, [r7, #20]
}
 800d014:	4618      	mov	r0, r3
 800d016:	3720      	adds	r7, #32
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <FreeRTOS_max_int32>:
	static portINLINE int32_t  FreeRTOS_max_int32  (int32_t  a, int32_t  b) { return a >= b ? a : b; }
 800d01c:	b480      	push	{r7}
 800d01e:	b083      	sub	sp, #12
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	6039      	str	r1, [r7, #0]
 800d026:	687a      	ldr	r2, [r7, #4]
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	4293      	cmp	r3, r2
 800d02c:	bfb8      	it	lt
 800d02e:	4613      	movlt	r3, r2
 800d030:	4618      	mov	r0, r3
 800d032:	370c      	adds	r7, #12
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr

0800d03c <FreeRTOS_min_int32>:
	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
 800d03c:	b480      	push	{r7}
 800d03e:	b083      	sub	sp, #12
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
 800d044:	6039      	str	r1, [r7, #0]
 800d046:	687a      	ldr	r2, [r7, #4]
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	4293      	cmp	r3, r2
 800d04c:	bfa8      	it	ge
 800d04e:	4613      	movge	r3, r2
 800d050:	4618      	mov	r0, r3
 800d052:	370c      	adds	r7, #12
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr

0800d05c <FreeRTOS_min_uint32>:
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
 800d05c:	b480      	push	{r7}
 800d05e:	b083      	sub	sp, #12
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	4293      	cmp	r3, r2
 800d06c:	bf28      	it	cs
 800d06e:	4613      	movcs	r3, r2
 800d070:	4618      	mov	r0, r3
 800d072:	370c      	adds	r7, #12
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr

0800d07c <uxStreamBufferSpace>:
{
 800d07c:	b480      	push	{r7}
 800d07e:	b087      	sub	sp, #28
 800d080:	af00      	add	r7, sp, #0
 800d082:	60f8      	str	r0, [r7, #12]
 800d084:	60b9      	str	r1, [r7, #8]
 800d086:	607a      	str	r2, [r7, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	691a      	ldr	r2, [r3, #16]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	441a      	add	r2, r3
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	1ad3      	subs	r3, r2, r3
 800d094:	3b01      	subs	r3, #1
 800d096:	617b      	str	r3, [r7, #20]
	if( uxCount >= pxBuffer->LENGTH )
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	691a      	ldr	r2, [r3, #16]
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	d804      	bhi.n	800d0ac <uxStreamBufferSpace+0x30>
		uxCount -= pxBuffer->LENGTH;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	691b      	ldr	r3, [r3, #16]
 800d0a6:	697a      	ldr	r2, [r7, #20]
 800d0a8:	1ad3      	subs	r3, r2, r3
 800d0aa:	617b      	str	r3, [r7, #20]
	return uxCount;
 800d0ac:	697b      	ldr	r3, [r7, #20]
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	371c      	adds	r7, #28
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b8:	4770      	bx	lr

0800d0ba <uxStreamBufferDistance>:
{
 800d0ba:	b480      	push	{r7}
 800d0bc:	b087      	sub	sp, #28
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	60f8      	str	r0, [r7, #12]
 800d0c2:	60b9      	str	r1, [r7, #8]
 800d0c4:	607a      	str	r2, [r7, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	691a      	ldr	r2, [r3, #16]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	441a      	add	r2, r3
 800d0ce:	68bb      	ldr	r3, [r7, #8]
 800d0d0:	1ad3      	subs	r3, r2, r3
 800d0d2:	617b      	str	r3, [r7, #20]
	if ( uxCount >= pxBuffer->LENGTH )
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	691a      	ldr	r2, [r3, #16]
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d804      	bhi.n	800d0e8 <uxStreamBufferDistance+0x2e>
		uxCount -= pxBuffer->LENGTH;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	691b      	ldr	r3, [r3, #16]
 800d0e2:	697a      	ldr	r2, [r7, #20]
 800d0e4:	1ad3      	subs	r3, r2, r3
 800d0e6:	617b      	str	r3, [r7, #20]
	return uxCount;
 800d0e8:	697b      	ldr	r3, [r7, #20]
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	371c      	adds	r7, #28
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr

0800d0f6 <uxStreamBufferGetSpace>:
{
 800d0f6:	b580      	push	{r7, lr}
 800d0f8:	b084      	sub	sp, #16
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	6078      	str	r0, [r7, #4]
size_t uxHead = pxBuffer->uxHead;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	689b      	ldr	r3, [r3, #8]
 800d102:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800d10a:	68ba      	ldr	r2, [r7, #8]
 800d10c:	68f9      	ldr	r1, [r7, #12]
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f7ff ffb4 	bl	800d07c <uxStreamBufferSpace>
 800d114:	4603      	mov	r3, r0
}
 800d116:	4618      	mov	r0, r3
 800d118:	3710      	adds	r7, #16
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}

0800d11e <uxStreamBufferFrontSpace>:
{
 800d11e:	b580      	push	{r7, lr}
 800d120:	b084      	sub	sp, #16
 800d122:	af00      	add	r7, sp, #0
 800d124:	6078      	str	r0, [r7, #4]
size_t uxFront = pxBuffer->uxFront;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	68db      	ldr	r3, [r3, #12]
 800d12a:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferSpace( pxBuffer, uxFront, uxTail );
 800d132:	68ba      	ldr	r2, [r7, #8]
 800d134:	68f9      	ldr	r1, [r7, #12]
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f7ff ffa0 	bl	800d07c <uxStreamBufferSpace>
 800d13c:	4603      	mov	r3, r0
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3710      	adds	r7, #16
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}

0800d146 <uxStreamBufferMidSpace>:
{
 800d146:	b580      	push	{r7, lr}
 800d148:	b084      	sub	sp, #16
 800d14a:	af00      	add	r7, sp, #0
 800d14c:	6078      	str	r0, [r7, #4]
size_t uxHead = pxBuffer->uxHead;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	689b      	ldr	r3, [r3, #8]
 800d152:	60fb      	str	r3, [r7, #12]
size_t uxMid = pxBuffer->uxMid;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	685b      	ldr	r3, [r3, #4]
 800d158:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferDistance( pxBuffer, uxMid, uxHead );
 800d15a:	68fa      	ldr	r2, [r7, #12]
 800d15c:	68b9      	ldr	r1, [r7, #8]
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f7ff ffab 	bl	800d0ba <uxStreamBufferDistance>
 800d164:	4603      	mov	r3, r0
}
 800d166:	4618      	mov	r0, r3
 800d168:	3710      	adds	r7, #16
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}

0800d16e <vStreamBufferMoveMid>:
{
 800d16e:	b580      	push	{r7, lr}
 800d170:	b084      	sub	sp, #16
 800d172:	af00      	add	r7, sp, #0
 800d174:	6078      	str	r0, [r7, #4]
 800d176:	6039      	str	r1, [r7, #0]
size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f7ff ffe4 	bl	800d146 <uxStreamBufferMidSpace>
 800d17e:	60f8      	str	r0, [r7, #12]
	if( uxCount > uxSize )
 800d180:	683a      	ldr	r2, [r7, #0]
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	429a      	cmp	r2, r3
 800d186:	d901      	bls.n	800d18c <vStreamBufferMoveMid+0x1e>
		uxCount = uxSize;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	603b      	str	r3, [r7, #0]
	pxBuffer->uxMid += uxCount;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	685a      	ldr	r2, [r3, #4]
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	441a      	add	r2, r3
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	605a      	str	r2, [r3, #4]
	if( pxBuffer->uxMid >= pxBuffer->LENGTH )
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	685a      	ldr	r2, [r3, #4]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	691b      	ldr	r3, [r3, #16]
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d306      	bcc.n	800d1b2 <vStreamBufferMoveMid+0x44>
		pxBuffer->uxMid -= pxBuffer->LENGTH;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	685a      	ldr	r2, [r3, #4]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	691b      	ldr	r3, [r3, #16]
 800d1ac:	1ad2      	subs	r2, r2, r3
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	605a      	str	r2, [r3, #4]
}
 800d1b2:	bf00      	nop
 800d1b4:	3710      	adds	r7, #16
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}

0800d1ba <ulChar2u32>:
{
 800d1ba:	b480      	push	{r7}
 800d1bc:	b083      	sub	sp, #12
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	6078      	str	r0, [r7, #4]
	return  ( ( ( uint32_t )apChr[0] ) << 24) |
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	781b      	ldrb	r3, [r3, #0]
 800d1c6:	061a      	lsls	r2, r3, #24
			( ( ( uint32_t )apChr[1] ) << 16) |
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	3301      	adds	r3, #1
 800d1cc:	781b      	ldrb	r3, [r3, #0]
 800d1ce:	041b      	lsls	r3, r3, #16
	return  ( ( ( uint32_t )apChr[0] ) << 24) |
 800d1d0:	431a      	orrs	r2, r3
			( ( ( uint32_t )apChr[2] ) << 8) |
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	3302      	adds	r3, #2
 800d1d6:	781b      	ldrb	r3, [r3, #0]
 800d1d8:	021b      	lsls	r3, r3, #8
			( ( ( uint32_t )apChr[1] ) << 16) |
 800d1da:	4313      	orrs	r3, r2
			( ( ( uint32_t )apChr[3] ) );
 800d1dc:	687a      	ldr	r2, [r7, #4]
 800d1de:	3203      	adds	r2, #3
 800d1e0:	7812      	ldrb	r2, [r2, #0]
			( ( ( uint32_t )apChr[2] ) << 8) |
 800d1e2:	4313      	orrs	r3, r2
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	370c      	adds	r7, #12
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr

0800d1f0 <usChar2u16>:
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b083      	sub	sp, #12
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
			( ( ( ( uint32_t )apChr[0] ) << 8) |
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	781b      	ldrb	r3, [r3, #0]
 800d1fc:	b29b      	uxth	r3, r3
 800d1fe:	021b      	lsls	r3, r3, #8
 800d200:	b29a      	uxth	r2, r3
			  ( ( ( uint32_t )apChr[1] ) ) );
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	3301      	adds	r3, #1
 800d206:	781b      	ldrb	r3, [r3, #0]
 800d208:	b29b      	uxth	r3, r3
	return ( uint16_t )
 800d20a:	4313      	orrs	r3, r2
 800d20c:	b29b      	uxth	r3, r3
}
 800d20e:	4618      	mov	r0, r3
 800d210:	370c      	adds	r7, #12
 800d212:	46bd      	mov	sp, r7
 800d214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d218:	4770      	bx	lr
	...

0800d21c <prvTCPSocketIsActive>:

/* prvTCPSocketIsActive() returns true if the socket must be checked.
 * Non-active sockets are waiting for user action, either connect()
 * or close(). */
static BaseType_t prvTCPSocketIsActive( UBaseType_t uxStatus )
{
 800d21c:	b480      	push	{r7}
 800d21e:	b083      	sub	sp, #12
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
	switch( uxStatus )
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2b0b      	cmp	r3, #11
 800d228:	d81c      	bhi.n	800d264 <prvTCPSocketIsActive+0x48>
 800d22a:	a201      	add	r2, pc, #4	; (adr r2, 800d230 <prvTCPSocketIsActive+0x14>)
 800d22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d230:	0800d261 	.word	0x0800d261
 800d234:	0800d265 	.word	0x0800d265
 800d238:	0800d265 	.word	0x0800d265
 800d23c:	0800d265 	.word	0x0800d265
 800d240:	0800d265 	.word	0x0800d265
 800d244:	0800d265 	.word	0x0800d265
 800d248:	0800d265 	.word	0x0800d265
 800d24c:	0800d261 	.word	0x0800d261
 800d250:	0800d261 	.word	0x0800d261
 800d254:	0800d261 	.word	0x0800d261
 800d258:	0800d265 	.word	0x0800d265
 800d25c:	0800d261 	.word	0x0800d261
	case eCLOSED:
	case eCLOSE_WAIT:
	case eFIN_WAIT_2:
	case eCLOSING:
	case eTIME_WAIT:
		return pdFALSE;
 800d260:	2300      	movs	r3, #0
 800d262:	e000      	b.n	800d266 <prvTCPSocketIsActive+0x4a>
	default:
		return pdTRUE;
 800d264:	2301      	movs	r3, #1
	}
}
 800d266:	4618      	mov	r0, r3
 800d268:	370c      	adds	r7, #12
 800d26a:	46bd      	mov	sp, r7
 800d26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d270:	4770      	bx	lr
 800d272:	bf00      	nop

0800d274 <prvTCPStatusAgeCheck>:
/*-----------------------------------------------------------*/

#if( ipconfigTCP_HANG_PROTECTION == 1 )

	static BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t *pxSocket )
	{
 800d274:	b580      	push	{r7, lr}
 800d276:	b084      	sub	sp, #16
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
	BaseType_t xResult;
		switch( pxSocket->u.xTCP.ucTCPState )
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d282:	2b08      	cmp	r3, #8
 800d284:	d81a      	bhi.n	800d2bc <prvTCPStatusAgeCheck+0x48>
 800d286:	a201      	add	r2, pc, #4	; (adr r2, 800d28c <prvTCPStatusAgeCheck+0x18>)
 800d288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d28c:	0800d2b7 	.word	0x0800d2b7
 800d290:	0800d2b7 	.word	0x0800d2b7
 800d294:	0800d2bd 	.word	0x0800d2bd
 800d298:	0800d2bd 	.word	0x0800d2bd
 800d29c:	0800d2bd 	.word	0x0800d2bd
 800d2a0:	0800d2b1 	.word	0x0800d2b1
 800d2a4:	0800d2bd 	.word	0x0800d2bd
 800d2a8:	0800d2bd 	.word	0x0800d2bd
 800d2ac:	0800d2b7 	.word	0x0800d2b7
		{
		case eESTABLISHED:
			/* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
			state ESTABLISHED can be protected using keep-alive messages. */
			xResult = pdFALSE;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	60fb      	str	r3, [r7, #12]
			break;
 800d2b4:	e005      	b.n	800d2c2 <prvTCPStatusAgeCheck+0x4e>
		case eCLOSED:
		case eTCP_LISTEN:
		case eCLOSE_WAIT:
			/* These 3 states may last for ever, up to the owner. */
			xResult = pdFALSE;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	60fb      	str	r3, [r7, #12]
			break;
 800d2ba:	e002      	b.n	800d2c2 <prvTCPStatusAgeCheck+0x4e>
		default:
			/* All other (non-connected) states will get anti-hanging
			protection. */
			xResult = pdTRUE;
 800d2bc:	2301      	movs	r3, #1
 800d2be:	60fb      	str	r3, [r7, #12]
			break;
 800d2c0:	bf00      	nop
		}
		if( xResult != pdFALSE )
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d025      	beq.n	800d314 <prvTCPStatusAgeCheck+0xa0>
		{
			/* How much time has past since the last active moment which is
			defined as A) a state change or B) a packet has arrived. */
			TickType_t xAge = xTaskGetTickCount( ) - pxSocket->u.xTCP.xLastActTime;
 800d2c8:	f7fc f844 	bl	8009354 <xTaskGetTickCount>
 800d2cc:	4602      	mov	r2, r0
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d2d2:	1ad3      	subs	r3, r2, r3
 800d2d4:	60bb      	str	r3, [r7, #8]

			/* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
			if( xAge > ( ipconfigTCP_HANG_PROTECTION_TIME * configTICK_RATE_HZ ) )
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	f247 5230 	movw	r2, #30000	; 0x7530
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	d919      	bls.n	800d314 <prvTCPStatusAgeCheck+0xa0>
						FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) ) );
				}
				#endif /* ipconfigHAS_DEBUG_PRINTF */

				/* Move to eCLOSE_WAIT, user may close the socket. */
				vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800d2e0:	2108      	movs	r1, #8
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f000 fda7 	bl	800de36 <vTCPStateChange>

				/* When 'bPassQueued' true, this socket is an orphan until it
				gets connected. */
				if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d2ee:	f003 0304 	and.w	r3, r3, #4
 800d2f2:	b2db      	uxtb	r3, r3
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d00d      	beq.n	800d314 <prvTCPStatusAgeCheck+0xa0>
				{
					if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d2fe:	f003 0308 	and.w	r3, r3, #8
 800d302:	b2db      	uxtb	r3, r3
 800d304:	2b00      	cmp	r3, #0
 800d306:	d102      	bne.n	800d30e <prvTCPStatusAgeCheck+0x9a>
					{
						/* As it did not get connected, and the user can never
						accept() it anymore, it will be deleted now.  Called from
						the IP-task, so it's safe to call the internal Close
						function: vSocketClose(). */
						vSocketClose( pxSocket );
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f7ff f889 	bl	800c420 <vSocketClose>
					}
					/* Return a negative value to tell to inform the caller
					xTCPTimerCheck()
					that the socket got closed and may not be accessed anymore. */
					xResult = -1;
 800d30e:	f04f 33ff 	mov.w	r3, #4294967295
 800d312:	60fb      	str	r3, [r7, #12]
				}
			}
		}
		return xResult;
 800d314:	68fb      	ldr	r3, [r7, #12]
	}
 800d316:	4618      	mov	r0, r3
 800d318:	3710      	adds	r7, #16
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}
 800d31e:	bf00      	nop

0800d320 <xTCPSocketCheck>:
 *		prvTCPSendRepeated()			// Send at most 8 messages on a row
 *			prvTCPReturnPacket()		// Prepare for returning
 *			xNetworkInterfaceOutput()	// Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
 */
BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t *pxSocket )
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b084      	sub	sp, #16
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
BaseType_t xResult = 0;
 800d328:	2300      	movs	r3, #0
 800d32a:	60fb      	str	r3, [r7, #12]
BaseType_t xReady = pdFALSE;
 800d32c:	2300      	movs	r3, #0
 800d32e:	60bb      	str	r3, [r7, #8]

	if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d336:	2b04      	cmp	r3, #4
 800d338:	d906      	bls.n	800d348 <xTCPSocketCheck+0x28>
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d002      	beq.n	800d348 <xTCPSocketCheck+0x28>
	{
		/* The API FreeRTOS_send() might have added data to the TX stream.  Add
		this data to the windowing system to it can be transmitted. */
		prvTCPAddTxData( pxSocket );
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f001 f89e 	bl	800e484 <prvTCPAddTxData>
	}

	#if ipconfigUSE_TCP_WIN == 1
	{
		if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d02a      	beq.n	800d3a6 <xTCPSocketCheck+0x86>
		{
			/* The first task of this regular socket check is to send-out delayed
			ACK's. */
			if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d356:	f003 0320 	and.w	r3, r3, #32
 800d35a:	b2db      	uxtb	r3, r3
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d116      	bne.n	800d38e <xTCPSocketCheck+0x6e>
			{
				/* Earlier data was received but not yet acknowledged.  This
				function is called when the TCP timer for the socket expires, the
				ACK may be sent now. */
				if( pxSocket->u.xTCP.ucTCPState != eCLOSED )
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d366:	2b00      	cmp	r3, #0
 800d368:	d009      	beq.n	800d37e <xTCPSocketCheck+0x5e>
				{
					if( xTCPWindowLoggingLevel > 1 && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 800d36a:	4b1d      	ldr	r3, [pc, #116]	; (800d3e0 <xTCPSocketCheck+0xc0>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	2b01      	cmp	r3, #1
							pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber,
							pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber   - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber,
							ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) );
					}

					prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER, ipconfigZERO_COPY_TX_DRIVER );
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800d374:	2300      	movs	r3, #0
 800d376:	2228      	movs	r2, #40	; 0x28
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	f000 f8bb 	bl	800d4f4 <prvTCPReturnPacket>
						clear the pointer to it. */
						pxSocket->u.xTCP.pxAckMessage = NULL;
					}
					#endif /* ipconfigZERO_COPY_TX_DRIVER */
				}
				if( prvTCPNextTimeout( pxSocket ) > 1 )
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f001 f800 	bl	800e384 <prvTCPNextTimeout>
 800d384:	4603      	mov	r3, r0
 800d386:	2b01      	cmp	r3, #1
 800d388:	d901      	bls.n	800d38e <xTCPSocketCheck+0x6e>
				{
					/* Tell the code below that this function is ready. */
					xReady = pdTRUE;
 800d38a:	2301      	movs	r3, #1
 800d38c:	60bb      	str	r3, [r7, #8]
				/* The user wants to perform an active shutdown(), skip sending
				the	delayed	ACK.  The function prvTCPSendPacket() will send the
				FIN	along with the ACK's. */
			}

			if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d392:	2b00      	cmp	r3, #0
 800d394:	d007      	beq.n	800d3a6 <xTCPSocketCheck+0x86>
			{
				vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d39a:	4618      	mov	r0, r3
 800d39c:	f003 fb1a 	bl	80109d4 <vReleaseNetworkBufferAndDescriptor>
				pxSocket->u.xTCP.pxAckMessage = NULL;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	67da      	str	r2, [r3, #124]	; 0x7c
			}
		}
	}
	#endif /* ipconfigUSE_TCP_WIN */

	if( xReady == pdFALSE )
 800d3a6:	68bb      	ldr	r3, [r7, #8]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d113      	bne.n	800d3d4 <xTCPSocketCheck+0xb4>
	{
		/* The second task of this regular socket check is sending out data. */
		if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) ||
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d3b2:	2b04      	cmp	r3, #4
 800d3b4:	d804      	bhi.n	800d3c0 <xTCPSocketCheck+0xa0>
			( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN ) )
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
		if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) ||
 800d3bc:	2b02      	cmp	r3, #2
 800d3be:	d102      	bne.n	800d3c6 <xTCPSocketCheck+0xa6>
		{
			prvTCPSendPacket( pxSocket );
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f000 f80f 	bl	800d3e4 <prvTCPSendPacket>
		}

		/* Set the time-out for the next wakeup for this socket. */
		prvTCPNextTimeout( pxSocket );
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f000 ffdc 	bl	800e384 <prvTCPNextTimeout>

		#if( ipconfigTCP_HANG_PROTECTION == 1 )
		{
			/* In all (non-connected) states in which keep-alive messages can not be sent
			the anti-hang protocol will close sockets that are 'hanging'. */
			xResult = prvTCPStatusAgeCheck( pxSocket );
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f7ff ff51 	bl	800d274 <prvTCPStatusAgeCheck>
 800d3d2:	60f8      	str	r0, [r7, #12]
		}
		#endif
	}

	return xResult;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3710      	adds	r7, #16
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}
 800d3de:	bf00      	nop
 800d3e0:	20004ee0 	.word	0x20004ee0

0800d3e4 <prvTCPSendPacket>:
/*
 * prvTCPSendPacket() will be called when the socket time-out has been reached.
 * It is only called by xTCPSocketCheck().
 */
static int32_t prvTCPSendPacket( FreeRTOS_Socket_t *pxSocket )
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b086      	sub	sp, #24
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
int32_t lResult = 0;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxOptionsLength;
TCPPacket_t *pxTCPPacket;
NetworkBufferDescriptor_t *pxNetworkBuffer;

	if( pxSocket->u.xTCP.ucTCPState != eCONNECT_SYN )
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d3f6:	2b02      	cmp	r3, #2
 800d3f8:	d010      	beq.n	800d41c <prvTCPSendPacket+0x38>
	{
		/* The connection is in s state other than SYN. */
		pxNetworkBuffer = NULL;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	60bb      	str	r3, [r7, #8]

		/* prvTCPSendRepeated() will only create a network buffer if necessary,
		i.e. when data must be sent to the peer. */
		lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800d3fe:	f107 0308 	add.w	r3, r7, #8
 800d402:	4619      	mov	r1, r3
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f000 f848 	bl	800d49a <prvTCPSendRepeated>
 800d40a:	6178      	str	r0, [r7, #20]

		if( pxNetworkBuffer != NULL )
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d03e      	beq.n	800d490 <prvTCPSendPacket+0xac>
		{
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	4618      	mov	r0, r3
 800d416:	f003 fadd 	bl	80109d4 <vReleaseNetworkBufferAndDescriptor>
 800d41a:	e039      	b.n	800d490 <prvTCPSendPacket+0xac>
		}
	}
	else
	{
		if( pxSocket->u.xTCP.ucRepCount >= 3u )
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d422:	2b02      	cmp	r3, #2
 800d424:	d904      	bls.n	800d430 <prvTCPSendPacket+0x4c>
			to most 3 times.  When there is no response, the socket get the
			status 'eCLOSE_WAIT'. */
			FreeRTOS_debug_printf( ( "Connect: giving up %lxip:%u\n",
				pxSocket->u.xTCP.ulRemoteIP,		/* IP address of remote machine. */
				pxSocket->u.xTCP.usRemotePort ) );	/* Port on remote machine. */
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800d426:	2108      	movs	r1, #8
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f000 fd04 	bl	800de36 <vTCPStateChange>
 800d42e:	e02f      	b.n	800d490 <prvTCPSendPacket+0xac>
		}
		else if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) || ( prvTCPPrepareConnect( pxSocket ) == pdTRUE ) )
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d436:	f003 0308 	and.w	r3, r3, #8
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d105      	bne.n	800d44c <prvTCPSendPacket+0x68>
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	f000 fa5f 	bl	800d904 <prvTCPPrepareConnect>
 800d446:	4603      	mov	r3, r0
 800d448:	2b01      	cmp	r3, #1
 800d44a:	d121      	bne.n	800d490 <prvTCPSendPacket+0xac>
		{
			/* Or else, if the connection has been prepared, or can be prepared
			now, proceed to send the packet with the SYN flag.
			prvTCPPrepareConnect() prepares 'xPacket' and returns pdTRUE if
			the Ethernet address of the peer or the gateway is found. */
			pxTCPPacket = ( TCPPacket_t * )pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	3382      	adds	r3, #130	; 0x82
 800d450:	613b      	str	r3, [r7, #16]

			/* About to send a SYN packet.  Call prvSetSynAckOptions() to set
			the proper options: The size of MSS and whether SACK's are
			allowed. */
			uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPPacket );
 800d452:	6939      	ldr	r1, [r7, #16]
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f000 fc76 	bl	800dd46 <prvSetSynAckOptions>
 800d45a:	60f8      	str	r0, [r7, #12]

			/* Return the number of bytes to be sent. */
			lResult = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	3328      	adds	r3, #40	; 0x28
 800d460:	617b      	str	r3, [r7, #20]

			/* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
			uxOptionsLength is always a multiple of 4.  The complete expression
			would be:
			ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
			pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	b2db      	uxtb	r3, r3
 800d466:	3314      	adds	r3, #20
 800d468:	b2db      	uxtb	r3, r3
 800d46a:	009b      	lsls	r3, r3, #2
 800d46c:	b2da      	uxtb	r2, r3
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

			/* Repeat Count is used for a connecting socket, to limit the number
			of tries. */
			pxSocket->u.xTCP.ucRepCount++;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d47a:	3301      	adds	r3, #1
 800d47c:	b2da      	uxtb	r2, r3
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

			/* Send the SYN message to make a connection.  The messages is
			stored in the socket field 'xPacket'.  It will be wrapped in a
			pseudo network buffer descriptor before it will be sent. */
			prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 800d484:	697a      	ldr	r2, [r7, #20]
 800d486:	2300      	movs	r3, #0
 800d488:	2100      	movs	r1, #0
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f000 f832 	bl	800d4f4 <prvTCPReturnPacket>
		}
	}

	/* Return the total number of bytes sent. */
	return lResult;
 800d490:	697b      	ldr	r3, [r7, #20]
}
 800d492:	4618      	mov	r0, r3
 800d494:	3718      	adds	r7, #24
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}

0800d49a <prvTCPSendRepeated>:
/*
 * prvTCPSendRepeated will try to send a series of messages, as long as there is
 * data to be sent and as long as the transmit window isn't full.
 */
static int32_t prvTCPSendRepeated( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer )
{
 800d49a:	b580      	push	{r7, lr}
 800d49c:	b086      	sub	sp, #24
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	6078      	str	r0, [r7, #4]
 800d4a2:	6039      	str	r1, [r7, #0]
UBaseType_t uxIndex;
int32_t lResult = 0;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	613b      	str	r3, [r7, #16]
UBaseType_t uxOptionsLength = 0u;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	60fb      	str	r3, [r7, #12]
int32_t xSendLength;

	for( uxIndex = 0u; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	617b      	str	r3, [r7, #20]
 800d4b0:	e016      	b.n	800d4e0 <prvTCPSendRepeated+0x46>
	{
		/* prvTCPPrepareSend() might allocate a network buffer if there is data
		to be sent. */
		xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800d4b2:	68fa      	ldr	r2, [r7, #12]
 800d4b4:	6839      	ldr	r1, [r7, #0]
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f000 fdfc 	bl	800e0b4 <prvTCPPrepareSend>
 800d4bc:	60b8      	str	r0, [r7, #8]
		if( xSendLength <= 0 )
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	dd11      	ble.n	800d4e8 <prvTCPSendRepeated+0x4e>
		{
			break;
		}

		/* And return the packet to the peer. */
		prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	6819      	ldr	r1, [r3, #0]
 800d4c8:	68ba      	ldr	r2, [r7, #8]
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f000 f811 	bl	800d4f4 <prvTCPReturnPacket>
		{
			*ppxNetworkBuffer = NULL;
		}
		#endif /* ipconfigZERO_COPY_TX_DRIVER */

		lResult += xSendLength;
 800d4d2:	693a      	ldr	r2, [r7, #16]
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	4413      	add	r3, r2
 800d4d8:	613b      	str	r3, [r7, #16]
	for( uxIndex = 0u; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	3301      	adds	r3, #1
 800d4de:	617b      	str	r3, [r7, #20]
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	2b07      	cmp	r3, #7
 800d4e4:	d9e5      	bls.n	800d4b2 <prvTCPSendRepeated+0x18>
 800d4e6:	e000      	b.n	800d4ea <prvTCPSendRepeated+0x50>
			break;
 800d4e8:	bf00      	nop
	}

	/* Return the total number of bytes sent. */
	return lResult;
 800d4ea:	693b      	ldr	r3, [r7, #16]
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3718      	adds	r7, #24
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <prvTCPReturnPacket>:
 * which may either point to a real network buffer or to a TCP socket field
 * called 'xTCP.xPacket'.   A temporary xNetworkBuffer will be used to pass
 * the data to the NIC.
 */
static void prvTCPReturnPacket( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer, uint32_t ulLen, BaseType_t xReleaseAfterSend )
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b098      	sub	sp, #96	; 0x60
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	60f8      	str	r0, [r7, #12]
 800d4fc:	60b9      	str	r1, [r7, #8]
 800d4fe:	607a      	str	r2, [r7, #4]
 800d500:	603b      	str	r3, [r7, #0]
uint32_t ulFrontSpace, ulSpace, ulSourceAddress, ulWinSize;
TCPWindow_t *pxTCPWindow;
NetworkBufferDescriptor_t xTempBuffer;
/* For sending, a pseudo network buffer will be used, as explained above. */

	if( pxNetworkBuffer == NULL )
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d109      	bne.n	800d51c <prvTCPReturnPacket+0x28>
	{
		pxNetworkBuffer = &xTempBuffer;
 800d508:	f107 0310 	add.w	r3, r7, #16
 800d50c:	60bb      	str	r3, [r7, #8]
		#if( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
		{
			xTempBuffer.pxNextBuffer = NULL;
		}
		#endif
		xTempBuffer.pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	3382      	adds	r3, #130	; 0x82
 800d512:	62bb      	str	r3, [r7, #40]	; 0x28
		xTempBuffer.xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800d514:	2346      	movs	r3, #70	; 0x46
 800d516:	62fb      	str	r3, [r7, #44]	; 0x2c
		xReleaseAfterSend = pdFALSE;
 800d518:	2300      	movs	r3, #0
 800d51a:	603b      	str	r3, [r7, #0]
			xReleaseAfterSend = pdTRUE;
		}
	}
	#endif /* ipconfigZERO_COPY_TX_DRIVER */

	if( pxNetworkBuffer != NULL )
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	f000 81c0 	beq.w	800d8a4 <prvTCPReturnPacket+0x3b0>
	{
		pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	699b      	ldr	r3, [r3, #24]
 800d528:	64fb      	str	r3, [r7, #76]	; 0x4c
		pxIPHeader = &pxTCPPacket->xIPHeader;
 800d52a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d52c:	330e      	adds	r3, #14
 800d52e:	64bb      	str	r3, [r7, #72]	; 0x48
		pxEthernetHeader = &pxTCPPacket->xEthernetHeader;
 800d530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d532:	647b      	str	r3, [r7, #68]	; 0x44

		/* Fill the packet, using hton translations. */
		if( pxSocket != NULL )
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	2b00      	cmp	r3, #0
 800d538:	f000 80ed 	beq.w	800d716 <prvTCPReturnPacket+0x222>
		{
			/* Calculate the space in the RX buffer in order to advertise the
			size of this socket's reception window. */
			pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	33dc      	adds	r3, #220	; 0xdc
 800d540:	643b      	str	r3, [r7, #64]	; 0x40

			if( pxSocket->u.xTCP.rxStream != NULL )
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d546:	2b00      	cmp	r3, #0
 800d548:	d006      	beq.n	800d558 <prvTCPReturnPacket+0x64>
			{
				/* An RX stream was created already, see how much space is
				available. */
				ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d54e:	4618      	mov	r0, r3
 800d550:	f7ff fde5 	bl	800d11e <uxStreamBufferFrontSpace>
 800d554:	65f8      	str	r0, [r7, #92]	; 0x5c
 800d556:	e002      	b.n	800d55e <prvTCPReturnPacket+0x6a>
			}
			else
			{
				/* No RX stream has been created, the full stream size is
				available. */
				ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d55c:	65fb      	str	r3, [r7, #92]	; 0x5c
			}

			/* Take the minimum of the RX buffer space and the RX window size. */
			ulSpace = FreeRTOS_min_uint32( pxSocket->u.xTCP.ulRxCurWinSize, pxTCPWindow->xSize.ulRxWindowLength );
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800d564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d566:	685b      	ldr	r3, [r3, #4]
 800d568:	4619      	mov	r1, r3
 800d56a:	4610      	mov	r0, r2
 800d56c:	f7ff fd76 	bl	800d05c <FreeRTOS_min_uint32>
 800d570:	65b8      	str	r0, [r7, #88]	; 0x58

			if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d578:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d57c:	b2db      	uxtb	r3, r3
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d107      	bne.n	800d592 <prvTCPReturnPacket+0x9e>
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d588:	f003 0304 	and.w	r3, r3, #4
 800d58c:	b2db      	uxtb	r3, r3
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d001      	beq.n	800d596 <prvTCPReturnPacket+0xa2>
			{
				/* The low-water mark was reached, meaning there was little
				space left.  The socket will wait until the application has read
				or flushed the incoming data, and 'zero-window' will be
				advertised. */
				ulSpace = 0u;
 800d592:	2300      	movs	r3, #0
 800d594:	65bb      	str	r3, [r7, #88]	; 0x58
			}

			/* If possible, advertise an RX window size of at least 1 MSS, otherwise
			the peer might start 'zero window probing', i.e. sending small packets
			(1, 2, 4, 8... bytes). */
			if( ( ulSpace < pxSocket->u.xTCP.usCurMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usCurMSS ) )
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d59c:	461a      	mov	r2, r3
 800d59e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	d90a      	bls.n	800d5ba <prvTCPReturnPacket+0xc6>
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d5aa:	461a      	mov	r2, r3
 800d5ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5ae:	429a      	cmp	r2, r3
 800d5b0:	d803      	bhi.n	800d5ba <prvTCPReturnPacket+0xc6>
			{
				ulSpace = pxSocket->u.xTCP.usCurMSS;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d5b8:	65bb      	str	r3, [r7, #88]	; 0x58
			}

			/* Avoid overflow of the 16-bit win field. */
			#if( ipconfigUSE_TCP_WIN != 0 )
			{
				ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800d5c0:	461a      	mov	r2, r3
 800d5c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d5c4:	40d3      	lsrs	r3, r2
 800d5c6:	653b      	str	r3, [r7, #80]	; 0x50
			#else
			{
				ulWinSize = ulSpace;
			}
			#endif
			if( ulWinSize > 0xfffcUL )
 800d5c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5ca:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800d5ce:	4293      	cmp	r3, r2
 800d5d0:	d902      	bls.n	800d5d8 <prvTCPReturnPacket+0xe4>
			{
				ulWinSize = 0xfffcUL;
 800d5d2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800d5d6:	653b      	str	r3, [r7, #80]	; 0x50
			}

			pxTCPPacket->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 800d5d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5da:	b29b      	uxth	r3, r3
 800d5dc:	021b      	lsls	r3, r3, #8
 800d5de:	b21a      	sxth	r2, r3
 800d5e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5e2:	b29b      	uxth	r3, r3
 800d5e4:	0a1b      	lsrs	r3, r3, #8
 800d5e6:	b29b      	uxth	r3, r3
 800d5e8:	b21b      	sxth	r3, r3
 800d5ea:	4313      	orrs	r3, r2
 800d5ec:	b21b      	sxth	r3, r3
 800d5ee:	b29a      	uxth	r2, r3
 800d5f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5f2:	861a      	strh	r2, [r3, #48]	; 0x30
				}
			}
			#endif /* ipconfigHAS_DEBUG_PRINTF != 0 */

			/* The new window size has been advertised, switch off the flag. */
			pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 800d5f4:	68fa      	ldr	r2, [r7, #12]
 800d5f6:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d5fa:	f36f 0300 	bfc	r3, #0, #1
 800d5fe:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

			/* Later on, when deciding to delay an ACK, a precise estimate is needed
			of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
			highest sequence number minus 1 that the socket will accept. */
			pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 800d602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d604:	691a      	ldr	r2, [r3, #16]
 800d606:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d608:	441a      	add	r2, r3
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	645a      	str	r2, [r3, #68]	; 0x44

			#if( ipconfigTCP_KEEP_ALIVE == 1 )
				if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d614:	f003 0302 	and.w	r3, r3, #2
 800d618:	b2db      	uxtb	r3, r3
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d02f      	beq.n	800d67e <prvTCPReturnPacket+0x18a>
				{
					/* Sending a keep-alive packet, send the current sequence number
					minus 1, which will	be recognised as a keep-alive packet an
					responded to by acknowledging the last byte. */
					pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800d61e:	68fa      	ldr	r2, [r7, #12]
 800d620:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d624:	f36f 0341 	bfc	r3, #1, #1
 800d628:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
					pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 800d62c:	68fa      	ldr	r2, [r7, #12]
 800d62e:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d632:	f043 0304 	orr.w	r3, r3, #4
 800d636:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

					pxTCPPacket->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1UL;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800d640:	1e5a      	subs	r2, r3, #1
 800d642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d644:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
					pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 800d648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d64a:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800d64e:	061a      	lsls	r2, r3, #24
 800d650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d652:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800d656:	021b      	lsls	r3, r3, #8
 800d658:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d65c:	431a      	orrs	r2, r3
 800d65e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d660:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800d664:	0a1b      	lsrs	r3, r3, #8
 800d666:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d66a:	431a      	orrs	r2, r3
 800d66c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d66e:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800d672:	0e1b      	lsrs	r3, r3, #24
 800d674:	431a      	orrs	r2, r3
 800d676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d678:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
 800d67c:	e034      	b.n	800d6e8 <prvTCPReturnPacket+0x1f4>
				}
				else
			#endif
			{
				pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800d684:	061a      	lsls	r2, r3, #24
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800d68c:	021b      	lsls	r3, r3, #8
 800d68e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d692:	431a      	orrs	r2, r3
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800d69a:	0a1b      	lsrs	r3, r3, #8
 800d69c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d6a0:	431a      	orrs	r2, r3
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800d6a8:	0e1b      	lsrs	r3, r3, #24
 800d6aa:	431a      	orrs	r2, r3
 800d6ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6ae:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26

				if( ( pxTCPPacket->xTCPHeader.ucTCPFlags & ( uint8_t ) ipTCP_FLAG_FIN ) != 0u )
 800d6b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6b4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d6b8:	f003 0301 	and.w	r3, r3, #1
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d013      	beq.n	800d6e8 <prvTCPReturnPacket+0x1f4>
				{
					/* Suppress FIN in case this packet carries earlier data to be
					retransmitted. */
					uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + ipSIZE_OF_IPv4_HEADER ) );
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	3b28      	subs	r3, #40	; 0x28
 800d6c4:	63fb      	str	r3, [r7, #60]	; 0x3c
					if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 800d6c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6cc:	441a      	add	r2, r3
 800d6ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d008      	beq.n	800d6e8 <prvTCPReturnPacket+0x1f4>
					{
						pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_FIN );
 800d6d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d6dc:	f023 0301 	bic.w	r3, r3, #1
 800d6e0:	b2da      	uxtb	r2, r3
 800d6e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6e4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
					}
				}
			}

			/* Tell which sequence number is expected next time */
			pxTCPPacket->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 800d6e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6ea:	691b      	ldr	r3, [r3, #16]
 800d6ec:	061a      	lsls	r2, r3, #24
 800d6ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6f0:	691b      	ldr	r3, [r3, #16]
 800d6f2:	021b      	lsls	r3, r3, #8
 800d6f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d6f8:	431a      	orrs	r2, r3
 800d6fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6fc:	691b      	ldr	r3, [r3, #16]
 800d6fe:	0a1b      	lsrs	r3, r3, #8
 800d700:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d704:	431a      	orrs	r2, r3
 800d706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d708:	691b      	ldr	r3, [r3, #16]
 800d70a:	0e1b      	lsrs	r3, r3, #24
 800d70c:	431a      	orrs	r2, r3
 800d70e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d710:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
 800d714:	e00d      	b.n	800d732 <prvTCPReturnPacket+0x23e>
		}
		else
		{
			/* Sending data without a socket, probably replying with a RST flag
			Just swap the two sequence numbers. */
			vFlip_32( pxTCPPacket->xTCPHeader.ulSequenceNumber, pxTCPPacket->xTCPHeader.ulAckNr );
 800d716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d718:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800d71c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d71e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d720:	f8d3 202a 	ldr.w	r2, [r3, #42]	; 0x2a
 800d724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d726:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
 800d72a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d72c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d72e:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
		}

		pxIPHeader->ucTimeToLive           = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800d732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d734:	2280      	movs	r2, #128	; 0x80
 800d736:	721a      	strb	r2, [r3, #8]
		pxIPHeader->usLength               = FreeRTOS_htons( ulLen );
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	b29b      	uxth	r3, r3
 800d73c:	021b      	lsls	r3, r3, #8
 800d73e:	b29a      	uxth	r2, r3
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	0a1b      	lsrs	r3, r3, #8
 800d744:	b29b      	uxth	r3, r3
 800d746:	4313      	orrs	r3, r2
 800d748:	b29a      	uxth	r2, r3
 800d74a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d74c:	805a      	strh	r2, [r3, #2]
		if( ( pxSocket == NULL ) || ( *ipLOCAL_IP_ADDRESS_POINTER == 0ul ) )
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d003      	beq.n	800d75c <prvTCPReturnPacket+0x268>
 800d754:	4b55      	ldr	r3, [pc, #340]	; (800d8ac <prvTCPReturnPacket+0x3b8>)
 800d756:	695b      	ldr	r3, [r3, #20]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d103      	bne.n	800d764 <prvTCPReturnPacket+0x270>
		{
			/* When pxSocket is NULL, this function is called by prvTCPSendReset()
			and the IP-addresses must be swapped.
			Also swap the IP-addresses in case the IP-tack doesn't have an
			IP-address yet, i.e. when ( *ipLOCAL_IP_ADDRESS_POINTER == 0ul ). */
			ulSourceAddress = pxIPHeader->ulDestinationIPAddress;
 800d75c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d75e:	691b      	ldr	r3, [r3, #16]
 800d760:	657b      	str	r3, [r7, #84]	; 0x54
 800d762:	e002      	b.n	800d76a <prvTCPReturnPacket+0x276>
		}
		else
		{
			ulSourceAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800d764:	4b51      	ldr	r3, [pc, #324]	; (800d8ac <prvTCPReturnPacket+0x3b8>)
 800d766:	695b      	ldr	r3, [r3, #20]
 800d768:	657b      	str	r3, [r7, #84]	; 0x54
		}
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800d76a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d76c:	68da      	ldr	r2, [r3, #12]
 800d76e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d770:	611a      	str	r2, [r3, #16]
		pxIPHeader->ulSourceIPAddress = ulSourceAddress;
 800d772:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d774:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d776:	60da      	str	r2, [r3, #12]
		vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 800d778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d77a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800d77e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800d782:	021b      	lsls	r3, r3, #8
 800d784:	4313      	orrs	r3, r2
 800d786:	86fb      	strh	r3, [r7, #54]	; 0x36
 800d788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d78a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d78c:	b29a      	uxth	r2, r3
 800d78e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d790:	845a      	strh	r2, [r3, #34]	; 0x22
 800d792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d794:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d796:	849a      	strh	r2, [r3, #36]	; 0x24

		/* Just an increasing number. */
		pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 800d798:	4b45      	ldr	r3, [pc, #276]	; (800d8b0 <prvTCPReturnPacket+0x3bc>)
 800d79a:	881b      	ldrh	r3, [r3, #0]
 800d79c:	021b      	lsls	r3, r3, #8
 800d79e:	b21a      	sxth	r2, r3
 800d7a0:	4b43      	ldr	r3, [pc, #268]	; (800d8b0 <prvTCPReturnPacket+0x3bc>)
 800d7a2:	881b      	ldrh	r3, [r3, #0]
 800d7a4:	0a1b      	lsrs	r3, r3, #8
 800d7a6:	b29b      	uxth	r3, r3
 800d7a8:	b21b      	sxth	r3, r3
 800d7aa:	4313      	orrs	r3, r2
 800d7ac:	b21b      	sxth	r3, r3
 800d7ae:	b29a      	uxth	r2, r3
 800d7b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7b2:	809a      	strh	r2, [r3, #4]
		usPacketIdentifier++;
 800d7b4:	4b3e      	ldr	r3, [pc, #248]	; (800d8b0 <prvTCPReturnPacket+0x3bc>)
 800d7b6:	881b      	ldrh	r3, [r3, #0]
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	b29a      	uxth	r2, r3
 800d7bc:	4b3c      	ldr	r3, [pc, #240]	; (800d8b0 <prvTCPReturnPacket+0x3bc>)
 800d7be:	801a      	strh	r2, [r3, #0]
		pxIPHeader->usFragmentOffset = 0u;
 800d7c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	719a      	strb	r2, [r3, #6]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	71da      	strb	r2, [r3, #7]

		#if( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
		{
			/* calculate the IP header checksum, in case the driver won't do that. */
			pxIPHeader->usHeaderChecksum = 0x00u;
 800d7ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	729a      	strb	r2, [r3, #10]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	72da      	strb	r2, [r3, #11]
			pxIPHeader->usHeaderChecksum = usGenerateChecksum( 0UL, ( uint8_t * ) &( pxIPHeader->ucVersionHeaderLength ), ipSIZE_OF_IPv4_HEADER );
 800d7d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7d6:	2214      	movs	r2, #20
 800d7d8:	4619      	mov	r1, r3
 800d7da:	2000      	movs	r0, #0
 800d7dc:	f7fe fa94 	bl	800bd08 <usGenerateChecksum>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	461a      	mov	r2, r3
 800d7e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7e6:	815a      	strh	r2, [r3, #10]
			pxIPHeader->usHeaderChecksum = ~FreeRTOS_htons( pxIPHeader->usHeaderChecksum );
 800d7e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7ea:	895b      	ldrh	r3, [r3, #10]
 800d7ec:	b29b      	uxth	r3, r3
 800d7ee:	021b      	lsls	r3, r3, #8
 800d7f0:	b21a      	sxth	r2, r3
 800d7f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7f4:	895b      	ldrh	r3, [r3, #10]
 800d7f6:	b29b      	uxth	r3, r3
 800d7f8:	0a1b      	lsrs	r3, r3, #8
 800d7fa:	b29b      	uxth	r3, r3
 800d7fc:	b21b      	sxth	r3, r3
 800d7fe:	4313      	orrs	r3, r2
 800d800:	b21b      	sxth	r3, r3
 800d802:	b29b      	uxth	r3, r3
 800d804:	43db      	mvns	r3, r3
 800d806:	b29a      	uxth	r2, r3
 800d808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d80a:	815a      	strh	r2, [r3, #10]

			/* calculate the TCP checksum for an outgoing packet. */
			usGenerateProtocolChecksum( (uint8_t*)pxTCPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	69db      	ldr	r3, [r3, #28]
 800d810:	2201      	movs	r2, #1
 800d812:	4619      	mov	r1, r3
 800d814:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d816:	f7fe f98f 	bl	800bb38 <usGenerateProtocolChecksum>

			/* A calculated checksum of 0 must be inverted as 0 means the checksum
			is disabled. */
			if( pxTCPPacket->xTCPHeader.usChecksum == 0x00u )
 800d81a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d81c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d81e:	b29b      	uxth	r3, r3
 800d820:	2b00      	cmp	r3, #0
 800d822:	d108      	bne.n	800d836 <prvTCPReturnPacket+0x342>
			{
				pxTCPPacket->xTCPHeader.usChecksum = 0xffffU;
 800d824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d826:	f04f 32ff 	mov.w	r2, #4294967295
 800d82a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800d82e:	f04f 32ff 	mov.w	r2, #4294967295
 800d832:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	#if( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
		pxNetworkBuffer->pxNextBuffer = NULL;
	#endif

		/* Important: tell NIC driver how many bytes must be sent. */
		pxNetworkBuffer->xDataLength = ulLen + ipSIZE_OF_ETH_HEADER;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f103 020e 	add.w	r2, r3, #14
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	61da      	str	r2, [r3, #28]

		/* Fill in the destination MAC addresses. */
		memcpy( ( void * ) &( pxEthernetHeader->xDestinationAddress ), ( void * ) &( pxEthernetHeader->xSourceAddress ),
 800d840:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d844:	3306      	adds	r3, #6
 800d846:	2206      	movs	r2, #6
 800d848:	4619      	mov	r1, r3
 800d84a:	f003 fbd8 	bl	8010ffe <memcpy>
			sizeof( pxEthernetHeader->xDestinationAddress ) );

		/* The source MAC addresses is fixed to 'ipLOCAL_MAC_ADDRESS'. */
		memcpy( ( void * ) &( pxEthernetHeader->xSourceAddress) , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800d84e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d850:	3306      	adds	r3, #6
 800d852:	2206      	movs	r2, #6
 800d854:	4915      	ldr	r1, [pc, #84]	; (800d8ac <prvTCPReturnPacket+0x3b8>)
 800d856:	4618      	mov	r0, r3
 800d858:	f003 fbd1 	bl	8010ffe <memcpy>
			}
		}
		#endif

		/* Send! */
		xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 800d85c:	6839      	ldr	r1, [r7, #0]
 800d85e:	68b8      	ldr	r0, [r7, #8]
 800d860:	f7f7 fce2 	bl	8005228 <xNetworkInterfaceOutput>

		if( xReleaseAfterSend == pdFALSE )
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d11c      	bne.n	800d8a4 <prvTCPReturnPacket+0x3b0>
		{
			/* Swap-back some fields, as pxBuffer probably points to a socket field
			containing the packet header. */
			vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort);
 800d86a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d86c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800d870:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800d874:	021b      	lsls	r3, r3, #8
 800d876:	4313      	orrs	r3, r2
 800d878:	86bb      	strh	r3, [r7, #52]	; 0x34
 800d87a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d87c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d87e:	b29a      	uxth	r2, r3
 800d880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d882:	845a      	strh	r2, [r3, #34]	; 0x22
 800d884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d886:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800d888:	849a      	strh	r2, [r3, #36]	; 0x24
			pxTCPPacket->xIPHeader.ulSourceIPAddress = pxTCPPacket->xIPHeader.ulDestinationIPAddress;
 800d88a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d88c:	f8d3 201e 	ldr.w	r2, [r3, #30]
 800d890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d892:	f8c3 201a 	str.w	r2, [r3, #26]
			memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800d896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d898:	3306      	adds	r3, #6
 800d89a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d89c:	2206      	movs	r2, #6
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f003 fbad 	bl	8010ffe <memcpy>
		else
		{
			/* Nothing to do: the buffer has been passed to DMA and will be released after use */
		}
	} /* if( pxNetworkBuffer != NULL ) */
}
 800d8a4:	bf00      	nop
 800d8a6:	3760      	adds	r7, #96	; 0x60
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}
 800d8ac:	200001b0 	.word	0x200001b0
 800d8b0:	20004e5c 	.word	0x20004e5c

0800d8b4 <prvTCPCreateWindow>:
 * random starting value, are being synchronised.  The sliding window manager
 * (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 * Size (MSS) in use.
 */
static void prvTCPCreateWindow( FreeRTOS_Socket_t *pxSocket )
{
 800d8b4:	b5b0      	push	{r4, r5, r7, lr}
 800d8b6:	b084      	sub	sp, #16
 800d8b8:	af02      	add	r7, sp, #8
 800d8ba:	6078      	str	r0, [r7, #4]
		FreeRTOS_debug_printf( ( "Limits (using): TCP Win size %lu Water %lu <= %lu <= %lu\n",
			pxSocket->u.xTCP.uxRxWinSize * ipconfigTCP_MSS,
			pxSocket->u.xTCP.uxLittleSpace ,
			pxSocket->u.xTCP.uxEnoughSpace,
			pxSocket->u.xTCP.uxRxStreamSize ) );
	vTCPWindowCreate(
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
		&pxSocket->u.xTCP.xTCPWindow,
		ipconfigTCP_MSS * pxSocket->u.xTCP.uxRxWinSize,
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800d8c8:	f44f 6291 	mov.w	r2, #1160	; 0x488
 800d8cc:	fb02 f103 	mul.w	r1, r2, r3
		ipconfigTCP_MSS * pxSocket->u.xTCP.uxTxWinSize,
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d8d6:	f44f 6291 	mov.w	r2, #1160	; 0x488
 800d8da:	fb02 f403 	mul.w	r4, r2, r3
	vTCPWindowCreate(
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f8d3 50ec 	ldr.w	r5, [r3, #236]	; 0xec
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
		pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
		( uint32_t ) pxSocket->u.xTCP.usInitMSS );
 800d8ea:	687a      	ldr	r2, [r7, #4]
 800d8ec:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
	vTCPWindowCreate(
 800d8f0:	9201      	str	r2, [sp, #4]
 800d8f2:	9300      	str	r3, [sp, #0]
 800d8f4:	462b      	mov	r3, r5
 800d8f6:	4622      	mov	r2, r4
 800d8f8:	f002 f8a4 	bl	800fa44 <vTCPWindowCreate>
}
 800d8fc:	bf00      	nop
 800d8fe:	3708      	adds	r7, #8
 800d900:	46bd      	mov	sp, r7
 800d902:	bdb0      	pop	{r4, r5, r7, pc}

0800d904 <prvTCPPrepareConnect>:
 * the Ethernet address of the target will be found using ARP.  In case the
 * target IP address is not within the netmask, the hardware address of the
 * gateway will be used.
 */
static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t *pxSocket )
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b08a      	sub	sp, #40	; 0x28
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
TCPPacket_t *pxTCPPacket;
IPHeader_t *pxIPHeader;
eARPLookupResult_t eReturned;
uint32_t ulRemoteIP;
MACAddress_t xEthAddress;
BaseType_t xReturn = pdTRUE;
 800d90c:	2301      	movs	r3, #1
 800d90e:	627b      	str	r3, [r7, #36]	; 0x24
uint32_t ulInitialSequenceNumber = 0;
 800d910:	2300      	movs	r3, #0
 800d912:	623b      	str	r3, [r7, #32]
		/* Only necessary for nicer logging. */
		memset( xEthAddress.ucBytes, '\0', sizeof( xEthAddress.ucBytes ) );
	}
	#endif /* ipconfigHAS_PRINTF != 0 */

	ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d918:	061a      	lsls	r2, r3, #24
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d91e:	021b      	lsls	r3, r3, #8
 800d920:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d924:	431a      	orrs	r2, r3
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d92a:	0a1b      	lsrs	r3, r3, #8
 800d92c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d930:	431a      	orrs	r2, r3
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d936:	0e1b      	lsrs	r3, r3, #24
 800d938:	4313      	orrs	r3, r2
 800d93a:	613b      	str	r3, [r7, #16]

	/* Determine the ARP cache status for the requested IP address. */
	eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ) );
 800d93c:	f107 0208 	add.w	r2, r7, #8
 800d940:	f107 0310 	add.w	r3, r7, #16
 800d944:	4611      	mov	r1, r2
 800d946:	4618      	mov	r0, r3
 800d948:	f7fc fc82 	bl	800a250 <eARPGetCacheEntry>
 800d94c:	4603      	mov	r3, r0
 800d94e:	77fb      	strb	r3, [r7, #31]

	switch( eReturned )
 800d950:	7ffb      	ldrb	r3, [r7, #31]
 800d952:	2b01      	cmp	r3, #1
 800d954:	d00e      	beq.n	800d974 <prvTCPPrepareConnect+0x70>
		break;				/* We can now prepare the SYN packet. */
	case eARPCacheMiss:		/* An ARP table lookup did not find a valid entry. */
	case eCantSendPacket:	/* There is no IP address, or an ARP is still in progress. */
	default:
		/* Count the number of times it couldn't find the ARP address. */
		pxSocket->u.xTCP.ucRepCount++;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d95c:	3301      	adds	r3, #1
 800d95e:	b2da      	uxtb	r2, r3
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			xEthAddress.ucBytes[ 3 ],
			xEthAddress.ucBytes[ 4 ],
			xEthAddress.ucBytes[ 5 ] ) );

		/* And issue a (new) ARP request */
		FreeRTOS_OutputARPRequest( ulRemoteIP );
 800d966:	693b      	ldr	r3, [r7, #16]
 800d968:	4618      	mov	r0, r3
 800d96a:	f7fc fdad 	bl	800a4c8 <FreeRTOS_OutputARPRequest>

		xReturn = pdFALSE;
 800d96e:	2300      	movs	r3, #0
 800d970:	627b      	str	r3, [r7, #36]	; 0x24
 800d972:	e000      	b.n	800d976 <prvTCPPrepareConnect+0x72>
		break;				/* We can now prepare the SYN packet. */
 800d974:	bf00      	nop
	}

    if( xReturn != pdFALSE )
 800d976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d008      	beq.n	800d98e <prvTCPPrepareConnect+0x8a>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ipconfigRAND32();
 800d97c:	f003 fc18 	bl	80111b0 <rand>
 800d980:	4603      	mov	r3, r0
 800d982:	623b      	str	r3, [r7, #32]

        /* Check for a random number generation error. */
        if( 0 == ulInitialSequenceNumber )
 800d984:	6a3b      	ldr	r3, [r7, #32]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d101      	bne.n	800d98e <prvTCPPrepareConnect+0x8a>
        {
            xReturn = pdFALSE;
 800d98a:	2300      	movs	r3, #0
 800d98c:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

	if( xReturn != pdFALSE )
 800d98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d990:	2b00      	cmp	r3, #0
 800d992:	f000 808a 	beq.w	800daaa <prvTCPPrepareConnect+0x1a6>
	{
		/* The MAC-address of the peer (or gateway) has been found,
		now prepare the initial TCP packet and some fields in the socket. */
		pxTCPPacket = ( TCPPacket_t * )pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	3382      	adds	r3, #130	; 0x82
 800d99a:	61bb      	str	r3, [r7, #24]
		pxIPHeader = &pxTCPPacket->xIPHeader;
 800d99c:	69bb      	ldr	r3, [r7, #24]
 800d99e:	330e      	adds	r3, #14
 800d9a0:	617b      	str	r3, [r7, #20]

		/* reset the retry counter to zero. */
		pxSocket->u.xTCP.ucRepCount = 0u;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

		/* And remember that the connect/SYN data are prepared. */
		pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 800d9aa:	687a      	ldr	r2, [r7, #4]
 800d9ac:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d9b0:	f043 0308 	orr.w	r3, r3, #8
 800d9b4:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

		/* Now that the Ethernet address is known, the initial packet can be
		prepared. */
		memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, '\0', sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	3382      	adds	r3, #130	; 0x82
 800d9bc:	2246      	movs	r2, #70	; 0x46
 800d9be:	2100      	movs	r1, #0
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f003 fb41 	bl	8011048 <memset>

		/* Write the Ethernet address in Source, because it will be swapped by
		prvTCPReturnPacket(). */
		memcpy( &pxTCPPacket->xEthernetHeader.xSourceAddress, &xEthAddress, sizeof( xEthAddress ) );
 800d9c6:	69bb      	ldr	r3, [r7, #24]
 800d9c8:	3306      	adds	r3, #6
 800d9ca:	461a      	mov	r2, r3
 800d9cc:	f107 0308 	add.w	r3, r7, #8
 800d9d0:	6818      	ldr	r0, [r3, #0]
 800d9d2:	6010      	str	r0, [r2, #0]
 800d9d4:	889b      	ldrh	r3, [r3, #4]
 800d9d6:	8093      	strh	r3, [r2, #4]

		/* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
		pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 800d9d8:	69bb      	ldr	r3, [r7, #24]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	f042 0208 	orr.w	r2, r2, #8
 800d9e0:	731a      	strb	r2, [r3, #12]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	735a      	strb	r2, [r3, #13]

		pxIPHeader->ucVersionHeaderLength = 0x45u;
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	2245      	movs	r2, #69	; 0x45
 800d9ea:	701a      	strb	r2, [r3, #0]
		pxIPHeader->usLength = FreeRTOS_htons( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	709a      	strb	r2, [r3, #2]
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800d9f8:	70da      	strb	r2, [r3, #3]
		pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	2280      	movs	r2, #128	; 0x80
 800d9fe:	721a      	strb	r2, [r3, #8]

		pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	2206      	movs	r2, #6
 800da04:	725a      	strb	r2, [r3, #9]

		/* Addresses and ports will be stored swapped because prvTCPReturnPacket
		will swap them back while replying. */
		pxIPHeader->ulDestinationIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800da06:	4b2b      	ldr	r3, [pc, #172]	; (800dab4 <prvTCPPrepareConnect+0x1b0>)
 800da08:	695a      	ldr	r2, [r3, #20]
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	611a      	str	r2, [r3, #16]
		pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da12:	061a      	lsls	r2, r3, #24
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da18:	021b      	lsls	r3, r3, #8
 800da1a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800da1e:	431a      	orrs	r2, r3
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da24:	0a1b      	lsrs	r3, r3, #8
 800da26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800da2a:	431a      	orrs	r2, r3
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da30:	0e1b      	lsrs	r3, r3, #24
 800da32:	431a      	orrs	r2, r3
 800da34:	697b      	ldr	r3, [r7, #20]
 800da36:	60da      	str	r2, [r3, #12]

		pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800da3c:	021b      	lsls	r3, r3, #8
 800da3e:	b21a      	sxth	r2, r3
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800da44:	0a1b      	lsrs	r3, r3, #8
 800da46:	b29b      	uxth	r3, r3
 800da48:	b21b      	sxth	r3, r3
 800da4a:	4313      	orrs	r3, r2
 800da4c:	b21b      	sxth	r3, r3
 800da4e:	b29a      	uxth	r2, r3
 800da50:	69bb      	ldr	r3, [r7, #24]
 800da52:	845a      	strh	r2, [r3, #34]	; 0x22
		pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800da58:	021b      	lsls	r3, r3, #8
 800da5a:	b21a      	sxth	r2, r3
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800da60:	0a1b      	lsrs	r3, r3, #8
 800da62:	b29b      	uxth	r3, r3
 800da64:	b21b      	sxth	r3, r3
 800da66:	4313      	orrs	r3, r2
 800da68:	b21b      	sxth	r3, r3
 800da6a:	b29a      	uxth	r2, r3
 800da6c:	69bb      	ldr	r3, [r7, #24]
 800da6e:	849a      	strh	r2, [r3, #36]	; 0x24

		/* We are actively connecting, so the peer's Initial Sequence Number (ISN)
		isn't known yet. */
		pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0ul;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2200      	movs	r2, #0
 800da74:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

		/* Start with ISN (Initial Sequence Number). */
		pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6a3a      	ldr	r2, [r7, #32]
 800da7c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

		/* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
		the high nibble of the TCP offset field. */
		pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50u;
 800da80:	69bb      	ldr	r3, [r7, #24]
 800da82:	2250      	movs	r2, #80	; 0x50
 800da84:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

		/* Only set the SYN flag. */
		pxTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_SYN;
 800da88:	69bb      	ldr	r3, [r7, #24]
 800da8a:	2202      	movs	r2, #2
 800da8c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

		/* Set the values of usInitMSS / usCurMSS for this socket. */
		prvSocketSetMSS( pxSocket );
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f001 fac1 	bl	800f018 <prvSocketSetMSS>

		/* For now this is also the advertised window size. */
		pxSocket->u.xTCP.ulRxCurWinSize = pxSocket->u.xTCP.usInitMSS;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800da9c:	461a      	mov	r2, r3
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

		/* The initial sequence numbers at our side are known.  Later
		vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
		first wait for a SYN+ACK reply. */
		prvTCPCreateWindow( pxSocket );
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f7ff ff05 	bl	800d8b4 <prvTCPCreateWindow>
	}

	return xReturn;
 800daaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800daac:	4618      	mov	r0, r3
 800daae:	3728      	adds	r7, #40	; 0x28
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}
 800dab4:	200001b0 	.word	0x200001b0

0800dab8 <prvCheckOptions>:
 * Parse the TCP option(s) received, if present.  It has already been verified
 * that: ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that the TP header
 * is longer than the usual 20 (5 x 4) bytes.
 */
static void prvCheckOptions( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b090      	sub	sp, #64	; 0x40
 800dabc:	af02      	add	r7, sp, #8
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	6039      	str	r1, [r7, #0]
const unsigned char *pucPtr;
const unsigned char *pucLast;
TCPWindow_t *pxTCPWindow;
UBaseType_t uxNewMSS;

	pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	699b      	ldr	r3, [r3, #24]
 800dac6:	62fb      	str	r3, [r7, #44]	; 0x2c
	pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800dac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daca:	3322      	adds	r3, #34	; 0x22
 800dacc:	62bb      	str	r3, [r7, #40]	; 0x28

	/* A character pointer to iterate through the option data */
	pucPtr = pxTCPHeader->ucOptdata;
 800dace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dad0:	3314      	adds	r3, #20
 800dad2:	637b      	str	r3, [r7, #52]	; 0x34
	pucLast = pucPtr + (((pxTCPHeader->ucTCPOffset >> 4) - 5) << 2);
 800dad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dad6:	7b1b      	ldrb	r3, [r3, #12]
 800dad8:	091b      	lsrs	r3, r3, #4
 800dada:	b2db      	uxtb	r3, r3
 800dadc:	3b05      	subs	r3, #5
 800dade:	009b      	lsls	r3, r3, #2
 800dae0:	461a      	mov	r2, r3
 800dae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dae4:	4413      	add	r3, r2
 800dae6:	627b      	str	r3, [r7, #36]	; 0x24
	pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	33dc      	adds	r3, #220	; 0xdc
 800daec:	623b      	str	r3, [r7, #32]

    /* Validate options size calculation. */
    if( pucLast > ( pxNetworkBuffer->pucEthernetBuffer + pxNetworkBuffer->xDataLength ) )
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	699a      	ldr	r2, [r3, #24]
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	69db      	ldr	r3, [r3, #28]
 800daf6:	441a      	add	r2, r3
 800daf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dafa:	429a      	cmp	r2, r3
 800dafc:	f0c0 80f8 	bcc.w	800dcf0 <prvCheckOptions+0x238>
        return;
    }

	/* The comparison with pucLast is only necessary in case the option data are
	corrupted, we don't like to run into invalid memory and crash. */
	while( pucPtr < pucLast )
 800db00:	e0f0      	b.n	800dce4 <prvCheckOptions+0x22c>
	{
        UBaseType_t xRemainingOptionsBytes = pucLast - pucPtr;
 800db02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db06:	1ad3      	subs	r3, r2, r3
 800db08:	61fb      	str	r3, [r7, #28]

		if( pucPtr[ 0 ] == TCP_OPT_END )
 800db0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db0c:	781b      	ldrb	r3, [r3, #0]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	f000 80f0 	beq.w	800dcf4 <prvCheckOptions+0x23c>
		{
			/* End of options. */
			break;
		}
		if( pucPtr[ 0 ] == TCP_OPT_NOOP)
 800db14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db16:	781b      	ldrb	r3, [r3, #0]
 800db18:	2b01      	cmp	r3, #1
 800db1a:	d103      	bne.n	800db24 <prvCheckOptions+0x6c>
		{
            /* NOP option, inserted to make the length a multiple of 4. */
            pucPtr++;
 800db1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db1e:	3301      	adds	r3, #1
 800db20:	637b      	str	r3, [r7, #52]	; 0x34
            continue;
 800db22:	e0df      	b.n	800dce4 <prvCheckOptions+0x22c>
		}

        /* Any other well-formed option must be at least two bytes: the option
        type byte followed by a length byte. */
        if( xRemainingOptionsBytes < 2 )
 800db24:	69fb      	ldr	r3, [r7, #28]
 800db26:	2b01      	cmp	r3, #1
 800db28:	f240 80e6 	bls.w	800dcf8 <prvCheckOptions+0x240>
        { 
            break;
        }
#if( ipconfigUSE_TCP_WIN != 0 )
		else if( pucPtr[ 0 ] == TCP_OPT_WSOPT )
 800db2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db2e:	781b      	ldrb	r3, [r3, #0]
 800db30:	2b03      	cmp	r3, #3
 800db32:	d119      	bne.n	800db68 <prvCheckOptions+0xb0>
		{
            /* Confirm that the option fits in the remaining buffer space. */
            if( xRemainingOptionsBytes < TCP_OPT_WSOPT_LEN ||
 800db34:	69fb      	ldr	r3, [r7, #28]
 800db36:	2b02      	cmp	r3, #2
 800db38:	f240 80e1 	bls.w	800dcfe <prvCheckOptions+0x246>
                pucPtr[ 1 ] != TCP_OPT_WSOPT_LEN )
 800db3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db3e:	3301      	adds	r3, #1
 800db40:	781b      	ldrb	r3, [r3, #0]
            if( xRemainingOptionsBytes < TCP_OPT_WSOPT_LEN ||
 800db42:	2b03      	cmp	r3, #3
 800db44:	f040 80db 	bne.w	800dcfe <prvCheckOptions+0x246>
            {
                break;
            }

			pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 800db48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db4a:	789a      	ldrb	r2, [r3, #2]
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
			pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 800db52:	687a      	ldr	r2, [r7, #4]
 800db54:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800db58:	f043 0310 	orr.w	r3, r3, #16
 800db5c:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
			pucPtr += TCP_OPT_WSOPT_LEN;
 800db60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db62:	3303      	adds	r3, #3
 800db64:	637b      	str	r3, [r7, #52]	; 0x34
 800db66:	e0bd      	b.n	800dce4 <prvCheckOptions+0x22c>
		}
#endif	/* ipconfigUSE_TCP_WIN */
		else if( pucPtr[ 0 ] == TCP_OPT_MSS )
 800db68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db6a:	781b      	ldrb	r3, [r3, #0]
 800db6c:	2b02      	cmp	r3, #2
 800db6e:	d15a      	bne.n	800dc26 <prvCheckOptions+0x16e>
		{
            /* Confirm that the option fits in the remaining buffer space. */
            if( xRemainingOptionsBytes < TCP_OPT_MSS_LEN ||
 800db70:	69fb      	ldr	r3, [r7, #28]
 800db72:	2b03      	cmp	r3, #3
 800db74:	f240 80c3 	bls.w	800dcfe <prvCheckOptions+0x246>
                pucPtr[ 1 ] != TCP_OPT_MSS_LEN )
 800db78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db7a:	3301      	adds	r3, #1
 800db7c:	781b      	ldrb	r3, [r3, #0]
            if( xRemainingOptionsBytes < TCP_OPT_MSS_LEN ||
 800db7e:	2b04      	cmp	r3, #4
 800db80:	f040 80bd 	bne.w	800dcfe <prvCheckOptions+0x246>
            }
            
            /* An MSS option with the correct option length.  FreeRTOS_htons()
			is not needed here because usChar2u16() already returns a host
			endian number. */
			uxNewMSS = usChar2u16( pucPtr + 2 );
 800db84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db86:	3302      	adds	r3, #2
 800db88:	4618      	mov	r0, r3
 800db8a:	f7ff fb31 	bl	800d1f0 <usChar2u16>
 800db8e:	4603      	mov	r3, r0
 800db90:	61bb      	str	r3, [r7, #24]

			if( pxSocket->u.xTCP.usInitMSS != uxNewMSS )
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800db98:	461a      	mov	r2, r3
 800db9a:	69bb      	ldr	r3, [r7, #24]
 800db9c:	429a      	cmp	r2, r3
 800db9e:	d003      	beq.n	800dba8 <prvCheckOptions+0xf0>
			{
                /* Perform a basic check on the the new MSS. */
                if( uxNewMSS == 0 )
 800dba0:	69bb      	ldr	r3, [r7, #24]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	f000 80aa 	beq.w	800dcfc <prvCheckOptions+0x244>
                }

				FreeRTOS_debug_printf( ( "MSS change %u -> %lu\n", pxSocket->u.xTCP.usInitMSS, uxNewMSS ) );
			}

			if( pxSocket->u.xTCP.usInitMSS > uxNewMSS )
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800dbae:	461a      	mov	r2, r3
 800dbb0:	69bb      	ldr	r3, [r7, #24]
 800dbb2:	429a      	cmp	r2, r3
 800dbb4:	d933      	bls.n	800dc1e <prvCheckOptions+0x166>
			{
				/* our MSS was bigger than the MSS of the other party: adapt it. */
				pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 800dbb6:	687a      	ldr	r2, [r7, #4]
 800dbb8:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800dbbc:	f043 0301 	orr.w	r3, r3, #1
 800dbc0:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
				if( ( pxTCPWindow != NULL ) && ( pxSocket->u.xTCP.usCurMSS > uxNewMSS ) )
 800dbc4:	6a3b      	ldr	r3, [r7, #32]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d00b      	beq.n	800dbe2 <prvCheckOptions+0x12a>
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800dbd0:	461a      	mov	r2, r3
 800dbd2:	69bb      	ldr	r3, [r7, #24]
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d904      	bls.n	800dbe2 <prvCheckOptions+0x12a>
				{
					/* The peer advertises a smaller MSS than this socket was
					using.  Use that as well. */
					FreeRTOS_debug_printf( ( "Change mss %d => %lu\n", pxSocket->u.xTCP.usCurMSS, uxNewMSS ) );
					pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 800dbd8:	69bb      	ldr	r3, [r7, #24]
 800dbda:	b29a      	uxth	r2, r3
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				}
				pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 800dbe2:	6a3b      	ldr	r3, [r7, #32]
 800dbe4:	685a      	ldr	r2, [r3, #4]
 800dbe6:	69bb      	ldr	r3, [r7, #24]
 800dbe8:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbec:	69ba      	ldr	r2, [r7, #24]
 800dbee:	fb02 f203 	mul.w	r2, r2, r3
 800dbf2:	6a3b      	ldr	r3, [r7, #32]
 800dbf4:	605a      	str	r2, [r3, #4]
				pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 800dbf6:	69bb      	ldr	r3, [r7, #24]
 800dbf8:	b29a      	uxth	r2, r3
 800dbfa:	6a3b      	ldr	r3, [r7, #32]
 800dbfc:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
				pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 800dc00:	69bb      	ldr	r3, [r7, #24]
 800dc02:	b29a      	uxth	r2, r3
 800dc04:	6a3b      	ldr	r3, [r7, #32]
 800dc06:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
				pxSocket->u.xTCP.usInitMSS = ( uint16_t ) uxNewMSS;
 800dc0a:	69bb      	ldr	r3, [r7, #24]
 800dc0c:	b29a      	uxth	r2, r3
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 800dc14:	69bb      	ldr	r3, [r7, #24]
 800dc16:	b29a      	uxth	r2, r3
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			#if( ipconfigUSE_TCP_WIN != 1 )
				/* Without scaled windows, MSS is the only interesting option. */
				break;
			#else
				/* Or else we continue to check another option: selective ACK. */
				pucPtr += TCP_OPT_MSS_LEN;
 800dc1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc20:	3304      	adds	r3, #4
 800dc22:	637b      	str	r3, [r7, #52]	; 0x34
 800dc24:	e05e      	b.n	800dce4 <prvCheckOptions+0x22c>
		}
		else
		{
			/* All other options have a length field, so that we easily
			can skip past them. */
			unsigned char len = pucPtr[ 1 ];
 800dc26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc28:	785b      	ldrb	r3, [r3, #1]
 800dc2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			if( len < 2 || len > xRemainingOptionsBytes )
 800dc2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dc32:	2b01      	cmp	r3, #1
 800dc34:	d963      	bls.n	800dcfe <prvCheckOptions+0x246>
 800dc36:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800dc3a:	69fb      	ldr	r3, [r7, #28]
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	d85e      	bhi.n	800dcfe <prvCheckOptions+0x246>
			#if( ipconfigUSE_TCP_WIN == 1 )
			{
				/* Selective ACK: the peer has received a packet but it is missing earlier
				packets.  At least this packet does not need retransmission anymore
				ulTCPWindowTxSack( ) takes care of this administration. */
				if( pucPtr[0] == TCP_OPT_SACK_A )
 800dc40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc42:	781b      	ldrb	r3, [r3, #0]
 800dc44:	2b05      	cmp	r3, #5
 800dc46:	d148      	bne.n	800dcda <prvCheckOptions+0x222>
				{
					len -= 2;
 800dc48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dc4c:	3b02      	subs	r3, #2
 800dc4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					pucPtr += 2;
 800dc52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc54:	3302      	adds	r3, #2
 800dc56:	637b      	str	r3, [r7, #52]	; 0x34

					while( len >= 8 )
 800dc58:	e03b      	b.n	800dcd2 <prvCheckOptions+0x21a>
					{
					uint32_t ulFirst = ulChar2u32( pucPtr );
 800dc5a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dc5c:	f7ff faad 	bl	800d1ba <ulChar2u32>
 800dc60:	6178      	str	r0, [r7, #20]
					uint32_t ulLast  = ulChar2u32( pucPtr + 4 );
 800dc62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc64:	3304      	adds	r3, #4
 800dc66:	4618      	mov	r0, r3
 800dc68:	f7ff faa7 	bl	800d1ba <ulChar2u32>
 800dc6c:	6138      	str	r0, [r7, #16]
					uint32_t ulCount = ulTCPWindowTxSack( &pxSocket->u.xTCP.xTCPWindow, ulFirst, ulLast );
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	33dc      	adds	r3, #220	; 0xdc
 800dc72:	693a      	ldr	r2, [r7, #16]
 800dc74:	6979      	ldr	r1, [r7, #20]
 800dc76:	4618      	mov	r0, r3
 800dc78:	f002 fc30 	bl	80104dc <ulTCPWindowTxSack>
 800dc7c:	60f8      	str	r0, [r7, #12]
						/* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
						starting from the head position.
						Advance the tail pointer in txStream. */
						if( ( pxSocket->u.xTCP.txStream  != NULL ) && ( ulCount > 0 ) )
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d01d      	beq.n	800dcc2 <prvCheckOptions+0x20a>
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d01a      	beq.n	800dcc2 <prvCheckOptions+0x20a>
						{
							/* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
							uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800dc90:	2300      	movs	r3, #0
 800dc92:	9300      	str	r3, [sp, #0]
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	2200      	movs	r2, #0
 800dc98:	2100      	movs	r1, #0
 800dc9a:	f7ff f94b 	bl	800cf34 <uxStreamBufferGet>
							pxSocket->xEventBits |= eSOCKET_SEND;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	f043 0202 	orr.w	r2, r3, #2
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	601a      	str	r2, [r3, #0]

							#if ipconfigSUPPORT_SELECT_FUNCTION == 1
							{
								if( pxSocket->xSelectBits & eSELECT_WRITE )
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcae:	f003 0302 	and.w	r3, r3, #2
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d005      	beq.n	800dcc2 <prvCheckOptions+0x20a>
								{
									/* The field 'xEventBits' is used to store regular socket events (at most 8),
									as well as 'select events', which will be left-shifted */
									pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	601a      	str	r2, [r3, #0]
									pxSocket->u.xTCP.pxHandleSent( (Socket_t *)pxSocket, ulCount );
								}
							}
							#endif /* ipconfigUSE_CALLBACKS == 1  */
						}
						pucPtr += 8;
 800dcc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcc4:	3308      	adds	r3, #8
 800dcc6:	637b      	str	r3, [r7, #52]	; 0x34
						len -= 8;
 800dcc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dccc:	3b08      	subs	r3, #8
 800dcce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					while( len >= 8 )
 800dcd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dcd6:	2b07      	cmp	r3, #7
 800dcd8:	d8bf      	bhi.n	800dc5a <prvCheckOptions+0x1a2>
					/* len should be 0 by now. */
				}
			}
			#endif	/* ipconfigUSE_TCP_WIN == 1 */

			pucPtr += len;
 800dcda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dcde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dce0:	4413      	add	r3, r2
 800dce2:	637b      	str	r3, [r7, #52]	; 0x34
	while( pucPtr < pucLast )
 800dce4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce8:	429a      	cmp	r2, r3
 800dcea:	f4ff af0a 	bcc.w	800db02 <prvCheckOptions+0x4a>
 800dcee:	e006      	b.n	800dcfe <prvCheckOptions+0x246>
        return;
 800dcf0:	bf00      	nop
 800dcf2:	e004      	b.n	800dcfe <prvCheckOptions+0x246>
			break;
 800dcf4:	bf00      	nop
 800dcf6:	e002      	b.n	800dcfe <prvCheckOptions+0x246>
            break;
 800dcf8:	bf00      	nop
 800dcfa:	e000      	b.n	800dcfe <prvCheckOptions+0x246>
                    break;
 800dcfc:	bf00      	nop
		}
	}
}
 800dcfe:	3738      	adds	r7, #56	; 0x38
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}

0800dd04 <prvWinScaleFactor>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN != 0 )

	static uint8_t prvWinScaleFactor( FreeRTOS_Socket_t *pxSocket )
	{
 800dd04:	b480      	push	{r7}
 800dd06:	b085      	sub	sp, #20
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
	size_t uxWinSize;
	uint8_t ucFactor;

		/* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
		uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usInitMSS;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800dd12:	687a      	ldr	r2, [r7, #4]
 800dd14:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 800dd18:	fb02 f303 	mul.w	r3, r2, r3
 800dd1c:	60fb      	str	r3, [r7, #12]
		ucFactor = 0u;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	72fb      	strb	r3, [r7, #11]
		while( uxWinSize > 0xfffful )
 800dd22:	e005      	b.n	800dd30 <prvWinScaleFactor+0x2c>
		{
			/* Divide by two and increase the binary factor by 1. */
			uxWinSize >>= 1;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	085b      	lsrs	r3, r3, #1
 800dd28:	60fb      	str	r3, [r7, #12]
			ucFactor++;
 800dd2a:	7afb      	ldrb	r3, [r7, #11]
 800dd2c:	3301      	adds	r3, #1
 800dd2e:	72fb      	strb	r3, [r7, #11]
		while( uxWinSize > 0xfffful )
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd36:	d2f5      	bcs.n	800dd24 <prvWinScaleFactor+0x20>
		FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %lu MSS %lu Factor %u\n",
			pxSocket->u.xTCP.uxRxWinSize,
			pxSocket->u.xTCP.usInitMSS,
			ucFactor ) );

		return ucFactor;
 800dd38:	7afb      	ldrb	r3, [r7, #11]
	}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3714      	adds	r7, #20
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd44:	4770      	bx	lr

0800dd46 <prvSetSynAckOptions>:
 * When opening a TCP connection, while SYN's are being sent, the  parties may
 * communicate what MSS (Maximum Segment Size) they intend to use.   MSS is the
 * nett size of the payload, always smaller than MTU.
*/
static UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t *pxSocket, TCPPacket_t * pxTCPPacket )
{
 800dd46:	b580      	push	{r7, lr}
 800dd48:	b086      	sub	sp, #24
 800dd4a:	af00      	add	r7, sp, #0
 800dd4c:	6078      	str	r0, [r7, #4]
 800dd4e:	6039      	str	r1, [r7, #0]
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	3322      	adds	r3, #34	; 0x22
 800dd54:	617b      	str	r3, [r7, #20]
uint16_t usMSS = pxSocket->u.xTCP.usInitMSS;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800dd5c:	827b      	strh	r3, [r7, #18]
UBaseType_t uxOptionsLength;

	/* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */

	pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) TCP_OPT_MSS;
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	2202      	movs	r2, #2
 800dd62:	751a      	strb	r2, [r3, #20]
	pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) TCP_OPT_MSS_LEN;
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	2204      	movs	r2, #4
 800dd68:	755a      	strb	r2, [r3, #21]
	pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 800dd6a:	8a7b      	ldrh	r3, [r7, #18]
 800dd6c:	0a1b      	lsrs	r3, r3, #8
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	b2da      	uxtb	r2, r3
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	759a      	strb	r2, [r3, #22]
	pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffu );
 800dd76:	8a7b      	ldrh	r3, [r7, #18]
 800dd78:	b2da      	uxtb	r2, r3
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	75da      	strb	r2, [r3, #23]

	#if( ipconfigUSE_TCP_WIN != 0 )
	{
		pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 800dd7e:	6878      	ldr	r0, [r7, #4]
 800dd80:	f7ff ffc0 	bl	800dd04 <prvWinScaleFactor>
 800dd84:	4603      	mov	r3, r0
 800dd86:	461a      	mov	r2, r3
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9

		pxTCPHeader->ucOptdata[ 4 ] = TCP_OPT_NOOP;
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	2201      	movs	r2, #1
 800dd92:	761a      	strb	r2, [r3, #24]
		pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( TCP_OPT_WSOPT );
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	2203      	movs	r2, #3
 800dd98:	765a      	strb	r2, [r3, #25]
		pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( TCP_OPT_WSOPT_LEN );
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	2203      	movs	r2, #3
 800dd9e:	769a      	strb	r2, [r3, #26]
		pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	76da      	strb	r2, [r3, #27]
		uxOptionsLength = 8u;
 800ddaa:	2308      	movs	r3, #8
 800ddac:	60fb      	str	r3, [r7, #12]
	{
		return uxOptionsLength;
	}
	#else
	{
		pxTCPHeader->ucOptdata[ uxOptionsLength + 0 ] = TCP_OPT_NOOP;
 800ddae:	697a      	ldr	r2, [r7, #20]
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	4413      	add	r3, r2
 800ddb4:	3314      	adds	r3, #20
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	701a      	strb	r2, [r3, #0]
		pxTCPHeader->ucOptdata[ uxOptionsLength + 1 ] = TCP_OPT_NOOP;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	697a      	ldr	r2, [r7, #20]
 800ddc0:	4413      	add	r3, r2
 800ddc2:	2201      	movs	r2, #1
 800ddc4:	751a      	strb	r2, [r3, #20]
		pxTCPHeader->ucOptdata[ uxOptionsLength + 2 ] = TCP_OPT_SACK_P;	/* 4: Sack-Permitted Option. */
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	3302      	adds	r3, #2
 800ddca:	697a      	ldr	r2, [r7, #20]
 800ddcc:	4413      	add	r3, r2
 800ddce:	2204      	movs	r2, #4
 800ddd0:	751a      	strb	r2, [r3, #20]
		pxTCPHeader->ucOptdata[ uxOptionsLength + 3 ] = 2;	/* 2: length of this option. */
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	3303      	adds	r3, #3
 800ddd6:	697a      	ldr	r2, [r7, #20]
 800ddd8:	4413      	add	r3, r2
 800ddda:	2202      	movs	r2, #2
 800dddc:	751a      	strb	r2, [r3, #20]
		uxOptionsLength += 4u;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	3304      	adds	r3, #4
 800dde2:	60fb      	str	r3, [r7, #12]

        return uxOptionsLength; /* bytes, not words. */
 800dde4:	68fb      	ldr	r3, [r7, #12]
	}
	#endif	/* ipconfigUSE_TCP_WIN == 0 */
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	3718      	adds	r7, #24
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}

0800ddee <prvTCPTouchSocket>:
 * For anti-hanging protection and TCP keep-alive messages.  Called in two
 * places: after receiving a packet and after a state change.  The socket's
 * alive timer may be reset.
 */
static void prvTCPTouchSocket( FreeRTOS_Socket_t *pxSocket )
{
 800ddee:	b580      	push	{r7, lr}
 800ddf0:	b082      	sub	sp, #8
 800ddf2:	af00      	add	r7, sp, #0
 800ddf4:	6078      	str	r0, [r7, #4]
	#if( ipconfigTCP_HANG_PROTECTION == 1 )
	{
		pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount( );
 800ddf6:	f7fb faad 	bl	8009354 <xTaskGetTickCount>
 800ddfa:	4602      	mov	r2, r0
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif

	#if( ipconfigTCP_KEEP_ALIVE == 1 )
	{
		pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 800de00:	687a      	ldr	r2, [r7, #4]
 800de02:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800de06:	f36f 0382 	bfc	r3, #2, #1
 800de0a:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
		pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800de0e:	687a      	ldr	r2, [r7, #4]
 800de10:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800de14:	f36f 0341 	bfc	r3, #1, #1
 800de18:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
		pxSocket->u.xTCP.ucKeepRepCount = 0u;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2200      	movs	r2, #0
 800de20:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 800de24:	f7fb fa96 	bl	8009354 <xTaskGetTickCount>
 800de28:	4602      	mov	r2, r0
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	65da      	str	r2, [r3, #92]	; 0x5c
	}
	#endif

	( void ) pxSocket;
}
 800de2e:	bf00      	nop
 800de30:	3708      	adds	r7, #8
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}

0800de36 <vTCPStateChange>:
 * resetting the alive timer, calling the user's OnConnect handler to notify
 * that a socket has got (dis)connected, and setting bit to unblock a call to
 * FreeRTOS_select()
 */
void vTCPStateChange( FreeRTOS_Socket_t *pxSocket, enum eTCP_STATE eTCPState )
{
 800de36:	b580      	push	{r7, lr}
 800de38:	b086      	sub	sp, #24
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	6078      	str	r0, [r7, #4]
 800de3e:	460b      	mov	r3, r1
 800de40:	70fb      	strb	r3, [r7, #3]
FreeRTOS_Socket_t *xParent = NULL;
 800de42:	2300      	movs	r3, #0
 800de44:	617b      	str	r3, [r7, #20]
BaseType_t bBefore = ( BaseType_t ) NOW_CONNECTED( pxSocket->u.xTCP.ucTCPState );	/* Was it connected ? */
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800de4c:	2b04      	cmp	r3, #4
 800de4e:	d906      	bls.n	800de5e <vTCPStateChange+0x28>
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800de56:	2b08      	cmp	r3, #8
 800de58:	d001      	beq.n	800de5e <vTCPStateChange+0x28>
 800de5a:	2301      	movs	r3, #1
 800de5c:	e000      	b.n	800de60 <vTCPStateChange+0x2a>
 800de5e:	2300      	movs	r3, #0
 800de60:	613b      	str	r3, [r7, #16]
BaseType_t bAfter  = ( BaseType_t ) NOW_CONNECTED( eTCPState );						/* Is it connected now ? */
 800de62:	78fb      	ldrb	r3, [r7, #3]
 800de64:	2b04      	cmp	r3, #4
 800de66:	d904      	bls.n	800de72 <vTCPStateChange+0x3c>
 800de68:	78fb      	ldrb	r3, [r7, #3]
 800de6a:	2b08      	cmp	r3, #8
 800de6c:	d001      	beq.n	800de72 <vTCPStateChange+0x3c>
 800de6e:	2301      	movs	r3, #1
 800de70:	e000      	b.n	800de74 <vTCPStateChange+0x3e>
 800de72:	2300      	movs	r3, #0
 800de74:	60fb      	str	r3, [r7, #12]
#if( ipconfigUSE_CALLBACKS == 1 )
	FreeRTOS_Socket_t *xConnected = NULL;
#endif

	/* Has the connected status changed? */
	if( bBefore != bAfter )
 800de76:	693a      	ldr	r2, [r7, #16]
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	429a      	cmp	r2, r3
 800de7c:	f000 8087 	beq.w	800df8e <vTCPStateChange+0x158>
	{
		/* Is the socket connected now ? */
		if( bAfter != pdFALSE )
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d063      	beq.n	800df4e <vTCPStateChange+0x118>
		{
			/* if bPassQueued is true, this socket is an orphan until it gets connected. */
			if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800de8c:	f003 0304 	and.w	r3, r3, #4
 800de90:	b2db      	uxtb	r3, r3
 800de92:	2b00      	cmp	r3, #0
 800de94:	d048      	beq.n	800df28 <vTCPStateChange+0xf2>
			{
				/* Now that it is connected, find it's parent. */
				if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800de9c:	f003 0308 	and.w	r3, r3, #8
 800dea0:	b2db      	uxtb	r3, r3
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d002      	beq.n	800deac <vTCPStateChange+0x76>
				{
					xParent = pxSocket;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	617b      	str	r3, [r7, #20]
 800deaa:	e00f      	b.n	800decc <vTCPStateChange+0x96>
				}
				else
				{
					xParent = pxSocket->u.xTCP.pxPeerSocket;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800deb0:	617b      	str	r3, [r7, #20]
					configASSERT( xParent != NULL );
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d109      	bne.n	800decc <vTCPStateChange+0x96>
 800deb8:	f04f 0340 	mov.w	r3, #64	; 0x40
 800debc:	f383 8811 	msr	BASEPRI, r3
 800dec0:	f3bf 8f6f 	isb	sy
 800dec4:	f3bf 8f4f 	dsb	sy
 800dec8:	60bb      	str	r3, [r7, #8]
 800deca:	e7fe      	b.n	800deca <vTCPStateChange+0x94>
				}
				if( xParent != NULL )
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d018      	beq.n	800df04 <vTCPStateChange+0xce>
				{
					if( xParent->u.xTCP.pxPeerSocket == NULL )
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d102      	bne.n	800dee0 <vTCPStateChange+0xaa>
					{
						xParent->u.xTCP.pxPeerSocket = pxSocket;
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	687a      	ldr	r2, [r7, #4]
 800dede:	655a      	str	r2, [r3, #84]	; 0x54
					}

					xParent->xEventBits |= eSOCKET_ACCEPT;
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	f043 0204 	orr.w	r2, r3, #4
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	601a      	str	r2, [r3, #0]

					#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
					{
						/* Library support FreeRTOS_select().  Receiving a new
						connection is being translated as a READ event. */
						if( ( xParent->xSelectBits & eSELECT_READ ) != 0 )
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800def0:	f003 0301 	and.w	r3, r3, #1
 800def4:	2b00      	cmp	r3, #0
 800def6:	d005      	beq.n	800df04 <vTCPStateChange+0xce>
						{
							xParent->xEventBits |= ( eSELECT_READ << SOCKET_EVENT_BIT_COUNT );
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800df00:	697b      	ldr	r3, [r7, #20]
 800df02:	601a      	str	r2, [r3, #0]
					#endif
				}

				/* Don't need to access the parent socket anymore, so the
				reference 'pxPeerSocket' may be cleared. */
				pxSocket->u.xTCP.pxPeerSocket = NULL;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2200      	movs	r2, #0
 800df08:	655a      	str	r2, [r3, #84]	; 0x54
				pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 800df0a:	687a      	ldr	r2, [r7, #4]
 800df0c:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800df10:	f36f 0382 	bfc	r3, #2, #1
 800df14:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40

				/* When true, this socket may be returned in a call to accept(). */
				pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 800df18:	687a      	ldr	r2, [r7, #4]
 800df1a:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800df1e:	f043 0302 	orr.w	r3, r3, #2
 800df22:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 800df26:	e024      	b.n	800df72 <vTCPStateChange+0x13c>
			}
			else
			{
				pxSocket->xEventBits |= eSOCKET_CONNECT;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	f043 0208 	orr.w	r2, r3, #8
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	601a      	str	r2, [r3, #0]

				#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
				{
					if( pxSocket->xSelectBits & eSELECT_WRITE )
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df38:	f003 0302 	and.w	r3, r3, #2
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d018      	beq.n	800df72 <vTCPStateChange+0x13c>
					{
						pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	601a      	str	r2, [r3, #0]
 800df4c:	e011      	b.n	800df72 <vTCPStateChange+0x13c>
			}
		}
		else  /* bAfter == pdFALSE, connection is closed. */
		{
			/* Notify/wake-up the socket-owner by setting a semaphore. */
			pxSocket->xEventBits |= eSOCKET_CLOSED;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f043 0220 	orr.w	r2, r3, #32
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	601a      	str	r2, [r3, #0]

			#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
			{
				if( ( pxSocket->xSelectBits & eSELECT_EXCEPT ) != 0 )
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df5e:	f003 0304 	and.w	r3, r3, #4
 800df62:	2b00      	cmp	r3, #0
 800df64:	d005      	beq.n	800df72 <vTCPStateChange+0x13c>
				{
					pxSocket->xEventBits |= ( eSELECT_EXCEPT << SOCKET_EVENT_BIT_COUNT );
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	601a      	str	r2, [r3, #0]
				xConnected = pxSocket;
			}
		}
		#endif /* ipconfigUSE_CALLBACKS */

		if( prvTCPSocketIsActive( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) == pdFALSE )
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800df78:	4618      	mov	r0, r3
 800df7a:	f7ff f94f 	bl	800d21c <prvTCPSocketIsActive>
 800df7e:	4603      	mov	r3, r0
 800df80:	2b00      	cmp	r3, #0
 800df82:	d122      	bne.n	800dfca <vTCPStateChange+0x194>
		{
			/* Now the socket isn't in an active state anymore so it
			won't need further attention of the IP-task.
			Setting time-out to zero means that the socket won't get checked during
			timer events. */
			pxSocket->u.xTCP.usTimeout = 0u;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2200      	movs	r2, #0
 800df88:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800df8c:	e01d      	b.n	800dfca <vTCPStateChange+0x194>
		}
	}
	else
	{
		if( eTCPState == eCLOSED )
 800df8e:	78fb      	ldrb	r3, [r7, #3]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d11a      	bne.n	800dfca <vTCPStateChange+0x194>
		{
			/* Socket goes to status eCLOSED because of a RST.
			When nobody owns the socket yet, delete it. */
			if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800df9a:	f003 0304 	and.w	r3, r3, #4
 800df9e:	b2db      	uxtb	r3, r3
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d107      	bne.n	800dfb4 <vTCPStateChange+0x17e>
				( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dfaa:	f003 0302 	and.w	r3, r3, #2
 800dfae:	b2db      	uxtb	r3, r3
			if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d00a      	beq.n	800dfca <vTCPStateChange+0x194>
			{
				FreeRTOS_debug_printf( ( "vTCPStateChange: Closing socket\n" ) );
				if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dfba:	f003 0308 	and.w	r3, r3, #8
 800dfbe:	b2db      	uxtb	r3, r3
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d102      	bne.n	800dfca <vTCPStateChange+0x194>
				{
					FreeRTOS_closesocket( pxSocket );
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	f7fe fa05 	bl	800c3d4 <FreeRTOS_closesocket>
			}
		}
	}

	/* Fill in the new state. */
	pxSocket->u.xTCP.ucTCPState = ( uint8_t ) eTCPState;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	78fa      	ldrb	r2, [r7, #3]
 800dfce:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* touch the alive timers because moving to another state. */
	prvTCPTouchSocket( pxSocket );
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f7ff ff0b 	bl	800ddee <prvTCPTouchSocket>
			/* The 'connected' state has changed, call the OnConnect handler of the parent. */
			xConnected->u.xTCP.pxHandleConnected( ( Socket_t * ) xConnected, bAfter );
		}
	}
	#endif
	if( xParent != NULL )
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d002      	beq.n	800dfe4 <vTCPStateChange+0x1ae>
	{
		vSocketWakeUpUser( xParent );
 800dfde:	6978      	ldr	r0, [r7, #20]
 800dfe0:	f7fe fb66 	bl	800c6b0 <vSocketWakeUpUser>
	}
}
 800dfe4:	bf00      	nop
 800dfe6:	3718      	adds	r7, #24
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}

0800dfec <prvTCPBufferResize>:
/*-----------------------------------------------------------*/

static NetworkBufferDescriptor_t *prvTCPBufferResize( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer,
	int32_t lDataLen, UBaseType_t uxOptionsLength )
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b088      	sub	sp, #32
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	60f8      	str	r0, [r7, #12]
 800dff4:	60b9      	str	r1, [r7, #8]
 800dff6:	607a      	str	r2, [r7, #4]
 800dff8:	603b      	str	r3, [r7, #0]
NetworkBufferDescriptor_t *pxReturn;
int32_t lNeeded;
BaseType_t xResize;

	if( xBufferAllocFixedSize != pdFALSE )
 800dffa:	4b2d      	ldr	r3, [pc, #180]	; (800e0b0 <prvTCPBufferResize+0xc4>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d00a      	beq.n	800e018 <prvTCPBufferResize+0x2c>
	{
		/* Network buffers are created with a fixed size and can hold the largest
		MTU. */
		lNeeded = ( int32_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 800e002:	f240 43c6 	movw	r3, #1222	; 0x4c6
 800e006:	61bb      	str	r3, [r7, #24]
		/* and therefore, the buffer won't be too small.
		Only ask for a new network buffer in case none was supplied. */
		xResize = ( pxNetworkBuffer == NULL );
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	bf0c      	ite	eq
 800e00e:	2301      	moveq	r3, #1
 800e010:	2300      	movne	r3, #0
 800e012:	b2db      	uxtb	r3, r3
 800e014:	617b      	str	r3, [r7, #20]
 800e016:	e014      	b.n	800e042 <prvTCPBufferResize+0x56>
	else
	{
		/* Network buffers are created with a variable size. See if it must
		grow. */
		lNeeded = FreeRTOS_max_int32( ( int32_t ) sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ),
			( int32_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + lDataLen );
 800e018:	687a      	ldr	r2, [r7, #4]
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	4413      	add	r3, r2
 800e01e:	3336      	adds	r3, #54	; 0x36
		lNeeded = FreeRTOS_max_int32( ( int32_t ) sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ),
 800e020:	4619      	mov	r1, r3
 800e022:	2046      	movs	r0, #70	; 0x46
 800e024:	f7fe fffa 	bl	800d01c <FreeRTOS_max_int32>
 800e028:	61b8      	str	r0, [r7, #24]
		/* In case we were called from a TCP timer event, a buffer must be
		created.  Otherwise, test 'xDataLength' of the provided buffer. */
		xResize = ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < (size_t)lNeeded );
 800e02a:	68bb      	ldr	r3, [r7, #8]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d004      	beq.n	800e03a <prvTCPBufferResize+0x4e>
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	69da      	ldr	r2, [r3, #28]
 800e034:	69bb      	ldr	r3, [r7, #24]
 800e036:	429a      	cmp	r2, r3
 800e038:	d201      	bcs.n	800e03e <prvTCPBufferResize+0x52>
 800e03a:	2301      	movs	r3, #1
 800e03c:	e000      	b.n	800e040 <prvTCPBufferResize+0x54>
 800e03e:	2300      	movs	r3, #0
 800e040:	617b      	str	r3, [r7, #20]
	}

	if( xResize != pdFALSE )
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d024      	beq.n	800e092 <prvTCPBufferResize+0xa6>
	{
		/* The caller didn't provide a network buffer or the provided buffer is
		too small.  As we must send-out a data packet, a buffer will be created
		here. */
		pxReturn = pxGetNetworkBufferWithDescriptor( ( uint32_t ) lNeeded, 0u );
 800e048:	69bb      	ldr	r3, [r7, #24]
 800e04a:	2100      	movs	r1, #0
 800e04c:	4618      	mov	r0, r3
 800e04e:	f002 fc49 	bl	80108e4 <pxGetNetworkBufferWithDescriptor>
 800e052:	61f8      	str	r0, [r7, #28]

		if( pxReturn != NULL )
 800e054:	69fb      	ldr	r3, [r7, #28]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d024      	beq.n	800e0a4 <prvTCPBufferResize+0xb8>
		{
            /* Set the actual packet size, in case the returned buffer is larger. */
            pxReturn->xDataLength = lNeeded;
 800e05a:	69ba      	ldr	r2, [r7, #24]
 800e05c:	69fb      	ldr	r3, [r7, #28]
 800e05e:	61da      	str	r2, [r3, #28]

			/* Copy the existing data to the new created buffer. */
			if( pxNetworkBuffer )
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d00c      	beq.n	800e080 <prvTCPBufferResize+0x94>
			{
				/* Either from the previous buffer... */
				memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 800e066:	69fb      	ldr	r3, [r7, #28]
 800e068:	6998      	ldr	r0, [r3, #24]
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	6999      	ldr	r1, [r3, #24]
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	69db      	ldr	r3, [r3, #28]
 800e072:	461a      	mov	r2, r3
 800e074:	f002 ffc3 	bl	8010ffe <memcpy>

				/* ...and release it. */
				vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800e078:	68b8      	ldr	r0, [r7, #8]
 800e07a:	f002 fcab 	bl	80109d4 <vReleaseNetworkBufferAndDescriptor>
 800e07e:	e011      	b.n	800e0a4 <prvTCPBufferResize+0xb8>
			}
			else
			{
				/* Or from the socket field 'xTCP.xPacket'. */
				memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800e080:	69fb      	ldr	r3, [r7, #28]
 800e082:	6998      	ldr	r0, [r3, #24]
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	3382      	adds	r3, #130	; 0x82
 800e088:	2246      	movs	r2, #70	; 0x46
 800e08a:	4619      	mov	r1, r3
 800e08c:	f002 ffb7 	bl	8010ffe <memcpy>
 800e090:	e008      	b.n	800e0a4 <prvTCPBufferResize+0xb8>
		}
	}
	else
	{
		/* xResize is false, the network buffer provided was big enough. */
		pxReturn = pxNetworkBuffer;
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	61fb      	str	r3, [r7, #28]

		/* Thanks to Andrey Ivanov from swissEmbedded for reporting that the
		xDataLength member must get the correct length too! */
		pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 800e096:	687a      	ldr	r2, [r7, #4]
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	4413      	add	r3, r2
 800e09c:	f103 0236 	add.w	r2, r3, #54	; 0x36
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	61da      	str	r2, [r3, #28]
	}

	return pxReturn;
 800e0a4:	69fb      	ldr	r3, [r7, #28]
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3720      	adds	r7, #32
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}
 800e0ae:	bf00      	nop
 800e0b0:	080114fc 	.word	0x080114fc

0800e0b4 <prvTCPPrepareSend>:

/*
 * Prepare an outgoing message, in case anything has to be sent.
 */
static int32_t prvTCPPrepareSend( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer, UBaseType_t uxOptionsLength )
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b092      	sub	sp, #72	; 0x48
 800e0b8:	af02      	add	r7, sp, #8
 800e0ba:	60f8      	str	r0, [r7, #12]
 800e0bc:	60b9      	str	r1, [r7, #8]
 800e0be:	607a      	str	r2, [r7, #4]
uint32_t ulDataGot, ulDistance;
TCPWindow_t *pxTCPWindow;
NetworkBufferDescriptor_t *pxNewBuffer;
int32_t lStreamPos;

	if( ( *ppxNetworkBuffer ) != NULL )
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d004      	beq.n	800e0d2 <prvTCPPrepareSend+0x1e>
	{
		/* A network buffer descriptor was already supplied */
		pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	699b      	ldr	r3, [r3, #24]
 800e0ce:	63bb      	str	r3, [r7, #56]	; 0x38
 800e0d0:	e002      	b.n	800e0d8 <prvTCPPrepareSend+0x24>
	}
	else
	{
		/* For now let it point to the last packet header */
		pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	3382      	adds	r3, #130	; 0x82
 800e0d6:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	pxTCPPacket = ( TCPPacket_t * ) ( pucEthernetBuffer );
 800e0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0da:	637b      	str	r3, [r7, #52]	; 0x34
	pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	33dc      	adds	r3, #220	; 0xdc
 800e0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	lDataLen = 0;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	lStreamPos = 0;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	613b      	str	r3, [r7, #16]
	pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_ACK;
 800e0ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0ec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e0f0:	f043 0310 	orr.w	r3, r3, #16
 800e0f4:	b2da      	uxtb	r2, r3
 800e0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0f8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	if( pxSocket->u.xTCP.txStream != NULL )
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e100:	2b00      	cmp	r3, #0
 800e102:	d078      	beq.n	800e1f6 <prvTCPPrepareSend+0x142>
	{
		/* ulTCPWindowTxGet will return the amount of data which may be sent
		along with the position in the txStream.
		Why check for MSS > 1 ?
		Because some TCP-stacks (like uIP) use it for flow-control. */
		if( pxSocket->u.xTCP.usCurMSS > 1u )
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e10a:	2b01      	cmp	r3, #1
 800e10c:	d90a      	bls.n	800e124 <prvTCPPrepareSend+0x70>
		{
			lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e114:	f107 0210 	add.w	r2, r7, #16
 800e118:	4619      	mov	r1, r3
 800e11a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e11c:	f001 ffd2 	bl	80100c4 <ulTCPWindowTxGet>
 800e120:	4603      	mov	r3, r0
 800e122:	63fb      	str	r3, [r7, #60]	; 0x3c
		}

		if( lDataLen > 0 )
 800e124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e126:	2b00      	cmp	r3, #0
 800e128:	dd65      	ble.n	800e1f6 <prvTCPPrepareSend+0x142>
		{
			/* Check if the current network buffer is big enough, if not,
			resize it. */
			pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	6819      	ldr	r1, [r3, #0]
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e132:	68f8      	ldr	r0, [r7, #12]
 800e134:	f7ff ff5a 	bl	800dfec <prvTCPBufferResize>
 800e138:	62b8      	str	r0, [r7, #40]	; 0x28

			if( pxNewBuffer != NULL )
 800e13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d057      	beq.n	800e1f0 <prvTCPPrepareSend+0x13c>
			{
				*ppxNetworkBuffer = pxNewBuffer;
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e144:	601a      	str	r2, [r3, #0]
				pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 800e146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e148:	699b      	ldr	r3, [r3, #24]
 800e14a:	63bb      	str	r3, [r7, #56]	; 0x38
				pxTCPPacket = ( TCPPacket_t * ) ( pucEthernetBuffer );
 800e14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e14e:	637b      	str	r3, [r7, #52]	; 0x34

				pucSendData = pucEthernetBuffer + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	3336      	adds	r3, #54	; 0x36
 800e154:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e156:	4413      	add	r3, r2
 800e158:	627b      	str	r3, [r7, #36]	; 0x24

				/* Translate the position in txStream to an offset from the tail
				marker. */
				uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	693a      	ldr	r2, [r7, #16]
 800e166:	4619      	mov	r1, r3
 800e168:	f7fe ffa7 	bl	800d0ba <uxStreamBufferDistance>
 800e16c:	6238      	str	r0, [r7, #32]

				/* Here data is copied from the txStream in 'peek' mode.  Only
				when the packets are acked, the tail marker will be updated. */
				ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800e172:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e174:	2301      	movs	r3, #1
 800e176:	9300      	str	r3, [sp, #0]
 800e178:	4613      	mov	r3, r2
 800e17a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e17c:	6a39      	ldr	r1, [r7, #32]
 800e17e:	f7fe fed9 	bl	800cf34 <uxStreamBufferGet>
 800e182:	61f8      	str	r0, [r7, #28]
				}
				#endif

				/* If the owner of the socket requests a closure, add the FIN
				flag to the last packet. */
				if( ( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) )
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e18a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e18e:	b2db      	uxtb	r3, r3
 800e190:	2b00      	cmp	r3, #0
 800e192:	d030      	beq.n	800e1f6 <prvTCPPrepareSend+0x142>
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e19a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e19e:	b2db      	uxtb	r3, r3
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d128      	bne.n	800e1f6 <prvTCPPrepareSend+0x142>
				{
					ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	4619      	mov	r1, r3
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1b0:	689b      	ldr	r3, [r3, #8]
 800e1b2:	461a      	mov	r2, r3
 800e1b4:	f7fe ff81 	bl	800d0ba <uxStreamBufferDistance>
 800e1b8:	61b8      	str	r0, [r7, #24]

					if( ulDistance == ulDataGot )
 800e1ba:	69ba      	ldr	r2, [r7, #24]
 800e1bc:	69fb      	ldr	r3, [r7, #28]
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	d119      	bne.n	800e1f6 <prvTCPPrepareSend+0x142>
						}
						#endif
						/* Although the socket sends a FIN, it will stay in
						ESTABLISHED until all current data has been received or
						delivered. */
						pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_FIN;
 800e1c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e1c8:	f043 0301 	orr.w	r3, r3, #1
 800e1cc:	b2da      	uxtb	r2, r3
 800e1ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1d0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 800e1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1da:	441a      	add	r2, r3
 800e1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1de:	625a      	str	r2, [r3, #36]	; 0x24
						pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800e1e0:	68fa      	ldr	r2, [r7, #12]
 800e1e2:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800e1e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1ea:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
 800e1ee:	e002      	b.n	800e1f6 <prvTCPPrepareSend+0x142>
					}
				}
			}
			else
			{
				lDataLen = -1;
 800e1f0:	f04f 33ff 	mov.w	r3, #4294967295
 800e1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}
	}

	if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) )
 800e1f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	db7e      	blt.n	800e2fa <prvTCPPrepareSend+0x246>
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e202:	2b05      	cmp	r3, #5
 800e204:	d179      	bne.n	800e2fa <prvTCPPrepareSend+0x246>
	{
		/* See if the socket owner wants to shutdown this connection. */
		if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e20c:	f003 0320 	and.w	r3, r3, #32
 800e210:	b2db      	uxtb	r3, r3
 800e212:	2b00      	cmp	r3, #0
 800e214:	d02b      	beq.n	800e26e <prvTCPPrepareSend+0x1ba>
			( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 800e216:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e218:	f001 fe9c 	bl	800ff54 <xTCPWindowTxDone>
 800e21c:	4603      	mov	r3, r0
		if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d025      	beq.n	800e26e <prvTCPPrepareSend+0x1ba>
		{
			pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 800e222:	68fa      	ldr	r2, [r7, #12]
 800e224:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800e228:	f36f 1345 	bfc	r3, #5, #1
 800e22c:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
			pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_FIN;
 800e230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e232:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e236:	f043 0301 	orr.w	r3, r3, #1
 800e23a:	b2da      	uxtb	r2, r3
 800e23c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e23e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
			pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800e242:	68fa      	ldr	r2, [r7, #12]
 800e244:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800e248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e24c:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
			pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800e250:	68fa      	ldr	r2, [r7, #12]
 800e252:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800e256:	f043 0301 	orr.w	r3, r3, #1
 800e25a:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
			pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800e25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e260:	6a1a      	ldr	r2, [r3, #32]
 800e262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e264:	625a      	str	r2, [r3, #36]	; 0x24
			vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 800e266:	2106      	movs	r1, #6
 800e268:	68f8      	ldr	r0, [r7, #12]
 800e26a:	f7ff fde4 	bl	800de36 <vTCPStateChange>
		}

		#if( ipconfigTCP_KEEP_ALIVE != 0 )
		{
			if( pxSocket->u.xTCP.ucKeepRepCount > 3u )
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800e274:	2b03      	cmp	r3, #3
 800e276:	d906      	bls.n	800e286 <prvTCPPrepareSend+0x1d2>
			{
				FreeRTOS_debug_printf( ( "keep-alive: giving up %lxip:%u\n",
					pxSocket->u.xTCP.ulRemoteIP,			/* IP address of remote machine. */
					pxSocket->u.xTCP.usRemotePort ) );	/* Port on remote machine. */
				vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800e278:	2108      	movs	r1, #8
 800e27a:	68f8      	ldr	r0, [r7, #12]
 800e27c:	f7ff fddb 	bl	800de36 <vTCPStateChange>
				lDataLen = -1;
 800e280:	f04f 33ff 	mov.w	r3, #4294967295
 800e284:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 800e286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d136      	bne.n	800e2fa <prvTCPPrepareSend+0x246>
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e292:	f003 0301 	and.w	r3, r3, #1
 800e296:	b2db      	uxtb	r3, r3
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d12e      	bne.n	800e2fa <prvTCPPrepareSend+0x246>
			{
				/* If there is no data to be sent, and no window-update message,
				we might want to send a keep-alive message. */
				TickType_t xAge = xTaskGetTickCount( ) - pxSocket->u.xTCP.xLastAliveTime;
 800e29c:	f7fb f85a 	bl	8009354 <xTaskGetTickCount>
 800e2a0:	4602      	mov	r2, r0
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e2a6:	1ad3      	subs	r3, r2, r3
 800e2a8:	617b      	str	r3, [r7, #20]
				TickType_t xMax;
				xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * configTICK_RATE_HZ );
 800e2aa:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e2ae:	633b      	str	r3, [r7, #48]	; 0x30
				if( pxSocket->u.xTCP.ucKeepRepCount )
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d002      	beq.n	800e2c0 <prvTCPPrepareSend+0x20c>
				{
					xMax = ( 3u * configTICK_RATE_HZ );
 800e2ba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800e2be:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if( xAge > xMax )
 800e2c0:	697a      	ldr	r2, [r7, #20]
 800e2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c4:	429a      	cmp	r2, r3
 800e2c6:	d918      	bls.n	800e2fa <prvTCPPrepareSend+0x246>
				{
					pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount( );
 800e2c8:	f7fb f844 	bl	8009354 <xTaskGetTickCount>
 800e2cc:	4602      	mov	r2, r0
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	65da      	str	r2, [r3, #92]	; 0x5c
					if( xTCPWindowLoggingLevel )
						FreeRTOS_debug_printf( ( "keep-alive: %lxip:%u count %u\n",
							pxSocket->u.xTCP.ulRemoteIP,
							pxSocket->u.xTCP.usRemotePort,
							pxSocket->u.xTCP.ucKeepRepCount ) );
					pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 800e2d2:	68fa      	ldr	r2, [r7, #12]
 800e2d4:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800e2d8:	f043 0302 	orr.w	r3, r3, #2
 800e2dc:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
					pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500 ) );
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800e2e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
					pxSocket->u.xTCP.ucKeepRepCount++;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800e2f0:	3301      	adds	r3, #1
 800e2f2:	b2da      	uxtb	r2, r3
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		#endif /* ipconfigTCP_KEEP_ALIVE */
	}

	/* Anything to send, a change of the advertised window size, or maybe send a
	keep-alive message? */
	if( ( lDataLen > 0 ) ||
 800e2fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	dc0f      	bgt.n	800e320 <prvTCPPrepareSend+0x26c>
		( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e306:	f003 0301 	and.w	r3, r3, #1
 800e30a:	b2db      	uxtb	r3, r3
	if( ( lDataLen > 0 ) ||
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d107      	bne.n	800e320 <prvTCPPrepareSend+0x26c>
		( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e316:	f003 0302 	and.w	r3, r3, #2
 800e31a:	b2db      	uxtb	r3, r3
		( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d02b      	beq.n	800e378 <prvTCPPrepareSend+0x2c4>
	{
		pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_PSH );
 800e320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e322:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e326:	f023 0308 	bic.w	r3, r3, #8
 800e32a:	b2da      	uxtb	r2, r3
 800e32c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e32e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	b2db      	uxtb	r3, r3
 800e336:	3314      	adds	r3, #20
 800e338:	b2db      	uxtb	r3, r3
 800e33a:	009b      	lsls	r3, r3, #2
 800e33c:	b2da      	uxtb	r2, r3
 800e33e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e340:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

		pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_ACK;
 800e344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e346:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e34a:	f043 0310 	orr.w	r3, r3, #16
 800e34e:	b2da      	uxtb	r2, r3
 800e350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e352:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

		if( lDataLen != 0l )
 800e356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d008      	beq.n	800e36e <prvTCPPrepareSend+0x2ba>
		{
			pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_PSH;
 800e35c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e35e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e362:	f043 0308 	orr.w	r3, r3, #8
 800e366:	b2da      	uxtb	r2, r3
 800e368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e36a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		}

		lDataLen += ( int32_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800e36e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	4413      	add	r3, r2
 800e374:	3328      	adds	r3, #40	; 0x28
 800e376:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	return lDataLen;
 800e378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3740      	adds	r7, #64	; 0x40
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}
	...

0800e384 <prvTCPNextTimeout>:

/*
 * Calculate after how much time this socket needs to be checked again.
 */
static TickType_t prvTCPNextTimeout ( FreeRTOS_Socket_t *pxSocket )
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b084      	sub	sp, #16
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 800e38c:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e390:	60bb      	str	r3, [r7, #8]

	if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e398:	2b02      	cmp	r3, #2
 800e39a:	d135      	bne.n	800e408 <prvTCPNextTimeout+0x84>
	{
		/* The socket is actively connecting to a peer. */
		if( pxSocket->u.xTCP.bits.bConnPrepared )
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e3a2:	f003 0308 	and.w	r3, r3, #8
 800e3a6:	b2db      	uxtb	r3, r3
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d012      	beq.n	800e3d2 <prvTCPNextTimeout+0x4e>
		{
			/* Ethernet address has been found, use progressive timeout for
			active connect(). */
			if( pxSocket->u.xTCP.ucRepCount < 3u )
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e3b2:	2b02      	cmp	r3, #2
 800e3b4:	d809      	bhi.n	800e3ca <prvTCPNextTimeout+0x46>
			{
				ulDelayMs = ( 3000UL << ( pxSocket->u.xTCP.ucRepCount - 1u ) );
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e3bc:	3b01      	subs	r3, #1
 800e3be:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800e3c2:	fa02 f303 	lsl.w	r3, r2, r3
 800e3c6:	60bb      	str	r3, [r7, #8]
 800e3c8:	e006      	b.n	800e3d8 <prvTCPNextTimeout+0x54>
			}
			else
			{
				ulDelayMs = 11000UL;
 800e3ca:	f642 23f8 	movw	r3, #11000	; 0x2af8
 800e3ce:	60bb      	str	r3, [r7, #8]
 800e3d0:	e002      	b.n	800e3d8 <prvTCPNextTimeout+0x54>
			}
		}
		else
		{
			/* Still in the ARP phase: check every half second. */
			ulDelayMs = 500UL;
 800e3d2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800e3d6:	60bb      	str	r3, [r7, #8]
		}

		FreeRTOS_debug_printf( ( "Connect[%lxip:%u]: next timeout %u: %lu ms\n",
			pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort,
			pxSocket->u.xTCP.ucRepCount, ulDelayMs ) );
		pxSocket->u.xTCP.usTimeout = ( uint16_t )pdMS_TO_MIN_TICKS( ulDelayMs );
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e3de:	fb02 f303 	mul.w	r3, r2, r3
 800e3e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e3e6:	d30a      	bcc.n	800e3fe <prvTCPNextTimeout+0x7a>
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e3ee:	fb02 f303 	mul.w	r3, r2, r3
 800e3f2:	4a23      	ldr	r2, [pc, #140]	; (800e480 <prvTCPNextTimeout+0xfc>)
 800e3f4:	fba2 2303 	umull	r2, r3, r2, r3
 800e3f8:	099b      	lsrs	r3, r3, #6
 800e3fa:	b29a      	uxth	r2, r3
 800e3fc:	e000      	b.n	800e400 <prvTCPNextTimeout+0x7c>
 800e3fe:	2201      	movs	r2, #1
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e406:	e033      	b.n	800e470 <prvTCPNextTimeout+0xec>
	}
	else if( pxSocket->u.xTCP.usTimeout == 0u )
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d12e      	bne.n	800e470 <prvTCPNextTimeout+0xec>
	{
		/* Let the sliding window mechanism decide what time-out is appropriate. */
		BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e41e:	f107 0208 	add.w	r2, r7, #8
 800e422:	4619      	mov	r1, r3
 800e424:	f001 fdee 	bl	8010004 <xTCPWindowTxHasData>
 800e428:	60f8      	str	r0, [r7, #12]
		if( ulDelayMs == 0u )
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d108      	bne.n	800e442 <prvTCPNextTimeout+0xbe>
		{
			if( xResult != ( BaseType_t )0 )
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d002      	beq.n	800e43c <prvTCPNextTimeout+0xb8>
			{
				ulDelayMs = 1UL;
 800e436:	2301      	movs	r3, #1
 800e438:	60bb      	str	r3, [r7, #8]
 800e43a:	e002      	b.n	800e442 <prvTCPNextTimeout+0xbe>
			}
			else
			{
				ulDelayMs = tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 800e43c:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e440:	60bb      	str	r3, [r7, #8]
		}
		else
		{
			/* ulDelayMs contains the time to wait before a re-transmission. */
		}
		pxSocket->u.xTCP.usTimeout = ( uint16_t )pdMS_TO_MIN_TICKS( ulDelayMs );
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e448:	fb02 f303 	mul.w	r3, r2, r3
 800e44c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e450:	d30a      	bcc.n	800e468 <prvTCPNextTimeout+0xe4>
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e458:	fb02 f303 	mul.w	r3, r2, r3
 800e45c:	4a08      	ldr	r2, [pc, #32]	; (800e480 <prvTCPNextTimeout+0xfc>)
 800e45e:	fba2 2303 	umull	r2, r3, r2, r3
 800e462:	099b      	lsrs	r3, r3, #6
 800e464:	b29a      	uxth	r2, r3
 800e466:	e000      	b.n	800e46a <prvTCPNextTimeout+0xe6>
 800e468:	2201      	movs	r2, #1
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		/* field '.usTimeout' has already been set (by the
		keep-alive/delayed-ACK mechanism). */
	}

	/* Return the number of clock ticks before the timer expires. */
	return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
}
 800e476:	4618      	mov	r0, r3
 800e478:	3710      	adds	r7, #16
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}
 800e47e:	bf00      	nop
 800e480:	10624dd3 	.word	0x10624dd3

0800e484 <prvTCPAddTxData>:
/*-----------------------------------------------------------*/

static void prvTCPAddTxData( FreeRTOS_Socket_t *pxSocket )
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b084      	sub	sp, #16
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
	the sliding window.

	uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It contains new
	Tx data which has not been passed to the sliding window yet.  The oldest
	data not-yet-confirmed can be found at rxTail. */
	lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e490:	4618      	mov	r0, r3
 800e492:	f7fe fe58 	bl	800d146 <uxStreamBufferMidSpace>
 800e496:	4603      	mov	r3, r0
 800e498:	60fb      	str	r3, [r7, #12]

	if( lLength > 0 )
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	dd17      	ble.n	800e4d0 <prvTCPAddTxData+0x4c>
		window manager, so it can start transmitting them.

		Hand over the new data to the sliding window handler.  It will be
		split-up in chunks of 1460 bytes each (or less, depending on
		ipconfigTCP_MSS). */
		lCount = lTCPWindowTxAdd(	&pxSocket->u.xTCP.xTCPWindow,
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
 800e4a6:	68f9      	ldr	r1, [r7, #12]
								( uint32_t ) lLength,
								( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e4ac:	685b      	ldr	r3, [r3, #4]
		lCount = lTCPWindowTxAdd(	&pxSocket->u.xTCP.xTCPWindow,
 800e4ae:	461a      	mov	r2, r3
								( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e4b4:	691b      	ldr	r3, [r3, #16]
		lCount = lTCPWindowTxAdd(	&pxSocket->u.xTCP.xTCPWindow,
 800e4b6:	f001 fc99 	bl	800fdec <lTCPWindowTxAdd>
 800e4ba:	60b8      	str	r0, [r7, #8]

		/* Move the rxMid pointer forward up to rxHead. */
		if( lCount > 0 )
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	dd06      	ble.n	800e4d0 <prvTCPAddTxData+0x4c>
		{
			vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e4c6:	68ba      	ldr	r2, [r7, #8]
 800e4c8:	4611      	mov	r1, r2
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f7fe fe4f 	bl	800d16e <vStreamBufferMoveMid>
		}
	}
}
 800e4d0:	bf00      	nop
 800e4d2:	3710      	adds	r7, #16
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}

0800e4d8 <prvTCPHandleFin>:
 * Or when the socket has sent a FIN flag to the peer
 * Before being called, it has been checked that both reception and transmission
 * are complete.
 */
static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b088      	sub	sp, #32
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	6039      	str	r1, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	699b      	ldr	r3, [r3, #24]
 800e4e6:	61bb      	str	r3, [r7, #24]
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800e4e8:	69bb      	ldr	r3, [r7, #24]
 800e4ea:	3322      	adds	r3, #34	; 0x22
 800e4ec:	617b      	str	r3, [r7, #20]
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	7b5b      	ldrb	r3, [r3, #13]
 800e4f2:	74fb      	strb	r3, [r7, #19]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	33dc      	adds	r3, #220	; 0xdc
 800e4f8:	60fb      	str	r3, [r7, #12]
BaseType_t xSendLength = 0;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	61fb      	str	r3, [r7, #28]
uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	689b      	ldr	r3, [r3, #8]
 800e502:	061a      	lsls	r2, r3, #24
 800e504:	697b      	ldr	r3, [r7, #20]
 800e506:	689b      	ldr	r3, [r3, #8]
 800e508:	021b      	lsls	r3, r3, #8
 800e50a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e50e:	431a      	orrs	r2, r3
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	689b      	ldr	r3, [r3, #8]
 800e514:	0a1b      	lsrs	r3, r3, #8
 800e516:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e51a:	431a      	orrs	r2, r3
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	689b      	ldr	r3, [r3, #8]
 800e520:	0e1b      	lsrs	r3, r3, #24
 800e522:	4313      	orrs	r3, r2
 800e524:	60bb      	str	r3, [r7, #8]

	if( ( ucTCPFlags & ipTCP_FLAG_FIN ) != 0u )
 800e526:	7cfb      	ldrb	r3, [r7, #19]
 800e528:	f003 0301 	and.w	r3, r3, #1
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d004      	beq.n	800e53a <prvTCPHandleFin+0x62>
	{
		pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1u;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	695b      	ldr	r3, [r3, #20]
 800e534:	1c5a      	adds	r2, r3, #1
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	611a      	str	r2, [r3, #16]
	}
	if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e544:	b2db      	uxtb	r3, r3
 800e546:	2b00      	cmp	r3, #0
 800e548:	d10b      	bne.n	800e562 <prvTCPHandleFin+0x8a>
	{
		/* We haven't yet replied with a FIN, do so now. */
		pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	6a1a      	ldr	r2, [r3, #32]
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	625a      	str	r2, [r3, #36]	; 0x24
		pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800e552:	687a      	ldr	r2, [r7, #4]
 800e554:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800e558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e55c:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
 800e560:	e00c      	b.n	800e57c <prvTCPHandleFin+0xa4>
	}
	else
	{
		/* We did send a FIN already, see if it's ACK'd. */
		if( ulAckNr == pxTCPWindow->tx.ulFINSequenceNumber + 1u )
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e566:	1c5a      	adds	r2, r3, #1
 800e568:	68bb      	ldr	r3, [r7, #8]
 800e56a:	429a      	cmp	r2, r3
 800e56c:	d106      	bne.n	800e57c <prvTCPHandleFin+0xa4>
		{
			pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 800e56e:	687a      	ldr	r2, [r7, #4]
 800e570:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800e574:	f043 0301 	orr.w	r3, r3, #1
 800e578:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
		}
	}

	if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e582:	f003 0301 	and.w	r3, r3, #1
 800e586:	b2db      	uxtb	r3, r3
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d10b      	bne.n	800e5a4 <prvTCPHandleFin+0xcc>
	{
		pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	621a      	str	r2, [r3, #32]
		pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK | ipTCP_FLAG_FIN;
 800e594:	697b      	ldr	r3, [r7, #20]
 800e596:	2211      	movs	r2, #17
 800e598:	735a      	strb	r2, [r3, #13]

		/* And wait for the final ACK. */
		vTCPStateChange( pxSocket, eLAST_ACK );
 800e59a:	210a      	movs	r1, #10
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f7ff fc4a 	bl	800de36 <vTCPStateChange>
 800e5a2:	e023      	b.n	800e5ec <prvTCPHandleFin+0x114>
	}
	else
	{
		/* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
		pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1u;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5a8:	1c5a      	adds	r2, r3, #1
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	621a      	str	r2, [r3, #32]
		if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e5b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e5b8:	b2db      	uxtb	r3, r3
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d103      	bne.n	800e5c6 <prvTCPHandleFin+0xee>
		{
			/* We have sent out a FIN but the peer hasn't replied with a FIN
			yet. Do nothing for the moment. */
			pxTCPHeader->ucTCPFlags = 0u;
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	735a      	strb	r2, [r3, #13]
 800e5c4:	e012      	b.n	800e5ec <prvTCPHandleFin+0x114>
		}
		else
		{
			if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e5cc:	f003 0302 	and.w	r3, r3, #2
 800e5d0:	b2db      	uxtb	r3, r3
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d103      	bne.n	800e5de <prvTCPHandleFin+0x106>
			{
				/* This is the third of the three-way hand shake: the last
				ACK. */
				pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	2210      	movs	r2, #16
 800e5da:	735a      	strb	r2, [r3, #13]
 800e5dc:	e002      	b.n	800e5e4 <prvTCPHandleFin+0x10c>
			}
			else
			{
				/* The other party started the closure, so we just wait for the
				last ACK. */
				pxTCPHeader->ucTCPFlags = 0u;
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	735a      	strb	r2, [r3, #13]
			}

			/* And wait for the user to close this socket. */
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800e5e4:	2108      	movs	r1, #8
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f7ff fc25 	bl	800de36 <vTCPStateChange>
		}
	}

	pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	6a1a      	ldr	r2, [r3, #32]
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	62da      	str	r2, [r3, #44]	; 0x2c

	if( pxTCPHeader->ucTCPFlags != 0u )
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	7b5b      	ldrb	r3, [r3, #13]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d004      	beq.n	800e606 <prvTCPHandleFin+0x12e>
	{
		xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength );
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e602:	3328      	adds	r3, #40	; 0x28
 800e604:	61fb      	str	r3, [r7, #28]
	}

	pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e60c:	3314      	adds	r3, #20
 800e60e:	b2db      	uxtb	r3, r3
 800e610:	009b      	lsls	r3, r3, #2
 800e612:	b2da      	uxtb	r2, r3
 800e614:	697b      	ldr	r3, [r7, #20]
 800e616:	731a      	strb	r2, [r3, #12]
			pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
			pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
			pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );
	}

	return xSendLength;
 800e618:	69fb      	ldr	r3, [r7, #28]
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	3720      	adds	r7, #32
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd80      	pop	{r7, pc}

0800e622 <prvCheckRxData>:
 *
 * The first thing that will be done is find the TCP payload data
 * and check the length of this data.
 */
static BaseType_t prvCheckRxData( NetworkBufferDescriptor_t *pxNetworkBuffer, uint8_t **ppucRecvData )
{
 800e622:	b580      	push	{r7, lr}
 800e624:	b088      	sub	sp, #32
 800e626:	af00      	add	r7, sp, #0
 800e628:	6078      	str	r0, [r7, #4]
 800e62a:	6039      	str	r1, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	699b      	ldr	r3, [r3, #24]
 800e630:	61bb      	str	r3, [r7, #24]
TCPHeader_t *pxTCPHeader = &( pxTCPPacket->xTCPHeader );
 800e632:	69bb      	ldr	r3, [r7, #24]
 800e634:	3322      	adds	r3, #34	; 0x22
 800e636:	617b      	str	r3, [r7, #20]
	node.

	The size of the TCP header is given in a multiple of 4-byte words (single
	byte, needs no ntoh() translation).  A shift-right 2: is the same as
	(offset >> 4) * 4. */
    lTCPHeaderLength = ( BaseType_t ) ( ( pxTCPHeader->ucTCPOffset & VALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2 );
 800e638:	697b      	ldr	r3, [r7, #20]
 800e63a:	7b1b      	ldrb	r3, [r3, #12]
 800e63c:	089b      	lsrs	r3, r3, #2
 800e63e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800e642:	613b      	str	r3, [r7, #16]

	/* Let pucRecvData point to the first byte received. */
	*ppucRecvData = pxNetworkBuffer->pucEthernetBuffer + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + lTCPHeaderLength;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	699a      	ldr	r2, [r3, #24]
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	3322      	adds	r3, #34	; 0x22
 800e64c:	441a      	add	r2, r3
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	601a      	str	r2, [r3, #0]

	/* Calculate lReceiveLength - the length of the TCP data received.  This is
	equal to the total packet length minus:
	( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
	lReceiveLength = ( ( int32_t ) pxNetworkBuffer->xDataLength ) - ( int32_t ) ipSIZE_OF_ETH_HEADER;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	69db      	ldr	r3, [r3, #28]
 800e656:	3b0e      	subs	r3, #14
 800e658:	61fb      	str	r3, [r7, #28]
	lLength =  ( int32_t )FreeRTOS_htons( pxTCPPacket->xIPHeader.usLength );
 800e65a:	69bb      	ldr	r3, [r7, #24]
 800e65c:	8a1b      	ldrh	r3, [r3, #16]
 800e65e:	b29b      	uxth	r3, r3
 800e660:	021b      	lsls	r3, r3, #8
 800e662:	b21a      	sxth	r2, r3
 800e664:	69bb      	ldr	r3, [r7, #24]
 800e666:	8a1b      	ldrh	r3, [r3, #16]
 800e668:	b29b      	uxth	r3, r3
 800e66a:	0a1b      	lsrs	r3, r3, #8
 800e66c:	b29b      	uxth	r3, r3
 800e66e:	b21b      	sxth	r3, r3
 800e670:	4313      	orrs	r3, r2
 800e672:	b21b      	sxth	r3, r3
 800e674:	b29b      	uxth	r3, r3
 800e676:	60fb      	str	r3, [r7, #12]

	if( lReceiveLength > lLength )
 800e678:	69fa      	ldr	r2, [r7, #28]
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	429a      	cmp	r2, r3
 800e67e:	dd01      	ble.n	800e684 <prvCheckRxData+0x62>
	{
		/* More bytes were received than the reported length, often because of
		padding bytes at the end. */
		lReceiveLength = lLength;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	61fb      	str	r3, [r7, #28]
	}

	/* Subtract the size of the TCP and IP headers and the actual data size is
	known. */
	if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) ipSIZE_OF_IPv4_HEADER ) )
 800e684:	693b      	ldr	r3, [r7, #16]
 800e686:	f103 0214 	add.w	r2, r3, #20
 800e68a:	69fb      	ldr	r3, [r7, #28]
 800e68c:	429a      	cmp	r2, r3
 800e68e:	da05      	bge.n	800e69c <prvCheckRxData+0x7a>
	{
		lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) ipSIZE_OF_IPv4_HEADER );
 800e690:	693b      	ldr	r3, [r7, #16]
 800e692:	3314      	adds	r3, #20
 800e694:	69fa      	ldr	r2, [r7, #28]
 800e696:	1ad3      	subs	r3, r2, r3
 800e698:	61fb      	str	r3, [r7, #28]
 800e69a:	e001      	b.n	800e6a0 <prvCheckRxData+0x7e>
	}
	else
	{
		lReceiveLength = 0;
 800e69c:	2300      	movs	r3, #0
 800e69e:	61fb      	str	r3, [r7, #28]
	This field communicates the current value of the urgent pointer as a
	positive offset from the sequence number in this segment.  The urgent
	pointer points to the sequence number of the octet following the urgent
	data.  This field is only be interpreted in segments with the URG control
	bit set. */
	if( ( pxTCPHeader->ucTCPFlags & ipTCP_FLAG_URG ) != 0u )
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	7b5b      	ldrb	r3, [r3, #13]
 800e6a4:	f003 0320 	and.w	r3, r3, #32
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d01c      	beq.n	800e6e6 <prvCheckRxData+0xc4>
	{
		/* Although we ignore the urgent data, we have to skip it. */
		lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	8a5b      	ldrh	r3, [r3, #18]
 800e6b0:	b29b      	uxth	r3, r3
 800e6b2:	021b      	lsls	r3, r3, #8
 800e6b4:	b21a      	sxth	r2, r3
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	8a5b      	ldrh	r3, [r3, #18]
 800e6ba:	b29b      	uxth	r3, r3
 800e6bc:	0a1b      	lsrs	r3, r3, #8
 800e6be:	b29b      	uxth	r3, r3
 800e6c0:	b21b      	sxth	r3, r3
 800e6c2:	4313      	orrs	r3, r2
 800e6c4:	b21b      	sxth	r3, r3
 800e6c6:	b29b      	uxth	r3, r3
 800e6c8:	60bb      	str	r3, [r7, #8]
		*ppucRecvData += lUrgentLength;
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	681a      	ldr	r2, [r3, #0]
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	441a      	add	r2, r3
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	601a      	str	r2, [r3, #0]
		lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 800e6d6:	68b9      	ldr	r1, [r7, #8]
 800e6d8:	69f8      	ldr	r0, [r7, #28]
 800e6da:	f7fe fcaf 	bl	800d03c <FreeRTOS_min_int32>
 800e6de:	4602      	mov	r2, r0
 800e6e0:	69fb      	ldr	r3, [r7, #28]
 800e6e2:	1a9b      	subs	r3, r3, r2
 800e6e4:	61fb      	str	r3, [r7, #28]
	}

	return ( BaseType_t ) lReceiveLength;
 800e6e6:	69fb      	ldr	r3, [r7, #28]
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3720      	adds	r7, #32
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}

0800e6f0 <prvStoreRxData>:
 * The second thing is to do is check if the payload data may be accepted
 * If so, they will be added to the reception queue.
 */
static BaseType_t prvStoreRxData( FreeRTOS_Socket_t *pxSocket, uint8_t *pucRecvData,
	NetworkBufferDescriptor_t *pxNetworkBuffer, uint32_t ulReceiveLength )
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b08c      	sub	sp, #48	; 0x30
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	60f8      	str	r0, [r7, #12]
 800e6f8:	60b9      	str	r1, [r7, #8]
 800e6fa:	607a      	str	r2, [r7, #4]
 800e6fc:	603b      	str	r3, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	699b      	ldr	r3, [r3, #24]
 800e702:	627b      	str	r3, [r7, #36]	; 0x24
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800e704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e706:	3322      	adds	r3, #34	; 0x22
 800e708:	623b      	str	r3, [r7, #32]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	33dc      	adds	r3, #220	; 0xdc
 800e70e:	61fb      	str	r3, [r7, #28]
uint32_t ulSequenceNumber, ulSpace;
int32_t lOffset, lStored;
BaseType_t xResult = 0;
 800e710:	2300      	movs	r3, #0
 800e712:	62bb      	str	r3, [r7, #40]	; 0x28

	ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800e714:	6a3b      	ldr	r3, [r7, #32]
 800e716:	685b      	ldr	r3, [r3, #4]
 800e718:	061a      	lsls	r2, r3, #24
 800e71a:	6a3b      	ldr	r3, [r7, #32]
 800e71c:	685b      	ldr	r3, [r3, #4]
 800e71e:	021b      	lsls	r3, r3, #8
 800e720:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e724:	431a      	orrs	r2, r3
 800e726:	6a3b      	ldr	r3, [r7, #32]
 800e728:	685b      	ldr	r3, [r3, #4]
 800e72a:	0a1b      	lsrs	r3, r3, #8
 800e72c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e730:	431a      	orrs	r2, r3
 800e732:	6a3b      	ldr	r3, [r7, #32]
 800e734:	685b      	ldr	r3, [r3, #4]
 800e736:	0e1b      	lsrs	r3, r3, #24
 800e738:	4313      	orrs	r3, r2
 800e73a:	61bb      	str	r3, [r7, #24]

	if( ( ulReceiveLength > 0u ) && ( pxSocket->u.xTCP.ucTCPState >= eSYN_RECEIVED ) )
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d03f      	beq.n	800e7c2 <prvStoreRxData+0xd2>
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e748:	2b03      	cmp	r3, #3
 800e74a:	d93a      	bls.n	800e7c2 <prvStoreRxData+0xd2>

		If it can't be "accept"ed it may have to be stored and send a selective
		ack (SACK) option to confirm it.  In that case, xTCPWindowRxStore() will be
		called later to store an out-of-order packet (in case lOffset is
		negative). */
		if ( pxSocket->u.xTCP.rxStream )
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e750:	2b00      	cmp	r3, #0
 800e752:	d006      	beq.n	800e762 <prvStoreRxData+0x72>
		{
			ulSpace = ( uint32_t )uxStreamBufferGetSpace ( pxSocket->u.xTCP.rxStream );
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e758:	4618      	mov	r0, r3
 800e75a:	f7fe fccc 	bl	800d0f6 <uxStreamBufferGetSpace>
 800e75e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e760:	e002      	b.n	800e768 <prvStoreRxData+0x78>
		}
		else
		{
			ulSpace = ( uint32_t )pxSocket->u.xTCP.uxRxStreamSize;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e766:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulReceiveLength, ulSpace );
 800e768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e76a:	683a      	ldr	r2, [r7, #0]
 800e76c:	69b9      	ldr	r1, [r7, #24]
 800e76e:	69f8      	ldr	r0, [r7, #28]
 800e770:	f001 fa46 	bl	800fc00 <lTCPWindowRxCheck>
 800e774:	6178      	str	r0, [r7, #20]

		if( lOffset >= 0 )
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	db10      	blt.n	800e79e <prvStoreRxData+0xae>
		{
			/* New data has arrived and may be made available to the user.  See
			if the head marker in rxStream may be advanced,	only if lOffset == 0.
			In case the low-water mark is reached, bLowWater will be set
			"low-water" here stands for "little space". */
			lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRecvData, ulReceiveLength );
 800e77c:	6979      	ldr	r1, [r7, #20]
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	68ba      	ldr	r2, [r7, #8]
 800e782:	68f8      	ldr	r0, [r7, #12]
 800e784:	f7fe f8e8 	bl	800c958 <lTCPAddRxdata>
 800e788:	6138      	str	r0, [r7, #16]

			if( lStored != ( int32_t ) ulReceiveLength )
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	693a      	ldr	r2, [r7, #16]
 800e78e:	429a      	cmp	r2, r3
 800e790:	d005      	beq.n	800e79e <prvStoreRxData+0xae>
				FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %ld / %lu bytes??\n", lStored, ulReceiveLength ) );

				/* Received data could not be stored.  The socket's flag
				bMallocError has been set.  The socket now has the status
				eCLOSE_WAIT and a RST packet will be sent back. */
				prvTCPSendReset( pxNetworkBuffer );
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f000 fc24 	bl	800efe0 <prvTCPSendReset>
				xResult = -1;
 800e798:	f04f 33ff 	mov.w	r3, #4294967295
 800e79c:	62bb      	str	r3, [r7, #40]	; 0x28
		#if( ipconfigUSE_TCP_WIN == 1 )
		{
			/* Now lTCPAddRxdata() will move the rxHead pointer forward
			so data becomes available to the user immediately
			In case the low-water mark is reached, bLowWater will be set. */
			if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0 ) )
 800e79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d113      	bne.n	800e7cc <prvStoreRxData+0xdc>
 800e7a4:	69fb      	ldr	r3, [r7, #28]
 800e7a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d00f      	beq.n	800e7cc <prvStoreRxData+0xdc>
			{
				lTCPAddRxdata( pxSocket, 0ul, NULL, pxTCPWindow->ulUserDataLength );
 800e7ac:	69fb      	ldr	r3, [r7, #28]
 800e7ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	2100      	movs	r1, #0
 800e7b4:	68f8      	ldr	r0, [r7, #12]
 800e7b6:	f7fe f8cf 	bl	800c958 <lTCPAddRxdata>
				pxTCPWindow->ulUserDataLength = 0;
 800e7ba:	69fb      	ldr	r3, [r7, #28]
 800e7bc:	2200      	movs	r2, #0
 800e7be:	631a      	str	r2, [r3, #48]	; 0x30
			if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0 ) )
 800e7c0:	e004      	b.n	800e7cc <prvStoreRxData+0xdc>
		}
		#endif /* ipconfigUSE_TCP_WIN */
	}
	else
	{
		pxTCPWindow->ucOptionLength = 0u;
 800e7c2:	69fb      	ldr	r3, [r7, #28]
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800e7ca:	e000      	b.n	800e7ce <prvStoreRxData+0xde>
			if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0 ) )
 800e7cc:	bf00      	nop
	}

	return xResult;
 800e7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3730      	adds	r7, #48	; 0x30
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}

0800e7d8 <prvSetOptions>:
/*-----------------------------------------------------------*/

/* Set the TCP options (if any) for the outgoing packet. */
static UBaseType_t prvSetOptions( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b086      	sub	sp, #24
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	6039      	str	r1, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	699b      	ldr	r3, [r3, #24]
 800e7e6:	613b      	str	r3, [r7, #16]
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	3322      	adds	r3, #34	; 0x22
 800e7ec:	60fb      	str	r3, [r7, #12]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	33dc      	adds	r3, #220	; 0xdc
 800e7f2:	60bb      	str	r3, [r7, #8]
UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 800e7f4:	68bb      	ldr	r3, [r7, #8]
 800e7f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e7fa:	617b      	str	r3, [r7, #20]

	#if(	ipconfigUSE_TCP_WIN == 1 )
		if( uxOptionsLength != 0u )
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d011      	beq.n	800e826 <prvSetOptions+0x4e>
					pxSocket->usLocalPort,
					pxSocket->u.xTCP.usRemotePort,
					uxOptionsLength,
					FreeRTOS_ntohl( pxTCPWindow->ulOptionsData[ 1 ] ) - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber,
					FreeRTOS_ntohl( pxTCPWindow->ulOptionsData[ 2 ] ) - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ) );
			memcpy( pxTCPHeader->ucOptdata, pxTCPWindow->ulOptionsData, ( size_t ) uxOptionsLength );
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	f103 0014 	add.w	r0, r3, #20
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	3380      	adds	r3, #128	; 0x80
 800e80c:	697a      	ldr	r2, [r7, #20]
 800e80e:	4619      	mov	r1, r3
 800e810:	f002 fbf5 	bl	8010ffe <memcpy>

			/* The header length divided by 4, goes into the higher nibble,
			effectively a shift-left 2. */
			pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	b2db      	uxtb	r3, r3
 800e818:	3314      	adds	r3, #20
 800e81a:	b2db      	uxtb	r3, r3
 800e81c:	009b      	lsls	r3, r3, #2
 800e81e:	b2da      	uxtb	r2, r3
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	731a      	strb	r2, [r3, #12]
 800e824:	e031      	b.n	800e88a <prvSetOptions+0xb2>
		}
		else
	#endif	/* ipconfigUSE_TCP_WIN */
	if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e82c:	2b04      	cmp	r3, #4
 800e82e:	d92c      	bls.n	800e88a <prvSetOptions+0xb2>
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e836:	f003 0301 	and.w	r3, r3, #1
 800e83a:	b2db      	uxtb	r3, r3
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d024      	beq.n	800e88a <prvSetOptions+0xb2>
	{
		/* TCP options must be sent because the MSS has changed. */
		pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 800e840:	687a      	ldr	r2, [r7, #4]
 800e842:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800e846:	f36f 0300 	bfc	r3, #0, #1
 800e84a:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
		if( xTCPWindowLoggingLevel >= 0 )
		{
			FreeRTOS_debug_printf( ( "MSS: sending %d\n", pxSocket->u.xTCP.usCurMSS ) );
		}

		pxTCPHeader->ucOptdata[ 0 ] = TCP_OPT_MSS;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	2202      	movs	r2, #2
 800e852:	751a      	strb	r2, [r3, #20]
		pxTCPHeader->ucOptdata[ 1 ] = TCP_OPT_MSS_LEN;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	2204      	movs	r2, #4
 800e858:	755a      	strb	r2, [r3, #21]
		pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) >> 8 );
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e860:	0a1b      	lsrs	r3, r3, #8
 800e862:	b29b      	uxth	r3, r3
 800e864:	b2da      	uxtb	r2, r3
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	759a      	strb	r2, [r3, #22]
		pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) & 0xffu );
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e870:	b2da      	uxtb	r2, r3
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	75da      	strb	r2, [r3, #23]
		uxOptionsLength = 4u;
 800e876:	2304      	movs	r3, #4
 800e878:	617b      	str	r3, [r7, #20]
		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	b2db      	uxtb	r3, r3
 800e87e:	3314      	adds	r3, #20
 800e880:	b2db      	uxtb	r3, r3
 800e882:	009b      	lsls	r3, r3, #2
 800e884:	b2da      	uxtb	r2, r3
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	731a      	strb	r2, [r3, #12]
	}

	return uxOptionsLength;
 800e88a:	697b      	ldr	r3, [r7, #20]
}
 800e88c:	4618      	mov	r0, r3
 800e88e:	3718      	adds	r7, #24
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}

0800e894 <prvHandleSynReceived>:
 * Called from the states: eSYN_RECEIVED and eCONNECT_SYN
 * If the flags received are correct, the socket will move to eESTABLISHED.
 */
static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer,
	uint32_t ulReceiveLength, UBaseType_t uxOptionsLength )
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b08c      	sub	sp, #48	; 0x30
 800e898:	af00      	add	r7, sp, #0
 800e89a:	60f8      	str	r0, [r7, #12]
 800e89c:	60b9      	str	r1, [r7, #8]
 800e89e:	607a      	str	r2, [r7, #4]
 800e8a0:	603b      	str	r3, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	699b      	ldr	r3, [r3, #24]
 800e8a8:	627b      	str	r3, [r7, #36]	; 0x24
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800e8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ac:	3322      	adds	r3, #34	; 0x22
 800e8ae:	623b      	str	r3, [r7, #32]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	33dc      	adds	r3, #220	; 0xdc
 800e8b4:	61fb      	str	r3, [r7, #28]
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800e8b6:	6a3b      	ldr	r3, [r7, #32]
 800e8b8:	7b5b      	ldrb	r3, [r3, #13]
 800e8ba:	76fb      	strb	r3, [r7, #27]
uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800e8bc:	6a3b      	ldr	r3, [r7, #32]
 800e8be:	685b      	ldr	r3, [r3, #4]
 800e8c0:	061a      	lsls	r2, r3, #24
 800e8c2:	6a3b      	ldr	r3, [r7, #32]
 800e8c4:	685b      	ldr	r3, [r3, #4]
 800e8c6:	021b      	lsls	r3, r3, #8
 800e8c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e8cc:	431a      	orrs	r2, r3
 800e8ce:	6a3b      	ldr	r3, [r7, #32]
 800e8d0:	685b      	ldr	r3, [r3, #4]
 800e8d2:	0a1b      	lsrs	r3, r3, #8
 800e8d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e8d8:	431a      	orrs	r2, r3
 800e8da:	6a3b      	ldr	r3, [r7, #32]
 800e8dc:	685b      	ldr	r3, [r3, #4]
 800e8de:	0e1b      	lsrs	r3, r3, #24
 800e8e0:	4313      	orrs	r3, r2
 800e8e2:	617b      	str	r3, [r7, #20]
BaseType_t xSendLength = 0;
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Either expect a ACK or a SYN+ACK. */
	uint16_t usExpect = ( uint16_t ) ipTCP_FLAG_ACK;
 800e8e8:	2310      	movs	r3, #16
 800e8ea:	857b      	strh	r3, [r7, #42]	; 0x2a
	if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e8f2:	2b02      	cmp	r3, #2
 800e8f4:	d103      	bne.n	800e8fe <prvHandleSynReceived+0x6a>
	{
		usExpect |= ( uint16_t ) ipTCP_FLAG_SYN;
 800e8f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e8f8:	f043 0302 	orr.w	r3, r3, #2
 800e8fc:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	if( ( ucTCPFlags & 0x17u ) != usExpect )
 800e8fe:	7efb      	ldrb	r3, [r7, #27]
 800e900:	f003 0217 	and.w	r2, r3, #23
 800e904:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e906:	429a      	cmp	r2, r3
 800e908:	d016      	beq.n	800e938 <prvHandleSynReceived+0xa4>
		/* eSYN_RECEIVED: flags 0010 expected, not 0002. */
		/* eSYN_RECEIVED: flags ACK  expected, not SYN. */
		FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X\n",
			pxSocket->u.xTCP.ucTCPState == eSYN_RECEIVED ? "eSYN_RECEIVED" : "eCONNECT_SYN",
			usExpect, ucTCPFlags ) );
		vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800e90a:	2108      	movs	r1, #8
 800e90c:	68f8      	ldr	r0, [r7, #12]
 800e90e:	f7ff fa92 	bl	800de36 <vTCPStateChange>
		pxTCPHeader->ucTCPFlags |= ipTCP_FLAG_RST;
 800e912:	6a3b      	ldr	r3, [r7, #32]
 800e914:	7b5b      	ldrb	r3, [r3, #13]
 800e916:	f043 0304 	orr.w	r3, r3, #4
 800e91a:	b2da      	uxtb	r2, r3
 800e91c:	6a3b      	ldr	r3, [r7, #32]
 800e91e:	735a      	strb	r2, [r3, #13]
		xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	3328      	adds	r3, #40	; 0x28
 800e924:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	b2db      	uxtb	r3, r3
 800e92a:	3314      	adds	r3, #20
 800e92c:	b2db      	uxtb	r3, r3
 800e92e:	009b      	lsls	r3, r3, #2
 800e930:	b2da      	uxtb	r2, r3
 800e932:	6a3b      	ldr	r3, [r7, #32]
 800e934:	731a      	strb	r2, [r3, #12]
 800e936:	e069      	b.n	800ea0c <prvHandleSynReceived+0x178>
	}
	else
	{
		pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800e93c:	69fb      	ldr	r3, [r7, #28]
 800e93e:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800e946:	69fb      	ldr	r3, [r7, #28]
 800e948:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8

		if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e952:	2b02      	cmp	r3, #2
 800e954:	d125      	bne.n	800e9a2 <prvHandleSynReceived+0x10e>
		{
			TCPPacket_t *pxLastTCPPacket = ( TCPPacket_t * ) ( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	3382      	adds	r3, #130	; 0x82
 800e95a:	613b      	str	r3, [r7, #16]

			/* Clear the SYN flag in lastPacket. */
			pxLastTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_ACK;
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	2210      	movs	r2, #16
 800e960:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

			/* This socket was the one connecting actively so now perofmr the
			synchronisation. */
			vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
				ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTCP.usCurMSS );
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
			vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800e976:	6979      	ldr	r1, [r7, #20]
 800e978:	f001 f89c 	bl	800fab4 <vTCPWindowInit>
			pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1u;
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	1c5a      	adds	r2, r3, #1
 800e980:	69fb      	ldr	r3, [r7, #28]
 800e982:	619a      	str	r2, [r3, #24]
 800e984:	69fb      	ldr	r3, [r7, #28]
 800e986:	699a      	ldr	r2, [r3, #24]
 800e988:	69fb      	ldr	r3, [r7, #28]
 800e98a:	611a      	str	r2, [r3, #16]
			pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 800e98c:	69fb      	ldr	r3, [r7, #28]
 800e98e:	6a1b      	ldr	r3, [r3, #32]
 800e990:	1c5a      	adds	r2, r3, #1
 800e992:	69fb      	ldr	r3, [r7, #28]
 800e994:	621a      	str	r2, [r3, #32]
			pxTCPWindow->ulNextTxSequenceNumber++;
 800e996:	69fb      	ldr	r3, [r7, #28]
 800e998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e99a:	1c5a      	adds	r2, r3, #1
 800e99c:	69fb      	ldr	r3, [r7, #28]
 800e99e:	635a      	str	r2, [r3, #52]	; 0x34
 800e9a0:	e005      	b.n	800e9ae <prvHandleSynReceived+0x11a>
		}
		else if( ulReceiveLength == 0u )
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d102      	bne.n	800e9ae <prvHandleSynReceived+0x11a>
		{
			pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 800e9a8:	69fb      	ldr	r3, [r7, #28]
 800e9aa:	697a      	ldr	r2, [r7, #20]
 800e9ac:	611a      	str	r2, [r3, #16]
		}

		/* The SYN+ACK has been confirmed, increase the next sequence number by
		1. */
		pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1u;
 800e9ae:	69fb      	ldr	r3, [r7, #28]
 800e9b0:	69db      	ldr	r3, [r3, #28]
 800e9b2:	1c5a      	adds	r2, r3, #1
 800e9b4:	69fb      	ldr	r3, [r7, #28]
 800e9b6:	62da      	str	r2, [r3, #44]	; 0x2c
				pxSocket->u.xTCP.usRemotePort,
				( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
		}
		#endif /* ipconfigUSE_TCP_WIN */

		if( ( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN ) || ( ulReceiveLength != 0u ) )
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e9be:	2b02      	cmp	r3, #2
 800e9c0:	d002      	beq.n	800e9c8 <prvHandleSynReceived+0x134>
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d00d      	beq.n	800e9e4 <prvHandleSynReceived+0x150>
		{
			pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 800e9c8:	6a3b      	ldr	r3, [r7, #32]
 800e9ca:	2210      	movs	r2, #16
 800e9cc:	735a      	strb	r2, [r3, #13]
			xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	3328      	adds	r3, #40	; 0x28
 800e9d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	b2db      	uxtb	r3, r3
 800e9d8:	3314      	adds	r3, #20
 800e9da:	b2db      	uxtb	r3, r3
 800e9dc:	009b      	lsls	r3, r3, #2
 800e9de:	b2da      	uxtb	r2, r3
 800e9e0:	6a3b      	ldr	r3, [r7, #32]
 800e9e2:	731a      	strb	r2, [r3, #12]
		}
		#if( ipconfigUSE_TCP_WIN != 0 )
		{
			if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e9ea:	f003 0310 	and.w	r3, r3, #16
 800e9ee:	b2db      	uxtb	r3, r3
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d107      	bne.n	800ea04 <prvHandleSynReceived+0x170>
			{
				/* The other party did not send a scaling factor.
				A shifting factor in this side must be canceled. */
				pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
				pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
			}
		}
		#endif /* ipconfigUSE_TCP_WIN */
		/* This was the third step of connecting: SYN, SYN+ACK, ACK	so now the
		connection is established. */
		vTCPStateChange( pxSocket, eESTABLISHED );
 800ea04:	2105      	movs	r1, #5
 800ea06:	68f8      	ldr	r0, [r7, #12]
 800ea08:	f7ff fa15 	bl	800de36 <vTCPStateChange>
	}

	return xSendLength;
 800ea0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ea0e:	4618      	mov	r0, r3
 800ea10:	3730      	adds	r7, #48	; 0x30
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd80      	pop	{r7, pc}

0800ea16 <prvHandleEstablished>:
 * the code will check if it may be accepted, i.e. if all expected data has been
 * completely received.
 */
static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer,
	uint32_t ulReceiveLength, UBaseType_t uxOptionsLength )
{
 800ea16:	b580      	push	{r7, lr}
 800ea18:	b092      	sub	sp, #72	; 0x48
 800ea1a:	af02      	add	r7, sp, #8
 800ea1c:	60f8      	str	r0, [r7, #12]
 800ea1e:	60b9      	str	r1, [r7, #8]
 800ea20:	607a      	str	r2, [r7, #4]
 800ea22:	603b      	str	r3, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	699b      	ldr	r3, [r3, #24]
 800ea2a:	637b      	str	r3, [r7, #52]	; 0x34
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800ea2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea2e:	3322      	adds	r3, #34	; 0x22
 800ea30:	633b      	str	r3, [r7, #48]	; 0x30
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	33dc      	adds	r3, #220	; 0xdc
 800ea36:	62fb      	str	r3, [r7, #44]	; 0x2c
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800ea38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea3a:	7b5b      	ldrb	r3, [r3, #13]
 800ea3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount;
 800ea40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea42:	685b      	ldr	r3, [r3, #4]
 800ea44:	061a      	lsls	r2, r3, #24
 800ea46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea48:	685b      	ldr	r3, [r3, #4]
 800ea4a:	021b      	lsls	r3, r3, #8
 800ea4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ea50:	431a      	orrs	r2, r3
 800ea52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea54:	685b      	ldr	r3, [r3, #4]
 800ea56:	0a1b      	lsrs	r3, r3, #8
 800ea58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ea5c:	431a      	orrs	r2, r3
 800ea5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea60:	685b      	ldr	r3, [r3, #4]
 800ea62:	0e1b      	lsrs	r3, r3, #24
 800ea64:	4313      	orrs	r3, r2
 800ea66:	627b      	str	r3, [r7, #36]	; 0x24
BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 800ea68:	2300      	movs	r3, #0
 800ea6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	63bb      	str	r3, [r7, #56]	; 0x38
int32_t lDistance, lSendResult;

	/* Remember the window size the peer is advertising. */
	pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 800ea70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea72:	89db      	ldrh	r3, [r3, #14]
 800ea74:	b29b      	uxth	r3, r3
 800ea76:	021b      	lsls	r3, r3, #8
 800ea78:	b21a      	sxth	r2, r3
 800ea7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea7c:	89db      	ldrh	r3, [r3, #14]
 800ea7e:	b29b      	uxth	r3, r3
 800ea80:	0a1b      	lsrs	r3, r3, #8
 800ea82:	b29b      	uxth	r3, r3
 800ea84:	b21b      	sxth	r3, r3
 800ea86:	4313      	orrs	r3, r2
 800ea88:	b21b      	sxth	r3, r3
 800ea8a:	b29b      	uxth	r3, r3
 800ea8c:	461a      	mov	r2, r3
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	#if( ipconfigUSE_TCP_WIN != 0 )
	{
		pxSocket->u.xTCP.ulWindowSize =
			( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ea9a:	68fa      	ldr	r2, [r7, #12]
 800ea9c:	f892 20ca 	ldrb.w	r2, [r2, #202]	; 0xca
 800eaa0:	fa03 f202 	lsl.w	r2, r3, r2
		pxSocket->u.xTCP.ulWindowSize =
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	}
	#endif

	if( ( ucTCPFlags & ( uint8_t ) ipTCP_FLAG_ACK ) != 0u )
 800eaaa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800eaae:	f003 0310 	and.w	r3, r3, #16
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d040      	beq.n	800eb38 <prvHandleEstablished+0x122>
	{
		ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulAckNr ) );
 800eab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eab8:	f8d3 302a 	ldr.w	r3, [r3, #42]	; 0x2a
 800eabc:	061a      	lsls	r2, r3, #24
 800eabe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eac0:	f8d3 302a 	ldr.w	r3, [r3, #42]	; 0x2a
 800eac4:	021b      	lsls	r3, r3, #8
 800eac6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eaca:	431a      	orrs	r2, r3
 800eacc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eace:	f8d3 302a 	ldr.w	r3, [r3, #42]	; 0x2a
 800ead2:	0a1b      	lsrs	r3, r3, #8
 800ead4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ead8:	431a      	orrs	r2, r3
 800eada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eadc:	f8d3 302a 	ldr.w	r3, [r3, #42]	; 0x2a
 800eae0:	0e1b      	lsrs	r3, r3, #24
 800eae2:	4313      	orrs	r3, r2
 800eae4:	4619      	mov	r1, r3
 800eae6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eae8:	f001 fcda 	bl	80104a0 <ulTCPWindowTxAck>
 800eaec:	6238      	str	r0, [r7, #32]

		/* ulTCPWindowTxAck() returns the number of bytes which have been acked,
		starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
		txStream. */
		if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0u ) )
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d020      	beq.n	800eb38 <prvHandleEstablished+0x122>
 800eaf6:	6a3b      	ldr	r3, [r7, #32]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d01d      	beq.n	800eb38 <prvHandleEstablished+0x122>
		{
			/* Just advancing the tail index, 'ulCount' bytes have been
			confirmed, and because there is new space in the txStream, the
			user/owner should be woken up. */
			/* _HT_ : only in case the socket's waiting? */
			if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0u, NULL, ( size_t ) ulCount, pdFALSE ) != 0u )
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800eb00:	2300      	movs	r3, #0
 800eb02:	9300      	str	r3, [sp, #0]
 800eb04:	6a3b      	ldr	r3, [r7, #32]
 800eb06:	2200      	movs	r2, #0
 800eb08:	2100      	movs	r1, #0
 800eb0a:	f7fe fa13 	bl	800cf34 <uxStreamBufferGet>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d011      	beq.n	800eb38 <prvHandleEstablished+0x122>
			{
				pxSocket->xEventBits |= eSOCKET_SEND;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	f043 0202 	orr.w	r2, r3, #2
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	601a      	str	r2, [r3, #0]

				#if ipconfigSUPPORT_SELECT_FUNCTION == 1
				{
					if( ( pxSocket->xSelectBits & eSELECT_WRITE ) != 0 )
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb24:	f003 0302 	and.w	r3, r3, #2
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d005      	beq.n	800eb38 <prvHandleEstablished+0x122>
					{
						pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	601a      	str	r2, [r3, #0]
		}
	}

	/* If this socket has a stream for transmission, add the data to the
	outgoing segment(s). */
	if( pxSocket->u.xTCP.txStream != NULL )
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d002      	beq.n	800eb46 <prvHandleEstablished+0x130>
	{
		prvTCPAddTxData( pxSocket );
 800eb40:	68f8      	ldr	r0, [r7, #12]
 800eb42:	f7ff fc9f 	bl	800e484 <prvTCPAddTxData>
	}

	pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800eb46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb48:	6a1a      	ldr	r2, [r3, #32]
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) ipTCP_FLAG_FIN ) != 0u ) )
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eb56:	f003 0320 	and.w	r3, r3, #32
 800eb5a:	b2db      	uxtb	r3, r3
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d105      	bne.n	800eb6c <prvHandleEstablished+0x156>
 800eb60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800eb64:	f003 0301 	and.w	r3, r3, #1
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d037      	beq.n	800ebdc <prvHandleEstablished+0x1c6>
	{
		/* Peer is requesting to stop, see if we're really finished. */
		xMayClose = pdTRUE;
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Checks are only necessary if we haven't sent a FIN yet. */
		if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eb76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb7a:	b2db      	uxtb	r3, r3
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d11c      	bne.n	800ebba <prvHandleEstablished+0x1a4>
		{
			/* xTCPWindowTxDone returns true when all Tx queues are empty. */
			bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 800eb80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb82:	f000 fea5 	bl	800f8d0 <xTCPWindowRxEmpty>
 800eb86:	61f8      	str	r0, [r7, #28]
			bTxDone     = xTCPWindowTxDone( pxTCPWindow );
 800eb88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb8a:	f001 f9e3 	bl	800ff54 <xTCPWindowTxDone>
 800eb8e:	61b8      	str	r0, [r7, #24]

			if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 800eb90:	69fb      	ldr	r3, [r7, #28]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d002      	beq.n	800eb9c <prvHandleEstablished+0x186>
 800eb96:	69bb      	ldr	r3, [r7, #24]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d102      	bne.n	800eba2 <prvHandleEstablished+0x18c>
				/* Refusing FIN: Rx incomp 1 optlen 4 tx done 1. */
				FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %lu tx done %ld\n",
					pxSocket->usLocalPort,
					pxSocket->u.xTCP.usRemotePort,
					bRxComplete, bTxDone ) );
				xMayClose = pdFALSE;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	63bb      	str	r3, [r7, #56]	; 0x38
 800eba0:	e00b      	b.n	800ebba <prvHandleEstablished+0x1a4>
			}
			else
			{
				lDistance = ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber );
 800eba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	441a      	add	r2, r3
 800eba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebaa:	691b      	ldr	r3, [r3, #16]
 800ebac:	1ad3      	subs	r3, r2, r3
 800ebae:	617b      	str	r3, [r7, #20]

				if( lDistance > 1 )
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	2b01      	cmp	r3, #1
 800ebb4:	dd01      	ble.n	800ebba <prvHandleEstablished+0x1a4>
				{
					FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %ld (cur %lu high %lu)\n",
						lDistance, pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber,
						pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );

					xMayClose = pdFALSE;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	63bb      	str	r3, [r7, #56]	; 0x38
			FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %ld (Rx %lu Len %ld, Tx %lu)\n",
				xMayClose, ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber, ulReceiveLength,
				pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ) );
		}

		if( xMayClose != pdFALSE )
 800ebba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d00d      	beq.n	800ebdc <prvHandleEstablished+0x1c6>
		{
			pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 800ebc0:	68fa      	ldr	r2, [r7, #12]
 800ebc2:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800ebc6:	f043 0320 	orr.w	r3, r3, #32
 800ebca:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
			xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	4619      	mov	r1, r3
 800ebd4:	68f8      	ldr	r0, [r7, #12]
 800ebd6:	f7ff fc7f 	bl	800e4d8 <prvTCPHandleFin>
 800ebda:	63f8      	str	r0, [r7, #60]	; 0x3c
		}
	}

	if( xMayClose == pdFALSE )
 800ebdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d12a      	bne.n	800ec38 <prvHandleEstablished+0x222>
	{
		pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 800ebe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe4:	2210      	movs	r2, #16
 800ebe6:	735a      	strb	r2, [r3, #13]

		if( ulReceiveLength != 0u )
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d016      	beq.n	800ec1c <prvHandleEstablished+0x206>
		{
			xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	3328      	adds	r3, #40	; 0x28
 800ebf2:	63fb      	str	r3, [r7, #60]	; 0x3c
			/* TCP-offsett equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
			pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	b2db      	uxtb	r3, r3
 800ebf8:	3314      	adds	r3, #20
 800ebfa:	b2db      	uxtb	r3, r3
 800ebfc:	009b      	lsls	r3, r3, #2
 800ebfe:	b2da      	uxtb	r2, r3
 800ec00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec02:	731a      	strb	r2, [r3, #12]

			if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ec0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec0e:	b2db      	uxtb	r3, r3
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d003      	beq.n	800ec1c <prvHandleEstablished+0x206>
			{
				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800ec14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec1a:	621a      	str	r2, [r3, #32]
		/* Now get data to be transmitted. */
		/* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
		can not	send-out both TCP options and also a full packet. Sending
		options (SACK) is always more urgent than sending data, which can be
		sent later. */
		if( uxOptionsLength == 0u )
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d10a      	bne.n	800ec38 <prvHandleEstablished+0x222>
		{
			/* prvTCPPrepareSend might allocate a bigger network buffer, if
			necessary. */
			lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800ec22:	683a      	ldr	r2, [r7, #0]
 800ec24:	68b9      	ldr	r1, [r7, #8]
 800ec26:	68f8      	ldr	r0, [r7, #12]
 800ec28:	f7ff fa44 	bl	800e0b4 <prvTCPPrepareSend>
 800ec2c:	6138      	str	r0, [r7, #16]
			if( lSendResult > 0 )
 800ec2e:	693b      	ldr	r3, [r7, #16]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	dd01      	ble.n	800ec38 <prvHandleEstablished+0x222>
			{
				xSendLength = ( BaseType_t ) lSendResult;
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}
	}

	return xSendLength;
 800ec38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3740      	adds	r7, #64	; 0x40
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}
	...

0800ec44 <prvSendData>:
 * ipconfigUSE_TCP_WIN is defined, and if only an ACK must be sent, it will be
 * checked if it would better be postponed for efficiency.
 */
static BaseType_t prvSendData( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer,
	uint32_t ulReceiveLength, BaseType_t xSendLength )
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b08a      	sub	sp, #40	; 0x28
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	60f8      	str	r0, [r7, #12]
 800ec4c:	60b9      	str	r1, [r7, #8]
 800ec4e:	607a      	str	r2, [r7, #4]
 800ec50:	603b      	str	r3, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	699b      	ldr	r3, [r3, #24]
 800ec58:	623b      	str	r3, [r7, #32]
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800ec5a:	6a3b      	ldr	r3, [r7, #32]
 800ec5c:	3322      	adds	r3, #34	; 0x22
 800ec5e:	61fb      	str	r3, [r7, #28]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	33dc      	adds	r3, #220	; 0xdc
 800ec64:	61bb      	str	r3, [r7, #24]
		const int32_t lMinLength = 0;
	#else
		int32_t lMinLength;
	#endif
#endif
	pxSocket->u.xTCP.ulRxCurWinSize = pxTCPWindow->xSize.ulRxWindowLength -
 800ec66:	69bb      	ldr	r3, [r7, #24]
 800ec68:	685a      	ldr	r2, [r3, #4]
									 ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulCurrentSequenceNumber );
 800ec6a:	69bb      	ldr	r3, [r7, #24]
 800ec6c:	6919      	ldr	r1, [r3, #16]
 800ec6e:	69bb      	ldr	r3, [r7, #24]
 800ec70:	699b      	ldr	r3, [r3, #24]
 800ec72:	1acb      	subs	r3, r1, r3
	pxSocket->u.xTCP.ulRxCurWinSize = pxTCPWindow->xSize.ulRxWindowLength -
 800ec74:	441a      	add	r2, r3
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	/* Free space in rxStream. */
	if( pxSocket->u.xTCP.rxStream != NULL )
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d006      	beq.n	800ec92 <prvSendData+0x4e>
	{
		ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f7fe fa48 	bl	800d11e <uxStreamBufferFrontSpace>
 800ec8e:	6278      	str	r0, [r7, #36]	; 0x24
 800ec90:	e002      	b.n	800ec98 <prvSendData+0x54>
	}
	else
	{
		ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec96:	627b      	str	r3, [r7, #36]	; 0x24
	}

	pxSocket->u.xTCP.ulRxCurWinSize = FreeRTOS_min_uint32( ulFrontSpace, pxSocket->u.xTCP.ulRxCurWinSize );
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800ec9e:	4619      	mov	r1, r3
 800eca0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eca2:	f7fe f9db 	bl	800d05c <FreeRTOS_min_uint32>
 800eca6:	4602      	mov	r2, r0
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	/* Set the time-out field, so that we'll be called by the IP-task in case no
	next message will be received. */
	lRxSpace = (int32_t)( pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber );
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ecb2:	69bb      	ldr	r3, [r7, #24]
 800ecb4:	691b      	ldr	r3, [r3, #16]
 800ecb6:	1ad3      	subs	r3, r2, r3
 800ecb8:	617b      	str	r3, [r7, #20]
	#if ipconfigUSE_TCP_WIN == 1
	{

		#if( ipconfigTCP_ACK_EARLIER_PACKET != 0 )
		{
			lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usCurMSS );
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ecc0:	005b      	lsls	r3, r3, #1
 800ecc2:	613b      	str	r3, [r7, #16]
		}
		#endif /* ipconfigTCP_ACK_EARLIER_PACKET */

		/* In case we're receiving data continuously, we might postpone sending
		an ACK to gain performance. */
		if( ( ulReceiveLength > 0 ) &&							/* Data was sent to this socket. */
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d04f      	beq.n	800ed6a <prvSendData+0x126>
 800ecca:	697a      	ldr	r2, [r7, #20]
 800eccc:	693b      	ldr	r3, [r7, #16]
 800ecce:	429a      	cmp	r2, r3
 800ecd0:	db4b      	blt.n	800ed6a <prvSendData+0x126>
			( lRxSpace >= lMinLength ) &&						/* There is Rx space for more data. */
			( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&	/* Not in a closure phase. */
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ecd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecdc:	b2db      	uxtb	r3, r3
			( lRxSpace >= lMinLength ) &&						/* There is Rx space for more data. */
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d143      	bne.n	800ed6a <prvSendData+0x126>
			( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&	/* Not in a closure phase. */
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	2b28      	cmp	r3, #40	; 0x28
 800ece6:	d140      	bne.n	800ed6a <prvSendData+0x126>
			( xSendLength == ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) ) && /* No Tx data or options to be sent. */
			( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) &&	/* Connection established. */
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
			( xSendLength == ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) ) && /* No Tx data or options to be sent. */
 800ecee:	2b05      	cmp	r3, #5
 800ecf0:	d13b      	bne.n	800ed6a <prvSendData+0x126>
			( pxTCPHeader->ucTCPFlags == ipTCP_FLAG_ACK ) )		/* There are no other flags than an ACK. */
 800ecf2:	69fb      	ldr	r3, [r7, #28]
 800ecf4:	7b5b      	ldrb	r3, [r3, #13]
			( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) &&	/* Connection established. */
 800ecf6:	2b10      	cmp	r3, #16
 800ecf8:	d137      	bne.n	800ed6a <prvSendData+0x126>
		{
			if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d00c      	beq.n	800ed20 <prvSendData+0xdc>
			{
				/* There was still a delayed in queue, delete it. */
				if( pxSocket->u.xTCP.pxAckMessage != 0 )
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d004      	beq.n	800ed18 <prvSendData+0xd4>
				{
					vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed12:	4618      	mov	r0, r3
 800ed14:	f001 fe5e 	bl	80109d4 <vReleaseNetworkBufferAndDescriptor>
				}

				pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 800ed18:	68bb      	ldr	r3, [r7, #8]
 800ed1a:	681a      	ldr	r2, [r3, #0]
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	67da      	str	r2, [r3, #124]	; 0x7c
			}
			if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||	/* Received a small message. */
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ed26:	461a      	mov	r2, r3
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	d807      	bhi.n	800ed3e <prvSendData+0xfa>
				( lRxSpace < ( int32_t ) ( 2U * pxSocket->u.xTCP.usCurMSS ) ) )	/* There are less than 2 x MSS space in the Rx buffer. */
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ed34:	005b      	lsls	r3, r3, #1
 800ed36:	461a      	mov	r2, r3
			if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||	/* Received a small message. */
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	dd04      	ble.n	800ed48 <prvSendData+0x104>
			{
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_MIN_TICKS( DELAYED_ACK_SHORT_DELAY_MS );
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	2202      	movs	r2, #2
 800ed42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ed46:	e003      	b.n	800ed50 <prvSendData+0x10c>
			else
			{
				/* Normally a delayed ACK should wait 200 ms for a next incoming
				packet.  Only wait 20 ms here to gain performance.  A slow ACK
				for full-size message. */
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_MIN_TICKS( DELAYED_ACK_LONGER_DELAY_MS );
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	2214      	movs	r2, #20
 800ed4c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			}

			if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) != pdFALSE ) )
 800ed50:	4b1a      	ldr	r3, [pc, #104]	; (800edbc <prvSendData+0x178>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	2b01      	cmp	r3, #1
 800ed56:	dd02      	ble.n	800ed5e <prvSendData+0x11a>
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ed5c:	2b17      	cmp	r3, #23
					pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
					xSendLength,
					pxSocket->u.xTCP.usTimeout, lRxSpace ) );
			}

			*ppxNetworkBuffer = NULL;
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	2200      	movs	r2, #0
 800ed62:	601a      	str	r2, [r3, #0]
			xSendLength = 0;
 800ed64:	2300      	movs	r3, #0
 800ed66:	603b      	str	r3, [r7, #0]
 800ed68:	e011      	b.n	800ed8e <prvSendData+0x14a>
		}
		else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d00d      	beq.n	800ed8e <prvSendData+0x14a>
		{
			/* As an ACK is not being delayed, remove any earlier delayed ACK
			message. */
			if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d004      	beq.n	800ed88 <prvSendData+0x144>
			{
				vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed82:	4618      	mov	r0, r3
 800ed84:	f001 fe26 	bl	80109d4 <vReleaseNetworkBufferAndDescriptor>
			}

			pxSocket->u.xTCP.pxAckMessage = NULL;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	67da      	str	r2, [r3, #124]	; 0x7c
		( void ) pxTCPHeader;
		( void ) lRxSpace;
	}
	#endif /* ipconfigUSE_TCP_WIN */

	if( xSendLength != 0 )
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d00d      	beq.n	800edb0 <prvSendData+0x16c>
	{
		if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) != pdFALSE ) )
 800ed94:	4b09      	ldr	r3, [pc, #36]	; (800edbc <prvSendData+0x178>)
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	2b01      	cmp	r3, #1
 800ed9a:	dd02      	ble.n	800eda2 <prvSendData+0x15e>
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800eda0:	2b17      	cmp	r3, #23
				xSendLength ) );
		}

		/* Set the parameter 'xReleaseAfterSend' to the value of
		ipconfigZERO_COPY_TX_DRIVER. */
		prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800eda2:	68bb      	ldr	r3, [r7, #8]
 800eda4:	6819      	ldr	r1, [r3, #0]
 800eda6:	683a      	ldr	r2, [r7, #0]
 800eda8:	2300      	movs	r3, #0
 800edaa:	68f8      	ldr	r0, [r7, #12]
 800edac:	f7fe fba2 	bl	800d4f4 <prvTCPReturnPacket>
			*ppxNetworkBuffer = NULL;
		}
		#endif
	}

	return xSendLength;
 800edb0:	683b      	ldr	r3, [r7, #0]
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	3728      	adds	r7, #40	; 0x28
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}
 800edba:	bf00      	nop
 800edbc:	20004ee0 	.word	0x20004ee0

0800edc0 <prvTCPHandleState>:
 *
 * As these functions are declared static, and they're called from one location
 * only, most compilers will inline them, thus avoiding a call and return.
 */
static BaseType_t prvTCPHandleState( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer )
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b08c      	sub	sp, #48	; 0x30
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
 800edc8:	6039      	str	r1, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	699b      	ldr	r3, [r3, #24]
 800edd0:	62bb      	str	r3, [r7, #40]	; 0x28
TCPHeader_t *pxTCPHeader = &( pxTCPPacket->xTCPHeader );
 800edd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edd4:	3322      	adds	r3, #34	; 0x22
 800edd6:	627b      	str	r3, [r7, #36]	; 0x24
BaseType_t xSendLength = 0;
 800edd8:	2300      	movs	r3, #0
 800edda:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t ulReceiveLength;	/* Number of bytes contained in the TCP message. */
uint8_t *pucRecvData;
uint32_t ulSequenceNumber = FreeRTOS_ntohl (pxTCPHeader->ulSequenceNumber);
 800eddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edde:	685b      	ldr	r3, [r3, #4]
 800ede0:	061a      	lsls	r2, r3, #24
 800ede2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ede4:	685b      	ldr	r3, [r3, #4]
 800ede6:	021b      	lsls	r3, r3, #8
 800ede8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800edec:	431a      	orrs	r2, r3
 800edee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf0:	685b      	ldr	r3, [r3, #4]
 800edf2:	0a1b      	lsrs	r3, r3, #8
 800edf4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800edf8:	431a      	orrs	r2, r3
 800edfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edfc:	685b      	ldr	r3, [r3, #4]
 800edfe:	0e1b      	lsrs	r3, r3, #24
 800ee00:	4313      	orrs	r3, r2
 800ee02:	623b      	str	r3, [r7, #32]
	/* uxOptionsLength: the size of the options to be sent (always a multiple of
	4 bytes)
	1. in the SYN phase, we shall communicate the MSS
	2. in case of a SACK, Selective ACK, ack a segment which comes in
	out-of-order. */
UBaseType_t uxOptionsLength = 0u;
 800ee04:	2300      	movs	r3, #0
 800ee06:	61fb      	str	r3, [r7, #28]
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800ee08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee0a:	7b5b      	ldrb	r3, [r3, #13]
 800ee0c:	76fb      	strb	r3, [r7, #27]
TCPWindow_t *pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	33dc      	adds	r3, #220	; 0xdc
 800ee12:	617b      	str	r3, [r7, #20]

	/* First get the length and the position of the received data, if any.
	pucRecvData will point to the first byte of the TCP payload. */
	ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	f107 020c 	add.w	r2, r7, #12
 800ee1c:	4611      	mov	r1, r2
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f7ff fbff 	bl	800e622 <prvCheckRxData>
 800ee24:	4603      	mov	r3, r0
 800ee26:	613b      	str	r3, [r7, #16]

	if( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED )
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800ee2e:	2b04      	cmp	r3, #4
 800ee30:	d90c      	bls.n	800ee4c <prvTCPHandleState+0x8c>
	{
		if ( pxTCPWindow->rx.ulCurrentSequenceNumber == ulSequenceNumber + 1u )
 800ee32:	697b      	ldr	r3, [r7, #20]
 800ee34:	691a      	ldr	r2, [r3, #16]
 800ee36:	6a3b      	ldr	r3, [r7, #32]
 800ee38:	3301      	adds	r3, #1
 800ee3a:	429a      	cmp	r2, r3
 800ee3c:	d106      	bne.n	800ee4c <prvTCPHandleState+0x8c>
		{
			/* This is most probably a keep-alive message from peer.  Setting
			'bWinChange' doesn't cause a window-size-change, the flag is used
			here to force sending an immediate ACK. */
			pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800ee3e:	687a      	ldr	r2, [r7, #4]
 800ee40:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800ee44:	f043 0301 	orr.w	r3, r3, #1
 800ee48:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
		}
	}

	/* Keep track of the highest sequence number that might be expected within
	this connection. */
	if( ( ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber ) ) > 0 )
 800ee4c:	6a3a      	ldr	r2, [r7, #32]
 800ee4e:	693b      	ldr	r3, [r7, #16]
 800ee50:	441a      	add	r2, r3
 800ee52:	697b      	ldr	r3, [r7, #20]
 800ee54:	699b      	ldr	r3, [r3, #24]
 800ee56:	1ad3      	subs	r3, r2, r3
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	dd04      	ble.n	800ee66 <prvTCPHandleState+0xa6>
	{
		pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800ee5c:	6a3a      	ldr	r2, [r7, #32]
 800ee5e:	693b      	ldr	r3, [r7, #16]
 800ee60:	441a      	add	r2, r3
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	619a      	str	r2, [r3, #24]
	}

	/* Storing data may result in a fatal error if malloc() fails. */
	if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 800ee66:	68f9      	ldr	r1, [r7, #12]
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	681a      	ldr	r2, [r3, #0]
 800ee6c:	693b      	ldr	r3, [r7, #16]
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	f7ff fc3e 	bl	800e6f0 <prvStoreRxData>
 800ee74:	4603      	mov	r3, r0
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	da03      	bge.n	800ee82 <prvTCPHandleState+0xc2>
	{
		xSendLength = -1;
 800ee7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ee7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee80:	e09e      	b.n	800efc0 <prvTCPHandleState+0x200>
	}
	else
	{
		uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	4619      	mov	r1, r3
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f7ff fca5 	bl	800e7d8 <prvSetOptions>
 800ee8e:	61f8      	str	r0, [r7, #28]

		if( ( pxSocket->u.xTCP.ucTCPState == eSYN_RECEIVED ) && ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) == ipTCP_FLAG_SYN ) )
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800ee96:	2b04      	cmp	r3, #4
 800ee98:	d108      	bne.n	800eeac <prvTCPHandleState+0xec>
 800ee9a:	7efb      	ldrb	r3, [r7, #27]
 800ee9c:	f003 031f 	and.w	r3, r3, #31
 800eea0:	2b02      	cmp	r3, #2
 800eea2:	d103      	bne.n	800eeac <prvTCPHandleState+0xec>

			/* In eSYN_RECEIVED a simple ACK is expected, but apparently the
			'SYN+ACK' didn't arrive.  Step back to the previous state in which
			a first incoming SYN is handled.  The SYN was counted already so
			decrease it first. */
			vTCPStateChange( pxSocket, eSYN_FIRST );
 800eea4:	2103      	movs	r1, #3
 800eea6:	6878      	ldr	r0, [r7, #4]
 800eea8:	f7fe ffc5 	bl	800de36 <vTCPStateChange>
		}

		if( ( ( ucTCPFlags & ipTCP_FLAG_FIN ) != 0u ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 800eeac:	7efb      	ldrb	r3, [r7, #27]
 800eeae:	f003 0301 	and.w	r3, r3, #1
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d022      	beq.n	800eefc <prvTCPHandleState+0x13c>
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eebc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800eec0:	b2db      	uxtb	r3, r3
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d11a      	bne.n	800eefc <prvTCPHandleState+0x13c>
		{
			/* It's the first time a FIN has been received, remember its
			sequence number. */
			pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800eec6:	6a3a      	ldr	r2, [r7, #32]
 800eec8:	693b      	ldr	r3, [r7, #16]
 800eeca:	441a      	add	r2, r3
 800eecc:	697b      	ldr	r3, [r7, #20]
 800eece:	615a      	str	r2, [r3, #20]
			pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 800eed0:	687a      	ldr	r2, [r7, #4]
 800eed2:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800eed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eeda:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

			/* Was peer the first one to send a FIN? */
			if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eee8:	b2db      	uxtb	r3, r3
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d106      	bne.n	800eefc <prvTCPHandleState+0x13c>
			{
				/* If so, don't send the-last-ACK. */
				pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 800eeee:	687a      	ldr	r2, [r7, #4]
 800eef0:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800eef4:	f043 0302 	orr.w	r3, r3, #2
 800eef8:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
			}
		}

		switch (pxSocket->u.xTCP.ucTCPState)
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800ef02:	2b0b      	cmp	r3, #11
 800ef04:	d85b      	bhi.n	800efbe <prvTCPHandleState+0x1fe>
 800ef06:	a201      	add	r2, pc, #4	; (adr r2, 800ef0c <prvTCPHandleState+0x14c>)
 800ef08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef0c:	0800efbf 	.word	0x0800efbf
 800ef10:	0800efbf 	.word	0x0800efbf
 800ef14:	0800ef8f 	.word	0x0800ef8f
 800ef18:	0800ef3d 	.word	0x0800ef3d
 800ef1c:	0800ef8f 	.word	0x0800ef8f
 800ef20:	0800ef9f 	.word	0x0800ef9f
 800ef24:	0800efaf 	.word	0x0800efaf
 800ef28:	0800efaf 	.word	0x0800efaf
 800ef2c:	0800efbf 	.word	0x0800efbf
 800ef30:	0800efbf 	.word	0x0800efbf
 800ef34:	0800efaf 	.word	0x0800efaf
 800ef38:	0800efbf 	.word	0x0800efbf
							socket. */
			{
				/* A new socket has been created, reply with a SYN+ACK.
				Acknowledge with seq+1 because the SYN is seen as pseudo data
				with len = 1. */
				uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPPacket );
 800ef3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	f7fe ff01 	bl	800dd46 <prvSetSynAckOptions>
 800ef44:	61f8      	str	r0, [r7, #28]
				pxTCPHeader->ucTCPFlags = ipTCP_FLAG_SYN | ipTCP_FLAG_ACK;
 800ef46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef48:	2212      	movs	r2, #18
 800ef4a:	735a      	strb	r2, [r3, #13]

				xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800ef4c:	69fb      	ldr	r3, [r7, #28]
 800ef4e:	3328      	adds	r3, #40	; 0x28
 800ef50:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
				uxOptionsLength is a multiple of 4.  The complete expression is:
				ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
				pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800ef52:	69fb      	ldr	r3, [r7, #28]
 800ef54:	b2db      	uxtb	r3, r3
 800ef56:	3314      	adds	r3, #20
 800ef58:	b2db      	uxtb	r3, r3
 800ef5a:	009b      	lsls	r3, r3, #2
 800ef5c:	b2da      	uxtb	r2, r3
 800ef5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef60:	731a      	strb	r2, [r3, #12]
				vTCPStateChange( pxSocket, eSYN_RECEIVED );
 800ef62:	2104      	movs	r1, #4
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f7fe ff66 	bl	800de36 <vTCPStateChange>

				pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1u;
 800ef6a:	6a3b      	ldr	r3, [r7, #32]
 800ef6c:	1c5a      	adds	r2, r3, #1
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	619a      	str	r2, [r3, #24]
 800ef72:	697b      	ldr	r3, [r7, #20]
 800ef74:	699a      	ldr	r2, [r3, #24]
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	611a      	str	r2, [r3, #16]
				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1u; /* because we send a TCP_SYN. */
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	69db      	ldr	r3, [r3, #28]
 800ef7e:	1c5a      	adds	r2, r3, #1
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	635a      	str	r2, [r3, #52]	; 0x34
 800ef84:	697b      	ldr	r3, [r7, #20]
 800ef86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	621a      	str	r2, [r3, #32]
			}
			break;
 800ef8c:	e018      	b.n	800efc0 <prvTCPHandleState+0x200>
		case eCONNECT_SYN:	/* (client) also called SYN_SENT: we've just send a
							SYN, expect	a SYN+ACK and send a ACK now. */
			/* Fall through */
		case eSYN_RECEIVED:	/* (server) we've had a SYN, replied with SYN+SCK
							expect a ACK and do nothing. */
			xSendLength = prvHandleSynReceived( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 800ef8e:	69fb      	ldr	r3, [r7, #28]
 800ef90:	693a      	ldr	r2, [r7, #16]
 800ef92:	6839      	ldr	r1, [r7, #0]
 800ef94:	6878      	ldr	r0, [r7, #4]
 800ef96:	f7ff fc7d 	bl	800e894 <prvHandleSynReceived>
 800ef9a:	62f8      	str	r0, [r7, #44]	; 0x2c
			break;
 800ef9c:	e010      	b.n	800efc0 <prvTCPHandleState+0x200>
		case eESTABLISHED:	/* (server + client) an open connection, data
							received can be	delivered to the user. The normal
							state for the data transfer phase of the connection
							The closing states are also handled here with the
							use of some flags. */
			xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 800ef9e:	69fb      	ldr	r3, [r7, #28]
 800efa0:	693a      	ldr	r2, [r7, #16]
 800efa2:	6839      	ldr	r1, [r7, #0]
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f7ff fd36 	bl	800ea16 <prvHandleEstablished>
 800efaa:	62f8      	str	r0, [r7, #44]	; 0x2c
			break;
 800efac:	e008      	b.n	800efc0 <prvTCPHandleState+0x200>
			/* Fall through */
		case eFIN_WAIT_1:	/* (server + client) waiting for a connection termination request from the remote TCP,
							 * or an acknowledgement of the connection termination request previously sent. */
			/* Fall through */
		case eFIN_WAIT_2:	/* (server + client) waiting for a connection termination request from the remote TCP. */
			xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	4619      	mov	r1, r3
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	f7ff fa8f 	bl	800e4d8 <prvTCPHandleFin>
 800efba:	62f8      	str	r0, [r7, #44]	; 0x2c
			break;
 800efbc:	e000      	b.n	800efc0 <prvTCPHandleState+0x200>
							a MSL (maximum segment lifetime).]  These states are
							implemented implicitly by settings flags like
							'bFinSent', 'bFinRecv', and 'bFinAcked'. */
			break;
		default:
			break;
 800efbe:	bf00      	nop
		}
	}

	if( xSendLength > 0 )
 800efc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	dd06      	ble.n	800efd4 <prvTCPHandleState+0x214>
	{
		xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 800efc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc8:	693a      	ldr	r2, [r7, #16]
 800efca:	6839      	ldr	r1, [r7, #0]
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f7ff fe39 	bl	800ec44 <prvSendData>
 800efd2:	62f8      	str	r0, [r7, #44]	; 0x2c
	}

	return xSendLength;
 800efd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800efd6:	4618      	mov	r0, r3
 800efd8:	3730      	adds	r7, #48	; 0x30
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}
 800efde:	bf00      	nop

0800efe0 <prvTCPSendReset>:
/*-----------------------------------------------------------*/

static BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b084      	sub	sp, #16
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
	#if( ipconfigIGNORE_UNKNOWN_PACKETS == 0 )
	{
	TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	699b      	ldr	r3, [r3, #24]
 800efec:	60fb      	str	r3, [r7, #12]
	const BaseType_t xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + 0u );	/* Plus 0 options. */
 800efee:	2328      	movs	r3, #40	; 0x28
 800eff0:	60bb      	str	r3, [r7, #8]

		pxTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_ACK | ipTCP_FLAG_RST;
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	2214      	movs	r2, #20
 800eff6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER + 0u ) << 2;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	2250      	movs	r2, #80	; 0x50
 800effe:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

		prvTCPReturnPacket( NULL, pxNetworkBuffer, ( uint32_t ) xSendLength, pdFALSE );
 800f002:	68ba      	ldr	r2, [r7, #8]
 800f004:	2300      	movs	r3, #0
 800f006:	6879      	ldr	r1, [r7, #4]
 800f008:	2000      	movs	r0, #0
 800f00a:	f7fe fa73 	bl	800d4f4 <prvTCPReturnPacket>

	/* Remove compiler warnings if ipconfigIGNORE_UNKNOWN_PACKETS == 1. */
	( void ) pxNetworkBuffer;

	/* The packet was not consumed. */
	return pdFAIL;
 800f00e:	2300      	movs	r3, #0
}
 800f010:	4618      	mov	r0, r3
 800f012:	3710      	adds	r7, #16
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}

0800f018 <prvSocketSetMSS>:
/*-----------------------------------------------------------*/

static void prvSocketSetMSS( FreeRTOS_Socket_t *pxSocket )
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b084      	sub	sp, #16
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
uint32_t ulMSS = ipconfigTCP_MSS;
 800f020:	f44f 6391 	mov.w	r3, #1160	; 0x488
 800f024:	60fb      	str	r3, [r7, #12]

	if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.ulRemoteIP ) ^ *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) != 0ul )
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f02a:	061a      	lsls	r2, r3, #24
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f030:	021b      	lsls	r3, r3, #8
 800f032:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f036:	431a      	orrs	r2, r3
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f03c:	0a1b      	lsrs	r3, r3, #8
 800f03e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f042:	431a      	orrs	r2, r3
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f048:	0e1b      	lsrs	r3, r3, #24
 800f04a:	431a      	orrs	r2, r3
 800f04c:	4b0e      	ldr	r3, [pc, #56]	; (800f088 <prvSocketSetMSS+0x70>)
 800f04e:	695b      	ldr	r3, [r3, #20]
 800f050:	405a      	eors	r2, r3
 800f052:	4b0e      	ldr	r3, [pc, #56]	; (800f08c <prvSocketSetMSS+0x74>)
 800f054:	685b      	ldr	r3, [r3, #4]
 800f056:	4013      	ands	r3, r2
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d005      	beq.n	800f068 <prvSocketSetMSS+0x50>
	{
		/* Data for this peer will pass through a router, and maybe through
		the internet.  Limit the MSS to 1400 bytes or less. */
		ulMSS = FreeRTOS_min_uint32( ( uint32_t ) REDUCED_MSS_THROUGH_INTERNET, ulMSS );
 800f05c:	68f9      	ldr	r1, [r7, #12]
 800f05e:	f44f 60af 	mov.w	r0, #1400	; 0x578
 800f062:	f7fd fffb 	bl	800d05c <FreeRTOS_min_uint32>
 800f066:	60f8      	str	r0, [r7, #12]
	}

	FreeRTOS_debug_printf( ( "prvSocketSetMSS: %lu bytes for %lxip:%u\n", ulMSS, pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort ) );

	pxSocket->u.xTCP.usInitMSS = pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ulMSS;
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	b29a      	uxth	r2, r3
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800f07e:	bf00      	nop
 800f080:	3710      	adds	r7, #16
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}
 800f086:	bf00      	nop
 800f088:	200001b0 	.word	0x200001b0
 800f08c:	20004e60 	.word	0x20004e60

0800f090 <xProcessReceivedTCPPacket>:
 *		prvTCPSendRepeated()
 *			prvTCPReturnPacket()		// Prepare for returning
 *			xNetworkInterfaceOutput()	// Sends data to the NIC
*/
BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b08c      	sub	sp, #48	; 0x30
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
FreeRTOS_Socket_t *pxSocket;
TCPPacket_t * pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	699b      	ldr	r3, [r3, #24]
 800f09c:	627b      	str	r3, [r7, #36]	; 0x24
uint16_t ucTCPFlags;
uint32_t ulLocalIP;
uint16_t xLocalPort;
uint32_t ulRemoteIP;
uint16_t xRemotePort;
BaseType_t xResult = pdPASS;
 800f09e:	2301      	movs	r3, #1
 800f0a0:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check for a minimum packet size. */
    if( pxNetworkBuffer->xDataLength >= 
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	69db      	ldr	r3, [r3, #28]
 800f0a6:	2b35      	cmp	r3, #53	; 0x35
 800f0a8:	d95a      	bls.n	800f160 <xProcessReceivedTCPPacket+0xd0>
        ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER )
    {
        ucTCPFlags = pxTCPPacket->xTCPHeader.ucTCPFlags;
 800f0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f0b0:	847b      	strh	r3, [r7, #34]	; 0x22
        ulLocalIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulDestinationIPAddress );
 800f0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b4:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800f0b8:	061a      	lsls	r2, r3, #24
 800f0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0bc:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800f0c0:	021b      	lsls	r3, r3, #8
 800f0c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f0c6:	431a      	orrs	r2, r3
 800f0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ca:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800f0ce:	0a1b      	lsrs	r3, r3, #8
 800f0d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f0d4:	431a      	orrs	r2, r3
 800f0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d8:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800f0dc:	0e1b      	lsrs	r3, r3, #24
 800f0de:	4313      	orrs	r3, r2
 800f0e0:	61fb      	str	r3, [r7, #28]
        xLocalPort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usDestinationPort );
 800f0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f0e6:	b29b      	uxth	r3, r3
 800f0e8:	021b      	lsls	r3, r3, #8
 800f0ea:	b21a      	sxth	r2, r3
 800f0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f0f0:	b29b      	uxth	r3, r3
 800f0f2:	0a1b      	lsrs	r3, r3, #8
 800f0f4:	b29b      	uxth	r3, r3
 800f0f6:	b21b      	sxth	r3, r3
 800f0f8:	4313      	orrs	r3, r2
 800f0fa:	b21b      	sxth	r3, r3
 800f0fc:	837b      	strh	r3, [r7, #26]
        ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 800f0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f100:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800f104:	061a      	lsls	r2, r3, #24
 800f106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f108:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800f10c:	021b      	lsls	r3, r3, #8
 800f10e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f112:	431a      	orrs	r2, r3
 800f114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f116:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800f11a:	0a1b      	lsrs	r3, r3, #8
 800f11c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f120:	431a      	orrs	r2, r3
 800f122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f124:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800f128:	0e1b      	lsrs	r3, r3, #24
 800f12a:	4313      	orrs	r3, r2
 800f12c:	617b      	str	r3, [r7, #20]
        xRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 800f12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f130:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f132:	b29b      	uxth	r3, r3
 800f134:	021b      	lsls	r3, r3, #8
 800f136:	b21a      	sxth	r2, r3
 800f138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f13a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f13c:	b29b      	uxth	r3, r3
 800f13e:	0a1b      	lsrs	r3, r3, #8
 800f140:	b29b      	uxth	r3, r3
 800f142:	b21b      	sxth	r3, r3
 800f144:	4313      	orrs	r3, r2
 800f146:	b21b      	sxth	r3, r3
 800f148:	827b      	strh	r3, [r7, #18]

        /* Find the destination socket, and if not found: return a socket listing to
        the destination PORT. */
        pxSocket = ( FreeRTOS_Socket_t * )pxTCPSocketLookup( ulLocalIP, xLocalPort, ulRemoteIP, xRemotePort );
 800f14a:	8b79      	ldrh	r1, [r7, #26]
 800f14c:	8a7b      	ldrh	r3, [r7, #18]
 800f14e:	697a      	ldr	r2, [r7, #20]
 800f150:	69f8      	ldr	r0, [r7, #28]
 800f152:	f7fd fb5d 	bl	800c810 <pxTCPSocketLookup>
 800f156:	62f8      	str	r0, [r7, #44]	; 0x2c
    else
    {
        return pdFAIL;
    }

	if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) == pdFALSE ) )
 800f158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d00b      	beq.n	800f176 <xProcessReceivedTCPPacket+0xe6>
 800f15e:	e001      	b.n	800f164 <xProcessReceivedTCPPacket+0xd4>
        return pdFAIL;
 800f160:	2300      	movs	r3, #0
 800f162:	e0b2      	b.n	800f2ca <xProcessReceivedTCPPacket+0x23a>
	if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) == pdFALSE ) )
 800f164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f166:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800f16a:	4618      	mov	r0, r3
 800f16c:	f7fe f856 	bl	800d21c <prvTCPSocketIsActive>
 800f170:	4603      	mov	r3, r0
 800f172:	2b00      	cmp	r3, #0
 800f174:	d110      	bne.n	800f198 <xProcessReceivedTCPPacket+0x108>
		the other party will get a ECONN error.  There are two exceptions:
		1) A packet that already has the RST flag set.
		2) A packet that only has the ACK flag set.
		A packet with only the ACK flag set might be the last ACK in
	 	a three-way hand-shake that closes a connection. */
		if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) != ipTCP_FLAG_ACK ) &&
 800f176:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f178:	f003 031f 	and.w	r3, r3, #31
 800f17c:	2b10      	cmp	r3, #16
 800f17e:	d008      	beq.n	800f192 <xProcessReceivedTCPPacket+0x102>
			( ( ucTCPFlags & ipTCP_FLAG_RST ) == 0u ) )
 800f180:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f182:	f003 0304 	and.w	r3, r3, #4
		if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) != ipTCP_FLAG_ACK ) &&
 800f186:	2b00      	cmp	r3, #0
 800f188:	d103      	bne.n	800f192 <xProcessReceivedTCPPacket+0x102>
		{
			prvTCPSendReset( pxNetworkBuffer );
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	4618      	mov	r0, r3
 800f18e:	f7ff ff27 	bl	800efe0 <prvTCPSendReset>
		}

		/* The packet can't be handled. */
		xResult = pdFAIL;
 800f192:	2300      	movs	r3, #0
 800f194:	62bb      	str	r3, [r7, #40]	; 0x28
 800f196:	e04d      	b.n	800f234 <xProcessReceivedTCPPacket+0x1a4>
	}
	else
	{
		pxSocket->u.xTCP.ucRepCount = 0u;
 800f198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f19a:	2200      	movs	r2, #0
 800f19c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

		if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
 800f1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800f1a6:	2b01      	cmp	r3, #1
 800f1a8:	d11c      	bne.n	800f1e4 <xProcessReceivedTCPPacket+0x154>
		{
			/* The matching socket is in a listening state.  Test if the peer
			has set the SYN flag. */
			if( ( ucTCPFlags & ipTCP_FLAG_CTRL ) != ipTCP_FLAG_SYN )
 800f1aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f1ac:	f003 031f 	and.w	r3, r3, #31
 800f1b0:	2b02      	cmp	r3, #2
 800f1b2:	d00b      	beq.n	800f1cc <xProcessReceivedTCPPacket+0x13c>
				FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %lxip:%u to port %u\n",
					prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), ulRemoteIP, xRemotePort, xLocalPort ) );
				}
				#endif /* ipconfigHAS_DEBUG_PRINTF */

				if( ( ucTCPFlags & ipTCP_FLAG_RST ) == 0u )
 800f1b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f1b6:	f003 0304 	and.w	r3, r3, #4
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d103      	bne.n	800f1c6 <xProcessReceivedTCPPacket+0x136>
				{
					prvTCPSendReset( pxNetworkBuffer );
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f7ff ff0d 	bl	800efe0 <prvTCPSendReset>
				}
				xResult = pdFAIL;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800f1ca:	e033      	b.n	800f234 <xProcessReceivedTCPPacket+0x1a4>
			else
			{
				/* prvHandleListen() will either return a newly created socket
				(if bReuseSocket is false), otherwise it returns the current
				socket which will later get connected. */
				pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	4619      	mov	r1, r3
 800f1d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1d2:	f000 f87e 	bl	800f2d2 <prvHandleListen>
 800f1d6:	62f8      	str	r0, [r7, #44]	; 0x2c

				if( pxSocket == NULL )
 800f1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d12a      	bne.n	800f234 <xProcessReceivedTCPPacket+0x1a4>
				{
					xResult = pdFAIL;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	62bb      	str	r3, [r7, #40]	; 0x28
 800f1e2:	e027      	b.n	800f234 <xProcessReceivedTCPPacket+0x1a4>
		}	/* if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN ). */
		else
		{
			/* This is not a socket in listening mode. Check for the RST
			flag. */
			if( ( ucTCPFlags & ipTCP_FLAG_RST ) != 0u )
 800f1e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f1e6:	f003 0304 	and.w	r3, r3, #4
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d006      	beq.n	800f1fc <xProcessReceivedTCPPacket+0x16c>
			{
				/* The target socket is not in a listening state, any RST packet
				will cause the socket to be closed. */
				FreeRTOS_debug_printf( ( "TCP: RST received from %lxip:%u for %u\n", ulRemoteIP, xRemotePort, xLocalPort ) );
				/* _HT_: should indicate that 'ECONNRESET' must be returned to the used during next API. */
				vTCPStateChange( pxSocket, eCLOSED );
 800f1ee:	2100      	movs	r1, #0
 800f1f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1f2:	f7fe fe20 	bl	800de36 <vTCPStateChange>

				/* The packet cannot be handled. */
				xResult = pdFAIL;
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800f1fa:	e01b      	b.n	800f234 <xProcessReceivedTCPPacket+0x1a4>
			}
			else if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) == ipTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) )
 800f1fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f1fe:	f003 031f 	and.w	r3, r3, #31
 800f202:	2b02      	cmp	r3, #2
 800f204:	d107      	bne.n	800f216 <xProcessReceivedTCPPacket+0x186>
 800f206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f208:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800f20c:	2b04      	cmp	r3, #4
 800f20e:	d902      	bls.n	800f216 <xProcessReceivedTCPPacket+0x186>
			{
				/* SYN flag while this socket is already connected. */
				FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %lxip:%u\n", ulRemoteIP, xRemotePort ) );

				/* The packet cannot be handled. */
				xResult = pdFAIL;
 800f210:	2300      	movs	r3, #0
 800f212:	62bb      	str	r3, [r7, #40]	; 0x28
 800f214:	e00e      	b.n	800f234 <xProcessReceivedTCPPacket+0x1a4>
			else
			{
				/* Update the copy of the TCP header only (skipping eth and IP
				headers).  It might be used later on, whenever data must be sent
				to the peer. */
				const BaseType_t lOffset = ( BaseType_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER );
 800f216:	2322      	movs	r3, #34	; 0x22
 800f218:	60fb      	str	r3, [r7, #12]
				memcpy( pxSocket->u.xTCP.xPacket.u.ucLastPacket + lOffset, pxNetworkBuffer->pucEthernetBuffer + lOffset, ipSIZE_OF_TCP_HEADER );
 800f21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f21c:	f103 0282 	add.w	r2, r3, #130	; 0x82
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	18d0      	adds	r0, r2, r3
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	699a      	ldr	r2, [r3, #24]
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	4413      	add	r3, r2
 800f22c:	2214      	movs	r2, #20
 800f22e:	4619      	mov	r1, r3
 800f230:	f001 fee5 	bl	8010ffe <memcpy>
			}
		}
	}

	if( xResult != pdFAIL )
 800f234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f236:	2b00      	cmp	r3, #0
 800f238:	d046      	beq.n	800f2c8 <xProcessReceivedTCPPacket+0x238>
	{
		/* Touch the alive timers because we received a message	for this
		socket. */
		prvTCPTouchSocket( pxSocket );
 800f23a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f23c:	f7fe fdd7 	bl	800ddee <prvTCPTouchSocket>
		/* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
		then we MUST assume an MSS size of 536 bytes for backward compatibility. */

		/* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
		the number 5 (words) in the higher niblle of the TCP-offset byte. */
		if( ( pxTCPPacket->xTCPHeader.ucTCPOffset & TCP_OFFSET_LENGTH_BITS ) > TCP_OFFSET_STANDARD_LENGTH )
 800f240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f242:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800f246:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f24a:	2b50      	cmp	r3, #80	; 0x50
 800f24c:	d904      	bls.n	800f258 <xProcessReceivedTCPPacket+0x1c8>
		{
			prvCheckOptions( pxSocket, pxNetworkBuffer );
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	4619      	mov	r1, r3
 800f252:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f254:	f7fe fc30 	bl	800dab8 <prvCheckOptions>
		}


		#if( ipconfigUSE_TCP_WIN == 1 )
		{
			pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPPacket->xTCPHeader.usWindow );
 800f258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f25a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800f25c:	b29b      	uxth	r3, r3
 800f25e:	021b      	lsls	r3, r3, #8
 800f260:	b21a      	sxth	r2, r3
 800f262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f264:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800f266:	b29b      	uxth	r3, r3
 800f268:	0a1b      	lsrs	r3, r3, #8
 800f26a:	b29b      	uxth	r3, r3
 800f26c:	b21b      	sxth	r3, r3
 800f26e:	4313      	orrs	r3, r2
 800f270:	b21b      	sxth	r3, r3
 800f272:	b29b      	uxth	r3, r3
 800f274:	461a      	mov	r2, r3
 800f276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f278:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
			pxSocket->u.xTCP.ulWindowSize =
				( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800f27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f27e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800f282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f284:	f892 20ca 	ldrb.w	r2, [r2, #202]	; 0xca
 800f288:	fa03 f202 	lsl.w	r2, r3, r2
			pxSocket->u.xTCP.ulWindowSize =
 800f28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f28e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		}
		#endif

		/* In prvTCPHandleState() the incoming messages will be handled
		depending on the current state of the connection. */
		if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 800f292:	1d3b      	adds	r3, r7, #4
 800f294:	4619      	mov	r1, r3
 800f296:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f298:	f7ff fd92 	bl	800edc0 <prvTCPHandleState>
 800f29c:	4603      	mov	r3, r0
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	dd04      	ble.n	800f2ac <xProcessReceivedTCPPacket+0x21c>
		{
			/* prvTCPHandleState() has sent a message, see if there are more to
			be transmitted. */
			#if( ipconfigUSE_TCP_WIN == 1 )
			{
				prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800f2a2:	1d3b      	adds	r3, r7, #4
 800f2a4:	4619      	mov	r1, r3
 800f2a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f2a8:	f7fe f8f7 	bl	800d49a <prvTCPSendRepeated>
			}
			#endif /* ipconfigUSE_TCP_WIN */
		}

		if( pxNetworkBuffer != NULL )
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d005      	beq.n	800f2be <xProcessReceivedTCPPacket+0x22e>
		{
			/* We must check if the buffer is unequal to NULL, because the
			socket might keep a reference to it in case a delayed ACK must be
			sent. */
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f001 fb8d 	bl	80109d4 <vReleaseNetworkBufferAndDescriptor>
			pxNetworkBuffer = NULL;
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	607b      	str	r3, [r7, #4]
		}

		/* And finally, calculate when this socket wants to be woken up. */
		prvTCPNextTimeout ( pxSocket );
 800f2be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f2c0:	f7ff f860 	bl	800e384 <prvTCPNextTimeout>
		/* Return pdPASS to tell that the network buffer is 'consumed'. */
		xResult = pdPASS;
 800f2c4:	2301      	movs	r3, #1
 800f2c6:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	/* pdPASS being returned means the buffer has been consumed. */
	return xResult;
 800f2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	3730      	adds	r7, #48	; 0x30
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd80      	pop	{r7, pc}

0800f2d2 <prvHandleListen>:
/*-----------------------------------------------------------*/

static FreeRTOS_Socket_t *prvHandleListen( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800f2d2:	b580      	push	{r7, lr}
 800f2d4:	b086      	sub	sp, #24
 800f2d6:	af00      	add	r7, sp, #0
 800f2d8:	6078      	str	r0, [r7, #4]
 800f2da:	6039      	str	r1, [r7, #0]
TCPPacket_t * pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	699b      	ldr	r3, [r3, #24]
 800f2e0:	613b      	str	r3, [r7, #16]
FreeRTOS_Socket_t *pxReturn = NULL;
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	617b      	str	r3, [r7, #20]
uint32_t ulInitialSequenceNumber;

    /* Assume that a new Initial Sequence Number will be required. Request 
    it now in order to fail out if necessary. */
    ulInitialSequenceNumber = ipconfigRAND32();
 800f2e6:	f001 ff63 	bl	80111b0 <rand>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	60fb      	str	r3, [r7, #12]

	/* A pure SYN (without ACK) has come in, create a new socket to answer
	it. */
    if( 0 != ulInitialSequenceNumber )
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d03c      	beq.n	800f36e <prvHandleListen+0x9c>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f2fa:	f003 0308 	and.w	r3, r3, #8
 800f2fe:	b2db      	uxtb	r3, r3
 800f300:	2b00      	cmp	r3, #0
 800f302:	d00c      	beq.n	800f31e <prvHandleListen+0x4c>
        {
            /* The flag bReuseSocket indicates that the same instance of the
            listening socket should be used for the connection. */
            pxReturn = pxSocket;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	617b      	str	r3, [r7, #20]
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800f308:	687a      	ldr	r2, [r7, #4]
 800f30a:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800f30e:	f043 0304 	orr.w	r3, r3, #4
 800f312:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	687a      	ldr	r2, [r7, #4]
 800f31a:	655a      	str	r2, [r3, #84]	; 0x54
 800f31c:	e027      	b.n	800f36e <prvHandleListen+0x9c>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
            new socket when a connection comes in. */
            pxReturn = NULL;
 800f31e:	2300      	movs	r3, #0
 800f320:	617b      	str	r3, [r7, #20]

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f32e:	429a      	cmp	r2, r3
 800f330:	d303      	bcc.n	800f33a <prvHandleListen+0x68>
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
                    pxSocket->usLocalPort,
                    pxSocket->u.xTCP.usChildCount,
                    pxSocket->u.xTCP.usBacklog,
                    pxSocket->u.xTCP.usChildCount == 1 ? "" : "ren" ) );
                prvTCPSendReset( pxNetworkBuffer );
 800f332:	6838      	ldr	r0, [r7, #0]
 800f334:	f7ff fe54 	bl	800efe0 <prvTCPSendReset>
 800f338:	e019      	b.n	800f36e <prvHandleListen+0x9c>
            }
            else
            {
                FreeRTOS_Socket_t *pxNewSocket = ( FreeRTOS_Socket_t * )
 800f33a:	2206      	movs	r2, #6
 800f33c:	2101      	movs	r1, #1
 800f33e:	2002      	movs	r0, #2
 800f340:	f7fc ff18 	bl	800c174 <FreeRTOS_socket>
 800f344:	60b8      	str	r0, [r7, #8]
                    FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );

                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d003      	beq.n	800f354 <prvHandleListen+0x82>
 800f34c:	68bb      	ldr	r3, [r7, #8]
 800f34e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f352:	d103      	bne.n	800f35c <prvHandleListen+0x8a>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
                    prvTCPSendReset( pxNetworkBuffer );
 800f354:	6838      	ldr	r0, [r7, #0]
 800f356:	f7ff fe43 	bl	800efe0 <prvTCPSendReset>
 800f35a:	e008      	b.n	800f36e <prvHandleListen+0x9c>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 800f35c:	6879      	ldr	r1, [r7, #4]
 800f35e:	68b8      	ldr	r0, [r7, #8]
 800f360:	f000 f86a 	bl	800f438 <prvTCPSocketCopy>
 800f364:	4603      	mov	r3, r0
 800f366:	2b00      	cmp	r3, #0
 800f368:	d001      	beq.n	800f36e <prvHandleListen+0x9c>
                {
                    /* The socket will be connected immediately, no time for the
                    owner to setsockopt's, therefore copy properties of the server
                    socket to the new socket.  Only the binding might fail (due to
                    lack of resources). */
                    pxReturn = pxNewSocket;
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	617b      	str	r3, [r7, #20]
                }
            }
        }
    }

    if( 0 != ulInitialSequenceNumber && pxReturn != NULL )
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d05c      	beq.n	800f42e <prvHandleListen+0x15c>
 800f374:	697b      	ldr	r3, [r7, #20]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d059      	beq.n	800f42e <prvHandleListen+0x15c>
	{
		pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 800f37a:	693b      	ldr	r3, [r7, #16]
 800f37c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f37e:	b29b      	uxth	r3, r3
 800f380:	021b      	lsls	r3, r3, #8
 800f382:	b21a      	sxth	r2, r3
 800f384:	693b      	ldr	r3, [r7, #16]
 800f386:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f388:	b29b      	uxth	r3, r3
 800f38a:	0a1b      	lsrs	r3, r3, #8
 800f38c:	b29b      	uxth	r3, r3
 800f38e:	b21b      	sxth	r3, r3
 800f390:	4313      	orrs	r3, r2
 800f392:	b21b      	sxth	r3, r3
 800f394:	b29a      	uxth	r2, r3
 800f396:	697b      	ldr	r3, [r7, #20]
 800f398:	879a      	strh	r2, [r3, #60]	; 0x3c
		pxReturn->u.xTCP.ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 800f39a:	693b      	ldr	r3, [r7, #16]
 800f39c:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800f3a0:	061a      	lsls	r2, r3, #24
 800f3a2:	693b      	ldr	r3, [r7, #16]
 800f3a4:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800f3a8:	021b      	lsls	r3, r3, #8
 800f3aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f3ae:	431a      	orrs	r2, r3
 800f3b0:	693b      	ldr	r3, [r7, #16]
 800f3b2:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800f3b6:	0a1b      	lsrs	r3, r3, #8
 800f3b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f3bc:	431a      	orrs	r2, r3
 800f3be:	693b      	ldr	r3, [r7, #16]
 800f3c0:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800f3c4:	0e1b      	lsrs	r3, r3, #24
 800f3c6:	431a      	orrs	r2, r3
 800f3c8:	697b      	ldr	r3, [r7, #20]
 800f3ca:	639a      	str	r2, [r3, #56]	; 0x38
		pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 800f3cc:	697b      	ldr	r3, [r7, #20]
 800f3ce:	68fa      	ldr	r2, [r7, #12]
 800f3d0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

		/* Here is the SYN action. */
		pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 800f3d4:	693b      	ldr	r3, [r7, #16]
 800f3d6:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800f3da:	061a      	lsls	r2, r3, #24
 800f3dc:	693b      	ldr	r3, [r7, #16]
 800f3de:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800f3e2:	021b      	lsls	r3, r3, #8
 800f3e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f3e8:	431a      	orrs	r2, r3
 800f3ea:	693b      	ldr	r3, [r7, #16]
 800f3ec:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800f3f0:	0a1b      	lsrs	r3, r3, #8
 800f3f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f3f6:	431a      	orrs	r2, r3
 800f3f8:	693b      	ldr	r3, [r7, #16]
 800f3fa:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800f3fe:	0e1b      	lsrs	r3, r3, #24
 800f400:	431a      	orrs	r2, r3
 800f402:	697b      	ldr	r3, [r7, #20]
 800f404:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
		prvSocketSetMSS( pxReturn );
 800f408:	6978      	ldr	r0, [r7, #20]
 800f40a:	f7ff fe05 	bl	800f018 <prvSocketSetMSS>

		prvTCPCreateWindow( pxReturn );
 800f40e:	6978      	ldr	r0, [r7, #20]
 800f410:	f7fe fa50 	bl	800d8b4 <prvTCPCreateWindow>

		vTCPStateChange( pxReturn, eSYN_FIRST );
 800f414:	2103      	movs	r1, #3
 800f416:	6978      	ldr	r0, [r7, #20]
 800f418:	f7fe fd0d 	bl	800de36 <vTCPStateChange>

		/* Make a copy of the header up to the TCP header.  It is needed later
		on, whenever data must be sent to the peer. */
		memcpy( pxReturn->u.xTCP.xPacket.u.ucLastPacket, pxNetworkBuffer->pucEthernetBuffer, sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) );
 800f41c:	697b      	ldr	r3, [r7, #20]
 800f41e:	f103 0082 	add.w	r0, r3, #130	; 0x82
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	699b      	ldr	r3, [r3, #24]
 800f426:	2246      	movs	r2, #70	; 0x46
 800f428:	4619      	mov	r1, r3
 800f42a:	f001 fde8 	bl	8010ffe <memcpy>
	}
	return pxReturn;
 800f42e:	697b      	ldr	r3, [r7, #20]
}
 800f430:	4618      	mov	r0, r3
 800f432:	3718      	adds	r7, #24
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}

0800f438 <prvTCPSocketCopy>:

/*
 * Duplicates a socket after a listening socket receives a connection.
 */
static BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t *pxNewSocket, FreeRTOS_Socket_t *pxSocket )
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b084      	sub	sp, #16
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	6039      	str	r1, [r7, #0]
struct freertos_sockaddr xAddress;

	pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	69da      	ldr	r2, [r3, #28]
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	61da      	str	r2, [r3, #28]
	pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	6a1a      	ldr	r2, [r3, #32]
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	621a      	str	r2, [r3, #32]
	pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	66da      	str	r2, [r3, #108]	; 0x6c
	pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 800f466:	683b      	ldr	r3, [r7, #0]
 800f468:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	671a      	str	r2, [r3, #112]	; 0x70
	pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	665a      	str	r2, [r3, #100]	; 0x64
	pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	669a      	str	r2, [r3, #104]	; 0x68
	pxNewSocket->u.xTCP.uxRxWinSize  = pxSocket->u.xTCP.uxRxWinSize;
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	pxNewSocket->u.xTCP.uxTxWinSize  = pxSocket->u.xTCP.uxTxWinSize;
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
	{
		/* Child socket of listening sockets will inherit the Socket Set
		Otherwise the owner has no chance of including it into the set. */
		if( pxSocket->pxSocketSet )
 800f496:	683b      	ldr	r3, [r7, #0]
 800f498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d009      	beq.n	800f4b2 <prvTCPSocketCopy+0x7a>
		{
			pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	629a      	str	r2, [r3, #40]	; 0x28
			pxNewSocket->xSelectBits = pxSocket->xSelectBits | eSELECT_READ | eSELECT_EXCEPT;
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4aa:	f043 0205 	orr.w	r2, r3, #5
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */

	/* And bind it to the same local port as its parent. */
	xAddress.sin_addr = *ipLOCAL_IP_ADDRESS_POINTER;
 800f4b2:	4b1b      	ldr	r3, [pc, #108]	; (800f520 <prvTCPSocketCopy+0xe8>)
 800f4b4:	695b      	ldr	r3, [r3, #20]
 800f4b6:	60fb      	str	r3, [r7, #12]
	xAddress.sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f4bc:	021b      	lsls	r3, r3, #8
 800f4be:	b21a      	sxth	r2, r3
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f4c4:	0a1b      	lsrs	r3, r3, #8
 800f4c6:	b29b      	uxth	r3, r3
 800f4c8:	b21b      	sxth	r3, r3
 800f4ca:	4313      	orrs	r3, r2
 800f4cc:	b21b      	sxth	r3, r3
 800f4ce:	b29b      	uxth	r3, r3
 800f4d0:	817b      	strh	r3, [r7, #10]
		orphan temporarily.  Once this socket is really connected, the owner of
		the server socket will be notified. */

		/* When bPassQueued is true, the socket is an orphan until it gets
		connected. */
		pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800f4d2:	687a      	ldr	r2, [r7, #4]
 800f4d4:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800f4d8:	f043 0304 	orr.w	r3, r3, #4
 800f4dc:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
		pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	683a      	ldr	r2, [r7, #0]
 800f4e4:	655a      	str	r2, [r3, #84]	; 0x54
			pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
		}
	}
	#endif

	pxSocket->u.xTCP.usChildCount++;
 800f4e6:	683b      	ldr	r3, [r7, #0]
 800f4e8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800f4ec:	3301      	adds	r3, #1
 800f4ee:	b29a      	uxth	r2, r3
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		pxSocket->u.xTCP.usChildCount,
		pxSocket->u.xTCP.usBacklog,
		pxSocket->u.xTCP.usChildCount == 1u ? "" : "ren" ) );

	/* Now bind the child socket to the same port as the listening socket. */
	if( vSocketBind ( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 800f4f6:	f107 0108 	add.w	r1, r7, #8
 800f4fa:	2301      	movs	r3, #1
 800f4fc:	2208      	movs	r2, #8
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f7fc fed0 	bl	800c2a4 <vSocketBind>
 800f504:	4603      	mov	r3, r0
 800f506:	2b00      	cmp	r3, #0
 800f508:	d004      	beq.n	800f514 <prvTCPSocketCopy+0xdc>
	{
		FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
		vSocketClose( pxNewSocket );
 800f50a:	6878      	ldr	r0, [r7, #4]
 800f50c:	f7fc ff88 	bl	800c420 <vSocketClose>
		return pdFALSE;
 800f510:	2300      	movs	r3, #0
 800f512:	e000      	b.n	800f516 <prvTCPSocketCopy+0xde>
	}

	return pdTRUE;
 800f514:	2301      	movs	r3, #1
}
 800f516:	4618      	mov	r0, r3
 800f518:	3710      	adds	r7, #16
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd80      	pop	{r7, pc}
 800f51e:	bf00      	nop
 800f520:	200001b0 	.word	0x200001b0

0800f524 <xTCPCheckNewClient>:
/*
 * In the API accept(), the user asks is there is a new client?  As API's can
 * not walk through the xBoundTCPSocketsList the IP-task will do this.
 */
BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t *pxSocket )
{
 800f524:	b480      	push	{r7}
 800f526:	b087      	sub	sp, #28
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
TickType_t xLocalPort = FreeRTOS_htons( pxSocket->usLocalPort );
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f530:	021b      	lsls	r3, r3, #8
 800f532:	b21a      	sxth	r2, r3
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f538:	0a1b      	lsrs	r3, r3, #8
 800f53a:	b29b      	uxth	r3, r3
 800f53c:	b21b      	sxth	r3, r3
 800f53e:	4313      	orrs	r3, r2
 800f540:	b21b      	sxth	r3, r3
 800f542:	b29b      	uxth	r3, r3
 800f544:	60fb      	str	r3, [r7, #12]
ListItem_t *pxIterator;
FreeRTOS_Socket_t *pxFound;
BaseType_t xResult = pdFALSE;
 800f546:	2300      	movs	r3, #0
 800f548:	613b      	str	r3, [r7, #16]

	/* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
	who has access. */
	for( pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800f54a:	4b16      	ldr	r3, [pc, #88]	; (800f5a4 <xTCPCheckNewClient+0x80>)
 800f54c:	68db      	ldr	r3, [r3, #12]
 800f54e:	617b      	str	r3, [r7, #20]
 800f550:	e01d      	b.n	800f58e <xTCPCheckNewClient+0x6a>
		pxIterator != ( ListItem_t * ) listGET_END_MARKER( &xBoundTCPSocketsList );
		pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
	{
		if( listGET_LIST_ITEM_VALUE( pxIterator ) == xLocalPort )
 800f552:	697b      	ldr	r3, [r7, #20]
 800f554:	681a      	ldr	r2, [r3, #0]
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	429a      	cmp	r2, r3
 800f55a:	d115      	bne.n	800f588 <xTCPCheckNewClient+0x64>
		{
			pxFound = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800f55c:	697b      	ldr	r3, [r7, #20]
 800f55e:	68db      	ldr	r3, [r3, #12]
 800f560:	60bb      	str	r3, [r7, #8]
			if( ( pxFound->ucProtocol == FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800f568:	2b06      	cmp	r3, #6
 800f56a:	d10d      	bne.n	800f588 <xTCPCheckNewClient+0x64>
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f572:	f003 0302 	and.w	r3, r3, #2
 800f576:	b2db      	uxtb	r3, r3
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d005      	beq.n	800f588 <xTCPCheckNewClient+0x64>
			{
				pxSocket->u.xTCP.pxPeerSocket = pxFound;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	68ba      	ldr	r2, [r7, #8]
 800f580:	655a      	str	r2, [r3, #84]	; 0x54
				FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
				xResult = pdTRUE;
 800f582:	2301      	movs	r3, #1
 800f584:	613b      	str	r3, [r7, #16]
				break;
 800f586:	e006      	b.n	800f596 <xTCPCheckNewClient+0x72>
		pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
 800f588:	697b      	ldr	r3, [r7, #20]
 800f58a:	685b      	ldr	r3, [r3, #4]
 800f58c:	617b      	str	r3, [r7, #20]
	for( pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	4a05      	ldr	r2, [pc, #20]	; (800f5a8 <xTCPCheckNewClient+0x84>)
 800f592:	4293      	cmp	r3, r2
 800f594:	d1dd      	bne.n	800f552 <xTCPCheckNewClient+0x2e>
			}
		}
	}
	return xResult;
 800f596:	693b      	ldr	r3, [r7, #16]
}
 800f598:	4618      	mov	r0, r3
 800f59a:	371c      	adds	r7, #28
 800f59c:	46bd      	mov	sp, r7
 800f59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a2:	4770      	bx	lr
 800f5a4:	20006990 	.word	0x20006990
 800f5a8:	20006998 	.word	0x20006998

0800f5ac <FreeRTOS_min_int32>:
	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
 800f5ac:	b480      	push	{r7}
 800f5ae:	b083      	sub	sp, #12
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
 800f5b4:	6039      	str	r1, [r7, #0]
 800f5b6:	687a      	ldr	r2, [r7, #4]
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	4293      	cmp	r3, r2
 800f5bc:	bfa8      	it	ge
 800f5be:	4613      	movge	r3, r2
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	370c      	adds	r7, #12
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ca:	4770      	bx	lr

0800f5cc <FreeRTOS_min_uint32>:
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
 800f5cc:	b480      	push	{r7}
 800f5ce:	b083      	sub	sp, #12
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
 800f5d4:	6039      	str	r1, [r7, #0]
 800f5d6:	687a      	ldr	r2, [r7, #4]
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	4293      	cmp	r3, r2
 800f5dc:	bf28      	it	cs
 800f5de:	4613      	movcs	r3, r2
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	370c      	adds	r7, #12
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ea:	4770      	bx	lr

0800f5ec <xSequenceLessThanOrEqual>:

#if( ipconfigUSE_TCP_WIN == 1 )
	/* Some 32-bit arithmetic: comparing sequence numbers */
	static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a, uint32_t b );
	static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a, uint32_t b )
	{
 800f5ec:	b480      	push	{r7}
 800f5ee:	b083      	sub	sp, #12
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
 800f5f4:	6039      	str	r1, [r7, #0]
		/* Test if a <= b
		Return true if the unsigned subtraction of (b-a) doesn't generate an
		arithmetic overflow. */
		return ( ( b - a ) & 0x80000000UL ) == 0UL;
 800f5f6:	683a      	ldr	r2, [r7, #0]
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	1ad3      	subs	r3, r2, r3
 800f5fc:	43db      	mvns	r3, r3
 800f5fe:	0fdb      	lsrs	r3, r3, #31
 800f600:	b2db      	uxtb	r3, r3
	}
 800f602:	4618      	mov	r0, r3
 800f604:	370c      	adds	r7, #12
 800f606:	46bd      	mov	sp, r7
 800f608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60c:	4770      	bx	lr

0800f60e <xSequenceLessThan>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )
	static portINLINE BaseType_t xSequenceLessThan( uint32_t a, uint32_t b );
	static portINLINE BaseType_t xSequenceLessThan( uint32_t a, uint32_t b )
	{
 800f60e:	b480      	push	{r7}
 800f610:	b083      	sub	sp, #12
 800f612:	af00      	add	r7, sp, #0
 800f614:	6078      	str	r0, [r7, #4]
 800f616:	6039      	str	r1, [r7, #0]
		/* Test if a < b */
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
 800f618:	683a      	ldr	r2, [r7, #0]
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	1ad3      	subs	r3, r2, r3
 800f61e:	3b01      	subs	r3, #1
 800f620:	43db      	mvns	r3, r3
 800f622:	0fdb      	lsrs	r3, r3, #31
 800f624:	b2db      	uxtb	r3, r3
	}
 800f626:	4618      	mov	r0, r3
 800f628:	370c      	adds	r7, #12
 800f62a:	46bd      	mov	sp, r7
 800f62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f630:	4770      	bx	lr

0800f632 <xSequenceGreaterThan>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )
	static portINLINE BaseType_t xSequenceGreaterThan( uint32_t a, uint32_t b );
	static portINLINE BaseType_t xSequenceGreaterThan( uint32_t a, uint32_t b )
	{
 800f632:	b480      	push	{r7}
 800f634:	b083      	sub	sp, #12
 800f636:	af00      	add	r7, sp, #0
 800f638:	6078      	str	r0, [r7, #4]
 800f63a:	6039      	str	r1, [r7, #0]
		/* Test if a > b */
		return ( ( a - b - 1UL ) & 0x80000000UL ) == 0UL;
 800f63c:	687a      	ldr	r2, [r7, #4]
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	1ad3      	subs	r3, r2, r3
 800f642:	3b01      	subs	r3, #1
 800f644:	43db      	mvns	r3, r3
 800f646:	0fdb      	lsrs	r3, r3, #31
 800f648:	b2db      	uxtb	r3, r3
	}
 800f64a:	4618      	mov	r0, r3
 800f64c:	370c      	adds	r7, #12
 800f64e:	46bd      	mov	sp, r7
 800f650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f654:	4770      	bx	lr

0800f656 <xSequenceGreaterThanOrEqual>:
#endif /* ipconfigUSE_TCP_WIN */

/*-----------------------------------------------------------*/
static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a, uint32_t b );
static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a, uint32_t b )
{
 800f656:	b480      	push	{r7}
 800f658:	b083      	sub	sp, #12
 800f65a:	af00      	add	r7, sp, #0
 800f65c:	6078      	str	r0, [r7, #4]
 800f65e:	6039      	str	r1, [r7, #0]
	/* Test if a >= b */
	return ( ( a - b ) & 0x80000000UL ) == 0UL;
 800f660:	687a      	ldr	r2, [r7, #4]
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	1ad3      	subs	r3, r2, r3
 800f666:	43db      	mvns	r3, r3
 800f668:	0fdb      	lsrs	r3, r3, #31
 800f66a:	b2db      	uxtb	r3, r3
}
 800f66c:	4618      	mov	r0, r3
 800f66e:	370c      	adds	r7, #12
 800f670:	46bd      	mov	sp, r7
 800f672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f676:	4770      	bx	lr

0800f678 <vListInsertFifo>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )
	static portINLINE void vListInsertFifo( List_t * const pxList, ListItem_t * const pxNewListItem );
	static portINLINE void vListInsertFifo( List_t * const pxList, ListItem_t * const pxNewListItem )
	{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b082      	sub	sp, #8
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
 800f680:	6039      	str	r1, [r7, #0]
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	3308      	adds	r3, #8
 800f686:	461a      	mov	r2, r3
 800f688:	6839      	ldr	r1, [r7, #0]
 800f68a:	6878      	ldr	r0, [r7, #4]
 800f68c:	f000 f81f 	bl	800f6ce <vListInsertGeneric>
	}
 800f690:	bf00      	nop
 800f692:	3708      	adds	r7, #8
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}

0800f698 <vTCPTimerSet>:
#endif
/*-----------------------------------------------------------*/

static portINLINE void vTCPTimerSet( TCPTimer_t *pxTimer );
static portINLINE void vTCPTimerSet( TCPTimer_t *pxTimer )
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b082      	sub	sp, #8
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
	pxTimer->ulBorn = xTaskGetTickCount ( );
 800f6a0:	f7f9 fe58 	bl	8009354 <xTaskGetTickCount>
 800f6a4:	4602      	mov	r2, r0
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	601a      	str	r2, [r3, #0]
}
 800f6aa:	bf00      	nop
 800f6ac:	3708      	adds	r7, #8
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}

0800f6b2 <ulTimerGetAge>:
/*-----------------------------------------------------------*/

static portINLINE uint32_t ulTimerGetAge( TCPTimer_t *pxTimer );
static portINLINE uint32_t ulTimerGetAge( TCPTimer_t *pxTimer )
{
 800f6b2:	b580      	push	{r7, lr}
 800f6b4:	b082      	sub	sp, #8
 800f6b6:	af00      	add	r7, sp, #0
 800f6b8:	6078      	str	r0, [r7, #4]
	return ( ( xTaskGetTickCount() - pxTimer->ulBorn ) * portTICK_PERIOD_MS );
 800f6ba:	f7f9 fe4b 	bl	8009354 <xTaskGetTickCount>
 800f6be:	4602      	mov	r2, r0
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	1ad3      	subs	r3, r2, r3
}
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	3708      	adds	r7, #8
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd80      	pop	{r7, pc}

0800f6ce <vListInsertGeneric>:
preceded by a prototype. Later this prototype will be located in list.h? */

extern void vListInsertGeneric( List_t * const pxList, ListItem_t * const pxNewListItem, MiniListItem_t * const pxWhere );

void vListInsertGeneric( List_t * const pxList, ListItem_t * const pxNewListItem, MiniListItem_t * const pxWhere )
{
 800f6ce:	b480      	push	{r7}
 800f6d0:	b085      	sub	sp, #20
 800f6d2:	af00      	add	r7, sp, #0
 800f6d4:	60f8      	str	r0, [r7, #12]
 800f6d6:	60b9      	str	r1, [r7, #8]
 800f6d8:	607a      	str	r2, [r7, #4]
	/* Insert a new list item into pxList, it does not sort the list,
	but it puts the item just before xListEnd, so it will be the last item
	returned by listGET_HEAD_ENTRY() */
	pxNewListItem->pxNext = (struct xLIST_ITEM * configLIST_VOLATILE)pxWhere;
 800f6da:	68bb      	ldr	r3, [r7, #8]
 800f6dc:	687a      	ldr	r2, [r7, #4]
 800f6de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	689a      	ldr	r2, [r3, #8]
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	609a      	str	r2, [r3, #8]
	pxWhere->pxPrevious->pxNext = pxNewListItem;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	689b      	ldr	r3, [r3, #8]
 800f6ec:	68ba      	ldr	r2, [r7, #8]
 800f6ee:	605a      	str	r2, [r3, #4]
	pxWhere->pxPrevious = pxNewListItem;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	68ba      	ldr	r2, [r7, #8]
 800f6f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList; /* If this line fails to build then ensure configENABLE_BACKWARD_COMPATIBILITY is set to 1 in FreeRTOSConfig.h. */
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	68fa      	ldr	r2, [r7, #12]
 800f6fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	1c5a      	adds	r2, r3, #1
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	601a      	str	r2, [r3, #0]
}
 800f706:	bf00      	nop
 800f708:	3714      	adds	r7, #20
 800f70a:	46bd      	mov	sp, r7
 800f70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f710:	4770      	bx	lr
	...

0800f714 <prvCreateSectors>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static BaseType_t prvCreateSectors( void )
	{
 800f714:	b580      	push	{r7, lr}
 800f716:	b082      	sub	sp, #8
 800f718:	af00      	add	r7, sp, #0
	BaseType_t xIndex, xReturn;

		/* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */

		vListInitialise( &xSegmentList );
 800f71a:	4824      	ldr	r0, [pc, #144]	; (800f7ac <prvCreateSectors+0x98>)
 800f71c:	f7f8 f9f3 	bl	8007b06 <vListInitialise>
		xTCPSegments = ( TCPSegment_t * ) pvPortMallocLarge( ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 800f720:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 800f724:	f7f8 fcbc 	bl	80080a0 <pvPortMalloc>
 800f728:	4602      	mov	r2, r0
 800f72a:	4b21      	ldr	r3, [pc, #132]	; (800f7b0 <prvCreateSectors+0x9c>)
 800f72c:	601a      	str	r2, [r3, #0]

		if( xTCPSegments == NULL )
 800f72e:	4b20      	ldr	r3, [pc, #128]	; (800f7b0 <prvCreateSectors+0x9c>)
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d102      	bne.n	800f73c <prvCreateSectors+0x28>
		{
			FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %lu failed\n",
				ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );

			xReturn = pdFAIL;
 800f736:	2300      	movs	r3, #0
 800f738:	603b      	str	r3, [r7, #0]
 800f73a:	e032      	b.n	800f7a2 <prvCreateSectors+0x8e>
		}
		else
		{
			/* Clear the allocated space. */
			memset( xTCPSegments, '\0', ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 800f73c:	4b1c      	ldr	r3, [pc, #112]	; (800f7b0 <prvCreateSectors+0x9c>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800f744:	2100      	movs	r1, #0
 800f746:	4618      	mov	r0, r3
 800f748:	f001 fc7e 	bl	8011048 <memset>

			for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 800f74c:	2300      	movs	r3, #0
 800f74e:	607b      	str	r3, [r7, #4]
 800f750:	e022      	b.n	800f798 <prvCreateSectors+0x84>
			{
				/* Could call vListInitialiseItem here but all data has been
				nulled already.  Set the owner to a segment descriptor. */
				listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xListItem ), ( void* ) &( xTCPSegments[ xIndex ] ) );
 800f752:	4b17      	ldr	r3, [pc, #92]	; (800f7b0 <prvCreateSectors+0x9c>)
 800f754:	681a      	ldr	r2, [r3, #0]
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	019b      	lsls	r3, r3, #6
 800f75a:	4413      	add	r3, r2
 800f75c:	4a14      	ldr	r2, [pc, #80]	; (800f7b0 <prvCreateSectors+0x9c>)
 800f75e:	6811      	ldr	r1, [r2, #0]
 800f760:	687a      	ldr	r2, [r7, #4]
 800f762:	0192      	lsls	r2, r2, #6
 800f764:	440a      	add	r2, r1
 800f766:	639a      	str	r2, [r3, #56]	; 0x38
				listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void* ) &( xTCPSegments[ xIndex ] ) );
 800f768:	4b11      	ldr	r3, [pc, #68]	; (800f7b0 <prvCreateSectors+0x9c>)
 800f76a:	681a      	ldr	r2, [r3, #0]
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	019b      	lsls	r3, r3, #6
 800f770:	4413      	add	r3, r2
 800f772:	4a0f      	ldr	r2, [pc, #60]	; (800f7b0 <prvCreateSectors+0x9c>)
 800f774:	6811      	ldr	r1, [r2, #0]
 800f776:	687a      	ldr	r2, [r7, #4]
 800f778:	0192      	lsls	r2, r2, #6
 800f77a:	440a      	add	r2, r1
 800f77c:	625a      	str	r2, [r3, #36]	; 0x24

				/* And add it to the pool of available segments */
				vListInsertFifo( &xSegmentList, &( xTCPSegments[xIndex].xListItem ) );
 800f77e:	4b0c      	ldr	r3, [pc, #48]	; (800f7b0 <prvCreateSectors+0x9c>)
 800f780:	681a      	ldr	r2, [r3, #0]
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	019b      	lsls	r3, r3, #6
 800f786:	4413      	add	r3, r2
 800f788:	332c      	adds	r3, #44	; 0x2c
 800f78a:	4619      	mov	r1, r3
 800f78c:	4807      	ldr	r0, [pc, #28]	; (800f7ac <prvCreateSectors+0x98>)
 800f78e:	f7ff ff73 	bl	800f678 <vListInsertFifo>
			for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	3301      	adds	r3, #1
 800f796:	607b      	str	r3, [r7, #4]
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	2bef      	cmp	r3, #239	; 0xef
 800f79c:	ddd9      	ble.n	800f752 <prvCreateSectors+0x3e>
			}

			xReturn = pdPASS;
 800f79e:	2301      	movs	r3, #1
 800f7a0:	603b      	str	r3, [r7, #0]
		}

		return xReturn;
 800f7a2:	683b      	ldr	r3, [r7, #0]
	}
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	3708      	adds	r7, #8
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	bd80      	pop	{r7, pc}
 800f7ac:	20004ecc 	.word	0x20004ecc
 800f7b0:	20004ec8 	.word	0x20004ec8

0800f7b4 <xTCPWindowRxFind>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowRxFind( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber )
	{
 800f7b4:	b480      	push	{r7}
 800f7b6:	b087      	sub	sp, #28
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
 800f7bc:	6039      	str	r1, [r7, #0]
	const ListItem_t *pxIterator;
	const MiniListItem_t* pxEnd;
	TCPSegment_t *pxSegment, *pxReturn = NULL;
 800f7be:	2300      	movs	r3, #0
 800f7c0:	613b      	str	r3, [r7, #16]

		/* Find a segment with a given sequence number in the list of received
		segments. */

		pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &pxWindow->xRxSegments );
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	33ac      	adds	r3, #172	; 0xac
 800f7c6:	60fb      	str	r3, [r7, #12]

		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	685b      	ldr	r3, [r3, #4]
 800f7cc:	617b      	str	r3, [r7, #20]
 800f7ce:	e00d      	b.n	800f7ec <xTCPWindowRxFind+0x38>
			 pxIterator != ( const ListItem_t * ) pxEnd;
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	68db      	ldr	r3, [r3, #12]
 800f7d4:	60bb      	str	r3, [r7, #8]

			if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	681a      	ldr	r2, [r3, #0]
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	d102      	bne.n	800f7e6 <xTCPWindowRxFind+0x32>
			{
				pxReturn = pxSegment;
 800f7e0:	68bb      	ldr	r3, [r7, #8]
 800f7e2:	613b      	str	r3, [r7, #16]
				break;
 800f7e4:	e006      	b.n	800f7f4 <xTCPWindowRxFind+0x40>
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	685b      	ldr	r3, [r3, #4]
 800f7ea:	617b      	str	r3, [r7, #20]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800f7ec:	697a      	ldr	r2, [r7, #20]
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	429a      	cmp	r2, r3
 800f7f2:	d1ed      	bne.n	800f7d0 <xTCPWindowRxFind+0x1c>
			}
		}

		return pxReturn;
 800f7f4:	693b      	ldr	r3, [r7, #16]
	}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	371c      	adds	r7, #28
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f800:	4770      	bx	lr
	...

0800f804 <xTCPWindowNew>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowNew( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber, int32_t lCount, BaseType_t xIsForRx )
	{
 800f804:	b580      	push	{r7, lr}
 800f806:	b088      	sub	sp, #32
 800f808:	af00      	add	r7, sp, #0
 800f80a:	60f8      	str	r0, [r7, #12]
 800f80c:	60b9      	str	r1, [r7, #8]
 800f80e:	607a      	str	r2, [r7, #4]
 800f810:	603b      	str	r3, [r7, #0]
	TCPSegment_t *pxSegment;
	ListItem_t * pxItem;

		/* Allocate a new segment.  The socket will borrow all segments from a
		common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
		if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 800f812:	4b2e      	ldr	r3, [pc, #184]	; (800f8cc <xTCPWindowNew+0xc8>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d101      	bne.n	800f81e <xTCPWindowNew+0x1a>
 800f81a:	2301      	movs	r3, #1
 800f81c:	e000      	b.n	800f820 <xTCPWindowNew+0x1c>
 800f81e:	2300      	movs	r3, #0
 800f820:	2b00      	cmp	r3, #0
 800f822:	d002      	beq.n	800f82a <xTCPWindowNew+0x26>
		{
			/* If the TCP-stack runs out of segments, you might consider
			increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
			FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", xIsForRx ? 'R' : 'T' ) );
			pxSegment = NULL;
 800f824:	2300      	movs	r3, #0
 800f826:	61fb      	str	r3, [r7, #28]
 800f828:	e04a      	b.n	800f8c0 <xTCPWindowNew+0xbc>
		}
		else
		{
			/* Pop the item at the head of the list.  Semaphore protection is
			not required as only the IP task will call these functions.  */
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 800f82a:	4b28      	ldr	r3, [pc, #160]	; (800f8cc <xTCPWindowNew+0xc8>)
 800f82c:	68db      	ldr	r3, [r3, #12]
 800f82e:	61bb      	str	r3, [r7, #24]
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 800f830:	69bb      	ldr	r3, [r7, #24]
 800f832:	68db      	ldr	r3, [r3, #12]
 800f834:	61fb      	str	r3, [r7, #28]

			configASSERT( pxItem != NULL );
 800f836:	69bb      	ldr	r3, [r7, #24]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d109      	bne.n	800f850 <xTCPWindowNew+0x4c>
 800f83c:	f04f 0340 	mov.w	r3, #64	; 0x40
 800f840:	f383 8811 	msr	BASEPRI, r3
 800f844:	f3bf 8f6f 	isb	sy
 800f848:	f3bf 8f4f 	dsb	sy
 800f84c:	617b      	str	r3, [r7, #20]
 800f84e:	e7fe      	b.n	800f84e <xTCPWindowNew+0x4a>
			configASSERT( pxSegment != NULL );
 800f850:	69fb      	ldr	r3, [r7, #28]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d109      	bne.n	800f86a <xTCPWindowNew+0x66>
 800f856:	f04f 0340 	mov.w	r3, #64	; 0x40
 800f85a:	f383 8811 	msr	BASEPRI, r3
 800f85e:	f3bf 8f6f 	isb	sy
 800f862:	f3bf 8f4f 	dsb	sy
 800f866:	613b      	str	r3, [r7, #16]
 800f868:	e7fe      	b.n	800f868 <xTCPWindowNew+0x64>

			/* Remove the item from xSegmentList. */
			uxListRemove( pxItem );
 800f86a:	69b8      	ldr	r0, [r7, #24]
 800f86c:	f7f8 f9d5 	bl	8007c1a <uxListRemove>

			/* Add it to either the connections' Rx or Tx queue. */
			vListInsertFifo( xIsForRx ? &pxWindow->xRxSegments : &pxWindow->xTxSegments, pxItem );
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d002      	beq.n	800f87c <xTCPWindowNew+0x78>
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	33a4      	adds	r3, #164	; 0xa4
 800f87a:	e001      	b.n	800f880 <xTCPWindowNew+0x7c>
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	3390      	adds	r3, #144	; 0x90
 800f880:	69b9      	ldr	r1, [r7, #24]
 800f882:	4618      	mov	r0, r3
 800f884:	f7ff fef8 	bl	800f678 <vListInsertFifo>

			/* And set the segment's timer to zero */
			vTCPTimerSet( &pxSegment->xTransmitTimer );
 800f888:	69fb      	ldr	r3, [r7, #28]
 800f88a:	3310      	adds	r3, #16
 800f88c:	4618      	mov	r0, r3
 800f88e:	f7ff ff03 	bl	800f698 <vTCPTimerSet>

			pxSegment->u.ulFlags = 0;
 800f892:	69fb      	ldr	r3, [r7, #28]
 800f894:	2200      	movs	r2, #0
 800f896:	615a      	str	r2, [r3, #20]
			pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 );
 800f898:	683b      	ldr	r3, [r7, #0]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	bf14      	ite	ne
 800f89e:	2301      	movne	r3, #1
 800f8a0:	2300      	moveq	r3, #0
 800f8a2:	b2d9      	uxtb	r1, r3
 800f8a4:	69fa      	ldr	r2, [r7, #28]
 800f8a6:	7d93      	ldrb	r3, [r2, #22]
 800f8a8:	f361 0382 	bfi	r3, r1, #2, #1
 800f8ac:	7593      	strb	r3, [r2, #22]
			pxSegment->lMaxLength = lCount;
 800f8ae:	69fb      	ldr	r3, [r7, #28]
 800f8b0:	687a      	ldr	r2, [r7, #4]
 800f8b2:	605a      	str	r2, [r3, #4]
			pxSegment->lDataLength = lCount;
 800f8b4:	69fb      	ldr	r3, [r7, #28]
 800f8b6:	687a      	ldr	r2, [r7, #4]
 800f8b8:	609a      	str	r2, [r3, #8]
			pxSegment->ulSequenceNumber = ulSequenceNumber;
 800f8ba:	69fb      	ldr	r3, [r7, #28]
 800f8bc:	68ba      	ldr	r2, [r7, #8]
 800f8be:	601a      	str	r2, [r3, #0]
				}
			}
			#endif /* ipconfigHAS_DEBUG_PRINTF */
		}

		return pxSegment;
 800f8c0:	69fb      	ldr	r3, [r7, #28]
	}
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	3720      	adds	r7, #32
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}
 800f8ca:	bf00      	nop
 800f8cc:	20004ecc 	.word	0x20004ecc

0800f8d0 <xTCPWindowRxEmpty>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	BaseType_t xTCPWindowRxEmpty( TCPWindow_t *pxWindow )
	{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b084      	sub	sp, #16
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
		/* When the peer has a close request (FIN flag), the driver will check
		if there are missing packets in the Rx-queue.  It will accept the
		closure of the connection if both conditions are true:
		  - the Rx-queue is empty
		  - the highest Rx sequence number has been ACK'ed */
		if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d002      	beq.n	800f8e8 <xTCPWindowRxEmpty+0x18>
		{
			/* Rx data has been stored while earlier packets were missing. */
			xReturn = pdFALSE;
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	60fb      	str	r3, [r7, #12]
 800f8e6:	e00f      	b.n	800f908 <xTCPWindowRxEmpty+0x38>
		}
		else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	691a      	ldr	r2, [r3, #16]
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	699b      	ldr	r3, [r3, #24]
 800f8f0:	4619      	mov	r1, r3
 800f8f2:	4610      	mov	r0, r2
 800f8f4:	f7ff feaf 	bl	800f656 <xSequenceGreaterThanOrEqual>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d002      	beq.n	800f904 <xTCPWindowRxEmpty+0x34>
		{
			/* No Rx packets are being stored and the highest sequence number
			that has been received has been ACKed. */
			xReturn = pdTRUE;
 800f8fe:	2301      	movs	r3, #1
 800f900:	60fb      	str	r3, [r7, #12]
 800f902:	e001      	b.n	800f908 <xTCPWindowRxEmpty+0x38>
		else
		{
			FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %lu highest %lu (empty)\n",
				( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
				( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
			xReturn = pdFALSE;
 800f904:	2300      	movs	r3, #0
 800f906:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 800f908:	68fb      	ldr	r3, [r7, #12]
	}
 800f90a:	4618      	mov	r0, r3
 800f90c:	3710      	adds	r7, #16
 800f90e:	46bd      	mov	sp, r7
 800f910:	bd80      	pop	{r7, pc}

0800f912 <xTCPWindowGetHead>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowGetHead( List_t *pxList )
	{
 800f912:	b580      	push	{r7, lr}
 800f914:	b084      	sub	sp, #16
 800f916:	af00      	add	r7, sp, #0
 800f918:	6078      	str	r0, [r7, #4]
	TCPSegment_t *pxSegment;
	ListItem_t * pxItem;

		/* Detaches and returns the head of a queue. */
		if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d101      	bne.n	800f926 <xTCPWindowGetHead+0x14>
 800f922:	2301      	movs	r3, #1
 800f924:	e000      	b.n	800f928 <xTCPWindowGetHead+0x16>
 800f926:	2300      	movs	r3, #0
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d002      	beq.n	800f932 <xTCPWindowGetHead+0x20>
		{
			pxSegment = NULL;
 800f92c:	2300      	movs	r3, #0
 800f92e:	60fb      	str	r3, [r7, #12]
 800f930:	e008      	b.n	800f944 <xTCPWindowGetHead+0x32>
		}
		else
		{
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	68db      	ldr	r3, [r3, #12]
 800f936:	60bb      	str	r3, [r7, #8]
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 800f938:	68bb      	ldr	r3, [r7, #8]
 800f93a:	68db      	ldr	r3, [r3, #12]
 800f93c:	60fb      	str	r3, [r7, #12]

			uxListRemove( pxItem );
 800f93e:	68b8      	ldr	r0, [r7, #8]
 800f940:	f7f8 f96b 	bl	8007c1a <uxListRemove>
		}

		return pxSegment;
 800f944:	68fb      	ldr	r3, [r7, #12]
	}
 800f946:	4618      	mov	r0, r3
 800f948:	3710      	adds	r7, #16
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}

0800f94e <xTCPWindowPeekHead>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowPeekHead( List_t *pxList )
	{
 800f94e:	b480      	push	{r7}
 800f950:	b085      	sub	sp, #20
 800f952:	af00      	add	r7, sp, #0
 800f954:	6078      	str	r0, [r7, #4]
	ListItem_t *pxItem;
	TCPSegment_t *pxReturn;

		/* Returns the head of a queue but it won't be detached. */
		if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d101      	bne.n	800f962 <xTCPWindowPeekHead+0x14>
 800f95e:	2301      	movs	r3, #1
 800f960:	e000      	b.n	800f964 <xTCPWindowPeekHead+0x16>
 800f962:	2300      	movs	r3, #0
 800f964:	2b00      	cmp	r3, #0
 800f966:	d002      	beq.n	800f96e <xTCPWindowPeekHead+0x20>
		{
			pxReturn = NULL;
 800f968:	2300      	movs	r3, #0
 800f96a:	60fb      	str	r3, [r7, #12]
 800f96c:	e005      	b.n	800f97a <xTCPWindowPeekHead+0x2c>
		}
		else
		{
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	68db      	ldr	r3, [r3, #12]
 800f972:	60bb      	str	r3, [r7, #8]
			pxReturn = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 800f974:	68bb      	ldr	r3, [r7, #8]
 800f976:	68db      	ldr	r3, [r3, #12]
 800f978:	60fb      	str	r3, [r7, #12]
		}

		return pxReturn;
 800f97a:	68fb      	ldr	r3, [r7, #12]
	}
 800f97c:	4618      	mov	r0, r3
 800f97e:	3714      	adds	r7, #20
 800f980:	46bd      	mov	sp, r7
 800f982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f986:	4770      	bx	lr

0800f988 <vTCPWindowFree>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static void vTCPWindowFree( TCPSegment_t *pxSegment )
	{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b082      	sub	sp, #8
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
		/*  Free entry pxSegment because it's not used any more.  The ownership
		will be passed back to the segment pool.

		Unlink it from one of the queues, if any. */
		if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f994:	2b00      	cmp	r3, #0
 800f996:	d004      	beq.n	800f9a2 <vTCPWindowFree+0x1a>
		{
			uxListRemove( &( pxSegment->xQueueItem ) );
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	3318      	adds	r3, #24
 800f99c:	4618      	mov	r0, r3
 800f99e:	f7f8 f93c 	bl	8007c1a <uxListRemove>
		}

		pxSegment->ulSequenceNumber = 0u;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	601a      	str	r2, [r3, #0]
		pxSegment->lDataLength = 0l;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	609a      	str	r2, [r3, #8]
		pxSegment->u.ulFlags = 0u;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	615a      	str	r2, [r3, #20]

		/* Take it out of xRxSegments/xTxSegments */
		if( listLIST_ITEM_CONTAINER( &( pxSegment->xListItem ) ) != NULL )
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d004      	beq.n	800f9c6 <vTCPWindowFree+0x3e>
		{
			uxListRemove( &( pxSegment->xListItem ) );
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	332c      	adds	r3, #44	; 0x2c
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f7f8 f92a 	bl	8007c1a <uxListRemove>
		}

		/* Return it to xSegmentList */
		vListInsertFifo( &xSegmentList, &( pxSegment->xListItem ) );
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	332c      	adds	r3, #44	; 0x2c
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	4803      	ldr	r0, [pc, #12]	; (800f9dc <vTCPWindowFree+0x54>)
 800f9ce:	f7ff fe53 	bl	800f678 <vListInsertFifo>
	}
 800f9d2:	bf00      	nop
 800f9d4:	3708      	adds	r7, #8
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	bd80      	pop	{r7, pc}
 800f9da:	bf00      	nop
 800f9dc:	20004ecc 	.word	0x20004ecc

0800f9e0 <vTCPWindowDestroy>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	void vTCPWindowDestroy( TCPWindow_t *pxWindow )
	{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b086      	sub	sp, #24
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]

		/*  Destroy a window.  A TCP window doesn't serve any more.  Return all
		owned segments to the pool.  In order to save code, it will make 2 rounds,
		one to remove the segments from xRxSegments, and a second round to clear
		xTxSegments*/
		for( xRound = 0; xRound < 2; xRound++ )
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	613b      	str	r3, [r7, #16]
 800f9ec:	e022      	b.n	800fa34 <vTCPWindowDestroy+0x54>
		{
			if( xRound != 0 )
 800f9ee:	693b      	ldr	r3, [r7, #16]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d003      	beq.n	800f9fc <vTCPWindowDestroy+0x1c>
			{
				pxSegments = &( pxWindow->xRxSegments );
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	33a4      	adds	r3, #164	; 0xa4
 800f9f8:	617b      	str	r3, [r7, #20]
 800f9fa:	e002      	b.n	800fa02 <vTCPWindowDestroy+0x22>
			}
			else
			{
				pxSegments = &( pxWindow->xTxSegments );
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	3390      	adds	r3, #144	; 0x90
 800fa00:	617b      	str	r3, [r7, #20]
			}

			if( listLIST_IS_INITIALISED( pxSegments ) != pdFALSE )
 800fa02:	697b      	ldr	r3, [r7, #20]
 800fa04:	689b      	ldr	r3, [r3, #8]
 800fa06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa0a:	d101      	bne.n	800fa10 <vTCPWindowDestroy+0x30>
 800fa0c:	2301      	movs	r3, #1
 800fa0e:	e000      	b.n	800fa12 <vTCPWindowDestroy+0x32>
 800fa10:	2300      	movs	r3, #0
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d00b      	beq.n	800fa2e <vTCPWindowDestroy+0x4e>
			{
				while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 800fa16:	e006      	b.n	800fa26 <vTCPWindowDestroy+0x46>
				{
					pxSegment = ( TCPSegment_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxSegments );
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	68db      	ldr	r3, [r3, #12]
 800fa1c:	68db      	ldr	r3, [r3, #12]
 800fa1e:	60fb      	str	r3, [r7, #12]
					vTCPWindowFree( pxSegment );
 800fa20:	68f8      	ldr	r0, [r7, #12]
 800fa22:	f7ff ffb1 	bl	800f988 <vTCPWindowFree>
				while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 800fa26:	697b      	ldr	r3, [r7, #20]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d1f4      	bne.n	800fa18 <vTCPWindowDestroy+0x38>
		for( xRound = 0; xRound < 2; xRound++ )
 800fa2e:	693b      	ldr	r3, [r7, #16]
 800fa30:	3301      	adds	r3, #1
 800fa32:	613b      	str	r3, [r7, #16]
 800fa34:	693b      	ldr	r3, [r7, #16]
 800fa36:	2b01      	cmp	r3, #1
 800fa38:	ddd9      	ble.n	800f9ee <vTCPWindowDestroy+0xe>
				}
			}
		}
	}
 800fa3a:	bf00      	nop
 800fa3c:	3718      	adds	r7, #24
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd80      	pop	{r7, pc}
	...

0800fa44 <vTCPWindowCreate>:
#endif /* ipconfigUSE_TCP_WIN == 1 */
/*-----------------------------------------------------------*/

void vTCPWindowCreate( TCPWindow_t *pxWindow, uint32_t ulRxWindowLength,
	uint32_t ulTxWindowLength, uint32_t ulAckNumber, uint32_t ulSequenceNumber, uint32_t ulMSS )
{
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b084      	sub	sp, #16
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	60f8      	str	r0, [r7, #12]
 800fa4c:	60b9      	str	r1, [r7, #8]
 800fa4e:	607a      	str	r2, [r7, #4]
 800fa50:	603b      	str	r3, [r7, #0]
	/* Create and initialize a window. */

	#if( ipconfigUSE_TCP_WIN == 1 )
	{
		if( xTCPSegments == NULL )
 800fa52:	4b17      	ldr	r3, [pc, #92]	; (800fab0 <vTCPWindowCreate+0x6c>)
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d101      	bne.n	800fa5e <vTCPWindowCreate+0x1a>
		{
			prvCreateSectors();
 800fa5a:	f7ff fe5b 	bl	800f714 <prvCreateSectors>
		}

		vListInitialise( &pxWindow->xTxSegments );
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	3390      	adds	r3, #144	; 0x90
 800fa62:	4618      	mov	r0, r3
 800fa64:	f7f8 f84f 	bl	8007b06 <vListInitialise>
		vListInitialise( &pxWindow->xRxSegments );
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	33a4      	adds	r3, #164	; 0xa4
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f7f8 f84a 	bl	8007b06 <vListInitialise>

		vListInitialise( &pxWindow->xPriorityQueue );			/* Priority queue: segments which must be sent immediately */
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	3340      	adds	r3, #64	; 0x40
 800fa76:	4618      	mov	r0, r3
 800fa78:	f7f8 f845 	bl	8007b06 <vListInitialise>
		vListInitialise( &pxWindow->xTxQueue   );			/* Transmit queue: segments queued for transmission */
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	3354      	adds	r3, #84	; 0x54
 800fa80:	4618      	mov	r0, r3
 800fa82:	f7f8 f840 	bl	8007b06 <vListInitialise>
		vListInitialise( &pxWindow->xWaitQueue );			/* Waiting queue:  outstanding segments */
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	3368      	adds	r3, #104	; 0x68
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f7f8 f83b 	bl	8007b06 <vListInitialise>
	{
		FreeRTOS_debug_printf( ( "vTCPWindowCreate: for WinLen = Rx/Tx: %lu/%lu\n",
			ulRxWindowLength, ulTxWindowLength ) );
	}

	pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	68ba      	ldr	r2, [r7, #8]
 800fa94:	605a      	str	r2, [r3, #4]
	pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	687a      	ldr	r2, [r7, #4]
 800fa9a:	609a      	str	r2, [r3, #8]

	vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 800fa9c:	69fb      	ldr	r3, [r7, #28]
 800fa9e:	69ba      	ldr	r2, [r7, #24]
 800faa0:	6839      	ldr	r1, [r7, #0]
 800faa2:	68f8      	ldr	r0, [r7, #12]
 800faa4:	f000 f806 	bl	800fab4 <vTCPWindowInit>
}
 800faa8:	bf00      	nop
 800faaa:	3710      	adds	r7, #16
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}
 800fab0:	20004ec8 	.word	0x20004ec8

0800fab4 <vTCPWindowInit>:
/*-----------------------------------------------------------*/

void vTCPWindowInit( TCPWindow_t *pxWindow, uint32_t ulAckNumber, uint32_t ulSequenceNumber, uint32_t ulMSS )
{
 800fab4:	b480      	push	{r7}
 800fab6:	b087      	sub	sp, #28
 800fab8:	af00      	add	r7, sp, #0
 800faba:	60f8      	str	r0, [r7, #12]
 800fabc:	60b9      	str	r1, [r7, #8]
 800fabe:	607a      	str	r2, [r7, #4]
 800fac0:	603b      	str	r3, [r7, #0]
const int32_t l500ms = 500;
 800fac2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800fac6:	617b      	str	r3, [r7, #20]

	pxWindow->u.ulFlags = 0ul;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	2200      	movs	r2, #0
 800facc:	601a      	str	r2, [r3, #0]
	pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 800face:	68fa      	ldr	r2, [r7, #12]
 800fad0:	7813      	ldrb	r3, [r2, #0]
 800fad2:	f043 0301 	orr.w	r3, r3, #1
 800fad6:	7013      	strb	r3, [r2, #0]

	if( ulMSS != 0ul )
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d024      	beq.n	800fb28 <vTCPWindowInit+0x74>
	{
		if( pxWindow->usMSSInit != 0u )
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d004      	beq.n	800faf2 <vTCPWindowInit+0x3e>
		{
			pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	b29a      	uxth	r2, r3
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		}

		if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0u ) )
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800faf8:	461a      	mov	r2, r3
 800fafa:	683b      	ldr	r3, [r7, #0]
 800fafc:	429a      	cmp	r2, r3
 800fafe:	d804      	bhi.n	800fb0a <vTCPWindowInit+0x56>
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d10e      	bne.n	800fb28 <vTCPWindowInit+0x74>
		{
			pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	685a      	ldr	r2, [r3, #4]
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb14:	683a      	ldr	r2, [r7, #0]
 800fb16:	fb02 f203 	mul.w	r2, r2, r3
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	605a      	str	r2, [r3, #4]
			pxWindow->usMSS = ( uint16_t ) ulMSS;
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	b29a      	uxth	r2, r3
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
	}
	#endif /* ipconfigUSE_TCP_WIN == 1 */

	/*Start with a timeout of 2 * 500 ms (1 sec). */
	pxWindow->lSRTT = l500ms;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	697a      	ldr	r2, [r7, #20]
 800fb2c:	639a      	str	r2, [r3, #56]	; 0x38

	/* Just for logging, to print relative sequence numbers. */
	pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	68ba      	ldr	r2, [r7, #8]
 800fb32:	60da      	str	r2, [r3, #12]

	/* The segment asked for in the next transmission. */
	pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	68ba      	ldr	r2, [r7, #8]
 800fb38:	611a      	str	r2, [r3, #16]

	/* The right-hand side of the receive window. */
	pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	68ba      	ldr	r2, [r7, #8]
 800fb3e:	619a      	str	r2, [r3, #24]

	pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	687a      	ldr	r2, [r7, #4]
 800fb44:	61da      	str	r2, [r3, #28]

	/* The segment asked for in next transmission. */
	pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	687a      	ldr	r2, [r7, #4]
 800fb4a:	621a      	str	r2, [r3, #32]

	/* The sequence number given to the next outgoing byte to be added is
	maintained by lTCPWindowTxAdd(). */
	pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	687a      	ldr	r2, [r7, #4]
 800fb50:	635a      	str	r2, [r3, #52]	; 0x34

	/* The right-hand side of the transmit window. */
	pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	687a      	ldr	r2, [r7, #4]
 800fb56:	629a      	str	r2, [r3, #40]	; 0x28
	pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	687a      	ldr	r2, [r7, #4]
 800fb5c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800fb5e:	bf00      	nop
 800fb60:	371c      	adds	r7, #28
 800fb62:	46bd      	mov	sp, r7
 800fb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb68:	4770      	bx	lr

0800fb6a <xTCPWindowRxConfirm>:
 *=============================================================================*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowRxConfirm( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber, uint32_t ulLength )
	{
 800fb6a:	b580      	push	{r7, lr}
 800fb6c:	b08a      	sub	sp, #40	; 0x28
 800fb6e:	af00      	add	r7, sp, #0
 800fb70:	60f8      	str	r0, [r7, #12]
 800fb72:	60b9      	str	r1, [r7, #8]
 800fb74:	607a      	str	r2, [r7, #4]
	TCPSegment_t *pxBest = NULL;
 800fb76:	2300      	movs	r3, #0
 800fb78:	627b      	str	r3, [r7, #36]	; 0x24
	const ListItem_t *pxIterator;
	uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 800fb7a:	68ba      	ldr	r2, [r7, #8]
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	4413      	add	r3, r2
 800fb80:	61fb      	str	r3, [r7, #28]
	const MiniListItem_t* pxEnd = ( const MiniListItem_t* ) listGET_END_MARKER( &pxWindow->xRxSegments );
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	33ac      	adds	r3, #172	; 0xac
 800fb86:	61bb      	str	r3, [r7, #24]
		and (ulSequenceNumber+ulLength).  Normally none will be found, because
		the next RX segment should have a sequence number equal to
		'(ulSequenceNumber+ulLength)'. */

		/* Iterate through all RX segments that are stored: */
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800fb88:	69bb      	ldr	r3, [r7, #24]
 800fb8a:	685b      	ldr	r3, [r3, #4]
 800fb8c:	623b      	str	r3, [r7, #32]
 800fb8e:	e027      	b.n	800fbe0 <xTCPWindowRxConfirm+0x76>
			 pxIterator != ( const ListItem_t * ) pxEnd;
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800fb90:	6a3b      	ldr	r3, [r7, #32]
 800fb92:	68db      	ldr	r3, [r3, #12]
 800fb94:	617b      	str	r3, [r7, #20]
			/* And see if there is a segment for which:
			'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
			If there are more matching segments, the one with the lowest sequence number
			shall be taken */
			if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 800fb96:	697b      	ldr	r3, [r7, #20]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	68b9      	ldr	r1, [r7, #8]
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f7ff fd5a 	bl	800f656 <xSequenceGreaterThanOrEqual>
 800fba2:	4603      	mov	r3, r0
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d018      	beq.n	800fbda <xTCPWindowRxConfirm+0x70>
				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 800fba8:	697b      	ldr	r3, [r7, #20]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	69f9      	ldr	r1, [r7, #28]
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f7ff fd2d 	bl	800f60e <xSequenceLessThan>
 800fbb4:	4603      	mov	r3, r0
			if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d00f      	beq.n	800fbda <xTCPWindowRxConfirm+0x70>
			{
				if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 800fbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d00a      	beq.n	800fbd6 <xTCPWindowRxConfirm+0x6c>
 800fbc0:	697b      	ldr	r3, [r7, #20]
 800fbc2:	681a      	ldr	r2, [r3, #0]
 800fbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	4619      	mov	r1, r3
 800fbca:	4610      	mov	r0, r2
 800fbcc:	f7ff fd1f 	bl	800f60e <xSequenceLessThan>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d001      	beq.n	800fbda <xTCPWindowRxConfirm+0x70>
				{
					pxBest = pxSegment;
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	627b      	str	r3, [r7, #36]	; 0x24
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800fbda:	6a3b      	ldr	r3, [r7, #32]
 800fbdc:	685b      	ldr	r3, [r3, #4]
 800fbde:	623b      	str	r3, [r7, #32]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800fbe0:	6a3a      	ldr	r2, [r7, #32]
 800fbe2:	69bb      	ldr	r3, [r7, #24]
 800fbe4:	429a      	cmp	r2, r3
 800fbe6:	d1d3      	bne.n	800fb90 <xTCPWindowRxConfirm+0x26>
				}
			}
		}

		if( ( pxBest != NULL ) &&
 800fbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d003      	beq.n	800fbf6 <xTCPWindowRxConfirm+0x8c>
			( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 800fbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbf0:	681a      	ldr	r2, [r3, #0]
		if( ( pxBest != NULL ) &&
 800fbf2:	68bb      	ldr	r3, [r7, #8]
 800fbf4:	429a      	cmp	r2, r3
				pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber,
				pxBest->lDataLength,
				pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceNumber ) );
		}

		return pxBest;
 800fbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	3728      	adds	r7, #40	; 0x28
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}

0800fc00 <lTCPWindowRxCheck>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	int32_t lTCPWindowRxCheck( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber, uint32_t ulLength, uint32_t ulSpace )
	{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b08a      	sub	sp, #40	; 0x28
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	60f8      	str	r0, [r7, #12]
 800fc08:	60b9      	str	r1, [r7, #8]
 800fc0a:	607a      	str	r2, [r7, #4]
 800fc0c:	603b      	str	r3, [r7, #0]
		or there is not enough space.

		As a side-effect, pxWindow->ulUserDataLength will get set to non-zero,
		if more Rx data may be passed to the user after this packet. */

		ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	691b      	ldr	r3, [r3, #16]
 800fc12:	627b      	str	r3, [r7, #36]	; 0x24

		/* For Selective Ack (SACK), used when out-of-sequence data come in. */
		pxWindow->ucOptionLength = 0u;
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	2200      	movs	r2, #0
 800fc18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		/* Non-zero if TCP-windows contains data which must be popped. */
		pxWindow->ulUserDataLength = 0ul;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	2200      	movs	r2, #0
 800fc20:	631a      	str	r2, [r3, #48]	; 0x30

		if( ulCurrentSequenceNumber == ulSequenceNumber )
 800fc22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	429a      	cmp	r2, r3
 800fc28:	d142      	bne.n	800fcb0 <lTCPWindowRxCheck+0xb0>
		{
			/* This is the packet with the lowest sequence number we're waiting
			for.  It can be passed directly to the rx stream. */
			if( ulLength > ulSpace )
 800fc2a:	687a      	ldr	r2, [r7, #4]
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	429a      	cmp	r2, r3
 800fc30:	d903      	bls.n	800fc3a <lTCPWindowRxCheck+0x3a>
			{
				FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu bytes, due to lack of space (%lu)\n", ulLength, ulSpace ) );
				lReturn = -1;
 800fc32:	f04f 33ff 	mov.w	r3, #4294967295
 800fc36:	61fb      	str	r3, [r7, #28]
 800fc38:	e0b6      	b.n	800fda8 <lTCPWindowRxCheck+0x1a8>
			}
			else
			{
				ulCurrentSequenceNumber += ulLength;
 800fc3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	4413      	add	r3, r2
 800fc40:	627b      	str	r3, [r7, #36]	; 0x24

				if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0 )
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d02b      	beq.n	800fca4 <lTCPWindowRxCheck+0xa4>
				{
					ulSavedSequenceNumber = ulCurrentSequenceNumber;
 800fc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc4e:	61bb      	str	r3, [r7, #24]
                    If the server is forced to retransmit packets several time in a row it might send a batch of concatenated packet for speed.
                    So we cannot rely on the packets between ulSequenceNumber and ulSequenceNumber + ulLength to be sequential and it is better to just
                    clean them out. */
                    do
                    {
                        pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 800fc50:	687a      	ldr	r2, [r7, #4]
 800fc52:	68b9      	ldr	r1, [r7, #8]
 800fc54:	68f8      	ldr	r0, [r7, #12]
 800fc56:	f7ff ff88 	bl	800fb6a <xTCPWindowRxConfirm>
 800fc5a:	6178      	str	r0, [r7, #20]

                        if ( pxFound != NULL )
 800fc5c:	697b      	ldr	r3, [r7, #20]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d002      	beq.n	800fc68 <lTCPWindowRxCheck+0x68>
                        {
                            /* Remove it because it will be passed to user directly. */
                            vTCPWindowFree( pxFound );
 800fc62:	6978      	ldr	r0, [r7, #20]
 800fc64:	f7ff fe90 	bl	800f988 <vTCPWindowFree>
                        }
                    } while ( pxFound );
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d1f0      	bne.n	800fc50 <lTCPWindowRxCheck+0x50>

					/*  Check for following segments that are already in the
					queue and increment ulCurrentSequenceNumber. */
					while( ( pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber ) ) != NULL )
 800fc6e:	e008      	b.n	800fc82 <lTCPWindowRxCheck+0x82>
					{
						ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 800fc70:	697b      	ldr	r3, [r7, #20]
 800fc72:	689b      	ldr	r3, [r3, #8]
 800fc74:	461a      	mov	r2, r3
 800fc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc78:	4413      	add	r3, r2
 800fc7a:	627b      	str	r3, [r7, #36]	; 0x24

						/* As all packet below this one have been passed to the
						user it can be discarded. */
						vTCPWindowFree( pxFound );
 800fc7c:	6978      	ldr	r0, [r7, #20]
 800fc7e:	f7ff fe83 	bl	800f988 <vTCPWindowFree>
					while( ( pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber ) ) != NULL )
 800fc82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc84:	68f8      	ldr	r0, [r7, #12]
 800fc86:	f7ff fd95 	bl	800f7b4 <xTCPWindowRxFind>
 800fc8a:	6178      	str	r0, [r7, #20]
 800fc8c:	697b      	ldr	r3, [r7, #20]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d1ee      	bne.n	800fc70 <lTCPWindowRxCheck+0x70>
					}

					if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 800fc92:	69ba      	ldr	r2, [r7, #24]
 800fc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc96:	429a      	cmp	r2, r3
 800fc98:	d004      	beq.n	800fca4 <lTCPWindowRxCheck+0xa4>
					{
						/*  After the current data-package, there is more data
						to be popped. */
						pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 800fc9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc9c:	69bb      	ldr	r3, [r7, #24]
 800fc9e:	1ad2      	subs	r2, r2, r3
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	631a      	str	r2, [r3, #48]	; 0x30
								listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
						}
					}
				}

				pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fca8:	611a      	str	r2, [r3, #16]

				/* Packet was expected, may be passed directly to the socket
				buffer or application.  Store the packet at offset 0. */
				lReturn = 0;
 800fcaa:	2300      	movs	r3, #0
 800fcac:	61fb      	str	r3, [r7, #28]
 800fcae:	e07b      	b.n	800fda8 <lTCPWindowRxCheck+0x1a8>
			}
		}
		else if( ulCurrentSequenceNumber == ( ulSequenceNumber + 1UL ) )
 800fcb0:	68bb      	ldr	r3, [r7, #8]
 800fcb2:	1c5a      	adds	r2, r3, #1
 800fcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb6:	429a      	cmp	r2, r3
 800fcb8:	d103      	bne.n	800fcc2 <lTCPWindowRxCheck+0xc2>
		{
			/* Looks like a TCP keep-alive message.  Do not accept/store Rx data
			ulUserDataLength = 0. Not packet out-of-sync.  Just reply to it. */
			lReturn = -1;
 800fcba:	f04f 33ff 	mov.w	r3, #4294967295
 800fcbe:	61fb      	str	r3, [r7, #28]
 800fcc0:	e072      	b.n	800fda8 <lTCPWindowRxCheck+0x1a8>
			/* The packet is not the one expected.  See if it falls within the Rx
			window so it can be stored. */

			/*  An "out-of-sequence" segment was received, must have missed one.
			Prepare a SACK (Selective ACK). */
			ulLast = ulSequenceNumber + ulLength;
 800fcc2:	68ba      	ldr	r2, [r7, #8]
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	4413      	add	r3, r2
 800fcc8:	623b      	str	r3, [r7, #32]
			lDistance = ( int32_t ) ( ulLast - ulCurrentSequenceNumber );
 800fcca:	6a3a      	ldr	r2, [r7, #32]
 800fccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcce:	1ad3      	subs	r3, r2, r3
 800fcd0:	613b      	str	r3, [r7, #16]

			if( lDistance <= 0 )
 800fcd2:	693b      	ldr	r3, [r7, #16]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	dc03      	bgt.n	800fce0 <lTCPWindowRxCheck+0xe0>
			{
				/* An earlier has been received, must be a retransmission of a
				packet that has been accepted already.  No need to send out a
				Selective ACK (SACK). */
				lReturn = -1;
 800fcd8:	f04f 33ff 	mov.w	r3, #4294967295
 800fcdc:	61fb      	str	r3, [r7, #28]
 800fcde:	e063      	b.n	800fda8 <lTCPWindowRxCheck+0x1a8>
			}
			else if( lDistance > ( int32_t ) ulSpace )
 800fce0:	683b      	ldr	r3, [r7, #0]
 800fce2:	693a      	ldr	r2, [r7, #16]
 800fce4:	429a      	cmp	r2, r3
 800fce6:	dd09      	ble.n	800fcfc <lTCPWindowRxCheck+0xfc>
			{
				/* The new segment is ahead of rx.ulCurrentSequenceNumber.  The
				sequence number of this packet is too far ahead, ignore it. */
				FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu+%lu bytes, due to lack of space (%lu)\n", lDistance, ulLength, ulSpace ) );
				lReturn = -1;
 800fce8:	f04f 33ff 	mov.w	r3, #4294967295
 800fcec:	61fb      	str	r3, [r7, #28]
 800fcee:	e05b      	b.n	800fda8 <lTCPWindowRxCheck+0x1a8>
				 * This is useful because subsequent packets will be SACK'd with
				 * single one message
				 */
				while( ( pxFound = xTCPWindowRxFind( pxWindow, ulLast ) ) != NULL )
				{
					ulLast += ( uint32_t ) pxFound->lDataLength;
 800fcf0:	697b      	ldr	r3, [r7, #20]
 800fcf2:	689b      	ldr	r3, [r3, #8]
 800fcf4:	461a      	mov	r2, r3
 800fcf6:	6a3b      	ldr	r3, [r7, #32]
 800fcf8:	4413      	add	r3, r2
 800fcfa:	623b      	str	r3, [r7, #32]
				while( ( pxFound = xTCPWindowRxFind( pxWindow, ulLast ) ) != NULL )
 800fcfc:	6a39      	ldr	r1, [r7, #32]
 800fcfe:	68f8      	ldr	r0, [r7, #12]
 800fd00:	f7ff fd58 	bl	800f7b4 <xTCPWindowRxFind>
 800fd04:	6178      	str	r0, [r7, #20]
 800fd06:	697b      	ldr	r3, [r7, #20]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d1f1      	bne.n	800fcf0 <lTCPWindowRxCheck+0xf0>
						ulLast - pxWindow->rx.ulFirstSequenceNumber ) );
				}

				/* Now prepare the SACK message.
				Code OPTION_CODE_SINGLE_SACK already in network byte order. */
				pxWindow->ulOptionsData[0] = OPTION_CODE_SINGLE_SACK;
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	4a29      	ldr	r2, [pc, #164]	; (800fdb4 <lTCPWindowRxCheck+0x1b4>)
 800fd10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

				/* First sequence number that we received. */
				pxWindow->ulOptionsData[1] = FreeRTOS_htonl( ulSequenceNumber );
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	061a      	lsls	r2, r3, #24
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	021b      	lsls	r3, r3, #8
 800fd1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fd20:	431a      	orrs	r2, r3
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	0a1b      	lsrs	r3, r3, #8
 800fd26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800fd2a:	431a      	orrs	r2, r3
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	0e1b      	lsrs	r3, r3, #24
 800fd30:	431a      	orrs	r2, r3
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

				/* Last + 1 */
				pxWindow->ulOptionsData[2] = FreeRTOS_htonl( ulLast );
 800fd38:	6a3b      	ldr	r3, [r7, #32]
 800fd3a:	061a      	lsls	r2, r3, #24
 800fd3c:	6a3b      	ldr	r3, [r7, #32]
 800fd3e:	021b      	lsls	r3, r3, #8
 800fd40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fd44:	431a      	orrs	r2, r3
 800fd46:	6a3b      	ldr	r3, [r7, #32]
 800fd48:	0a1b      	lsrs	r3, r3, #8
 800fd4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800fd4e:	431a      	orrs	r2, r3
 800fd50:	6a3b      	ldr	r3, [r7, #32]
 800fd52:	0e1b      	lsrs	r3, r3, #24
 800fd54:	431a      	orrs	r2, r3
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

				/* Which make 12 (3*4) option bytes. */
				pxWindow->ucOptionLength = 3 * sizeof( pxWindow->ulOptionsData[ 0 ] );
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	220c      	movs	r2, #12
 800fd60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

				pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 800fd64:	68b9      	ldr	r1, [r7, #8]
 800fd66:	68f8      	ldr	r0, [r7, #12]
 800fd68:	f7ff fd24 	bl	800f7b4 <xTCPWindowRxFind>
 800fd6c:	6178      	str	r0, [r7, #20]

				if( pxFound != NULL )
 800fd6e:	697b      	ldr	r3, [r7, #20]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d003      	beq.n	800fd7c <lTCPWindowRxCheck+0x17c>
				{
					/* This out-of-sequence packet has been received for a
					second time.  It is already stored but do send a SACK
					again. */
					lReturn = -1;
 800fd74:	f04f 33ff 	mov.w	r3, #4294967295
 800fd78:	61fb      	str	r3, [r7, #28]
 800fd7a:	e015      	b.n	800fda8 <lTCPWindowRxCheck+0x1a8>
				}
				else
				{
					pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 800fd7c:	687a      	ldr	r2, [r7, #4]
 800fd7e:	2301      	movs	r3, #1
 800fd80:	68b9      	ldr	r1, [r7, #8]
 800fd82:	68f8      	ldr	r0, [r7, #12]
 800fd84:	f7ff fd3e 	bl	800f804 <xTCPWindowNew>
 800fd88:	6178      	str	r0, [r7, #20]

					if( pxFound == NULL )
 800fd8a:	697b      	ldr	r3, [r7, #20]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d107      	bne.n	800fda0 <lTCPWindowRxCheck+0x1a0>
					{
						/* Can not send a SACK, because the segment cannot be
						stored. */
						pxWindow->ucOptionLength = 0u;
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	2200      	movs	r2, #0
 800fd94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

						/* Needs to be stored but there is no segment
						available. */
						lReturn = -1;
 800fd98:	f04f 33ff 	mov.w	r3, #4294967295
 800fd9c:	61fb      	str	r3, [r7, #28]
 800fd9e:	e003      	b.n	800fda8 <lTCPWindowRxCheck+0x1a8>
							FreeRTOS_flush_logging( );
						}

						/* Return a positive value.  The packet may be accepted
						and stored but an earlier packet is still missing. */
						lReturn = ( int32_t ) ( ulSequenceNumber - ulCurrentSequenceNumber );
 800fda0:	68ba      	ldr	r2, [r7, #8]
 800fda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda4:	1ad3      	subs	r3, r2, r3
 800fda6:	61fb      	str	r3, [r7, #28]
					}
				}
			}
		}

		return lReturn;
 800fda8:	69fb      	ldr	r3, [r7, #28]
	}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	3728      	adds	r7, #40	; 0x28
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}
 800fdb2:	bf00      	nop
 800fdb4:	0a050101 	.word	0x0a050101

0800fdb8 <lTCPIncrementTxPosition>:
 *=============================================================================*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static int32_t lTCPIncrementTxPosition( int32_t lPosition, int32_t lMax, int32_t lCount )
	{
 800fdb8:	b480      	push	{r7}
 800fdba:	b085      	sub	sp, #20
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	60f8      	str	r0, [r7, #12]
 800fdc0:	60b9      	str	r1, [r7, #8]
 800fdc2:	607a      	str	r2, [r7, #4]
		/* +TCP stores data in circular buffers.  Calculate the next position to
		store. */
		lPosition += lCount;
 800fdc4:	68fa      	ldr	r2, [r7, #12]
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	4413      	add	r3, r2
 800fdca:	60fb      	str	r3, [r7, #12]
		if( lPosition >= lMax )
 800fdcc:	68fa      	ldr	r2, [r7, #12]
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	429a      	cmp	r2, r3
 800fdd2:	db03      	blt.n	800fddc <lTCPIncrementTxPosition+0x24>
		{
			lPosition -= lMax;
 800fdd4:	68fa      	ldr	r2, [r7, #12]
 800fdd6:	68bb      	ldr	r3, [r7, #8]
 800fdd8:	1ad3      	subs	r3, r2, r3
 800fdda:	60fb      	str	r3, [r7, #12]
		}

		return lPosition;
 800fddc:	68fb      	ldr	r3, [r7, #12]
	}
 800fdde:	4618      	mov	r0, r3
 800fde0:	3714      	adds	r7, #20
 800fde2:	46bd      	mov	sp, r7
 800fde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde8:	4770      	bx	lr
	...

0800fdec <lTCPWindowTxAdd>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	int32_t lTCPWindowTxAdd( TCPWindow_t *pxWindow, uint32_t ulLength, int32_t lPosition, int32_t lMax )
	{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b088      	sub	sp, #32
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	60f8      	str	r0, [r7, #12]
 800fdf4:	60b9      	str	r1, [r7, #8]
 800fdf6:	607a      	str	r2, [r7, #4]
 800fdf8:	603b      	str	r3, [r7, #0]
	int32_t lBytesLeft = ( int32_t ) ulLength, lToWrite;
 800fdfa:	68bb      	ldr	r3, [r7, #8]
 800fdfc:	61fb      	str	r3, [r7, #28]
	int32_t lDone = 0;
 800fdfe:	2300      	movs	r3, #0
 800fe00:	61bb      	str	r3, [r7, #24]
	TCPSegment_t *pxSegment = pxWindow->pxHeadSegment;
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fe06:	617b      	str	r3, [r7, #20]

		/* Puts a message in the Tx-window (after buffer size has been
		verified). */
		if( pxSegment != NULL )
 800fe08:	697b      	ldr	r3, [r7, #20]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	f000 8096 	beq.w	800ff3c <lTCPWindowTxAdd+0x150>
		{
			if( pxSegment->lDataLength < pxSegment->lMaxLength )
 800fe10:	697b      	ldr	r3, [r7, #20]
 800fe12:	689a      	ldr	r2, [r3, #8]
 800fe14:	697b      	ldr	r3, [r7, #20]
 800fe16:	685b      	ldr	r3, [r3, #4]
 800fe18:	429a      	cmp	r2, r3
 800fe1a:	f280 808f 	bge.w	800ff3c <lTCPWindowTxAdd+0x150>
			{
				if( ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength != 0 ) )
 800fe1e:	697b      	ldr	r3, [r7, #20]
 800fe20:	7d9b      	ldrb	r3, [r3, #22]
 800fe22:	f003 0301 	and.w	r3, r3, #1
 800fe26:	b2db      	uxtb	r3, r3
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	f040 8087 	bne.w	800ff3c <lTCPWindowTxAdd+0x150>
 800fe2e:	697b      	ldr	r3, [r7, #20]
 800fe30:	689b      	ldr	r3, [r3, #8]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	f000 8082 	beq.w	800ff3c <lTCPWindowTxAdd+0x150>
				{
					/* Adding data to a segment that was already in the TX queue.  It
					will be filled-up to a maximum of MSS (maximum segment size). */
					lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 800fe38:	697b      	ldr	r3, [r7, #20]
 800fe3a:	685a      	ldr	r2, [r3, #4]
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	689b      	ldr	r3, [r3, #8]
 800fe40:	1ad3      	subs	r3, r2, r3
 800fe42:	4619      	mov	r1, r3
 800fe44:	69f8      	ldr	r0, [r7, #28]
 800fe46:	f7ff fbb1 	bl	800f5ac <FreeRTOS_min_int32>
 800fe4a:	6138      	str	r0, [r7, #16]

					pxSegment->lDataLength += lToWrite;
 800fe4c:	697b      	ldr	r3, [r7, #20]
 800fe4e:	689a      	ldr	r2, [r3, #8]
 800fe50:	693b      	ldr	r3, [r7, #16]
 800fe52:	441a      	add	r2, r3
 800fe54:	697b      	ldr	r3, [r7, #20]
 800fe56:	609a      	str	r2, [r3, #8]

					if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 800fe58:	697b      	ldr	r3, [r7, #20]
 800fe5a:	689a      	ldr	r2, [r3, #8]
 800fe5c:	697b      	ldr	r3, [r7, #20]
 800fe5e:	685b      	ldr	r3, [r3, #4]
 800fe60:	429a      	cmp	r2, r3
 800fe62:	db02      	blt.n	800fe6a <lTCPWindowTxAdd+0x7e>
					{
						/* This segment is full, don't add more bytes. */
						pxWindow->pxHeadSegment = NULL;
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	2200      	movs	r2, #0
 800fe68:	67da      	str	r2, [r3, #124]	; 0x7c
					}

					lBytesLeft -= lToWrite;
 800fe6a:	69fa      	ldr	r2, [r7, #28]
 800fe6c:	693b      	ldr	r3, [r7, #16]
 800fe6e:	1ad3      	subs	r3, r2, r3
 800fe70:	61fb      	str	r3, [r7, #28]

					/* ulNextTxSequenceNumber is the sequence number of the next byte to
					be stored for transmission. */
					pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fe76:	693b      	ldr	r3, [r7, #16]
 800fe78:	441a      	add	r2, r3
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	635a      	str	r2, [r3, #52]	; 0x34

					/* Increased the return value. */
					lDone += lToWrite;
 800fe7e:	69ba      	ldr	r2, [r7, #24]
 800fe80:	693b      	ldr	r3, [r7, #16]
 800fe82:	4413      	add	r3, r2
 800fe84:	61bb      	str	r3, [r7, #24]

					/* Some detailed logging, for those who're interested. */
					if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != 0 ) )
 800fe86:	4b32      	ldr	r3, [pc, #200]	; (800ff50 <lTCPWindowTxAdd+0x164>)
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	2b01      	cmp	r3, #1
						FreeRTOS_flush_logging( );
					}

					/* Calculate the next position in the circular data buffer, knowing
					its maximum length 'lMax'. */
					lPosition = lTCPIncrementTxPosition( lPosition, lMax, lToWrite );
 800fe8c:	693a      	ldr	r2, [r7, #16]
 800fe8e:	6839      	ldr	r1, [r7, #0]
 800fe90:	6878      	ldr	r0, [r7, #4]
 800fe92:	f7ff ff91 	bl	800fdb8 <lTCPIncrementTxPosition>
 800fe96:	6078      	str	r0, [r7, #4]
				}
			}
		}

		while( lBytesLeft > 0 )
 800fe98:	e050      	b.n	800ff3c <lTCPWindowTxAdd+0x150>
		{
			/* The current transmission segment is full, create new segments as
			needed. */
			pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, pxWindow->usMSS );
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800fea4:	461a      	mov	r2, r3
 800fea6:	2300      	movs	r3, #0
 800fea8:	68f8      	ldr	r0, [r7, #12]
 800feaa:	f7ff fcab 	bl	800f804 <xTCPWindowNew>
 800feae:	6178      	str	r0, [r7, #20]

			if( pxSegment != NULL )
 800feb0:	697b      	ldr	r3, [r7, #20]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d046      	beq.n	800ff44 <lTCPWindowTxAdd+0x158>
			{
				/* Store as many as needed, but no more than the maximum
				(MSS). */
				lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 800feb6:	697b      	ldr	r3, [r7, #20]
 800feb8:	685b      	ldr	r3, [r3, #4]
 800feba:	4619      	mov	r1, r3
 800febc:	69f8      	ldr	r0, [r7, #28]
 800febe:	f7ff fb75 	bl	800f5ac <FreeRTOS_min_int32>
 800fec2:	6138      	str	r0, [r7, #16]

				pxSegment->lDataLength = lToWrite;
 800fec4:	697b      	ldr	r3, [r7, #20]
 800fec6:	693a      	ldr	r2, [r7, #16]
 800fec8:	609a      	str	r2, [r3, #8]
				pxSegment->lStreamPos = lPosition;
 800feca:	697b      	ldr	r3, [r7, #20]
 800fecc:	687a      	ldr	r2, [r7, #4]
 800fece:	60da      	str	r2, [r3, #12]
				lBytesLeft -= lToWrite;
 800fed0:	69fa      	ldr	r2, [r7, #28]
 800fed2:	693b      	ldr	r3, [r7, #16]
 800fed4:	1ad3      	subs	r3, r2, r3
 800fed6:	61fb      	str	r3, [r7, #28]
				lPosition = lTCPIncrementTxPosition( lPosition, lMax, lToWrite );
 800fed8:	693a      	ldr	r2, [r7, #16]
 800feda:	6839      	ldr	r1, [r7, #0]
 800fedc:	6878      	ldr	r0, [r7, #4]
 800fede:	f7ff ff6b 	bl	800fdb8 <lTCPIncrementTxPosition>
 800fee2:	6078      	str	r0, [r7, #4]
				pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fee8:	693b      	ldr	r3, [r7, #16]
 800feea:	441a      	add	r2, r3
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	635a      	str	r2, [r3, #52]	; 0x34
				lDone += lToWrite;
 800fef0:	69ba      	ldr	r2, [r7, #24]
 800fef2:	693b      	ldr	r3, [r7, #16]
 800fef4:	4413      	add	r3, r2
 800fef6:	61bb      	str	r3, [r7, #24]

				/* Link this segment in the Tx-Queue. */
				vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800fefe:	697b      	ldr	r3, [r7, #20]
 800ff00:	3318      	adds	r3, #24
 800ff02:	4619      	mov	r1, r3
 800ff04:	4610      	mov	r0, r2
 800ff06:	f7ff fbb7 	bl	800f678 <vListInsertFifo>

				/* Let 'pxHeadSegment' point to this segment if there is still
				space. */
				if( pxSegment->lDataLength < pxSegment->lMaxLength )
 800ff0a:	697b      	ldr	r3, [r7, #20]
 800ff0c:	689a      	ldr	r2, [r3, #8]
 800ff0e:	697b      	ldr	r3, [r7, #20]
 800ff10:	685b      	ldr	r3, [r3, #4]
 800ff12:	429a      	cmp	r2, r3
 800ff14:	da03      	bge.n	800ff1e <lTCPWindowTxAdd+0x132>
				{
					pxWindow->pxHeadSegment = pxSegment;
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	697a      	ldr	r2, [r7, #20]
 800ff1a:	67da      	str	r2, [r3, #124]	; 0x7c
 800ff1c:	e002      	b.n	800ff24 <lTCPWindowTxAdd+0x138>
				}
				else
				{
					pxWindow->pxHeadSegment = NULL;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	2200      	movs	r2, #0
 800ff22:	67da      	str	r2, [r3, #124]	; 0x7c
				}

				if( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != 0 )
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800ff2a:	2b17      	cmp	r3, #23
 800ff2c:	d006      	beq.n	800ff3c <lTCPWindowTxAdd+0x150>
				{
					if( ( xTCPWindowLoggingLevel >= 3 ) ||
 800ff2e:	4b08      	ldr	r3, [pc, #32]	; (800ff50 <lTCPWindowTxAdd+0x164>)
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	2b02      	cmp	r3, #2
 800ff34:	dc02      	bgt.n	800ff3c <lTCPWindowTxAdd+0x150>
						( ( xTCPWindowLoggingLevel >= 2 ) && ( pxWindow->pxHeadSegment != NULL ) ) )
 800ff36:	4b06      	ldr	r3, [pc, #24]	; (800ff50 <lTCPWindowTxAdd+0x164>)
 800ff38:	681b      	ldr	r3, [r3, #0]
					if( ( xTCPWindowLoggingLevel >= 3 ) ||
 800ff3a:	2b01      	cmp	r3, #1
		while( lBytesLeft > 0 )
 800ff3c:	69fb      	ldr	r3, [r7, #28]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	dcab      	bgt.n	800fe9a <lTCPWindowTxAdd+0xae>
 800ff42:	e000      	b.n	800ff46 <lTCPWindowTxAdd+0x15a>
				No more data can be sent at the moment. */
				if( lDone != 0 )
				{
					FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %ld bytes)\n", lBytesLeft ) );
				}
				break;
 800ff44:	bf00      	nop
			}
		}

		return lDone;
 800ff46:	69bb      	ldr	r3, [r7, #24]
	}
 800ff48:	4618      	mov	r0, r3
 800ff4a:	3720      	adds	r7, #32
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}
 800ff50:	20004ee0 	.word	0x20004ee0

0800ff54 <xTCPWindowTxDone>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	BaseType_t xTCPWindowTxDone( TCPWindow_t *pxWindow )
	{
 800ff54:	b480      	push	{r7}
 800ff56:	b083      	sub	sp, #12
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
		return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments) );
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	bf0c      	ite	eq
 800ff66:	2301      	moveq	r3, #1
 800ff68:	2300      	movne	r3, #0
 800ff6a:	b2db      	uxtb	r3, r3
	}
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	370c      	adds	r7, #12
 800ff70:	46bd      	mov	sp, r7
 800ff72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff76:	4770      	bx	lr

0800ff78 <prvTCPWindowTxHasSpace>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t *pxWindow, uint32_t ulWindowSize )
	{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b086      	sub	sp, #24
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
 800ff80:	6039      	str	r1, [r7, #0]
	TCPSegment_t *pxSegment;

		/* This function will look if there is new transmission data.  It will
		return true if there is data to be sent. */

		pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	3354      	adds	r3, #84	; 0x54
 800ff86:	4618      	mov	r0, r3
 800ff88:	f7ff fce1 	bl	800f94e <xTCPWindowPeekHead>
 800ff8c:	60f8      	str	r0, [r7, #12]

		if( pxSegment == NULL )
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d102      	bne.n	800ff9a <prvTCPWindowTxHasSpace+0x22>
		{
			xHasSpace = pdFALSE;
 800ff94:	2300      	movs	r3, #0
 800ff96:	613b      	str	r3, [r7, #16]
 800ff98:	e02f      	b.n	800fffa <prvTCPWindowTxHasSpace+0x82>
		}
		else
		{
			/* How much data is outstanding, i.e. how much data has been sent
			but not yet acknowledged ? */
			if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	6a1b      	ldr	r3, [r3, #32]
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	d306      	bcc.n	800ffb4 <prvTCPWindowTxHasSpace+0x3c>
			{
				ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	6a1b      	ldr	r3, [r3, #32]
 800ffae:	1ad3      	subs	r3, r2, r3
 800ffb0:	617b      	str	r3, [r7, #20]
 800ffb2:	e001      	b.n	800ffb8 <prvTCPWindowTxHasSpace+0x40>
			}
			else
			{
				ulTxOutstanding = 0UL;
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	617b      	str	r3, [r7, #20]
			}

			/* Subtract this from the peer's space. */
			ulWindowSize -= FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 800ffb8:	6979      	ldr	r1, [r7, #20]
 800ffba:	6838      	ldr	r0, [r7, #0]
 800ffbc:	f7ff fb06 	bl	800f5cc <FreeRTOS_min_uint32>
 800ffc0:	4602      	mov	r2, r0
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	1a9b      	subs	r3, r3, r2
 800ffc6:	603b      	str	r3, [r7, #0]

			/* See if the next segment may be sent. */
			if( ulWindowSize >= ( uint32_t ) pxSegment->lDataLength )
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	689b      	ldr	r3, [r3, #8]
 800ffcc:	461a      	mov	r2, r3
 800ffce:	683b      	ldr	r3, [r7, #0]
 800ffd0:	429a      	cmp	r2, r3
 800ffd2:	d802      	bhi.n	800ffda <prvTCPWindowTxHasSpace+0x62>
			{
				xHasSpace = pdTRUE;
 800ffd4:	2301      	movs	r3, #1
 800ffd6:	613b      	str	r3, [r7, #16]
 800ffd8:	e001      	b.n	800ffde <prvTCPWindowTxHasSpace+0x66>
			}
			else
			{
				xHasSpace = pdFALSE;
 800ffda:	2300      	movs	r3, #0
 800ffdc:	613b      	str	r3, [r7, #16]

			/* If 'xHasSpace', it looks like the peer has at least space for 1
			more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
			limitation of the transmission window (in case of many resends it
			may be decreased). */
			if( ( ulTxOutstanding != 0UL ) && ( pxWindow->xSize.ulTxWindowLength < ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) )
 800ffde:	697b      	ldr	r3, [r7, #20]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d00a      	beq.n	800fffa <prvTCPWindowTxHasSpace+0x82>
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	689a      	ldr	r2, [r3, #8]
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	689b      	ldr	r3, [r3, #8]
 800ffec:	4619      	mov	r1, r3
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	440b      	add	r3, r1
 800fff2:	429a      	cmp	r2, r3
 800fff4:	d201      	bcs.n	800fffa <prvTCPWindowTxHasSpace+0x82>
			{
				xHasSpace = pdFALSE;
 800fff6:	2300      	movs	r3, #0
 800fff8:	613b      	str	r3, [r7, #16]
			}
		}

		return xHasSpace;
 800fffa:	693b      	ldr	r3, [r7, #16]
	}
 800fffc:	4618      	mov	r0, r3
 800fffe:	3718      	adds	r7, #24
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}

08010004 <xTCPWindowTxHasData>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	BaseType_t xTCPWindowTxHasData( TCPWindow_t *pxWindow, uint32_t ulWindowSize, TickType_t *pulDelay )
	{
 8010004:	b580      	push	{r7, lr}
 8010006:	b088      	sub	sp, #32
 8010008:	af00      	add	r7, sp, #0
 801000a:	60f8      	str	r0, [r7, #12]
 801000c:	60b9      	str	r1, [r7, #8]
 801000e:	607a      	str	r2, [r7, #4]
	TCPSegment_t *pxSegment;
	BaseType_t xReturn;
	TickType_t ulAge, ulMaxAge;

		*pulDelay = 0u;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	2200      	movs	r2, #0
 8010014:	601a      	str	r2, [r3, #0]

		if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801001a:	2b00      	cmp	r3, #0
 801001c:	d002      	beq.n	8010024 <xTCPWindowTxHasData+0x20>
		{
			/* No need to look at retransmissions or new transmission as long as
			there are priority segments.  *pulDelay equals zero, meaning it must
			be sent out immediately. */
			xReturn = pdTRUE;
 801001e:	2301      	movs	r3, #1
 8010020:	61fb      	str	r3, [r7, #28]
 8010022:	e04a      	b.n	80100ba <xTCPWindowTxHasData+0xb6>
		}
		else
		{
			pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	3368      	adds	r3, #104	; 0x68
 8010028:	4618      	mov	r0, r3
 801002a:	f7ff fc90 	bl	800f94e <xTCPWindowPeekHead>
 801002e:	61b8      	str	r0, [r7, #24]

			if( pxSegment != NULL )
 8010030:	69bb      	ldr	r3, [r7, #24]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d019      	beq.n	801006a <xTCPWindowTxHasData+0x66>
			{
				/* There is an outstanding segment, see if it is time to resend
				it. */
				ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 8010036:	69bb      	ldr	r3, [r7, #24]
 8010038:	3310      	adds	r3, #16
 801003a:	4618      	mov	r0, r3
 801003c:	f7ff fb39 	bl	800f6b2 <ulTimerGetAge>
 8010040:	6178      	str	r0, [r7, #20]

				/* After a packet has been sent for the first time, it will wait
				'1 * lSRTT' ms for an ACK. A second time it will wait '2 * lSRTT' ms,
				each time doubling the time-out */
				ulMaxAge = ( 1u << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010046:	461a      	mov	r2, r3
 8010048:	69bb      	ldr	r3, [r7, #24]
 801004a:	7d1b      	ldrb	r3, [r3, #20]
 801004c:	fa02 f303 	lsl.w	r3, r2, r3
 8010050:	613b      	str	r3, [r7, #16]

				if( ulMaxAge > ulAge )
 8010052:	693a      	ldr	r2, [r7, #16]
 8010054:	697b      	ldr	r3, [r7, #20]
 8010056:	429a      	cmp	r2, r3
 8010058:	d904      	bls.n	8010064 <xTCPWindowTxHasData+0x60>
				{
					/* A segment must be sent after this amount of msecs */
					*pulDelay = ulMaxAge - ulAge;
 801005a:	693a      	ldr	r2, [r7, #16]
 801005c:	697b      	ldr	r3, [r7, #20]
 801005e:	1ad2      	subs	r2, r2, r3
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	601a      	str	r2, [r3, #0]
				}

				xReturn = pdTRUE;
 8010064:	2301      	movs	r3, #1
 8010066:	61fb      	str	r3, [r7, #28]
 8010068:	e027      	b.n	80100ba <xTCPWindowTxHasData+0xb6>
			}
			else
			{
				/* No priority segment, no outstanding data, see if there is new
				transmission data. */
				pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	3354      	adds	r3, #84	; 0x54
 801006e:	4618      	mov	r0, r3
 8010070:	f7ff fc6d 	bl	800f94e <xTCPWindowPeekHead>
 8010074:	61b8      	str	r0, [r7, #24]

				/* See if it fits in the peer's reception window. */
				if( pxSegment == NULL )
 8010076:	69bb      	ldr	r3, [r7, #24]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d102      	bne.n	8010082 <xTCPWindowTxHasData+0x7e>
				{
					xReturn = pdFALSE;
 801007c:	2300      	movs	r3, #0
 801007e:	61fb      	str	r3, [r7, #28]
 8010080:	e01b      	b.n	80100ba <xTCPWindowTxHasData+0xb6>
				}
				else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 8010082:	68b9      	ldr	r1, [r7, #8]
 8010084:	68f8      	ldr	r0, [r7, #12]
 8010086:	f7ff ff77 	bl	800ff78 <prvTCPWindowTxHasSpace>
 801008a:	4603      	mov	r3, r0
 801008c:	2b00      	cmp	r3, #0
 801008e:	d102      	bne.n	8010096 <xTCPWindowTxHasData+0x92>
				{
					/* Too many outstanding messages. */
					xReturn = pdFALSE;
 8010090:	2300      	movs	r3, #0
 8010092:	61fb      	str	r3, [r7, #28]
 8010094:	e011      	b.n	80100ba <xTCPWindowTxHasData+0xb6>
				}
				else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	781b      	ldrb	r3, [r3, #0]
 801009a:	f003 0302 	and.w	r3, r3, #2
 801009e:	b2db      	uxtb	r3, r3
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d008      	beq.n	80100b6 <xTCPWindowTxHasData+0xb2>
 80100a4:	69bb      	ldr	r3, [r7, #24]
 80100a6:	689a      	ldr	r2, [r3, #8]
 80100a8:	69bb      	ldr	r3, [r7, #24]
 80100aa:	685b      	ldr	r3, [r3, #4]
 80100ac:	429a      	cmp	r2, r3
 80100ae:	da02      	bge.n	80100b6 <xTCPWindowTxHasData+0xb2>
				{
					/* 'bSendFullSize' is a special optimisation.  If true, the
					driver will only sent completely filled packets (of MSS
					bytes). */
					xReturn = pdFALSE;
 80100b0:	2300      	movs	r3, #0
 80100b2:	61fb      	str	r3, [r7, #28]
 80100b4:	e001      	b.n	80100ba <xTCPWindowTxHasData+0xb6>
				}
				else
				{
					xReturn = pdTRUE;
 80100b6:	2301      	movs	r3, #1
 80100b8:	61fb      	str	r3, [r7, #28]
				}
			}
		}

		return xReturn;
 80100ba:	69fb      	ldr	r3, [r7, #28]
	}
 80100bc:	4618      	mov	r0, r3
 80100be:	3720      	adds	r7, #32
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bd80      	pop	{r7, pc}

080100c4 <ulTCPWindowTxGet>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	uint32_t ulTCPWindowTxGet( TCPWindow_t *pxWindow, uint32_t ulWindowSize, int32_t *plPosition )
	{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b088      	sub	sp, #32
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	60f8      	str	r0, [r7, #12]
 80100cc:	60b9      	str	r1, [r7, #8]
 80100ce:	607a      	str	r2, [r7, #4]
	TCPSegment_t *pxSegment;
	uint32_t ulMaxTime;
	uint32_t ulReturn  = ~0UL;
 80100d0:	f04f 33ff 	mov.w	r3, #4294967295
 80100d4:	61bb      	str	r3, [r7, #24]

		/* Fetches data to be sent-out now.

		Priority messages: segments with a resend need no check current sliding
		window size. */
		pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	3340      	adds	r3, #64	; 0x40
 80100da:	4618      	mov	r0, r3
 80100dc:	f7ff fc19 	bl	800f912 <xTCPWindowGetHead>
 80100e0:	61f8      	str	r0, [r7, #28]
		pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	62da      	str	r2, [r3, #44]	; 0x2c

		if( pxSegment == NULL )
 80100ea:	69fb      	ldr	r3, [r7, #28]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d16e      	bne.n	80101ce <ulTCPWindowTxGet+0x10a>
		{
			/* Waiting messages: outstanding messages with a running timer
			neither check peer's reception window size because these packets
			have been sent earlier. */
			pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	3368      	adds	r3, #104	; 0x68
 80100f4:	4618      	mov	r0, r3
 80100f6:	f7ff fc2a 	bl	800f94e <xTCPWindowPeekHead>
 80100fa:	61f8      	str	r0, [r7, #28]

			if( pxSegment != NULL )
 80100fc:	69fb      	ldr	r3, [r7, #28]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d01f      	beq.n	8010142 <ulTCPWindowTxGet+0x7e>
			{
				/* Do check the timing. */
				ulMaxTime = ( 1u << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010106:	461a      	mov	r2, r3
 8010108:	69fb      	ldr	r3, [r7, #28]
 801010a:	7d1b      	ldrb	r3, [r3, #20]
 801010c:	fa02 f303 	lsl.w	r3, r2, r3
 8010110:	617b      	str	r3, [r7, #20]

				if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 8010112:	69fb      	ldr	r3, [r7, #28]
 8010114:	3310      	adds	r3, #16
 8010116:	4618      	mov	r0, r3
 8010118:	f7ff facb 	bl	800f6b2 <ulTimerGetAge>
 801011c:	4602      	mov	r2, r0
 801011e:	697b      	ldr	r3, [r7, #20]
 8010120:	429a      	cmp	r2, r3
 8010122:	d90c      	bls.n	801013e <ulTCPWindowTxGet+0x7a>
				{
					/* A normal (non-fast) retransmission.  Move it from the
					head of the waiting queue. */
					pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	3368      	adds	r3, #104	; 0x68
 8010128:	4618      	mov	r0, r3
 801012a:	f7ff fbf2 	bl	800f912 <xTCPWindowGetHead>
 801012e:	61f8      	str	r0, [r7, #28]
					pxSegment->u.bits.ucDupAckCount = pdFALSE_UNSIGNED;
 8010130:	69fb      	ldr	r3, [r7, #28]
 8010132:	2200      	movs	r2, #0
 8010134:	755a      	strb	r2, [r3, #21]

					/* Some detailed logging. */
					if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != 0 ) )
 8010136:	4b4c      	ldr	r3, [pc, #304]	; (8010268 <ulTCPWindowTxGet+0x1a4>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	2b00      	cmp	r3, #0
 801013c:	e001      	b.n	8010142 <ulTCPWindowTxGet+0x7e>
						FreeRTOS_flush_logging( );
					}
				}
				else
				{
					pxSegment = NULL;
 801013e:	2300      	movs	r3, #0
 8010140:	61fb      	str	r3, [r7, #28]
				}
			}

			if( pxSegment == NULL )
 8010142:	69fb      	ldr	r3, [r7, #28]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d142      	bne.n	80101ce <ulTCPWindowTxGet+0x10a>
			{
				/* New messages: sent-out for the first time.  Check current
				sliding window size of peer. */
				pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	3354      	adds	r3, #84	; 0x54
 801014c:	4618      	mov	r0, r3
 801014e:	f7ff fbfe 	bl	800f94e <xTCPWindowPeekHead>
 8010152:	61f8      	str	r0, [r7, #28]

				if( pxSegment == NULL )
 8010154:	69fb      	ldr	r3, [r7, #28]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d102      	bne.n	8010160 <ulTCPWindowTxGet+0x9c>
				{
					/* No segments queued. */
					ulReturn = 0UL;
 801015a:	2300      	movs	r3, #0
 801015c:	61bb      	str	r3, [r7, #24]
 801015e:	e036      	b.n	80101ce <ulTCPWindowTxGet+0x10a>
				}
				else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	781b      	ldrb	r3, [r3, #0]
 8010164:	f003 0302 	and.w	r3, r3, #2
 8010168:	b2db      	uxtb	r3, r3
 801016a:	2b00      	cmp	r3, #0
 801016c:	d008      	beq.n	8010180 <ulTCPWindowTxGet+0xbc>
 801016e:	69fb      	ldr	r3, [r7, #28]
 8010170:	689a      	ldr	r2, [r3, #8]
 8010172:	69fb      	ldr	r3, [r7, #28]
 8010174:	685b      	ldr	r3, [r3, #4]
 8010176:	429a      	cmp	r2, r3
 8010178:	da02      	bge.n	8010180 <ulTCPWindowTxGet+0xbc>
				{
					/* A segment has been queued but the driver waits until it
					has a full size of MSS. */
					ulReturn = 0;
 801017a:	2300      	movs	r3, #0
 801017c:	61bb      	str	r3, [r7, #24]
 801017e:	e026      	b.n	80101ce <ulTCPWindowTxGet+0x10a>
				}
				else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 8010180:	68b9      	ldr	r1, [r7, #8]
 8010182:	68f8      	ldr	r0, [r7, #12]
 8010184:	f7ff fef8 	bl	800ff78 <prvTCPWindowTxHasSpace>
 8010188:	4603      	mov	r3, r0
 801018a:	2b00      	cmp	r3, #0
 801018c:	d102      	bne.n	8010194 <ulTCPWindowTxGet+0xd0>
				{
					/* Peer has no more space at this moment. */
					ulReturn = 0;
 801018e:	2300      	movs	r3, #0
 8010190:	61bb      	str	r3, [r7, #24]
 8010192:	e01c      	b.n	80101ce <ulTCPWindowTxGet+0x10a>
				}
				else
				{
					/* Move it out of the Tx queue. */
					pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	3354      	adds	r3, #84	; 0x54
 8010198:	4618      	mov	r0, r3
 801019a:	f7ff fbba 	bl	800f912 <xTCPWindowGetHead>
 801019e:	61f8      	str	r0, [r7, #28]

					/* Don't let pxHeadSegment point to this segment any more,
					so no more data will be added. */
					if( pxWindow->pxHeadSegment == pxSegment )
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80101a4:	69fb      	ldr	r3, [r7, #28]
 80101a6:	429a      	cmp	r2, r3
 80101a8:	d102      	bne.n	80101b0 <ulTCPWindowTxGet+0xec>
					{
						pxWindow->pxHeadSegment = NULL;
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	2200      	movs	r2, #0
 80101ae:	67da      	str	r2, [r3, #124]	; 0x7c
					}

					/* pxWindow->tx.highest registers the highest sequence
					number in our transmission window. */
					pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 80101b0:	69fb      	ldr	r3, [r7, #28]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	69fa      	ldr	r2, [r7, #28]
 80101b6:	6892      	ldr	r2, [r2, #8]
 80101b8:	441a      	add	r2, r3
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	629a      	str	r2, [r3, #40]	; 0x28

					/* ...and more detailed logging */
					if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != pdFALSE ) )
 80101be:	4b2a      	ldr	r3, [pc, #168]	; (8010268 <ulTCPWindowTxGet+0x1a4>)
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	2b01      	cmp	r3, #1
 80101c4:	dd03      	ble.n	80101ce <ulTCPWindowTxGet+0x10a>
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 80101cc:	2b17      	cmp	r3, #23
				FreeRTOS_flush_logging( );
			}
		}

		/* See if it has already been determined to return 0. */
		if( ulReturn != 0UL )
 80101ce:	69bb      	ldr	r3, [r7, #24]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d043      	beq.n	801025c <ulTCPWindowTxGet+0x198>
		{
			configASSERT( listLIST_ITEM_CONTAINER( &(pxSegment->xQueueItem ) ) == NULL );
 80101d4:	69fb      	ldr	r3, [r7, #28]
 80101d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d009      	beq.n	80101f0 <ulTCPWindowTxGet+0x12c>
 80101dc:	f04f 0340 	mov.w	r3, #64	; 0x40
 80101e0:	f383 8811 	msr	BASEPRI, r3
 80101e4:	f3bf 8f6f 	isb	sy
 80101e8:	f3bf 8f4f 	dsb	sy
 80101ec:	613b      	str	r3, [r7, #16]
 80101ee:	e7fe      	b.n	80101ee <ulTCPWindowTxGet+0x12a>

			/* Now that the segment will be transmitted, add it to the tail of
			the waiting queue. */
			vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80101f6:	69fb      	ldr	r3, [r7, #28]
 80101f8:	3318      	adds	r3, #24
 80101fa:	4619      	mov	r1, r3
 80101fc:	4610      	mov	r0, r2
 80101fe:	f7ff fa3b 	bl	800f678 <vListInsertFifo>

			/* And mark it as outstanding. */
			pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 8010202:	69fa      	ldr	r2, [r7, #28]
 8010204:	7d93      	ldrb	r3, [r2, #22]
 8010206:	f043 0301 	orr.w	r3, r3, #1
 801020a:	7593      	strb	r3, [r2, #22]

			/* Administer the transmit count, needed for fast
			retransmissions. */
			( pxSegment->u.bits.ucTransmitCount )++;
 801020c:	69fb      	ldr	r3, [r7, #28]
 801020e:	7d1b      	ldrb	r3, [r3, #20]
 8010210:	3301      	adds	r3, #1
 8010212:	b2da      	uxtb	r2, r3
 8010214:	69fb      	ldr	r3, [r7, #28]
 8010216:	751a      	strb	r2, [r3, #20]

			/* If there have been several retransmissions (4), decrease the
			size of the transmission window to at most 2 times MSS. */
			if( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW )
 8010218:	69fb      	ldr	r3, [r7, #28]
 801021a:	7d1b      	ldrb	r3, [r3, #20]
 801021c:	2b04      	cmp	r3, #4
 801021e:	d10d      	bne.n	801023c <ulTCPWindowTxGet+0x178>
			{
				if( pxWindow->xSize.ulTxWindowLength > ( 2U * pxWindow->usMSS ) )
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	689a      	ldr	r2, [r3, #8]
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 801022a:	005b      	lsls	r3, r3, #1
 801022c:	429a      	cmp	r2, r3
 801022e:	d905      	bls.n	801023c <ulTCPWindowTxGet+0x178>
				{
					FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %d]: Change Tx window: %lu -> %u\n",
						pxWindow->usPeerPortNumber, pxWindow->usOurPortNumber,
						pxWindow->xSize.ulTxWindowLength, 2 * pxWindow->usMSS ) );
					pxWindow->xSize.ulTxWindowLength = ( 2UL * pxWindow->usMSS );
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8010236:	005a      	lsls	r2, r3, #1
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	609a      	str	r2, [r3, #8]
				}
			}

			/* Clear the transmit timer. */
			vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 801023c:	69fb      	ldr	r3, [r7, #28]
 801023e:	3310      	adds	r3, #16
 8010240:	4618      	mov	r0, r3
 8010242:	f7ff fa29 	bl	800f698 <vTCPTimerSet>

			pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 8010246:	69fb      	ldr	r3, [r7, #28]
 8010248:	681a      	ldr	r2, [r3, #0]
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	62da      	str	r2, [r3, #44]	; 0x2c

			/* Inform the caller where to find the data within the queue. */
			*plPosition = pxSegment->lStreamPos;
 801024e:	69fb      	ldr	r3, [r7, #28]
 8010250:	68da      	ldr	r2, [r3, #12]
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	601a      	str	r2, [r3, #0]

			/* And return the length of the data segment */
			ulReturn = ( uint32_t ) pxSegment->lDataLength;
 8010256:	69fb      	ldr	r3, [r7, #28]
 8010258:	689b      	ldr	r3, [r3, #8]
 801025a:	61bb      	str	r3, [r7, #24]
		}

		return ulReturn;
 801025c:	69bb      	ldr	r3, [r7, #24]
	}
 801025e:	4618      	mov	r0, r3
 8010260:	3720      	adds	r7, #32
 8010262:	46bd      	mov	sp, r7
 8010264:	bd80      	pop	{r7, pc}
 8010266:	bf00      	nop
 8010268:	20004ee0 	.word	0x20004ee0

0801026c <prvTCPWindowTxCheckAck>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t *pxWindow, uint32_t ulFirst, uint32_t ulLast )
	{
 801026c:	b580      	push	{r7, lr}
 801026e:	b08c      	sub	sp, #48	; 0x30
 8010270:	af00      	add	r7, sp, #0
 8010272:	60f8      	str	r0, [r7, #12]
 8010274:	60b9      	str	r1, [r7, #8]
 8010276:	607a      	str	r2, [r7, #4]
	uint32_t ulBytesConfirmed = 0u;
 8010278:	2300      	movs	r3, #0
 801027a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t ulSequenceNumber = ulFirst, ulDataLength;
 801027c:	68bb      	ldr	r3, [r7, #8]
 801027e:	62bb      	str	r3, [r7, #40]	; 0x28
	const ListItem_t *pxIterator;
	const MiniListItem_t *pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &pxWindow->xTxSegments );
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	3398      	adds	r3, #152	; 0x98
 8010284:	61fb      	str	r3, [r7, #28]

		 A Smoothed RTT will increase quickly, but it is conservative when
		 becoming smaller. */

		for(
				pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 8010286:	69fb      	ldr	r3, [r7, #28]
 8010288:	685b      	ldr	r3, [r3, #4]
 801028a:	627b      	str	r3, [r7, #36]	; 0x24
		for(
 801028c:	e09b      	b.n	80103c6 <prvTCPWindowTxCheckAck+0x15a>
				( pxIterator != ( const ListItem_t * ) pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 );
			)
		{
			xDoUnlink = pdFALSE;
 801028e:	2300      	movs	r3, #0
 8010290:	623b      	str	r3, [r7, #32]
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 8010292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010294:	68db      	ldr	r3, [r3, #12]
 8010296:	61bb      	str	r3, [r7, #24]

			/* Move to the next item because the current item might get
			removed. */
			pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8010298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801029a:	685b      	ldr	r3, [r3, #4]
 801029c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Continue if this segment does not fall within the ACK'd range. */
			if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 801029e:	69bb      	ldr	r3, [r7, #24]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	4619      	mov	r1, r3
 80102a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102a6:	f7ff f9c4 	bl	800f632 <xSequenceGreaterThan>
 80102aa:	4603      	mov	r3, r0
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d000      	beq.n	80102b2 <prvTCPWindowTxCheckAck+0x46>
			{
				continue;
 80102b0:	e089      	b.n	80103c6 <prvTCPWindowTxCheckAck+0x15a>
			}

			/* Is it ready? */
			if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 80102b2:	69bb      	ldr	r3, [r7, #24]
 80102b4:	681a      	ldr	r2, [r3, #0]
 80102b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102b8:	429a      	cmp	r2, r3
 80102ba:	f040 8091 	bne.w	80103e0 <prvTCPWindowTxCheckAck+0x174>
			{
				break;
			}

			ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 80102be:	69bb      	ldr	r3, [r7, #24]
 80102c0:	689b      	ldr	r3, [r3, #8]
 80102c2:	617b      	str	r3, [r7, #20]

			if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 80102c4:	69bb      	ldr	r3, [r7, #24]
 80102c6:	7d9b      	ldrb	r3, [r3, #22]
 80102c8:	f003 0302 	and.w	r3, r3, #2
 80102cc:	b2db      	uxtb	r3, r3
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d14d      	bne.n	801036e <prvTCPWindowTxCheckAck+0x102>
			{
				if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t )ulDataLength, ulLast ) != pdFALSE )
 80102d2:	69bb      	ldr	r3, [r7, #24]
 80102d4:	681a      	ldr	r2, [r3, #0]
 80102d6:	697b      	ldr	r3, [r7, #20]
 80102d8:	4413      	add	r3, r2
 80102da:	6879      	ldr	r1, [r7, #4]
 80102dc:	4618      	mov	r0, r3
 80102de:	f7ff f9a8 	bl	800f632 <xSequenceGreaterThan>
 80102e2:	4603      	mov	r3, r0
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d17d      	bne.n	80103e4 <prvTCPWindowTxCheckAck+0x178>
					#endif /* ipconfigHAS_DEBUG_PRINTF */
					break;
				}

				/* This segment is fully ACK'd, set the flag. */
				pxSegment->u.bits.bAcked = pdTRUE_UNSIGNED;
 80102e8:	69ba      	ldr	r2, [r7, #24]
 80102ea:	7d93      	ldrb	r3, [r2, #22]
 80102ec:	f043 0302 	orr.w	r3, r3, #2
 80102f0:	7593      	strb	r3, [r2, #22]

				/* Calculate the RTT only if the segment was sent-out for the
				first time and if this is the last ACK'd segment in a range. */
				if( ( pxSegment->u.bits.ucTransmitCount == 1 ) && ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 80102f2:	69bb      	ldr	r3, [r7, #24]
 80102f4:	7d1b      	ldrb	r3, [r3, #20]
 80102f6:	2b01      	cmp	r3, #1
 80102f8:	d137      	bne.n	801036a <prvTCPWindowTxCheckAck+0xfe>
 80102fa:	69bb      	ldr	r3, [r7, #24]
 80102fc:	681a      	ldr	r2, [r3, #0]
 80102fe:	697b      	ldr	r3, [r7, #20]
 8010300:	441a      	add	r2, r3
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	429a      	cmp	r2, r3
 8010306:	d130      	bne.n	801036a <prvTCPWindowTxCheckAck+0xfe>
				{
					int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 8010308:	69bb      	ldr	r3, [r7, #24]
 801030a:	3310      	adds	r3, #16
 801030c:	4618      	mov	r0, r3
 801030e:	f7ff f9d0 	bl	800f6b2 <ulTimerGetAge>
 8010312:	4603      	mov	r3, r0
 8010314:	613b      	str	r3, [r7, #16]

					if( pxWindow->lSRTT >= mS )
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801031a:	693b      	ldr	r3, [r7, #16]
 801031c:	429a      	cmp	r2, r3
 801031e:	db0e      	blt.n	801033e <prvTCPWindowTxCheckAck+0xd2>
					{
						/* RTT becomes smaller: adapt slowly. */
						pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010324:	4613      	mov	r3, r2
 8010326:	00db      	lsls	r3, r3, #3
 8010328:	1a9a      	subs	r2, r3, r2
 801032a:	693b      	ldr	r3, [r7, #16]
 801032c:	4413      	add	r3, r2
 801032e:	2b00      	cmp	r3, #0
 8010330:	da00      	bge.n	8010334 <prvTCPWindowTxCheckAck+0xc8>
 8010332:	3307      	adds	r3, #7
 8010334:	10db      	asrs	r3, r3, #3
 8010336:	461a      	mov	r2, r3
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	639a      	str	r2, [r3, #56]	; 0x38
 801033c:	e00e      	b.n	801035c <prvTCPWindowTxCheckAck+0xf0>
					}
					else
					{
						/* RTT becomes larger: adapt quicker */
						pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010342:	4613      	mov	r3, r2
 8010344:	005b      	lsls	r3, r3, #1
 8010346:	441a      	add	r2, r3
 8010348:	693b      	ldr	r3, [r7, #16]
 801034a:	4413      	add	r3, r2
 801034c:	005b      	lsls	r3, r3, #1
 801034e:	2b00      	cmp	r3, #0
 8010350:	da00      	bge.n	8010354 <prvTCPWindowTxCheckAck+0xe8>
 8010352:	3307      	adds	r3, #7
 8010354:	10db      	asrs	r3, r3, #3
 8010356:	461a      	mov	r2, r3
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	639a      	str	r2, [r3, #56]	; 0x38
					}

					/* Cap to the minimum of 50ms. */
					if( pxWindow->lSRTT < winSRTT_CAP_mS )
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010360:	2b31      	cmp	r3, #49	; 0x31
 8010362:	dc02      	bgt.n	801036a <prvTCPWindowTxCheckAck+0xfe>
					{
						pxWindow->lSRTT = winSRTT_CAP_mS;
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	2232      	movs	r2, #50	; 0x32
 8010368:	639a      	str	r2, [r3, #56]	; 0x38
					}
				}

				/* Unlink it from the 3 queues, but do not destroy it (yet). */
				xDoUnlink = pdTRUE;
 801036a:	2301      	movs	r3, #1
 801036c:	623b      	str	r3, [r7, #32]
			}

			/* pxSegment->u.bits.bAcked is now true.  Is it located at the left
			side of the transmission queue?  If so, it may be freed. */
			if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	6a1a      	ldr	r2, [r3, #32]
 8010372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010374:	429a      	cmp	r2, r3
 8010376:	d116      	bne.n	80103a6 <prvTCPWindowTxCheckAck+0x13a>
			{
				if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != pdFALSE ) )
 8010378:	4b1d      	ldr	r3, [pc, #116]	; (80103f0 <prvTCPWindowTxCheckAck+0x184>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	2b01      	cmp	r3, #1
 801037e:	dd03      	ble.n	8010388 <prvTCPWindowTxCheckAck+0x11c>
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8010386:	2b17      	cmp	r3, #23
						ulLast - pxWindow->tx.ulFirstSequenceNumber,
						pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
				}

				/* Increase the left-hand value of the transmission window. */
				pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	6a1a      	ldr	r2, [r3, #32]
 801038c:	697b      	ldr	r3, [r7, #20]
 801038e:	441a      	add	r2, r3
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	621a      	str	r2, [r3, #32]

				/* This function will return the number of bytes that the tail
				of txStream may be advanced. */
				ulBytesConfirmed += ulDataLength;
 8010394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010396:	697b      	ldr	r3, [r7, #20]
 8010398:	4413      	add	r3, r2
 801039a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* All segments below tx.ulCurrentSequenceNumber may be freed. */
				vTCPWindowFree( pxSegment );
 801039c:	69b8      	ldr	r0, [r7, #24]
 801039e:	f7ff faf3 	bl	800f988 <vTCPWindowFree>

				/* No need to unlink it any more. */
				xDoUnlink = pdFALSE;
 80103a2:	2300      	movs	r3, #0
 80103a4:	623b      	str	r3, [r7, #32]
			}

			if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 80103a6:	6a3b      	ldr	r3, [r7, #32]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d008      	beq.n	80103be <prvTCPWindowTxCheckAck+0x152>
 80103ac:	69bb      	ldr	r3, [r7, #24]
 80103ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d004      	beq.n	80103be <prvTCPWindowTxCheckAck+0x152>
			{
				/* Remove item from its queues. */
				uxListRemove( &pxSegment->xQueueItem );
 80103b4:	69bb      	ldr	r3, [r7, #24]
 80103b6:	3318      	adds	r3, #24
 80103b8:	4618      	mov	r0, r3
 80103ba:	f7f7 fc2e 	bl	8007c1a <uxListRemove>
			}

			ulSequenceNumber += ulDataLength;
 80103be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80103c0:	697b      	ldr	r3, [r7, #20]
 80103c2:	4413      	add	r3, r2
 80103c4:	62bb      	str	r3, [r7, #40]	; 0x28
		for(
 80103c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103c8:	69fb      	ldr	r3, [r7, #28]
 80103ca:	429a      	cmp	r2, r3
 80103cc:	d00b      	beq.n	80103e6 <prvTCPWindowTxCheckAck+0x17a>
				( pxIterator != ( const ListItem_t * ) pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 );
 80103ce:	6879      	ldr	r1, [r7, #4]
 80103d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80103d2:	f7ff f91c 	bl	800f60e <xSequenceLessThan>
 80103d6:	4603      	mov	r3, r0
 80103d8:	2b00      	cmp	r3, #0
 80103da:	f47f af58 	bne.w	801028e <prvTCPWindowTxCheckAck+0x22>
 80103de:	e002      	b.n	80103e6 <prvTCPWindowTxCheckAck+0x17a>
				break;
 80103e0:	bf00      	nop
 80103e2:	e000      	b.n	80103e6 <prvTCPWindowTxCheckAck+0x17a>
					break;
 80103e4:	bf00      	nop
		}

		return ulBytesConfirmed;
 80103e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80103e8:	4618      	mov	r0, r3
 80103ea:	3730      	adds	r7, #48	; 0x30
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}
 80103f0:	20004ee0 	.word	0x20004ee0

080103f4 <prvTCPWindowFastRetransmit>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t *pxWindow, uint32_t ulFirst )
	{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b086      	sub	sp, #24
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
 80103fc:	6039      	str	r1, [r7, #0]
	const ListItem_t *pxIterator;
	const MiniListItem_t* pxEnd;
	TCPSegment_t *pxSegment;
	uint32_t ulCount = 0UL;
 80103fe:	2300      	movs	r3, #0
 8010400:	613b      	str	r3, [r7, #16]

		/* A higher Tx block has been acknowledged.  Now iterate through the
		 xWaitQueue to find a possible condition for a FAST retransmission. */

		pxEnd = ( const MiniListItem_t* ) listGET_END_MARKER( &( pxWindow->xWaitQueue ) );
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	3370      	adds	r3, #112	; 0x70
 8010406:	60fb      	str	r3, [r7, #12]

		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	685b      	ldr	r3, [r3, #4]
 801040c:	617b      	str	r3, [r7, #20]
 801040e:	e03b      	b.n	8010488 <prvTCPWindowFastRetransmit+0x94>
			 pxIterator != ( const ListItem_t * ) pxEnd; )
		{
			/* Get the owner, which is a TCP segment. */
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 8010410:	697b      	ldr	r3, [r7, #20]
 8010412:	68db      	ldr	r3, [r3, #12]
 8010414:	60bb      	str	r3, [r7, #8]

			/* Hop to the next item before the current gets unlinked. */
			pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8010416:	697b      	ldr	r3, [r7, #20]
 8010418:	685b      	ldr	r3, [r3, #4]
 801041a:	617b      	str	r3, [r7, #20]

			/* Fast retransmission:
			When 3 packets with a higher sequence number have been acknowledged
			by the peer, it is very unlikely a current packet will ever arrive.
			It will be retransmitted far before the RTO. */
			if( ( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED ) &&
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	7d9b      	ldrb	r3, [r3, #22]
 8010420:	f003 0302 	and.w	r3, r3, #2
 8010424:	b2db      	uxtb	r3, r3
 8010426:	2b00      	cmp	r3, #0
 8010428:	d12e      	bne.n	8010488 <prvTCPWindowFastRetransmit+0x94>
				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE ) &&
 801042a:	68bb      	ldr	r3, [r7, #8]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	6839      	ldr	r1, [r7, #0]
 8010430:	4618      	mov	r0, r3
 8010432:	f7ff f8ec 	bl	800f60e <xSequenceLessThan>
 8010436:	4603      	mov	r3, r0
			if( ( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED ) &&
 8010438:	2b00      	cmp	r3, #0
 801043a:	d025      	beq.n	8010488 <prvTCPWindowFastRetransmit+0x94>
				( ++( pxSegment->u.bits.ucDupAckCount ) == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT ) )
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	7d5b      	ldrb	r3, [r3, #21]
 8010440:	3301      	adds	r3, #1
 8010442:	b2da      	uxtb	r2, r3
				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE ) &&
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	755a      	strb	r2, [r3, #21]
				( ++( pxSegment->u.bits.ucDupAckCount ) == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT ) )
 8010448:	68bb      	ldr	r3, [r7, #8]
 801044a:	7d5b      	ldrb	r3, [r3, #21]
				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE ) &&
 801044c:	2b03      	cmp	r3, #3
 801044e:	d11b      	bne.n	8010488 <prvTCPWindowFastRetransmit+0x94>
			{
				pxSegment->u.bits.ucTransmitCount = pdFALSE_UNSIGNED;
 8010450:	68bb      	ldr	r3, [r7, #8]
 8010452:	2200      	movs	r2, #0
 8010454:	751a      	strb	r2, [r3, #20]

				/* Not clearing 'ucDupAckCount' yet as more SACK's might come in
				which might lead to a second fast rexmit. */
				if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != pdFALSE ) )
 8010456:	4b11      	ldr	r3, [pc, #68]	; (801049c <prvTCPWindowFastRetransmit+0xa8>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	2b00      	cmp	r3, #0
 801045c:	db03      	blt.n	8010466 <prvTCPWindowFastRetransmit+0x72>
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8010464:	2b17      	cmp	r3, #23
						ulFirst - pxWindow->tx.ulFirstSequenceNumber ) );
					FreeRTOS_flush_logging( );
				}

				/* Remove it from xWaitQueue. */
				uxListRemove( &pxSegment->xQueueItem );
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	3318      	adds	r3, #24
 801046a:	4618      	mov	r0, r3
 801046c:	f7f7 fbd5 	bl	8007c1a <uxListRemove>

				/* Add this segment to the priority queue so it gets
				retransmitted immediately. */
				vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8010476:	68bb      	ldr	r3, [r7, #8]
 8010478:	3318      	adds	r3, #24
 801047a:	4619      	mov	r1, r3
 801047c:	4610      	mov	r0, r2
 801047e:	f7ff f8fb 	bl	800f678 <vListInsertFifo>
				ulCount++;
 8010482:	693b      	ldr	r3, [r7, #16]
 8010484:	3301      	adds	r3, #1
 8010486:	613b      	str	r3, [r7, #16]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 8010488:	697a      	ldr	r2, [r7, #20]
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	429a      	cmp	r2, r3
 801048e:	d1bf      	bne.n	8010410 <prvTCPWindowFastRetransmit+0x1c>
			}
		}

		return ulCount;
 8010490:	693b      	ldr	r3, [r7, #16]
	}
 8010492:	4618      	mov	r0, r3
 8010494:	3718      	adds	r7, #24
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}
 801049a:	bf00      	nop
 801049c:	20004ee0 	.word	0x20004ee0

080104a0 <ulTCPWindowTxAck>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	uint32_t ulTCPWindowTxAck( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber )
	{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b084      	sub	sp, #16
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
 80104a8:	6039      	str	r1, [r7, #0]
	uint32_t ulFirstSequence, ulReturn;

		/* Receive a normal ACK. */

		ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	6a1b      	ldr	r3, [r3, #32]
 80104ae:	60bb      	str	r3, [r7, #8]

		if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 80104b0:	68b9      	ldr	r1, [r7, #8]
 80104b2:	6838      	ldr	r0, [r7, #0]
 80104b4:	f7ff f89a 	bl	800f5ec <xSequenceLessThanOrEqual>
 80104b8:	4603      	mov	r3, r0
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d002      	beq.n	80104c4 <ulTCPWindowTxAck+0x24>
		{
			ulReturn = 0UL;
 80104be:	2300      	movs	r3, #0
 80104c0:	60fb      	str	r3, [r7, #12]
 80104c2:	e005      	b.n	80104d0 <ulTCPWindowTxAck+0x30>
		}
		else
		{
			ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 80104c4:	683a      	ldr	r2, [r7, #0]
 80104c6:	68b9      	ldr	r1, [r7, #8]
 80104c8:	6878      	ldr	r0, [r7, #4]
 80104ca:	f7ff fecf 	bl	801026c <prvTCPWindowTxCheckAck>
 80104ce:	60f8      	str	r0, [r7, #12]
		}

		return ulReturn;
 80104d0:	68fb      	ldr	r3, [r7, #12]
	}
 80104d2:	4618      	mov	r0, r3
 80104d4:	3710      	adds	r7, #16
 80104d6:	46bd      	mov	sp, r7
 80104d8:	bd80      	pop	{r7, pc}
	...

080104dc <ulTCPWindowTxSack>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	uint32_t ulTCPWindowTxSack( TCPWindow_t *pxWindow, uint32_t ulFirst, uint32_t ulLast )
	{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b086      	sub	sp, #24
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	60f8      	str	r0, [r7, #12]
 80104e4:	60b9      	str	r1, [r7, #8]
 80104e6:	607a      	str	r2, [r7, #4]
	uint32_t ulAckCount = 0UL;
 80104e8:	2300      	movs	r3, #0
 80104ea:	617b      	str	r3, [r7, #20]
	uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	6a1b      	ldr	r3, [r3, #32]
 80104f0:	613b      	str	r3, [r7, #16]

		/* Receive a SACK option. */
		ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 80104f2:	687a      	ldr	r2, [r7, #4]
 80104f4:	68b9      	ldr	r1, [r7, #8]
 80104f6:	68f8      	ldr	r0, [r7, #12]
 80104f8:	f7ff feb8 	bl	801026c <prvTCPWindowTxCheckAck>
 80104fc:	6178      	str	r0, [r7, #20]
		prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 80104fe:	68b9      	ldr	r1, [r7, #8]
 8010500:	68f8      	ldr	r0, [r7, #12]
 8010502:	f7ff ff77 	bl	80103f4 <prvTCPWindowFastRetransmit>

		if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 8010506:	4b06      	ldr	r3, [pc, #24]	; (8010520 <ulTCPWindowTxSack+0x44>)
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	2b00      	cmp	r3, #0
 801050c:	dd03      	ble.n	8010516 <ulTCPWindowTxSack+0x3a>
 801050e:	6939      	ldr	r1, [r7, #16]
 8010510:	68b8      	ldr	r0, [r7, #8]
 8010512:	f7ff f88e 	bl	800f632 <xSequenceGreaterThan>
				ulLast - pxWindow->tx.ulFirstSequenceNumber,
				pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
			FreeRTOS_flush_logging( );
		}

		return ulAckCount;
 8010516:	697b      	ldr	r3, [r7, #20]
	}
 8010518:	4618      	mov	r0, r3
 801051a:	3718      	adds	r7, #24
 801051c:	46bd      	mov	sp, r7
 801051e:	bd80      	pop	{r7, pc}
 8010520:	20004ee0 	.word	0x20004ee0

08010524 <vProcessGeneratedUDPPacket>:
	}
};
/*-----------------------------------------------------------*/

void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8010524:	b5b0      	push	{r4, r5, r7, lr}
 8010526:	b08a      	sub	sp, #40	; 0x28
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
UDPPacket_t *pxUDPPacket;
IPHeader_t *pxIPHeader;
eARPLookupResult_t eReturned;
uint32_t ulIPAddress = pxNetworkBuffer->ulIPAddress;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	695b      	ldr	r3, [r3, #20]
 8010530:	60fb      	str	r3, [r7, #12]

	/* Map the UDP packet onto the start of the frame. */
	pxUDPPacket = ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	699b      	ldr	r3, [r3, #24]
 8010536:	623b      	str	r3, [r7, #32]

	/* Determine the ARP cache status for the requested IP address. */
	eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ) );
 8010538:	6a3a      	ldr	r2, [r7, #32]
 801053a:	f107 030c 	add.w	r3, r7, #12
 801053e:	4611      	mov	r1, r2
 8010540:	4618      	mov	r0, r3
 8010542:	f7f9 fe85 	bl	800a250 <eARPGetCacheEntry>
 8010546:	4603      	mov	r3, r0
 8010548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if( eReturned != eCantSendPacket )
 801054c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010550:	2b02      	cmp	r3, #2
 8010552:	f000 80b5 	beq.w	80106c0 <vProcessGeneratedUDPPacket+0x19c>
	{
		if( eReturned == eARPCacheHit )
 8010556:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801055a:	2b01      	cmp	r3, #1
 801055c:	f040 809d 	bne.w	801069a <vProcessGeneratedUDPPacket+0x176>
				uint8_t ucSocketOptions;
			#endif
			iptraceSENDING_UDP_PACKET( pxNetworkBuffer->ulIPAddress );

			/* Create short cuts to the data within the packet. */
			pxIPHeader = &( pxUDPPacket->xIPHeader );
 8010560:	6a3b      	ldr	r3, [r7, #32]
 8010562:	330e      	adds	r3, #14
 8010564:	61fb      	str	r3, [r7, #28]
			if( pxNetworkBuffer->usPort != ipPACKET_CONTAINS_ICMP_DATA )
		#endif /* ipconfigSUPPORT_OUTGOING_PINGS */
			{
			UDPHeader_t *pxUDPHeader;

				pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 8010566:	6a3b      	ldr	r3, [r7, #32]
 8010568:	3322      	adds	r3, #34	; 0x22
 801056a:	61bb      	str	r3, [r7, #24]

				pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	8c1a      	ldrh	r2, [r3, #32]
 8010570:	69bb      	ldr	r3, [r7, #24]
 8010572:	805a      	strh	r2, [r3, #2]
				pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8010578:	69bb      	ldr	r3, [r7, #24]
 801057a:	801a      	strh	r2, [r3, #0]
				pxUDPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( UDPHeader_t ) );
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	69db      	ldr	r3, [r3, #28]
 8010580:	b29b      	uxth	r3, r3
 8010582:	3308      	adds	r3, #8
 8010584:	b29a      	uxth	r2, r3
 8010586:	69bb      	ldr	r3, [r7, #24]
 8010588:	809a      	strh	r2, [r3, #4]
				pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 801058a:	69bb      	ldr	r3, [r7, #24]
 801058c:	889b      	ldrh	r3, [r3, #4]
 801058e:	b29b      	uxth	r3, r3
 8010590:	021b      	lsls	r3, r3, #8
 8010592:	b21a      	sxth	r2, r3
 8010594:	69bb      	ldr	r3, [r7, #24]
 8010596:	889b      	ldrh	r3, [r3, #4]
 8010598:	b29b      	uxth	r3, r3
 801059a:	0a1b      	lsrs	r3, r3, #8
 801059c:	b29b      	uxth	r3, r3
 801059e:	b21b      	sxth	r3, r3
 80105a0:	4313      	orrs	r3, r2
 80105a2:	b21b      	sxth	r3, r3
 80105a4:	b29a      	uxth	r2, r3
 80105a6:	69bb      	ldr	r3, [r7, #24]
 80105a8:	809a      	strh	r2, [r3, #4]
				pxUDPHeader->usChecksum = 0u;
 80105aa:	69bb      	ldr	r3, [r7, #24]
 80105ac:	2200      	movs	r2, #0
 80105ae:	719a      	strb	r2, [r3, #6]
 80105b0:	2200      	movs	r2, #0
 80105b2:	71da      	strb	r2, [r3, #7]
			and
				xIPHeader.usHeaderChecksum
			*/
			/* Save options now, as they will be overwritten by memcpy */
			#if( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
				ucSocketOptions = pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ];
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	699b      	ldr	r3, [r3, #24]
 80105b8:	799b      	ldrb	r3, [r3, #6]
 80105ba:	75fb      	strb	r3, [r7, #23]
			#endif
			/*
			 * Offset the memcpy by the size of a MAC address to start at the packet's
			 * Ethernet header 'source' MAC address; the preceding 'destination' should not be altered.
			 */
			char *pxUdpSrcAddrOffset = ( char *) pxUDPPacket + sizeof( MACAddress_t );
 80105bc:	6a3b      	ldr	r3, [r7, #32]
 80105be:	3306      	adds	r3, #6
 80105c0:	613b      	str	r3, [r7, #16]
			memcpy( pxUdpSrcAddrOffset, xDefaultPartUDPPacketHeader.ucBytes, sizeof( xDefaultPartUDPPacketHeader ) );
 80105c2:	693b      	ldr	r3, [r7, #16]
 80105c4:	4a46      	ldr	r2, [pc, #280]	; (80106e0 <vProcessGeneratedUDPPacket+0x1bc>)
 80105c6:	461d      	mov	r5, r3
 80105c8:	4614      	mov	r4, r2
 80105ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80105cc:	6028      	str	r0, [r5, #0]
 80105ce:	6069      	str	r1, [r5, #4]
 80105d0:	60aa      	str	r2, [r5, #8]
 80105d2:	60eb      	str	r3, [r5, #12]
 80105d4:	cc03      	ldmia	r4!, {r0, r1}
 80105d6:	6128      	str	r0, [r5, #16]
 80105d8:	6169      	str	r1, [r5, #20]
				pxIPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( IPHeader_t ) );
			}
			else
		#endif /* ipconfigSUPPORT_OUTGOING_PINGS */
			{
				pxIPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	69db      	ldr	r3, [r3, #28]
 80105de:	b29b      	uxth	r3, r3
 80105e0:	331c      	adds	r3, #28
 80105e2:	b29a      	uxth	r2, r3
 80105e4:	69fb      	ldr	r3, [r7, #28]
 80105e6:	805a      	strh	r2, [r3, #2]
			}

			/* The total transmit size adds on the Ethernet header. */
			pxNetworkBuffer->xDataLength = pxIPHeader->usLength + sizeof( EthernetHeader_t );
 80105e8:	69fb      	ldr	r3, [r7, #28]
 80105ea:	885b      	ldrh	r3, [r3, #2]
 80105ec:	b29b      	uxth	r3, r3
 80105ee:	f103 020e 	add.w	r2, r3, #14
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	61da      	str	r2, [r3, #28]
			pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 80105f6:	69fb      	ldr	r3, [r7, #28]
 80105f8:	885b      	ldrh	r3, [r3, #2]
 80105fa:	b29b      	uxth	r3, r3
 80105fc:	021b      	lsls	r3, r3, #8
 80105fe:	b21a      	sxth	r2, r3
 8010600:	69fb      	ldr	r3, [r7, #28]
 8010602:	885b      	ldrh	r3, [r3, #2]
 8010604:	b29b      	uxth	r3, r3
 8010606:	0a1b      	lsrs	r3, r3, #8
 8010608:	b29b      	uxth	r3, r3
 801060a:	b21b      	sxth	r3, r3
 801060c:	4313      	orrs	r3, r2
 801060e:	b21b      	sxth	r3, r3
 8010610:	b29a      	uxth	r2, r3
 8010612:	69fb      	ldr	r3, [r7, #28]
 8010614:	805a      	strh	r2, [r3, #2]
			/* HT:endian: changed back to network endian */
			pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->ulIPAddress;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	695a      	ldr	r2, [r3, #20]
 801061a:	69fb      	ldr	r3, [r7, #28]
 801061c:	611a      	str	r2, [r3, #16]

			#if( ipconfigUSE_LLMNR == 1 )
			{
				/* LLMNR messages are typically used on a LAN and they're
				 * not supposed to cross routers */
				if( pxNetworkBuffer->ulIPAddress == ipLLMNR_IP_ADDR )
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	695b      	ldr	r3, [r3, #20]
 8010622:	4a30      	ldr	r2, [pc, #192]	; (80106e4 <vProcessGeneratedUDPPacket+0x1c0>)
 8010624:	4293      	cmp	r3, r2
 8010626:	d102      	bne.n	801062e <vProcessGeneratedUDPPacket+0x10a>
				{
					pxIPHeader->ucTimeToLive = 0x01;
 8010628:	69fb      	ldr	r3, [r7, #28]
 801062a:	2201      	movs	r2, #1
 801062c:	721a      	strb	r2, [r3, #8]
			}
			#endif

			#if( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
			{
				pxIPHeader->usHeaderChecksum = 0u;
 801062e:	69fb      	ldr	r3, [r7, #28]
 8010630:	2200      	movs	r2, #0
 8010632:	729a      	strb	r2, [r3, #10]
 8010634:	2200      	movs	r2, #0
 8010636:	72da      	strb	r2, [r3, #11]
				pxIPHeader->usHeaderChecksum = usGenerateChecksum( 0UL, ( uint8_t * ) &( pxIPHeader->ucVersionHeaderLength ), ipSIZE_OF_IPv4_HEADER );
 8010638:	69fb      	ldr	r3, [r7, #28]
 801063a:	2214      	movs	r2, #20
 801063c:	4619      	mov	r1, r3
 801063e:	2000      	movs	r0, #0
 8010640:	f7fb fb62 	bl	800bd08 <usGenerateChecksum>
 8010644:	4603      	mov	r3, r0
 8010646:	461a      	mov	r2, r3
 8010648:	69fb      	ldr	r3, [r7, #28]
 801064a:	815a      	strh	r2, [r3, #10]
				pxIPHeader->usHeaderChecksum = ~FreeRTOS_htons( pxIPHeader->usHeaderChecksum );
 801064c:	69fb      	ldr	r3, [r7, #28]
 801064e:	895b      	ldrh	r3, [r3, #10]
 8010650:	b29b      	uxth	r3, r3
 8010652:	021b      	lsls	r3, r3, #8
 8010654:	b21a      	sxth	r2, r3
 8010656:	69fb      	ldr	r3, [r7, #28]
 8010658:	895b      	ldrh	r3, [r3, #10]
 801065a:	b29b      	uxth	r3, r3
 801065c:	0a1b      	lsrs	r3, r3, #8
 801065e:	b29b      	uxth	r3, r3
 8010660:	b21b      	sxth	r3, r3
 8010662:	4313      	orrs	r3, r2
 8010664:	b21b      	sxth	r3, r3
 8010666:	b29b      	uxth	r3, r3
 8010668:	43db      	mvns	r3, r3
 801066a:	b29a      	uxth	r2, r3
 801066c:	69fb      	ldr	r3, [r7, #28]
 801066e:	815a      	strh	r2, [r3, #10]

				if( ( ucSocketOptions & ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT ) != 0u )
 8010670:	7dfb      	ldrb	r3, [r7, #23]
 8010672:	f003 0302 	and.w	r3, r3, #2
 8010676:	2b00      	cmp	r3, #0
 8010678:	d007      	beq.n	801068a <vProcessGeneratedUDPPacket+0x166>
				{
					usGenerateProtocolChecksum( (uint8_t*)pxUDPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	69db      	ldr	r3, [r3, #28]
 801067e:	2201      	movs	r2, #1
 8010680:	4619      	mov	r1, r3
 8010682:	6a38      	ldr	r0, [r7, #32]
 8010684:	f7fb fa58 	bl	800bb38 <usGenerateProtocolChecksum>
 8010688:	e01a      	b.n	80106c0 <vProcessGeneratedUDPPacket+0x19c>
				}
				else
				{
					pxUDPPacket->xUDPHeader.usChecksum = 0u;
 801068a:	6a3b      	ldr	r3, [r7, #32]
 801068c:	2200      	movs	r2, #0
 801068e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8010692:	2200      	movs	r2, #0
 8010694:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8010698:	e012      	b.n	80106c0 <vProcessGeneratedUDPPacket+0x19c>
				}
			}
			#endif
		}
		else if( eReturned == eARPCacheMiss )
 801069a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d10b      	bne.n	80106ba <vProcessGeneratedUDPPacket+0x196>
		{
			/* Add an entry to the ARP table with a null hardware address.
			This allows the ARP timer to know that an ARP reply is
			outstanding, and perform retransmissions if necessary. */
			vARPRefreshCacheEntry( NULL, ulIPAddress );
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	4619      	mov	r1, r3
 80106a6:	2000      	movs	r0, #0
 80106a8:	f7f9 fcd8 	bl	800a05c <vARPRefreshCacheEntry>

			/* Generate an ARP for the required IP address. */
			iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->ulIPAddress );
			pxNetworkBuffer->ulIPAddress = ulIPAddress;
 80106ac:	68fa      	ldr	r2, [r7, #12]
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	615a      	str	r2, [r3, #20]
			vARPGenerateRequestPacket( pxNetworkBuffer );
 80106b2:	6878      	ldr	r0, [r7, #4]
 80106b4:	f7f9 ff22 	bl	800a4fc <vARPGenerateRequestPacket>
 80106b8:	e002      	b.n	80106c0 <vProcessGeneratedUDPPacket+0x19c>
		}
		else
		{
			/* The lookup indicated that an ARP request has already been
			sent out for the queried IP address. */
			eReturned = eCantSendPacket;
 80106ba:	2302      	movs	r3, #2
 80106bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
	}

	if( eReturned != eCantSendPacket )
 80106c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80106c4:	2b02      	cmp	r3, #2
 80106c6:	d004      	beq.n	80106d2 <vProcessGeneratedUDPPacket+0x1ae>
				pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
			}
		}
		#endif

		xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 80106c8:	2101      	movs	r1, #1
 80106ca:	6878      	ldr	r0, [r7, #4]
 80106cc:	f7f4 fdac 	bl	8005228 <xNetworkInterfaceOutput>
	{
		/* The packet can't be sent (DHCP not completed?).  Just drop the
		packet. */
		vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
	}
}
 80106d0:	e002      	b.n	80106d8 <vProcessGeneratedUDPPacket+0x1b4>
		vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80106d2:	6878      	ldr	r0, [r7, #4]
 80106d4:	f000 f97e 	bl	80109d4 <vReleaseNetworkBufferAndDescriptor>
}
 80106d8:	bf00      	nop
 80106da:	3728      	adds	r7, #40	; 0x28
 80106dc:	46bd      	mov	sp, r7
 80106de:	bdb0      	pop	{r4, r5, r7, pc}
 80106e0:	200001b0 	.word	0x200001b0
 80106e4:	fc0000e0 	.word	0xfc0000e0

080106e8 <xProcessReceivedUDPPacket>:
/*-----------------------------------------------------------*/

BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t *pxNetworkBuffer, uint16_t usPort )
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b086      	sub	sp, #24
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
 80106f0:	460b      	mov	r3, r1
 80106f2:	807b      	strh	r3, [r7, #2]
BaseType_t xReturn = pdPASS;
 80106f4:	2301      	movs	r3, #1
 80106f6:	617b      	str	r3, [r7, #20]
FreeRTOS_Socket_t *pxSocket;

UDPPacket_t *pxUDPPacket = (UDPPacket_t *) pxNetworkBuffer->pucEthernetBuffer;
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	699b      	ldr	r3, [r3, #24]
 80106fc:	613b      	str	r3, [r7, #16]

	/* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 80106fe:	887b      	ldrh	r3, [r7, #2]
 8010700:	4618      	mov	r0, r3
 8010702:	f7fb ffaf 	bl	800c664 <pxUDPSocketLookup>
 8010706:	60f8      	str	r0, [r7, #12]

	if( pxSocket )
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d039      	beq.n	8010782 <xProcessReceivedUDPPacket+0x9a>
	{

		/* When refreshing the ARP cache with received UDP packets we must be
		careful;  hundreds of broadcast messages may pass and if we're not
		handling them, no use to fill the ARP cache with those IP addresses. */
		vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 801070e:	693b      	ldr	r3, [r7, #16]
 8010710:	1d9a      	adds	r2, r3, #6
 8010712:	693b      	ldr	r3, [r7, #16]
 8010714:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8010718:	4619      	mov	r1, r3
 801071a:	4610      	mov	r0, r2
 801071c:	f7f9 fc9e 	bl	800a05c <vARPRefreshCacheEntry>
				}
			}
		}
		#endif

		if( xReturn == pdPASS )
 8010720:	697b      	ldr	r3, [r7, #20]
 8010722:	2b01      	cmp	r3, #1
 8010724:	d14a      	bne.n	80107bc <xProcessReceivedUDPPacket+0xd4>
		{
			vTaskSuspendAll();
 8010726:	f7f8 fd6b 	bl	8009200 <vTaskSuspendAll>
			{
				if( xReturn == pdPASS )
 801072a:	697b      	ldr	r3, [r7, #20]
 801072c:	2b01      	cmp	r3, #1
 801072e:	d10a      	bne.n	8010746 <xProcessReceivedUDPPacket+0x5e>
				{
					taskENTER_CRITICAL();
 8010730:	f7f7 fba6 	bl	8007e80 <vPortEnterCritical>
					{
						/* Add the network packet to the list of packets to be
						processed by the socket. */
						vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	3338      	adds	r3, #56	; 0x38
 8010738:	687a      	ldr	r2, [r7, #4]
 801073a:	4611      	mov	r1, r2
 801073c:	4618      	mov	r0, r3
 801073e:	f7f7 fa0f 	bl	8007b60 <vListInsertEnd>
					}
					taskEXIT_CRITICAL();
 8010742:	f7f7 fbcb 	bl	8007edc <vPortExitCritical>
				}
			}
			xTaskResumeAll();
 8010746:	f7f8 fd69 	bl	800921c <xTaskResumeAll>

			/* Set the socket's receive event */
			if( pxSocket->xEventGroup != NULL )
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	685b      	ldr	r3, [r3, #4]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d005      	beq.n	801075e <xProcessReceivedUDPPacket+0x76>
			{
				xEventGroupSetBits( pxSocket->xEventGroup, eSOCKET_RECEIVE );
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	685b      	ldr	r3, [r3, #4]
 8010756:	2101      	movs	r1, #1
 8010758:	4618      	mov	r0, r3
 801075a:	f7f7 f91b 	bl	8007994 <xEventGroupSetBits>
			}

			#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
			{
				if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 ) )
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010762:	2b00      	cmp	r3, #0
 8010764:	d02a      	beq.n	80107bc <xProcessReceivedUDPPacket+0xd4>
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801076a:	f003 0301 	and.w	r3, r3, #1
 801076e:	2b00      	cmp	r3, #0
 8010770:	d024      	beq.n	80107bc <xProcessReceivedUDPPacket+0xd4>
				{
					xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, eSELECT_READ );
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	2101      	movs	r1, #1
 801077a:	4618      	mov	r0, r3
 801077c:	f7f7 f90a 	bl	8007994 <xEventGroupSetBits>
 8010780:	e01c      	b.n	80107bc <xProcessReceivedUDPPacket+0xd4>
		/* There is no socket listening to the target port, but still it might
		be for this node. */

		#if( ipconfigUSE_LLMNR == 1 )
			/* a LLMNR request, check for the destination port. */
			if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 8010782:	887b      	ldrh	r3, [r7, #2]
 8010784:	f64e 3214 	movw	r2, #60180	; 0xeb14
 8010788:	4293      	cmp	r3, r2
 801078a:	d006      	beq.n	801079a <xProcessReceivedUDPPacket+0xb2>
				( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) )
 801078c:	693b      	ldr	r3, [r7, #16]
 801078e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8010790:	b29b      	uxth	r3, r3
			if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 8010792:	f64e 3214 	movw	r2, #60180	; 0xeb14
 8010796:	4293      	cmp	r3, r2
 8010798:	d10e      	bne.n	80107b8 <xProcessReceivedUDPPacket+0xd0>
			{
				vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 801079a:	693b      	ldr	r3, [r7, #16]
 801079c:	1d9a      	adds	r2, r3, #6
 801079e:	693b      	ldr	r3, [r7, #16]
 80107a0:	f8d3 301a 	ldr.w	r3, [r3, #26]
 80107a4:	4619      	mov	r1, r3
 80107a6:	4610      	mov	r0, r2
 80107a8:	f7f9 fc58 	bl	800a05c <vARPRefreshCacheEntry>
				xReturn = ( BaseType_t )ulDNSHandlePacket( pxNetworkBuffer );
 80107ac:	6878      	ldr	r0, [r7, #4]
 80107ae:	f7f9 ffc2 	bl	800a736 <ulDNSHandlePacket>
 80107b2:	4603      	mov	r3, r0
 80107b4:	617b      	str	r3, [r7, #20]
 80107b6:	e001      	b.n	80107bc <xProcessReceivedUDPPacket+0xd4>
				xReturn = ( BaseType_t )ulNBNSHandlePacket( pxNetworkBuffer );
			}
			else
		#endif /* ipconfigUSE_NBNS */
		{
			xReturn = pdFAIL;
 80107b8:	2300      	movs	r3, #0
 80107ba:	617b      	str	r3, [r7, #20]
		}
	}

	return xReturn;
 80107bc:	697b      	ldr	r3, [r7, #20]
}
 80107be:	4618      	mov	r0, r3
 80107c0:	3718      	adds	r7, #24
 80107c2:	46bd      	mov	sp, r7
 80107c4:	bd80      	pop	{r7, pc}
	...

080107c8 <xNetworkBuffersInitialise>:
static SemaphoreHandle_t xNetworkBufferSemaphore = NULL;

/*-----------------------------------------------------------*/

BaseType_t xNetworkBuffersInitialise( void )
{
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b084      	sub	sp, #16
 80107cc:	af00      	add	r7, sp, #0
BaseType_t xReturn, x;

	/* Only initialise the buffers and their associated kernel objects if they
	have not been initialised before. */
	if( xNetworkBufferSemaphore == NULL )
 80107ce:	4b37      	ldr	r3, [pc, #220]	; (80108ac <xNetworkBuffersInitialise+0xe4>)
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d15c      	bne.n	8010890 <xNetworkBuffersInitialise+0xc8>
	{
		xNetworkBufferSemaphore = xSemaphoreCreateCounting( ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 80107d6:	213c      	movs	r1, #60	; 0x3c
 80107d8:	203c      	movs	r0, #60	; 0x3c
 80107da:	f7f7 fef7 	bl	80085cc <xQueueCreateCountingSemaphore>
 80107de:	4602      	mov	r2, r0
 80107e0:	4b32      	ldr	r3, [pc, #200]	; (80108ac <xNetworkBuffersInitialise+0xe4>)
 80107e2:	601a      	str	r2, [r3, #0]
		configASSERT( xNetworkBufferSemaphore );
 80107e4:	4b31      	ldr	r3, [pc, #196]	; (80108ac <xNetworkBuffersInitialise+0xe4>)
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d109      	bne.n	8010800 <xNetworkBuffersInitialise+0x38>
 80107ec:	f04f 0340 	mov.w	r3, #64	; 0x40
 80107f0:	f383 8811 	msr	BASEPRI, r3
 80107f4:	f3bf 8f6f 	isb	sy
 80107f8:	f3bf 8f4f 	dsb	sy
 80107fc:	607b      	str	r3, [r7, #4]
 80107fe:	e7fe      	b.n	80107fe <xNetworkBuffersInitialise+0x36>

		if( xNetworkBufferSemaphore != NULL )
 8010800:	4b2a      	ldr	r3, [pc, #168]	; (80108ac <xNetworkBuffersInitialise+0xe4>)
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d043      	beq.n	8010890 <xNetworkBuffersInitialise+0xc8>
		{
			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				vQueueAddToRegistry( xNetworkBufferSemaphore, "NetBufSem" );
 8010808:	4b28      	ldr	r3, [pc, #160]	; (80108ac <xNetworkBuffersInitialise+0xe4>)
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	4928      	ldr	r1, [pc, #160]	; (80108b0 <xNetworkBuffersInitialise+0xe8>)
 801080e:	4618      	mov	r0, r3
 8010810:	f7f8 faf8 	bl	8008e04 <vQueueAddToRegistry>
				vTraceSetQueueName( xNetworkEventQueue, "IPStackEvent" );
				vTraceSetQueueName( xNetworkBufferSemaphore, "NetworkBufferCount" );
			}
			#endif /*  ipconfigINCLUDE_EXAMPLE_FREERTOS_PLUS_TRACE_CALLS == 1 */

			vListInitialise( &xFreeBuffersList );
 8010814:	4827      	ldr	r0, [pc, #156]	; (80108b4 <xNetworkBuffersInitialise+0xec>)
 8010816:	f7f7 f976 	bl	8007b06 <vListInitialise>

			/* Initialise all the network buffers.  No storage is allocated to
			the buffers yet. */
			for( x = 0; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 801081a:	2300      	movs	r3, #0
 801081c:	60bb      	str	r3, [r7, #8]
 801081e:	e031      	b.n	8010884 <xNetworkBuffersInitialise+0xbc>
			{
				/* Initialise and set the owner of the buffer list items. */
				xNetworkBufferDescriptors[ x ].pucEthernetBuffer = NULL;
 8010820:	4925      	ldr	r1, [pc, #148]	; (80108b8 <xNetworkBuffersInitialise+0xf0>)
 8010822:	68ba      	ldr	r2, [r7, #8]
 8010824:	4613      	mov	r3, r2
 8010826:	00db      	lsls	r3, r3, #3
 8010828:	4413      	add	r3, r2
 801082a:	009b      	lsls	r3, r3, #2
 801082c:	440b      	add	r3, r1
 801082e:	3318      	adds	r3, #24
 8010830:	2200      	movs	r2, #0
 8010832:	601a      	str	r2, [r3, #0]
				vListInitialiseItem( &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 8010834:	68ba      	ldr	r2, [r7, #8]
 8010836:	4613      	mov	r3, r2
 8010838:	00db      	lsls	r3, r3, #3
 801083a:	4413      	add	r3, r2
 801083c:	009b      	lsls	r3, r3, #2
 801083e:	4a1e      	ldr	r2, [pc, #120]	; (80108b8 <xNetworkBuffersInitialise+0xf0>)
 8010840:	4413      	add	r3, r2
 8010842:	4618      	mov	r0, r3
 8010844:	f7f7 f97f 	bl	8007b46 <vListInitialiseItem>
				listSET_LIST_ITEM_OWNER( &( xNetworkBufferDescriptors[ x ].xBufferListItem ), &xNetworkBufferDescriptors[ x ] );
 8010848:	68ba      	ldr	r2, [r7, #8]
 801084a:	4613      	mov	r3, r2
 801084c:	00db      	lsls	r3, r3, #3
 801084e:	4413      	add	r3, r2
 8010850:	009b      	lsls	r3, r3, #2
 8010852:	4a19      	ldr	r2, [pc, #100]	; (80108b8 <xNetworkBuffersInitialise+0xf0>)
 8010854:	1899      	adds	r1, r3, r2
 8010856:	4818      	ldr	r0, [pc, #96]	; (80108b8 <xNetworkBuffersInitialise+0xf0>)
 8010858:	68ba      	ldr	r2, [r7, #8]
 801085a:	4613      	mov	r3, r2
 801085c:	00db      	lsls	r3, r3, #3
 801085e:	4413      	add	r3, r2
 8010860:	009b      	lsls	r3, r3, #2
 8010862:	4403      	add	r3, r0
 8010864:	330c      	adds	r3, #12
 8010866:	6019      	str	r1, [r3, #0]

				/* Currently, all buffers are available for use. */
				vListInsert( &xFreeBuffersList, &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 8010868:	68ba      	ldr	r2, [r7, #8]
 801086a:	4613      	mov	r3, r2
 801086c:	00db      	lsls	r3, r3, #3
 801086e:	4413      	add	r3, r2
 8010870:	009b      	lsls	r3, r3, #2
 8010872:	4a11      	ldr	r2, [pc, #68]	; (80108b8 <xNetworkBuffersInitialise+0xf0>)
 8010874:	4413      	add	r3, r2
 8010876:	4619      	mov	r1, r3
 8010878:	480e      	ldr	r0, [pc, #56]	; (80108b4 <xNetworkBuffersInitialise+0xec>)
 801087a:	f7f7 f995 	bl	8007ba8 <vListInsert>
			for( x = 0; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 801087e:	68bb      	ldr	r3, [r7, #8]
 8010880:	3301      	adds	r3, #1
 8010882:	60bb      	str	r3, [r7, #8]
 8010884:	68bb      	ldr	r3, [r7, #8]
 8010886:	2b3b      	cmp	r3, #59	; 0x3b
 8010888:	ddca      	ble.n	8010820 <xNetworkBuffersInitialise+0x58>
			}

			uxMinimumFreeNetworkBuffers = ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 801088a:	4b0c      	ldr	r3, [pc, #48]	; (80108bc <xNetworkBuffersInitialise+0xf4>)
 801088c:	223c      	movs	r2, #60	; 0x3c
 801088e:	601a      	str	r2, [r3, #0]
		}
	}

	if( xNetworkBufferSemaphore == NULL )
 8010890:	4b06      	ldr	r3, [pc, #24]	; (80108ac <xNetworkBuffersInitialise+0xe4>)
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d102      	bne.n	801089e <xNetworkBuffersInitialise+0xd6>
	{
		xReturn = pdFAIL;
 8010898:	2300      	movs	r3, #0
 801089a:	60fb      	str	r3, [r7, #12]
 801089c:	e001      	b.n	80108a2 <xNetworkBuffersInitialise+0xda>
	}
	else
	{
		xReturn = pdPASS;
 801089e:	2301      	movs	r3, #1
 80108a0:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80108a2:	68fb      	ldr	r3, [r7, #12]
}
 80108a4:	4618      	mov	r0, r3
 80108a6:	3710      	adds	r7, #16
 80108a8:	46bd      	mov	sp, r7
 80108aa:	bd80      	pop	{r7, pc}
 80108ac:	2000576c 	.word	0x2000576c
 80108b0:	080113d0 	.word	0x080113d0
 80108b4:	20004ee4 	.word	0x20004ee4
 80108b8:	20004efc 	.word	0x20004efc
 80108bc:	20004ef8 	.word	0x20004ef8

080108c0 <vReleaseNetworkBuffer>:
	return pucEthernetBuffer;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBuffer( uint8_t *pucEthernetBuffer )
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b082      	sub	sp, #8
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
	/* There is space before the Ethernet buffer in which a pointer to the
	network buffer that references this Ethernet buffer is stored.  Remove the
	space before freeing the buffer. */
	if( pucEthernetBuffer != NULL )
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d005      	beq.n	80108da <vReleaseNetworkBuffer+0x1a>
	{
		pucEthernetBuffer -= ipBUFFER_PADDING;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	3b0a      	subs	r3, #10
 80108d2:	607b      	str	r3, [r7, #4]
		vPortFree( ( void * ) pucEthernetBuffer );
 80108d4:	6878      	ldr	r0, [r7, #4]
 80108d6:	f7f7 fca5 	bl	8008224 <vPortFree>
	}
}
 80108da:	bf00      	nop
 80108dc:	3708      	adds	r7, #8
 80108de:	46bd      	mov	sp, r7
 80108e0:	bd80      	pop	{r7, pc}
	...

080108e4 <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t *pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes, TickType_t xBlockTimeTicks )
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b086      	sub	sp, #24
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
 80108ec:	6039      	str	r1, [r7, #0]
NetworkBufferDescriptor_t *pxReturn = NULL;
 80108ee:	2300      	movs	r3, #0
 80108f0:	617b      	str	r3, [r7, #20]
size_t uxCount;

	if( ( xRequestedSizeBytes != 0u ) && ( xRequestedSizeBytes < ( size_t ) baMINIMAL_BUFFER_SIZE ) )
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d004      	beq.n	8010902 <pxGetNetworkBufferWithDescriptor+0x1e>
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2b45      	cmp	r3, #69	; 0x45
 80108fc:	d801      	bhi.n	8010902 <pxGetNetworkBufferWithDescriptor+0x1e>
	{
		/* ARP packets can replace application packets, so the storage must be
		at least large enough to hold an ARP. */
		xRequestedSizeBytes = baMINIMAL_BUFFER_SIZE;
 80108fe:	2346      	movs	r3, #70	; 0x46
 8010900:	607b      	str	r3, [r7, #4]
	}

	/* Add 2 bytes to xRequestedSizeBytes and round up xRequestedSizeBytes
	to the nearest multiple of N bytes, where N equals 'sizeof( size_t )'. */
	xRequestedSizeBytes += 2u;
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	3302      	adds	r3, #2
 8010906:	607b      	str	r3, [r7, #4]
	if( ( xRequestedSizeBytes & ( sizeof( size_t ) - 1u ) ) != 0u )
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	f003 0303 	and.w	r3, r3, #3
 801090e:	2b00      	cmp	r3, #0
 8010910:	d004      	beq.n	801091c <pxGetNetworkBufferWithDescriptor+0x38>
	{
		xRequestedSizeBytes = ( xRequestedSizeBytes | ( sizeof( size_t ) - 1u ) ) + 1u;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	f043 0303 	orr.w	r3, r3, #3
 8010918:	3301      	adds	r3, #1
 801091a:	607b      	str	r3, [r7, #4]
	}

	/* If there is a semaphore available, there is a network buffer available. */
	if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 801091c:	4b2a      	ldr	r3, [pc, #168]	; (80109c8 <pxGetNetworkBufferWithDescriptor+0xe4>)
 801091e:	6818      	ldr	r0, [r3, #0]
 8010920:	2300      	movs	r3, #0
 8010922:	683a      	ldr	r2, [r7, #0]
 8010924:	2100      	movs	r1, #0
 8010926:	f7f8 f811 	bl	800894c <xQueueGenericReceive>
 801092a:	4603      	mov	r3, r0
 801092c:	2b01      	cmp	r3, #1
 801092e:	d146      	bne.n	80109be <pxGetNetworkBufferWithDescriptor+0xda>
	{
		/* Protect the structure as it is accessed from tasks and interrupts. */
		taskENTER_CRITICAL();
 8010930:	f7f7 faa6 	bl	8007e80 <vPortEnterCritical>
		{
			pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 8010934:	4b25      	ldr	r3, [pc, #148]	; (80109cc <pxGetNetworkBufferWithDescriptor+0xe8>)
 8010936:	68db      	ldr	r3, [r3, #12]
 8010938:	68db      	ldr	r3, [r3, #12]
 801093a:	617b      	str	r3, [r7, #20]
			uxListRemove( &( pxReturn->xBufferListItem ) );
 801093c:	697b      	ldr	r3, [r7, #20]
 801093e:	4618      	mov	r0, r3
 8010940:	f7f7 f96b 	bl	8007c1a <uxListRemove>
		}
		taskEXIT_CRITICAL();
 8010944:	f7f7 faca 	bl	8007edc <vPortExitCritical>

		/* Reading UBaseType_t, no critical section needed. */
		uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8010948:	4b20      	ldr	r3, [pc, #128]	; (80109cc <pxGetNetworkBufferWithDescriptor+0xe8>)
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	613b      	str	r3, [r7, #16]

		if( uxMinimumFreeNetworkBuffers > uxCount )
 801094e:	4b20      	ldr	r3, [pc, #128]	; (80109d0 <pxGetNetworkBufferWithDescriptor+0xec>)
 8010950:	681a      	ldr	r2, [r3, #0]
 8010952:	693b      	ldr	r3, [r7, #16]
 8010954:	429a      	cmp	r2, r3
 8010956:	d902      	bls.n	801095e <pxGetNetworkBufferWithDescriptor+0x7a>
		{
			uxMinimumFreeNetworkBuffers = uxCount;
 8010958:	4a1d      	ldr	r2, [pc, #116]	; (80109d0 <pxGetNetworkBufferWithDescriptor+0xec>)
 801095a:	693b      	ldr	r3, [r7, #16]
 801095c:	6013      	str	r3, [r2, #0]
		}

		/* Allocate storage of exactly the requested size to the buffer. */
		configASSERT( pxReturn->pucEthernetBuffer == NULL );
 801095e:	697b      	ldr	r3, [r7, #20]
 8010960:	699b      	ldr	r3, [r3, #24]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d009      	beq.n	801097a <pxGetNetworkBufferWithDescriptor+0x96>
 8010966:	f04f 0340 	mov.w	r3, #64	; 0x40
 801096a:	f383 8811 	msr	BASEPRI, r3
 801096e:	f3bf 8f6f 	isb	sy
 8010972:	f3bf 8f4f 	dsb	sy
 8010976:	60fb      	str	r3, [r7, #12]
 8010978:	e7fe      	b.n	8010978 <pxGetNetworkBufferWithDescriptor+0x94>
		if( xRequestedSizeBytes > 0 )
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d01e      	beq.n	80109be <pxGetNetworkBufferWithDescriptor+0xda>
		{
			/* Extra space is obtained so a pointer to the network buffer can
			be stored at the beginning of the buffer. */
			pxReturn->pucEthernetBuffer = ( uint8_t * ) pvPortMalloc( xRequestedSizeBytes + ipBUFFER_PADDING );
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	330a      	adds	r3, #10
 8010984:	4618      	mov	r0, r3
 8010986:	f7f7 fb8b 	bl	80080a0 <pvPortMalloc>
 801098a:	4602      	mov	r2, r0
 801098c:	697b      	ldr	r3, [r7, #20]
 801098e:	619a      	str	r2, [r3, #24]

			if( pxReturn->pucEthernetBuffer == NULL )
 8010990:	697b      	ldr	r3, [r7, #20]
 8010992:	699b      	ldr	r3, [r3, #24]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d105      	bne.n	80109a4 <pxGetNetworkBufferWithDescriptor+0xc0>
			{
				/* The attempt to allocate storage for the buffer payload failed,
				so the network buffer structure cannot be used and must be
				released. */
				vReleaseNetworkBufferAndDescriptor( pxReturn );
 8010998:	6978      	ldr	r0, [r7, #20]
 801099a:	f000 f81b 	bl	80109d4 <vReleaseNetworkBufferAndDescriptor>
				pxReturn = NULL;
 801099e:	2300      	movs	r3, #0
 80109a0:	617b      	str	r3, [r7, #20]
 80109a2:	e00c      	b.n	80109be <pxGetNetworkBufferWithDescriptor+0xda>
			{
				/* Store a pointer to the network buffer structure in the
				buffer storage area, then move the buffer pointer on past the
				stored pointer so the pointer value is not overwritten by the
				application when the buffer is used. */
				*( ( NetworkBufferDescriptor_t ** ) ( pxReturn->pucEthernetBuffer ) ) = pxReturn;
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	699b      	ldr	r3, [r3, #24]
 80109a8:	697a      	ldr	r2, [r7, #20]
 80109aa:	601a      	str	r2, [r3, #0]
				pxReturn->pucEthernetBuffer += ipBUFFER_PADDING;
 80109ac:	697b      	ldr	r3, [r7, #20]
 80109ae:	699b      	ldr	r3, [r3, #24]
 80109b0:	f103 020a 	add.w	r2, r3, #10
 80109b4:	697b      	ldr	r3, [r7, #20]
 80109b6:	619a      	str	r2, [r3, #24]

				/* Store the actual size of the allocated buffer, which may be
				greater than the original requested size. */
				pxReturn->xDataLength = xRequestedSizeBytes;
 80109b8:	697b      	ldr	r3, [r7, #20]
 80109ba:	687a      	ldr	r2, [r7, #4]
 80109bc:	61da      	str	r2, [r3, #28]
	else
	{
		iptraceNETWORK_BUFFER_OBTAINED( pxReturn );
	}

	return pxReturn;
 80109be:	697b      	ldr	r3, [r7, #20]
}
 80109c0:	4618      	mov	r0, r3
 80109c2:	3718      	adds	r7, #24
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bd80      	pop	{r7, pc}
 80109c8:	2000576c 	.word	0x2000576c
 80109cc:	20004ee4 	.word	0x20004ee4
 80109d0:	20004ef8 	.word	0x20004ef8

080109d4 <vReleaseNetworkBufferAndDescriptor>:
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b084      	sub	sp, #16
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
	/* Ensure the buffer is returned to the list of free buffers before the
	counting semaphore is 'given' to say a buffer is available.  Release the
	storage allocated to the buffer payload.  THIS FILE SHOULD NOT BE USED
	IF THE PROJECT INCLUDES A MEMORY ALLOCATOR THAT WILL FRAGMENT THE HEAP
	MEMORY.  For example, heap_2 must not be used, heap_4 can be used. */
	vReleaseNetworkBuffer( pxNetworkBuffer->pucEthernetBuffer );
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	699b      	ldr	r3, [r3, #24]
 80109e0:	4618      	mov	r0, r3
 80109e2:	f7ff ff6d 	bl	80108c0 <vReleaseNetworkBuffer>
	pxNetworkBuffer->pucEthernetBuffer = NULL;
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	2200      	movs	r2, #0
 80109ea:	619a      	str	r2, [r3, #24]

	taskENTER_CRITICAL();
 80109ec:	f7f7 fa48 	bl	8007e80 <vPortEnterCritical>
	{
		xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	691b      	ldr	r3, [r3, #16]
 80109f4:	4a0f      	ldr	r2, [pc, #60]	; (8010a34 <vReleaseNetworkBufferAndDescriptor+0x60>)
 80109f6:	4293      	cmp	r3, r2
 80109f8:	bf0c      	ite	eq
 80109fa:	2301      	moveq	r3, #1
 80109fc:	2300      	movne	r3, #0
 80109fe:	b2db      	uxtb	r3, r3
 8010a00:	60fb      	str	r3, [r7, #12]

		if( xListItemAlreadyInFreeList == pdFALSE )
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d104      	bne.n	8010a12 <vReleaseNetworkBufferAndDescriptor+0x3e>
		{
			vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	4619      	mov	r1, r3
 8010a0c:	4809      	ldr	r0, [pc, #36]	; (8010a34 <vReleaseNetworkBufferAndDescriptor+0x60>)
 8010a0e:	f7f7 f8a7 	bl	8007b60 <vListInsertEnd>
		}
	}
	taskEXIT_CRITICAL();
 8010a12:	f7f7 fa63 	bl	8007edc <vPortExitCritical>

	/*
	 * Update the network state machine, unless the program fails to release its 'xNetworkBufferSemaphore'.
	 * The program should only try to release its semaphore if 'xListItemAlreadyInFreeList' is false.
	 */
	if( xListItemAlreadyInFreeList == pdFALSE )
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d106      	bne.n	8010a2a <vReleaseNetworkBufferAndDescriptor+0x56>
	{
		if ( xSemaphoreGive( xNetworkBufferSemaphore ) == pdTRUE )
 8010a1c:	4b06      	ldr	r3, [pc, #24]	; (8010a38 <vReleaseNetworkBufferAndDescriptor+0x64>)
 8010a1e:	6818      	ldr	r0, [r3, #0]
 8010a20:	2300      	movs	r3, #0
 8010a22:	2200      	movs	r2, #0
 8010a24:	2100      	movs	r1, #0
 8010a26:	f7f7 fe03 	bl	8008630 <xQueueGenericSend>
	}
	else
	{
		iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
	}
}
 8010a2a:	bf00      	nop
 8010a2c:	3710      	adds	r7, #16
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	bd80      	pop	{r7, pc}
 8010a32:	bf00      	nop
 8010a34:	20004ee4 	.word	0x20004ee4
 8010a38:	2000576c 	.word	0x2000576c

08010a3c <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8010a3c:	b5b0      	push	{r4, r5, r7, lr}
 8010a3e:	b088      	sub	sp, #32
 8010a40:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8010a42:	f7ef fd67 	bl	8000514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8010a46:	f000 f82b 	bl	8010aa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8010a4a:	f000 f8a1 	bl	8010b90 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
	FreeRTOS_IPInit( ucIPAddress,
 8010a4e:	4b0d      	ldr	r3, [pc, #52]	; (8010a84 <main+0x48>)
 8010a50:	9300      	str	r3, [sp, #0]
 8010a52:	4b0d      	ldr	r3, [pc, #52]	; (8010a88 <main+0x4c>)
 8010a54:	4a0d      	ldr	r2, [pc, #52]	; (8010a8c <main+0x50>)
 8010a56:	490e      	ldr	r1, [pc, #56]	; (8010a90 <main+0x54>)
 8010a58:	480e      	ldr	r0, [pc, #56]	; (8010a94 <main+0x58>)
 8010a5a:	f7fa fc87 	bl	800b36c <FreeRTOS_IPInit>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8010a5e:	4b0e      	ldr	r3, [pc, #56]	; (8010a98 <main+0x5c>)
 8010a60:	1d3c      	adds	r4, r7, #4
 8010a62:	461d      	mov	r5, r3
 8010a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a68:	682b      	ldr	r3, [r5, #0]
 8010a6a:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8010a6c:	1d3b      	adds	r3, r7, #4
 8010a6e:	2100      	movs	r1, #0
 8010a70:	4618      	mov	r0, r3
 8010a72:	f7f6 fefc 	bl	800786e <osThreadCreate>
 8010a76:	4602      	mov	r2, r0
 8010a78:	4b08      	ldr	r3, [pc, #32]	; (8010a9c <main+0x60>)
 8010a7a:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 8010a7c:	f7f6 fef0 	bl	8007860 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8010a80:	e7fe      	b.n	8010a80 <main+0x44>
 8010a82:	bf00      	nop
 8010a84:	200001c8 	.word	0x200001c8
 8010a88:	0801150c 	.word	0x0801150c
 8010a8c:	08011508 	.word	0x08011508
 8010a90:	08011504 	.word	0x08011504
 8010a94:	08011500 	.word	0x08011500
 8010a98:	080113e8 	.word	0x080113e8
 8010a9c:	200069b8 	.word	0x200069b8

08010aa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b094      	sub	sp, #80	; 0x50
 8010aa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	60bb      	str	r3, [r7, #8]
 8010aaa:	4a35      	ldr	r2, [pc, #212]	; (8010b80 <SystemClock_Config+0xe0>)
 8010aac:	4b34      	ldr	r3, [pc, #208]	; (8010b80 <SystemClock_Config+0xe0>)
 8010aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8010ab6:	4b32      	ldr	r3, [pc, #200]	; (8010b80 <SystemClock_Config+0xe0>)
 8010ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010abe:	60bb      	str	r3, [r7, #8]
 8010ac0:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	607b      	str	r3, [r7, #4]
 8010ac6:	4a2f      	ldr	r2, [pc, #188]	; (8010b84 <SystemClock_Config+0xe4>)
 8010ac8:	4b2e      	ldr	r3, [pc, #184]	; (8010b84 <SystemClock_Config+0xe4>)
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010ad0:	6013      	str	r3, [r2, #0]
 8010ad2:	4b2c      	ldr	r3, [pc, #176]	; (8010b84 <SystemClock_Config+0xe4>)
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010ada:	607b      	str	r3, [r7, #4]
 8010adc:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8010ade:	2303      	movs	r3, #3
 8010ae0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8010ae2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8010ae6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8010ae8:	2301      	movs	r3, #1
 8010aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8010aec:	2310      	movs	r3, #16
 8010aee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010af0:	2302      	movs	r3, #2
 8010af2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8010af4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010af8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8010afa:	2304      	movs	r3, #4
 8010afc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8010afe:	2348      	movs	r3, #72	; 0x48
 8010b00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8010b02:	2302      	movs	r3, #2
 8010b04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8010b06:	2303      	movs	r3, #3
 8010b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010b0a:	f107 0320 	add.w	r3, r7, #32
 8010b0e:	4618      	mov	r0, r3
 8010b10:	f7f1 f8f0 	bl	8001cf4 <HAL_RCC_OscConfig>
 8010b14:	4603      	mov	r3, r0
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d003      	beq.n	8010b22 <SystemClock_Config+0x82>
  {
    _Error_Handler(__FILE__, __LINE__);
 8010b1a:	21d2      	movs	r1, #210	; 0xd2
 8010b1c:	481a      	ldr	r0, [pc, #104]	; (8010b88 <SystemClock_Config+0xe8>)
 8010b1e:	f000 f8f1 	bl	8010d04 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010b22:	230f      	movs	r3, #15
 8010b24:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8010b26:	2300      	movs	r3, #0
 8010b28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8010b2e:	2300      	movs	r3, #0
 8010b30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8010b32:	2300      	movs	r3, #0
 8010b34:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8010b36:	f107 030c 	add.w	r3, r7, #12
 8010b3a:	2100      	movs	r1, #0
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	f7f1 fb1b 	bl	8002178 <HAL_RCC_ClockConfig>
 8010b42:	4603      	mov	r3, r0
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d003      	beq.n	8010b50 <SystemClock_Config+0xb0>
  {
    _Error_Handler(__FILE__, __LINE__);
 8010b48:	21e0      	movs	r1, #224	; 0xe0
 8010b4a:	480f      	ldr	r0, [pc, #60]	; (8010b88 <SystemClock_Config+0xe8>)
 8010b4c:	f000 f8da 	bl	8010d04 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8010b50:	f7f1 fccc 	bl	80024ec <HAL_RCC_GetHCLKFreq>
 8010b54:	4602      	mov	r2, r0
 8010b56:	4b0d      	ldr	r3, [pc, #52]	; (8010b8c <SystemClock_Config+0xec>)
 8010b58:	fba3 2302 	umull	r2, r3, r3, r2
 8010b5c:	099b      	lsrs	r3, r3, #6
 8010b5e:	4618      	mov	r0, r3
 8010b60:	f7ef fe3b 	bl	80007da <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8010b64:	2004      	movs	r0, #4
 8010b66:	f7ef fe45 	bl	80007f4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	210f      	movs	r1, #15
 8010b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8010b72:	f7ef fe08 	bl	8000786 <HAL_NVIC_SetPriority>
}
 8010b76:	bf00      	nop
 8010b78:	3750      	adds	r7, #80	; 0x50
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bd80      	pop	{r7, pc}
 8010b7e:	bf00      	nop
 8010b80:	40023800 	.word	0x40023800
 8010b84:	40007000 	.word	0x40007000
 8010b88:	080113fc 	.word	0x080113fc
 8010b8c:	10624dd3 	.word	0x10624dd3

08010b90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b08a      	sub	sp, #40	; 0x28
 8010b94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8010b96:	2300      	movs	r3, #0
 8010b98:	613b      	str	r3, [r7, #16]
 8010b9a:	4a27      	ldr	r2, [pc, #156]	; (8010c38 <MX_GPIO_Init+0xa8>)
 8010b9c:	4b26      	ldr	r3, [pc, #152]	; (8010c38 <MX_GPIO_Init+0xa8>)
 8010b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ba0:	f043 0304 	orr.w	r3, r3, #4
 8010ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8010ba6:	4b24      	ldr	r3, [pc, #144]	; (8010c38 <MX_GPIO_Init+0xa8>)
 8010ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010baa:	f003 0304 	and.w	r3, r3, #4
 8010bae:	613b      	str	r3, [r7, #16]
 8010bb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	60fb      	str	r3, [r7, #12]
 8010bb6:	4a20      	ldr	r2, [pc, #128]	; (8010c38 <MX_GPIO_Init+0xa8>)
 8010bb8:	4b1f      	ldr	r3, [pc, #124]	; (8010c38 <MX_GPIO_Init+0xa8>)
 8010bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8010bc2:	4b1d      	ldr	r3, [pc, #116]	; (8010c38 <MX_GPIO_Init+0xa8>)
 8010bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010bca:	60fb      	str	r3, [r7, #12]
 8010bcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8010bce:	2300      	movs	r3, #0
 8010bd0:	60bb      	str	r3, [r7, #8]
 8010bd2:	4a19      	ldr	r2, [pc, #100]	; (8010c38 <MX_GPIO_Init+0xa8>)
 8010bd4:	4b18      	ldr	r3, [pc, #96]	; (8010c38 <MX_GPIO_Init+0xa8>)
 8010bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bd8:	f043 0308 	orr.w	r3, r3, #8
 8010bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8010bde:	4b16      	ldr	r3, [pc, #88]	; (8010c38 <MX_GPIO_Init+0xa8>)
 8010be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010be2:	f003 0308 	and.w	r3, r3, #8
 8010be6:	60bb      	str	r3, [r7, #8]
 8010be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010bea:	2300      	movs	r3, #0
 8010bec:	607b      	str	r3, [r7, #4]
 8010bee:	4a12      	ldr	r2, [pc, #72]	; (8010c38 <MX_GPIO_Init+0xa8>)
 8010bf0:	4b11      	ldr	r3, [pc, #68]	; (8010c38 <MX_GPIO_Init+0xa8>)
 8010bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bf4:	f043 0301 	orr.w	r3, r3, #1
 8010bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8010bfa:	4b0f      	ldr	r3, [pc, #60]	; (8010c38 <MX_GPIO_Init+0xa8>)
 8010bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bfe:	f003 0301 	and.w	r3, r3, #1
 8010c02:	607b      	str	r3, [r7, #4]
 8010c04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8010c06:	2200      	movs	r2, #0
 8010c08:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8010c0c:	480b      	ldr	r0, [pc, #44]	; (8010c3c <MX_GPIO_Init+0xac>)
 8010c0e:	f7ef ff8f 	bl	8000b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8010c12:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8010c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010c18:	2301      	movs	r3, #1
 8010c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010c20:	2300      	movs	r3, #0
 8010c22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010c24:	f107 0314 	add.w	r3, r7, #20
 8010c28:	4619      	mov	r1, r3
 8010c2a:	4804      	ldr	r0, [pc, #16]	; (8010c3c <MX_GPIO_Init+0xac>)
 8010c2c:	f7ef fdfe 	bl	800082c <HAL_GPIO_Init>

}
 8010c30:	bf00      	nop
 8010c32:	3728      	adds	r7, #40	; 0x28
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bd80      	pop	{r7, pc}
 8010c38:	40023800 	.word	0x40023800
 8010c3c:	40020c00 	.word	0x40020c00

08010c40 <pcApplicationHostnameHook>:

/* USER CODE BEGIN 4 */
const char *pcApplicationHostnameHook( void )
{
 8010c40:	b480      	push	{r7}
 8010c42:	af00      	add	r7, sp, #0
	/* Assign the name "rtosdemo" to this network node.  This function will be
	called during the DHCP: the machine will be registered with an IP address
	plus this name. */
	return mainHOST_NAME;
 8010c44:	4b02      	ldr	r3, [pc, #8]	; (8010c50 <pcApplicationHostnameHook+0x10>)
}
 8010c46:	4618      	mov	r0, r3
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4e:	4770      	bx	lr
 8010c50:	0801140c 	.word	0x0801140c

08010c54 <xApplicationDNSQueryHook>:

BaseType_t xApplicationDNSQueryHook( const char *pcName )
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b084      	sub	sp, #16
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	/* Determine if a name lookup is for this node.  Two names are given
	to this node: that returned by pcApplicationHostnameHook() and that set
	by mainDEVICE_NICK_NAME. */
	if( strcasecmp( pcName, pcApplicationHostnameHook() ) == 0 )
 8010c5c:	f7ff fff0 	bl	8010c40 <pcApplicationHostnameHook>
 8010c60:	4603      	mov	r3, r0
 8010c62:	4619      	mov	r1, r3
 8010c64:	6878      	ldr	r0, [r7, #4]
 8010c66:	f000 faed 	bl	8011244 <strcasecmp>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d102      	bne.n	8010c76 <xApplicationDNSQueryHook+0x22>
	{
		xReturn = pdPASS;
 8010c70:	2301      	movs	r3, #1
 8010c72:	60fb      	str	r3, [r7, #12]
 8010c74:	e00b      	b.n	8010c8e <xApplicationDNSQueryHook+0x3a>
	}
	else if( strcasecmp( pcName, mainDEVICE_NICK_NAME ) == 0 )
 8010c76:	4908      	ldr	r1, [pc, #32]	; (8010c98 <xApplicationDNSQueryHook+0x44>)
 8010c78:	6878      	ldr	r0, [r7, #4]
 8010c7a:	f000 fae3 	bl	8011244 <strcasecmp>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d102      	bne.n	8010c8a <xApplicationDNSQueryHook+0x36>
	{
		xReturn = pdPASS;
 8010c84:	2301      	movs	r3, #1
 8010c86:	60fb      	str	r3, [r7, #12]
 8010c88:	e001      	b.n	8010c8e <xApplicationDNSQueryHook+0x3a>
	}
	else
	{
		xReturn = pdFAIL;
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8010c8e:	68fb      	ldr	r3, [r7, #12]
}
 8010c90:	4618      	mov	r0, r3
 8010c92:	3710      	adds	r7, #16
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}
 8010c98:	08011418 	.word	0x08011418

08010c9c <vApplicationStackOverflowHook>:
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	ulMallocFailures++;
}

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 8010c9c:	b480      	push	{r7}
 8010c9e:	b085      	sub	sp, #20
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
 8010ca4:	6039      	str	r1, [r7, #0]
 8010ca6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8010caa:	f383 8811 	msr	BASEPRI, r3
 8010cae:	f3bf 8f6f 	isb	sy
 8010cb2:	f3bf 8f4f 	dsb	sy
 8010cb6:	60fb      	str	r3, [r7, #12]

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
	for( ;; );
 8010cb8:	e7fe      	b.n	8010cb8 <vApplicationStackOverflowHook+0x1c>
	...

08010cbc <StartDefaultTask>:
}
/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b082      	sub	sp, #8
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8010cc4:	f7f3 f8a0 	bl	8003e08 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8010cc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010ccc:	f7f6 fdf6 	bl	80078bc <osDelay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8010cd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010cd4:	4801      	ldr	r0, [pc, #4]	; (8010cdc <StartDefaultTask+0x20>)
 8010cd6:	f7ef ff44 	bl	8000b62 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8010cda:	e7f5      	b.n	8010cc8 <StartDefaultTask+0xc>
 8010cdc:	40020c00 	.word	0x40020c00

08010ce0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b082      	sub	sp, #8
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	4a04      	ldr	r2, [pc, #16]	; (8010d00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8010cee:	4293      	cmp	r3, r2
 8010cf0:	d101      	bne.n	8010cf6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8010cf2:	f7ef fc31 	bl	8000558 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8010cf6:	bf00      	nop
 8010cf8:	3708      	adds	r7, #8
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	bd80      	pop	{r7, pc}
 8010cfe:	bf00      	nop
 8010d00:	40014400 	.word	0x40014400

08010d04 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8010d04:	b480      	push	{r7}
 8010d06:	b083      	sub	sp, #12
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
 8010d0c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8010d0e:	e7fe      	b.n	8010d0e <_Error_Handler+0xa>

08010d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b082      	sub	sp, #8
 8010d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010d16:	2300      	movs	r3, #0
 8010d18:	607b      	str	r3, [r7, #4]
 8010d1a:	4a25      	ldr	r2, [pc, #148]	; (8010db0 <HAL_MspInit+0xa0>)
 8010d1c:	4b24      	ldr	r3, [pc, #144]	; (8010db0 <HAL_MspInit+0xa0>)
 8010d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010d24:	6453      	str	r3, [r2, #68]	; 0x44
 8010d26:	4b22      	ldr	r3, [pc, #136]	; (8010db0 <HAL_MspInit+0xa0>)
 8010d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010d2e:	607b      	str	r3, [r7, #4]
 8010d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8010d32:	2300      	movs	r3, #0
 8010d34:	603b      	str	r3, [r7, #0]
 8010d36:	4a1e      	ldr	r2, [pc, #120]	; (8010db0 <HAL_MspInit+0xa0>)
 8010d38:	4b1d      	ldr	r3, [pc, #116]	; (8010db0 <HAL_MspInit+0xa0>)
 8010d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010d40:	6413      	str	r3, [r2, #64]	; 0x40
 8010d42:	4b1b      	ldr	r3, [pc, #108]	; (8010db0 <HAL_MspInit+0xa0>)
 8010d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010d4a:	603b      	str	r3, [r7, #0]
 8010d4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010d4e:	2003      	movs	r0, #3
 8010d50:	f7ef fd0e 	bl	8000770 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8010d54:	2200      	movs	r2, #0
 8010d56:	2100      	movs	r1, #0
 8010d58:	f06f 000b 	mvn.w	r0, #11
 8010d5c:	f7ef fd13 	bl	8000786 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8010d60:	2200      	movs	r2, #0
 8010d62:	2100      	movs	r1, #0
 8010d64:	f06f 000a 	mvn.w	r0, #10
 8010d68:	f7ef fd0d 	bl	8000786 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	2100      	movs	r1, #0
 8010d70:	f06f 0009 	mvn.w	r0, #9
 8010d74:	f7ef fd07 	bl	8000786 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8010d78:	2200      	movs	r2, #0
 8010d7a:	2100      	movs	r1, #0
 8010d7c:	f06f 0004 	mvn.w	r0, #4
 8010d80:	f7ef fd01 	bl	8000786 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8010d84:	2200      	movs	r2, #0
 8010d86:	2100      	movs	r1, #0
 8010d88:	f06f 0003 	mvn.w	r0, #3
 8010d8c:	f7ef fcfb 	bl	8000786 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8010d90:	2200      	movs	r2, #0
 8010d92:	210f      	movs	r1, #15
 8010d94:	f06f 0001 	mvn.w	r0, #1
 8010d98:	f7ef fcf5 	bl	8000786 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	210f      	movs	r1, #15
 8010da0:	f04f 30ff 	mov.w	r0, #4294967295
 8010da4:	f7ef fcef 	bl	8000786 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010da8:	bf00      	nop
 8010daa:	3708      	adds	r7, #8
 8010dac:	46bd      	mov	sp, r7
 8010dae:	bd80      	pop	{r7, pc}
 8010db0:	40023800 	.word	0x40023800

08010db4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b08c      	sub	sp, #48	; 0x30
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	6879      	ldr	r1, [r7, #4]
 8010dc8:	2019      	movs	r0, #25
 8010dca:	f7ef fcdc 	bl	8000786 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8010dce:	2019      	movs	r0, #25
 8010dd0:	f7ef fcf5 	bl	80007be <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	60fb      	str	r3, [r7, #12]
 8010dd8:	4a1e      	ldr	r2, [pc, #120]	; (8010e54 <HAL_InitTick+0xa0>)
 8010dda:	4b1e      	ldr	r3, [pc, #120]	; (8010e54 <HAL_InitTick+0xa0>)
 8010ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010de2:	6453      	str	r3, [r2, #68]	; 0x44
 8010de4:	4b1b      	ldr	r3, [pc, #108]	; (8010e54 <HAL_InitTick+0xa0>)
 8010de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010dec:	60fb      	str	r3, [r7, #12]
 8010dee:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8010df0:	f107 0210 	add.w	r2, r7, #16
 8010df4:	f107 0314 	add.w	r3, r7, #20
 8010df8:	4611      	mov	r1, r2
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f7f1 fb96 	bl	800252c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8010e00:	f7f1 fb80 	bl	8002504 <HAL_RCC_GetPCLK2Freq>
 8010e04:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8010e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e08:	4a13      	ldr	r2, [pc, #76]	; (8010e58 <HAL_InitTick+0xa4>)
 8010e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8010e0e:	0c9b      	lsrs	r3, r3, #18
 8010e10:	3b01      	subs	r3, #1
 8010e12:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8010e14:	4b11      	ldr	r3, [pc, #68]	; (8010e5c <HAL_InitTick+0xa8>)
 8010e16:	4a12      	ldr	r2, [pc, #72]	; (8010e60 <HAL_InitTick+0xac>)
 8010e18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 8010e1a:	4b10      	ldr	r3, [pc, #64]	; (8010e5c <HAL_InitTick+0xa8>)
 8010e1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010e20:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8010e22:	4a0e      	ldr	r2, [pc, #56]	; (8010e5c <HAL_InitTick+0xa8>)
 8010e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e26:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8010e28:	4b0c      	ldr	r3, [pc, #48]	; (8010e5c <HAL_InitTick+0xa8>)
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010e2e:	4b0b      	ldr	r3, [pc, #44]	; (8010e5c <HAL_InitTick+0xa8>)
 8010e30:	2200      	movs	r2, #0
 8010e32:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8010e34:	4809      	ldr	r0, [pc, #36]	; (8010e5c <HAL_InitTick+0xa8>)
 8010e36:	f7f1 fbab 	bl	8002590 <HAL_TIM_Base_Init>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d104      	bne.n	8010e4a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8010e40:	4806      	ldr	r0, [pc, #24]	; (8010e5c <HAL_InitTick+0xa8>)
 8010e42:	f7f1 fbda 	bl	80025fa <HAL_TIM_Base_Start_IT>
 8010e46:	4603      	mov	r3, r0
 8010e48:	e000      	b.n	8010e4c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8010e4a:	2301      	movs	r3, #1
}
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	3730      	adds	r7, #48	; 0x30
 8010e50:	46bd      	mov	sp, r7
 8010e52:	bd80      	pop	{r7, pc}
 8010e54:	40023800 	.word	0x40023800
 8010e58:	431bde83 	.word	0x431bde83
 8010e5c:	200069bc 	.word	0x200069bc
 8010e60:	40014400 	.word	0x40014400

08010e64 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8010e64:	b480      	push	{r7}
 8010e66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8010e68:	bf00      	nop
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e70:	4770      	bx	lr

08010e72 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8010e72:	b480      	push	{r7}
 8010e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010e76:	e7fe      	b.n	8010e76 <HardFault_Handler+0x4>

08010e78 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8010e78:	b480      	push	{r7}
 8010e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010e7c:	e7fe      	b.n	8010e7c <MemManage_Handler+0x4>

08010e7e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8010e7e:	b480      	push	{r7}
 8010e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010e82:	e7fe      	b.n	8010e82 <BusFault_Handler+0x4>

08010e84 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8010e84:	b480      	push	{r7}
 8010e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010e88:	e7fe      	b.n	8010e88 <UsageFault_Handler+0x4>

08010e8a <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8010e8a:	b480      	push	{r7}
 8010e8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010e8e:	bf00      	nop
 8010e90:	46bd      	mov	sp, r7
 8010e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e96:	4770      	bx	lr

08010e98 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8010e9c:	f7f6 fd22 	bl	80078e4 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010ea0:	bf00      	nop
 8010ea2:	bd80      	pop	{r7, pc}

08010ea4 <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8010ea8:	4802      	ldr	r0, [pc, #8]	; (8010eb4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8010eaa:	f7f1 fbc1 	bl	8002630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8010eae:	bf00      	nop
 8010eb0:	bd80      	pop	{r7, pc}
 8010eb2:	bf00      	nop
 8010eb4:	200069bc 	.word	0x200069bc

08010eb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010eb8:	b480      	push	{r7}
 8010eba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010ebc:	4a16      	ldr	r2, [pc, #88]	; (8010f18 <SystemInit+0x60>)
 8010ebe:	4b16      	ldr	r3, [pc, #88]	; (8010f18 <SystemInit+0x60>)
 8010ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010ec4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010ec8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8010ecc:	4a13      	ldr	r2, [pc, #76]	; (8010f1c <SystemInit+0x64>)
 8010ece:	4b13      	ldr	r3, [pc, #76]	; (8010f1c <SystemInit+0x64>)
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	f043 0301 	orr.w	r3, r3, #1
 8010ed6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8010ed8:	4b10      	ldr	r3, [pc, #64]	; (8010f1c <SystemInit+0x64>)
 8010eda:	2200      	movs	r2, #0
 8010edc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8010ede:	4a0f      	ldr	r2, [pc, #60]	; (8010f1c <SystemInit+0x64>)
 8010ee0:	4b0e      	ldr	r3, [pc, #56]	; (8010f1c <SystemInit+0x64>)
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8010ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010eec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8010eee:	4b0b      	ldr	r3, [pc, #44]	; (8010f1c <SystemInit+0x64>)
 8010ef0:	4a0b      	ldr	r2, [pc, #44]	; (8010f20 <SystemInit+0x68>)
 8010ef2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8010ef4:	4a09      	ldr	r2, [pc, #36]	; (8010f1c <SystemInit+0x64>)
 8010ef6:	4b09      	ldr	r3, [pc, #36]	; (8010f1c <SystemInit+0x64>)
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010efe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8010f00:	4b06      	ldr	r3, [pc, #24]	; (8010f1c <SystemInit+0x64>)
 8010f02:	2200      	movs	r2, #0
 8010f04:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8010f06:	4b04      	ldr	r3, [pc, #16]	; (8010f18 <SystemInit+0x60>)
 8010f08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010f0c:	609a      	str	r2, [r3, #8]
#endif
}
 8010f0e:	bf00      	nop
 8010f10:	46bd      	mov	sp, r7
 8010f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f16:	4770      	bx	lr
 8010f18:	e000ed00 	.word	0xe000ed00
 8010f1c:	40023800 	.word	0x40023800
 8010f20:	24003010 	.word	0x24003010

08010f24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8010f24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010f5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8010f28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8010f2a:	e003      	b.n	8010f34 <LoopCopyDataInit>

08010f2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8010f2c:	4b0c      	ldr	r3, [pc, #48]	; (8010f60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8010f2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010f30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8010f32:	3104      	adds	r1, #4

08010f34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8010f34:	480b      	ldr	r0, [pc, #44]	; (8010f64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8010f36:	4b0c      	ldr	r3, [pc, #48]	; (8010f68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8010f38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8010f3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010f3c:	d3f6      	bcc.n	8010f2c <CopyDataInit>
  ldr  r2, =_sbss
 8010f3e:	4a0b      	ldr	r2, [pc, #44]	; (8010f6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010f40:	e002      	b.n	8010f48 <LoopFillZerobss>

08010f42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8010f42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8010f44:	f842 3b04 	str.w	r3, [r2], #4

08010f48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8010f48:	4b09      	ldr	r3, [pc, #36]	; (8010f70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8010f4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010f4c:	d3f9      	bcc.n	8010f42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8010f4e:	f7ff ffb3 	bl	8010eb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010f52:	f000 f811 	bl	8010f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010f56:	f7ff fd71 	bl	8010a3c <main>
  bx  lr    
 8010f5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8010f5c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8010f60:	08011644 	.word	0x08011644
  ldr  r0, =_sdata
 8010f64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8010f68:	200003a4 	.word	0x200003a4
  ldr  r2, =_sbss
 8010f6c:	200003a8 	.word	0x200003a8
  ldr  r3, = _ebss
 8010f70:	200069fc 	.word	0x200069fc

08010f74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010f74:	e7fe      	b.n	8010f74 <ADC_IRQHandler>
	...

08010f78 <__libc_init_array>:
 8010f78:	b570      	push	{r4, r5, r6, lr}
 8010f7a:	4e0d      	ldr	r6, [pc, #52]	; (8010fb0 <__libc_init_array+0x38>)
 8010f7c:	4c0d      	ldr	r4, [pc, #52]	; (8010fb4 <__libc_init_array+0x3c>)
 8010f7e:	1ba4      	subs	r4, r4, r6
 8010f80:	10a4      	asrs	r4, r4, #2
 8010f82:	2500      	movs	r5, #0
 8010f84:	42a5      	cmp	r5, r4
 8010f86:	d109      	bne.n	8010f9c <__libc_init_array+0x24>
 8010f88:	4e0b      	ldr	r6, [pc, #44]	; (8010fb8 <__libc_init_array+0x40>)
 8010f8a:	4c0c      	ldr	r4, [pc, #48]	; (8010fbc <__libc_init_array+0x44>)
 8010f8c:	f000 f9be 	bl	801130c <_init>
 8010f90:	1ba4      	subs	r4, r4, r6
 8010f92:	10a4      	asrs	r4, r4, #2
 8010f94:	2500      	movs	r5, #0
 8010f96:	42a5      	cmp	r5, r4
 8010f98:	d105      	bne.n	8010fa6 <__libc_init_array+0x2e>
 8010f9a:	bd70      	pop	{r4, r5, r6, pc}
 8010f9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010fa0:	4798      	blx	r3
 8010fa2:	3501      	adds	r5, #1
 8010fa4:	e7ee      	b.n	8010f84 <__libc_init_array+0xc>
 8010fa6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010faa:	4798      	blx	r3
 8010fac:	3501      	adds	r5, #1
 8010fae:	e7f2      	b.n	8010f96 <__libc_init_array+0x1e>
 8010fb0:	0801163c 	.word	0x0801163c
 8010fb4:	0801163c 	.word	0x0801163c
 8010fb8:	0801163c 	.word	0x0801163c
 8010fbc:	08011640 	.word	0x08011640

08010fc0 <malloc>:
 8010fc0:	4b02      	ldr	r3, [pc, #8]	; (8010fcc <malloc+0xc>)
 8010fc2:	4601      	mov	r1, r0
 8010fc4:	6818      	ldr	r0, [r3, #0]
 8010fc6:	f000 b895 	b.w	80110f4 <_malloc_r>
 8010fca:	bf00      	nop
 8010fcc:	200001d4 	.word	0x200001d4

08010fd0 <free>:
 8010fd0:	4b02      	ldr	r3, [pc, #8]	; (8010fdc <free+0xc>)
 8010fd2:	4601      	mov	r1, r0
 8010fd4:	6818      	ldr	r0, [r3, #0]
 8010fd6:	f000 b83f 	b.w	8011058 <_free_r>
 8010fda:	bf00      	nop
 8010fdc:	200001d4 	.word	0x200001d4

08010fe0 <memcmp>:
 8010fe0:	b510      	push	{r4, lr}
 8010fe2:	3901      	subs	r1, #1
 8010fe4:	4402      	add	r2, r0
 8010fe6:	4290      	cmp	r0, r2
 8010fe8:	d101      	bne.n	8010fee <memcmp+0xe>
 8010fea:	2000      	movs	r0, #0
 8010fec:	bd10      	pop	{r4, pc}
 8010fee:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010ff2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010ff6:	42a3      	cmp	r3, r4
 8010ff8:	d0f5      	beq.n	8010fe6 <memcmp+0x6>
 8010ffa:	1b18      	subs	r0, r3, r4
 8010ffc:	bd10      	pop	{r4, pc}

08010ffe <memcpy>:
 8010ffe:	b510      	push	{r4, lr}
 8011000:	1e43      	subs	r3, r0, #1
 8011002:	440a      	add	r2, r1
 8011004:	4291      	cmp	r1, r2
 8011006:	d100      	bne.n	801100a <memcpy+0xc>
 8011008:	bd10      	pop	{r4, pc}
 801100a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801100e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011012:	e7f7      	b.n	8011004 <memcpy+0x6>

08011014 <memmove>:
 8011014:	4288      	cmp	r0, r1
 8011016:	b510      	push	{r4, lr}
 8011018:	eb01 0302 	add.w	r3, r1, r2
 801101c:	d803      	bhi.n	8011026 <memmove+0x12>
 801101e:	1e42      	subs	r2, r0, #1
 8011020:	4299      	cmp	r1, r3
 8011022:	d10c      	bne.n	801103e <memmove+0x2a>
 8011024:	bd10      	pop	{r4, pc}
 8011026:	4298      	cmp	r0, r3
 8011028:	d2f9      	bcs.n	801101e <memmove+0xa>
 801102a:	1881      	adds	r1, r0, r2
 801102c:	1ad2      	subs	r2, r2, r3
 801102e:	42d3      	cmn	r3, r2
 8011030:	d100      	bne.n	8011034 <memmove+0x20>
 8011032:	bd10      	pop	{r4, pc}
 8011034:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011038:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801103c:	e7f7      	b.n	801102e <memmove+0x1a>
 801103e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011042:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011046:	e7eb      	b.n	8011020 <memmove+0xc>

08011048 <memset>:
 8011048:	4402      	add	r2, r0
 801104a:	4603      	mov	r3, r0
 801104c:	4293      	cmp	r3, r2
 801104e:	d100      	bne.n	8011052 <memset+0xa>
 8011050:	4770      	bx	lr
 8011052:	f803 1b01 	strb.w	r1, [r3], #1
 8011056:	e7f9      	b.n	801104c <memset+0x4>

08011058 <_free_r>:
 8011058:	b538      	push	{r3, r4, r5, lr}
 801105a:	4605      	mov	r5, r0
 801105c:	2900      	cmp	r1, #0
 801105e:	d045      	beq.n	80110ec <_free_r+0x94>
 8011060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011064:	1f0c      	subs	r4, r1, #4
 8011066:	2b00      	cmp	r3, #0
 8011068:	bfb8      	it	lt
 801106a:	18e4      	addlt	r4, r4, r3
 801106c:	f000 f930 	bl	80112d0 <__malloc_lock>
 8011070:	4a1f      	ldr	r2, [pc, #124]	; (80110f0 <_free_r+0x98>)
 8011072:	6813      	ldr	r3, [r2, #0]
 8011074:	4610      	mov	r0, r2
 8011076:	b933      	cbnz	r3, 8011086 <_free_r+0x2e>
 8011078:	6063      	str	r3, [r4, #4]
 801107a:	6014      	str	r4, [r2, #0]
 801107c:	4628      	mov	r0, r5
 801107e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011082:	f000 b926 	b.w	80112d2 <__malloc_unlock>
 8011086:	42a3      	cmp	r3, r4
 8011088:	d90c      	bls.n	80110a4 <_free_r+0x4c>
 801108a:	6821      	ldr	r1, [r4, #0]
 801108c:	1862      	adds	r2, r4, r1
 801108e:	4293      	cmp	r3, r2
 8011090:	bf04      	itt	eq
 8011092:	681a      	ldreq	r2, [r3, #0]
 8011094:	685b      	ldreq	r3, [r3, #4]
 8011096:	6063      	str	r3, [r4, #4]
 8011098:	bf04      	itt	eq
 801109a:	1852      	addeq	r2, r2, r1
 801109c:	6022      	streq	r2, [r4, #0]
 801109e:	6004      	str	r4, [r0, #0]
 80110a0:	e7ec      	b.n	801107c <_free_r+0x24>
 80110a2:	4613      	mov	r3, r2
 80110a4:	685a      	ldr	r2, [r3, #4]
 80110a6:	b10a      	cbz	r2, 80110ac <_free_r+0x54>
 80110a8:	42a2      	cmp	r2, r4
 80110aa:	d9fa      	bls.n	80110a2 <_free_r+0x4a>
 80110ac:	6819      	ldr	r1, [r3, #0]
 80110ae:	1858      	adds	r0, r3, r1
 80110b0:	42a0      	cmp	r0, r4
 80110b2:	d10b      	bne.n	80110cc <_free_r+0x74>
 80110b4:	6820      	ldr	r0, [r4, #0]
 80110b6:	4401      	add	r1, r0
 80110b8:	1858      	adds	r0, r3, r1
 80110ba:	4282      	cmp	r2, r0
 80110bc:	6019      	str	r1, [r3, #0]
 80110be:	d1dd      	bne.n	801107c <_free_r+0x24>
 80110c0:	6810      	ldr	r0, [r2, #0]
 80110c2:	6852      	ldr	r2, [r2, #4]
 80110c4:	605a      	str	r2, [r3, #4]
 80110c6:	4401      	add	r1, r0
 80110c8:	6019      	str	r1, [r3, #0]
 80110ca:	e7d7      	b.n	801107c <_free_r+0x24>
 80110cc:	d902      	bls.n	80110d4 <_free_r+0x7c>
 80110ce:	230c      	movs	r3, #12
 80110d0:	602b      	str	r3, [r5, #0]
 80110d2:	e7d3      	b.n	801107c <_free_r+0x24>
 80110d4:	6820      	ldr	r0, [r4, #0]
 80110d6:	1821      	adds	r1, r4, r0
 80110d8:	428a      	cmp	r2, r1
 80110da:	bf04      	itt	eq
 80110dc:	6811      	ldreq	r1, [r2, #0]
 80110de:	6852      	ldreq	r2, [r2, #4]
 80110e0:	6062      	str	r2, [r4, #4]
 80110e2:	bf04      	itt	eq
 80110e4:	1809      	addeq	r1, r1, r0
 80110e6:	6021      	streq	r1, [r4, #0]
 80110e8:	605c      	str	r4, [r3, #4]
 80110ea:	e7c7      	b.n	801107c <_free_r+0x24>
 80110ec:	bd38      	pop	{r3, r4, r5, pc}
 80110ee:	bf00      	nop
 80110f0:	20005770 	.word	0x20005770

080110f4 <_malloc_r>:
 80110f4:	b570      	push	{r4, r5, r6, lr}
 80110f6:	1ccd      	adds	r5, r1, #3
 80110f8:	f025 0503 	bic.w	r5, r5, #3
 80110fc:	3508      	adds	r5, #8
 80110fe:	2d0c      	cmp	r5, #12
 8011100:	bf38      	it	cc
 8011102:	250c      	movcc	r5, #12
 8011104:	2d00      	cmp	r5, #0
 8011106:	4606      	mov	r6, r0
 8011108:	db01      	blt.n	801110e <_malloc_r+0x1a>
 801110a:	42a9      	cmp	r1, r5
 801110c:	d903      	bls.n	8011116 <_malloc_r+0x22>
 801110e:	230c      	movs	r3, #12
 8011110:	6033      	str	r3, [r6, #0]
 8011112:	2000      	movs	r0, #0
 8011114:	bd70      	pop	{r4, r5, r6, pc}
 8011116:	f000 f8db 	bl	80112d0 <__malloc_lock>
 801111a:	4a23      	ldr	r2, [pc, #140]	; (80111a8 <_malloc_r+0xb4>)
 801111c:	6814      	ldr	r4, [r2, #0]
 801111e:	4621      	mov	r1, r4
 8011120:	b991      	cbnz	r1, 8011148 <_malloc_r+0x54>
 8011122:	4c22      	ldr	r4, [pc, #136]	; (80111ac <_malloc_r+0xb8>)
 8011124:	6823      	ldr	r3, [r4, #0]
 8011126:	b91b      	cbnz	r3, 8011130 <_malloc_r+0x3c>
 8011128:	4630      	mov	r0, r6
 801112a:	f000 f87b 	bl	8011224 <_sbrk_r>
 801112e:	6020      	str	r0, [r4, #0]
 8011130:	4629      	mov	r1, r5
 8011132:	4630      	mov	r0, r6
 8011134:	f000 f876 	bl	8011224 <_sbrk_r>
 8011138:	1c43      	adds	r3, r0, #1
 801113a:	d126      	bne.n	801118a <_malloc_r+0x96>
 801113c:	230c      	movs	r3, #12
 801113e:	6033      	str	r3, [r6, #0]
 8011140:	4630      	mov	r0, r6
 8011142:	f000 f8c6 	bl	80112d2 <__malloc_unlock>
 8011146:	e7e4      	b.n	8011112 <_malloc_r+0x1e>
 8011148:	680b      	ldr	r3, [r1, #0]
 801114a:	1b5b      	subs	r3, r3, r5
 801114c:	d41a      	bmi.n	8011184 <_malloc_r+0x90>
 801114e:	2b0b      	cmp	r3, #11
 8011150:	d90f      	bls.n	8011172 <_malloc_r+0x7e>
 8011152:	600b      	str	r3, [r1, #0]
 8011154:	50cd      	str	r5, [r1, r3]
 8011156:	18cc      	adds	r4, r1, r3
 8011158:	4630      	mov	r0, r6
 801115a:	f000 f8ba 	bl	80112d2 <__malloc_unlock>
 801115e:	f104 000b 	add.w	r0, r4, #11
 8011162:	1d23      	adds	r3, r4, #4
 8011164:	f020 0007 	bic.w	r0, r0, #7
 8011168:	1ac3      	subs	r3, r0, r3
 801116a:	d01b      	beq.n	80111a4 <_malloc_r+0xb0>
 801116c:	425a      	negs	r2, r3
 801116e:	50e2      	str	r2, [r4, r3]
 8011170:	bd70      	pop	{r4, r5, r6, pc}
 8011172:	428c      	cmp	r4, r1
 8011174:	bf0d      	iteet	eq
 8011176:	6863      	ldreq	r3, [r4, #4]
 8011178:	684b      	ldrne	r3, [r1, #4]
 801117a:	6063      	strne	r3, [r4, #4]
 801117c:	6013      	streq	r3, [r2, #0]
 801117e:	bf18      	it	ne
 8011180:	460c      	movne	r4, r1
 8011182:	e7e9      	b.n	8011158 <_malloc_r+0x64>
 8011184:	460c      	mov	r4, r1
 8011186:	6849      	ldr	r1, [r1, #4]
 8011188:	e7ca      	b.n	8011120 <_malloc_r+0x2c>
 801118a:	1cc4      	adds	r4, r0, #3
 801118c:	f024 0403 	bic.w	r4, r4, #3
 8011190:	42a0      	cmp	r0, r4
 8011192:	d005      	beq.n	80111a0 <_malloc_r+0xac>
 8011194:	1a21      	subs	r1, r4, r0
 8011196:	4630      	mov	r0, r6
 8011198:	f000 f844 	bl	8011224 <_sbrk_r>
 801119c:	3001      	adds	r0, #1
 801119e:	d0cd      	beq.n	801113c <_malloc_r+0x48>
 80111a0:	6025      	str	r5, [r4, #0]
 80111a2:	e7d9      	b.n	8011158 <_malloc_r+0x64>
 80111a4:	bd70      	pop	{r4, r5, r6, pc}
 80111a6:	bf00      	nop
 80111a8:	20005770 	.word	0x20005770
 80111ac:	20005774 	.word	0x20005774

080111b0 <rand>:
 80111b0:	4b19      	ldr	r3, [pc, #100]	; (8011218 <rand+0x68>)
 80111b2:	b510      	push	{r4, lr}
 80111b4:	681c      	ldr	r4, [r3, #0]
 80111b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80111b8:	b9d3      	cbnz	r3, 80111f0 <rand+0x40>
 80111ba:	2018      	movs	r0, #24
 80111bc:	f7ff ff00 	bl	8010fc0 <malloc>
 80111c0:	f243 330e 	movw	r3, #13070	; 0x330e
 80111c4:	63a0      	str	r0, [r4, #56]	; 0x38
 80111c6:	8003      	strh	r3, [r0, #0]
 80111c8:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80111cc:	8043      	strh	r3, [r0, #2]
 80111ce:	f241 2334 	movw	r3, #4660	; 0x1234
 80111d2:	8083      	strh	r3, [r0, #4]
 80111d4:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80111d8:	80c3      	strh	r3, [r0, #6]
 80111da:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80111de:	8103      	strh	r3, [r0, #8]
 80111e0:	2305      	movs	r3, #5
 80111e2:	8143      	strh	r3, [r0, #10]
 80111e4:	230b      	movs	r3, #11
 80111e6:	8183      	strh	r3, [r0, #12]
 80111e8:	2201      	movs	r2, #1
 80111ea:	2300      	movs	r3, #0
 80111ec:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80111f0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80111f2:	480a      	ldr	r0, [pc, #40]	; (801121c <rand+0x6c>)
 80111f4:	690a      	ldr	r2, [r1, #16]
 80111f6:	694b      	ldr	r3, [r1, #20]
 80111f8:	4c09      	ldr	r4, [pc, #36]	; (8011220 <rand+0x70>)
 80111fa:	4350      	muls	r0, r2
 80111fc:	fb04 0003 	mla	r0, r4, r3, r0
 8011200:	fba2 2304 	umull	r2, r3, r2, r4
 8011204:	3201      	adds	r2, #1
 8011206:	4403      	add	r3, r0
 8011208:	f143 0300 	adc.w	r3, r3, #0
 801120c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8011210:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8011214:	bd10      	pop	{r4, pc}
 8011216:	bf00      	nop
 8011218:	200001d4 	.word	0x200001d4
 801121c:	5851f42d 	.word	0x5851f42d
 8011220:	4c957f2d 	.word	0x4c957f2d

08011224 <_sbrk_r>:
 8011224:	b538      	push	{r3, r4, r5, lr}
 8011226:	4c06      	ldr	r4, [pc, #24]	; (8011240 <_sbrk_r+0x1c>)
 8011228:	2300      	movs	r3, #0
 801122a:	4605      	mov	r5, r0
 801122c:	4608      	mov	r0, r1
 801122e:	6023      	str	r3, [r4, #0]
 8011230:	f000 f85e 	bl	80112f0 <_sbrk>
 8011234:	1c43      	adds	r3, r0, #1
 8011236:	d102      	bne.n	801123e <_sbrk_r+0x1a>
 8011238:	6823      	ldr	r3, [r4, #0]
 801123a:	b103      	cbz	r3, 801123e <_sbrk_r+0x1a>
 801123c:	602b      	str	r3, [r5, #0]
 801123e:	bd38      	pop	{r3, r4, r5, pc}
 8011240:	200069f8 	.word	0x200069f8

08011244 <strcasecmp>:
 8011244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011246:	4606      	mov	r6, r0
 8011248:	460f      	mov	r7, r1
 801124a:	f816 4b01 	ldrb.w	r4, [r6], #1
 801124e:	f000 f81f 	bl	8011290 <__locale_ctype_ptr>
 8011252:	4420      	add	r0, r4
 8011254:	f817 5b01 	ldrb.w	r5, [r7], #1
 8011258:	7843      	ldrb	r3, [r0, #1]
 801125a:	f003 0303 	and.w	r3, r3, #3
 801125e:	2b01      	cmp	r3, #1
 8011260:	bf08      	it	eq
 8011262:	3420      	addeq	r4, #32
 8011264:	f000 f814 	bl	8011290 <__locale_ctype_ptr>
 8011268:	4428      	add	r0, r5
 801126a:	7843      	ldrb	r3, [r0, #1]
 801126c:	f003 0303 	and.w	r3, r3, #3
 8011270:	2b01      	cmp	r3, #1
 8011272:	bf08      	it	eq
 8011274:	3520      	addeq	r5, #32
 8011276:	1b60      	subs	r0, r4, r5
 8011278:	d101      	bne.n	801127e <strcasecmp+0x3a>
 801127a:	2d00      	cmp	r5, #0
 801127c:	d1e5      	bne.n	801124a <strcasecmp+0x6>
 801127e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011280 <strcpy>:
 8011280:	4603      	mov	r3, r0
 8011282:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011286:	f803 2b01 	strb.w	r2, [r3], #1
 801128a:	2a00      	cmp	r2, #0
 801128c:	d1f9      	bne.n	8011282 <strcpy+0x2>
 801128e:	4770      	bx	lr

08011290 <__locale_ctype_ptr>:
 8011290:	4b04      	ldr	r3, [pc, #16]	; (80112a4 <__locale_ctype_ptr+0x14>)
 8011292:	4a05      	ldr	r2, [pc, #20]	; (80112a8 <__locale_ctype_ptr+0x18>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	6a1b      	ldr	r3, [r3, #32]
 8011298:	2b00      	cmp	r3, #0
 801129a:	bf08      	it	eq
 801129c:	4613      	moveq	r3, r2
 801129e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80112a2:	4770      	bx	lr
 80112a4:	200001d4 	.word	0x200001d4
 80112a8:	20000238 	.word	0x20000238

080112ac <__ascii_mbtowc>:
 80112ac:	b082      	sub	sp, #8
 80112ae:	b901      	cbnz	r1, 80112b2 <__ascii_mbtowc+0x6>
 80112b0:	a901      	add	r1, sp, #4
 80112b2:	b142      	cbz	r2, 80112c6 <__ascii_mbtowc+0x1a>
 80112b4:	b14b      	cbz	r3, 80112ca <__ascii_mbtowc+0x1e>
 80112b6:	7813      	ldrb	r3, [r2, #0]
 80112b8:	600b      	str	r3, [r1, #0]
 80112ba:	7812      	ldrb	r2, [r2, #0]
 80112bc:	1c10      	adds	r0, r2, #0
 80112be:	bf18      	it	ne
 80112c0:	2001      	movne	r0, #1
 80112c2:	b002      	add	sp, #8
 80112c4:	4770      	bx	lr
 80112c6:	4610      	mov	r0, r2
 80112c8:	e7fb      	b.n	80112c2 <__ascii_mbtowc+0x16>
 80112ca:	f06f 0001 	mvn.w	r0, #1
 80112ce:	e7f8      	b.n	80112c2 <__ascii_mbtowc+0x16>

080112d0 <__malloc_lock>:
 80112d0:	4770      	bx	lr

080112d2 <__malloc_unlock>:
 80112d2:	4770      	bx	lr

080112d4 <__ascii_wctomb>:
 80112d4:	b149      	cbz	r1, 80112ea <__ascii_wctomb+0x16>
 80112d6:	2aff      	cmp	r2, #255	; 0xff
 80112d8:	bf85      	ittet	hi
 80112da:	238a      	movhi	r3, #138	; 0x8a
 80112dc:	6003      	strhi	r3, [r0, #0]
 80112de:	700a      	strbls	r2, [r1, #0]
 80112e0:	f04f 30ff 	movhi.w	r0, #4294967295
 80112e4:	bf98      	it	ls
 80112e6:	2001      	movls	r0, #1
 80112e8:	4770      	bx	lr
 80112ea:	4608      	mov	r0, r1
 80112ec:	4770      	bx	lr
	...

080112f0 <_sbrk>:
 80112f0:	4b04      	ldr	r3, [pc, #16]	; (8011304 <_sbrk+0x14>)
 80112f2:	6819      	ldr	r1, [r3, #0]
 80112f4:	4602      	mov	r2, r0
 80112f6:	b909      	cbnz	r1, 80112fc <_sbrk+0xc>
 80112f8:	4903      	ldr	r1, [pc, #12]	; (8011308 <_sbrk+0x18>)
 80112fa:	6019      	str	r1, [r3, #0]
 80112fc:	6818      	ldr	r0, [r3, #0]
 80112fe:	4402      	add	r2, r0
 8011300:	601a      	str	r2, [r3, #0]
 8011302:	4770      	bx	lr
 8011304:	20005778 	.word	0x20005778
 8011308:	200069fc 	.word	0x200069fc

0801130c <_init>:
 801130c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801130e:	bf00      	nop
 8011310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011312:	bc08      	pop	{r3}
 8011314:	469e      	mov	lr, r3
 8011316:	4770      	bx	lr

08011318 <_fini>:
 8011318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801131a:	bf00      	nop
 801131c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801131e:	bc08      	pop	{r3}
 8011320:	469e      	mov	lr, r3
 8011322:	4770      	bx	lr
