
ADHOC03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ee4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  08011084  08011084  00021084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011394  08011394  00021394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801139c  0801139c  0002139c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080113a0  080113a0  000213a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000003a4  20000000  080113a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006654  200003a8  08011748  000303a8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  200069fc  08011748  000369fc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000303a4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00034777  00000000  00000000  000303d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000064e1  00000000  00000000  00064b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001da8  00000000  00000000  0006b030  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001b90  00000000  00000000  0006cdd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000fd67  00000000  00000000  0006e968  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000a037  00000000  00000000  0007e6cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00088706  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007db0  00000000  00000000  00088784  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003a8 	.word	0x200003a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801106c 	.word	0x0801106c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200003ac 	.word	0x200003ac
 80001dc:	0801106c 	.word	0x0801106c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <HAL_Init+0x40>)
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_Init+0x40>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000522:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000524:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <HAL_Init+0x40>)
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <HAL_Init+0x40>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800052e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000530:	4a08      	ldr	r2, [pc, #32]	; (8000554 <HAL_Init+0x40>)
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <HAL_Init+0x40>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800053a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f917 	bl	8000770 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f010 fae6 	bl	8010b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f010 fa92 	bl	8010a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40023c00 	.word	0x40023c00

08000558 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <HAL_IncTick+0x20>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	461a      	mov	r2, r3
 8000562:	4b06      	ldr	r3, [pc, #24]	; (800057c <HAL_IncTick+0x24>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4413      	add	r3, r2
 8000568:	4a04      	ldr	r2, [pc, #16]	; (800057c <HAL_IncTick+0x24>)
 800056a:	6013      	str	r3, [r2, #0]
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	20000000 	.word	0x20000000
 800057c:	2000577c 	.word	0x2000577c

08000580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  return uwTick;
 8000584:	4b03      	ldr	r3, [pc, #12]	; (8000594 <HAL_GetTick+0x14>)
 8000586:	681b      	ldr	r3, [r3, #0]
}
 8000588:	4618      	mov	r0, r3
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	2000577c 	.word	0x2000577c

08000598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005a0:	f7ff ffee 	bl	8000580 <HAL_GetTick>
 80005a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005b0:	d005      	beq.n	80005be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005b2:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <HAL_Delay+0x40>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	461a      	mov	r2, r3
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4413      	add	r3, r2
 80005bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005be:	bf00      	nop
 80005c0:	f7ff ffde 	bl	8000580 <HAL_GetTick>
 80005c4:	4602      	mov	r2, r0
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	1ad2      	subs	r2, r2, r3
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d3f7      	bcc.n	80005c0 <HAL_Delay+0x28>
  {
  }
}
 80005d0:	bf00      	nop
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000000 	.word	0x20000000

080005dc <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f003 0307 	and.w	r3, r3, #7
 80005ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <NVIC_SetPriorityGrouping+0x44>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f2:	68ba      	ldr	r2, [r7, #8]
 80005f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005f8:	4013      	ands	r3, r2
 80005fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800060e:	4a04      	ldr	r2, [pc, #16]	; (8000620 <NVIC_SetPriorityGrouping+0x44>)
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	60d3      	str	r3, [r2, #12]
}
 8000614:	bf00      	nop
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <NVIC_GetPriorityGrouping+0x18>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	0a1b      	lsrs	r3, r3, #8
 800062e:	f003 0307 	and.w	r3, r3, #7
}
 8000632:	4618      	mov	r0, r3
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <NVIC_EnableIRQ+0x30>)
 800064c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000650:	095b      	lsrs	r3, r3, #5
 8000652:	79fa      	ldrb	r2, [r7, #7]
 8000654:	f002 021f 	and.w	r2, r2, #31
 8000658:	2001      	movs	r0, #1
 800065a:	fa00 f202 	lsl.w	r2, r0, r2
 800065e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e000e100 	.word	0xe000e100

08000674 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	6039      	str	r1, [r7, #0]
 800067e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000684:	2b00      	cmp	r3, #0
 8000686:	da0b      	bge.n	80006a0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000688:	490d      	ldr	r1, [pc, #52]	; (80006c0 <NVIC_SetPriority+0x4c>)
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	f003 030f 	and.w	r3, r3, #15
 8000690:	3b04      	subs	r3, #4
 8000692:	683a      	ldr	r2, [r7, #0]
 8000694:	b2d2      	uxtb	r2, r2
 8000696:	0112      	lsls	r2, r2, #4
 8000698:	b2d2      	uxtb	r2, r2
 800069a:	440b      	add	r3, r1
 800069c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800069e:	e009      	b.n	80006b4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a0:	4908      	ldr	r1, [pc, #32]	; (80006c4 <NVIC_SetPriority+0x50>)
 80006a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	0112      	lsls	r2, r2, #4
 80006ac:	b2d2      	uxtb	r2, r2
 80006ae:	440b      	add	r3, r1
 80006b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	e000ed00 	.word	0xe000ed00
 80006c4:	e000e100 	.word	0xe000e100

080006c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b089      	sub	sp, #36	; 0x24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	f003 0307 	and.w	r3, r3, #7
 80006da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006dc:	69fb      	ldr	r3, [r7, #28]
 80006de:	f1c3 0307 	rsb	r3, r3, #7
 80006e2:	2b04      	cmp	r3, #4
 80006e4:	bf28      	it	cs
 80006e6:	2304      	movcs	r3, #4
 80006e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	3304      	adds	r3, #4
 80006ee:	2b06      	cmp	r3, #6
 80006f0:	d902      	bls.n	80006f8 <NVIC_EncodePriority+0x30>
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	3b03      	subs	r3, #3
 80006f6:	e000      	b.n	80006fa <NVIC_EncodePriority+0x32>
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006fc:	2201      	movs	r2, #1
 80006fe:	69bb      	ldr	r3, [r7, #24]
 8000700:	fa02 f303 	lsl.w	r3, r2, r3
 8000704:	1e5a      	subs	r2, r3, #1
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	401a      	ands	r2, r3
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800070e:	2101      	movs	r1, #1
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	fa01 f303 	lsl.w	r3, r1, r3
 8000716:	1e59      	subs	r1, r3, #1
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	4313      	orrs	r3, r2
         );
}
 800071e:	4618      	mov	r0, r3
 8000720:	3724      	adds	r7, #36	; 0x24
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
	...

0800072c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3b01      	subs	r3, #1
 8000738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800073c:	d301      	bcc.n	8000742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800073e:	2301      	movs	r3, #1
 8000740:	e00f      	b.n	8000762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000742:	4a0a      	ldr	r2, [pc, #40]	; (800076c <SysTick_Config+0x40>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3b01      	subs	r3, #1
 8000748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800074a:	210f      	movs	r1, #15
 800074c:	f04f 30ff 	mov.w	r0, #4294967295
 8000750:	f7ff ff90 	bl	8000674 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <SysTick_Config+0x40>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075a:	4b04      	ldr	r3, [pc, #16]	; (800076c <SysTick_Config+0x40>)
 800075c:	2207      	movs	r2, #7
 800075e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000760:	2300      	movs	r3, #0
}
 8000762:	4618      	mov	r0, r3
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	e000e010 	.word	0xe000e010

08000770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f7ff ff2f 	bl	80005dc <NVIC_SetPriorityGrouping>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000786:	b580      	push	{r7, lr}
 8000788:	b086      	sub	sp, #24
 800078a:	af00      	add	r7, sp, #0
 800078c:	4603      	mov	r3, r0
 800078e:	60b9      	str	r1, [r7, #8]
 8000790:	607a      	str	r2, [r7, #4]
 8000792:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000798:	f7ff ff44 	bl	8000624 <NVIC_GetPriorityGrouping>
 800079c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	68b9      	ldr	r1, [r7, #8]
 80007a2:	6978      	ldr	r0, [r7, #20]
 80007a4:	f7ff ff90 	bl	80006c8 <NVIC_EncodePriority>
 80007a8:	4602      	mov	r2, r0
 80007aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ae:	4611      	mov	r1, r2
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ff5f 	bl	8000674 <NVIC_SetPriority>
}
 80007b6:	bf00      	nop
 80007b8:	3718      	adds	r7, #24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	4603      	mov	r3, r0
 80007c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ff37 	bl	8000640 <NVIC_EnableIRQ>
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f7ff ffa2 	bl	800072c <SysTick_Config>
 80007e8:	4603      	mov	r3, r0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b04      	cmp	r3, #4
 8000800:	d106      	bne.n	8000810 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000802:	4a09      	ldr	r2, [pc, #36]	; (8000828 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800080e:	e005      	b.n	800081c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000810:	4a05      	ldr	r2, [pc, #20]	; (8000828 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f023 0304 	bic.w	r3, r3, #4
 800081a:	6013      	str	r3, [r2, #0]
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	e000e010 	.word	0xe000e010

0800082c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800082c:	b480      	push	{r7}
 800082e:	b089      	sub	sp, #36	; 0x24
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
 8000846:	e159      	b.n	8000afc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000848:	2201      	movs	r2, #1
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	fa02 f303 	lsl.w	r3, r2, r3
 8000850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	4013      	ands	r3, r2
 800085a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800085c:	693a      	ldr	r2, [r7, #16]
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	429a      	cmp	r2, r3
 8000862:	f040 8148 	bne.w	8000af6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	2b02      	cmp	r3, #2
 800086c:	d003      	beq.n	8000876 <HAL_GPIO_Init+0x4a>
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	2b12      	cmp	r3, #18
 8000874:	d123      	bne.n	80008be <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	08da      	lsrs	r2, r3, #3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	3208      	adds	r2, #8
 800087e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000882:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	f003 0307 	and.w	r3, r3, #7
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	220f      	movs	r2, #15
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	43db      	mvns	r3, r3
 8000894:	69ba      	ldr	r2, [r7, #24]
 8000896:	4013      	ands	r3, r2
 8000898:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	691a      	ldr	r2, [r3, #16]
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	f003 0307 	and.w	r3, r3, #7
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	69ba      	ldr	r2, [r7, #24]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	08da      	lsrs	r2, r3, #3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3208      	adds	r2, #8
 80008b8:	69b9      	ldr	r1, [r7, #24]
 80008ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	2203      	movs	r2, #3
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	43db      	mvns	r3, r3
 80008d0:	69ba      	ldr	r2, [r7, #24]
 80008d2:	4013      	ands	r3, r2
 80008d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	f003 0203 	and.w	r2, r3, #3
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	69ba      	ldr	r2, [r7, #24]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	69ba      	ldr	r2, [r7, #24]
 80008f0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d00b      	beq.n	8000912 <HAL_GPIO_Init+0xe6>
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	2b02      	cmp	r3, #2
 8000900:	d007      	beq.n	8000912 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000906:	2b11      	cmp	r3, #17
 8000908:	d003      	beq.n	8000912 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	2b12      	cmp	r3, #18
 8000910:	d130      	bne.n	8000974 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	2203      	movs	r2, #3
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	43db      	mvns	r3, r3
 8000924:	69ba      	ldr	r2, [r7, #24]
 8000926:	4013      	ands	r3, r2
 8000928:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	68da      	ldr	r2, [r3, #12]
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	4313      	orrs	r3, r2
 800093a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	69ba      	ldr	r2, [r7, #24]
 8000940:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000948:	2201      	movs	r2, #1
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	43db      	mvns	r3, r3
 8000952:	69ba      	ldr	r2, [r7, #24]
 8000954:	4013      	ands	r3, r2
 8000956:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	091b      	lsrs	r3, r3, #4
 800095e:	f003 0201 	and.w	r2, r3, #1
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	4313      	orrs	r3, r2
 800096c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	69ba      	ldr	r2, [r7, #24]
 8000972:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	2203      	movs	r2, #3
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	43db      	mvns	r3, r3
 8000986:	69ba      	ldr	r2, [r7, #24]
 8000988:	4013      	ands	r3, r2
 800098a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	689a      	ldr	r2, [r3, #8]
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	4313      	orrs	r3, r2
 800099c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	69ba      	ldr	r2, [r7, #24]
 80009a2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	f000 80a2 	beq.w	8000af6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4a56      	ldr	r2, [pc, #344]	; (8000b10 <HAL_GPIO_Init+0x2e4>)
 80009b8:	4b55      	ldr	r3, [pc, #340]	; (8000b10 <HAL_GPIO_Init+0x2e4>)
 80009ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c0:	6453      	str	r3, [r2, #68]	; 0x44
 80009c2:	4b53      	ldr	r3, [pc, #332]	; (8000b10 <HAL_GPIO_Init+0x2e4>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009ce:	4a51      	ldr	r2, [pc, #324]	; (8000b14 <HAL_GPIO_Init+0x2e8>)
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	089b      	lsrs	r3, r3, #2
 80009d4:	3302      	adds	r3, #2
 80009d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	f003 0303 	and.w	r3, r3, #3
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	220f      	movs	r2, #15
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	43db      	mvns	r3, r3
 80009ec:	69ba      	ldr	r2, [r7, #24]
 80009ee:	4013      	ands	r3, r2
 80009f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a48      	ldr	r2, [pc, #288]	; (8000b18 <HAL_GPIO_Init+0x2ec>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d019      	beq.n	8000a2e <HAL_GPIO_Init+0x202>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a47      	ldr	r2, [pc, #284]	; (8000b1c <HAL_GPIO_Init+0x2f0>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d013      	beq.n	8000a2a <HAL_GPIO_Init+0x1fe>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a46      	ldr	r2, [pc, #280]	; (8000b20 <HAL_GPIO_Init+0x2f4>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d00d      	beq.n	8000a26 <HAL_GPIO_Init+0x1fa>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a45      	ldr	r2, [pc, #276]	; (8000b24 <HAL_GPIO_Init+0x2f8>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d007      	beq.n	8000a22 <HAL_GPIO_Init+0x1f6>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a44      	ldr	r2, [pc, #272]	; (8000b28 <HAL_GPIO_Init+0x2fc>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d101      	bne.n	8000a1e <HAL_GPIO_Init+0x1f2>
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	e008      	b.n	8000a30 <HAL_GPIO_Init+0x204>
 8000a1e:	2307      	movs	r3, #7
 8000a20:	e006      	b.n	8000a30 <HAL_GPIO_Init+0x204>
 8000a22:	2303      	movs	r3, #3
 8000a24:	e004      	b.n	8000a30 <HAL_GPIO_Init+0x204>
 8000a26:	2302      	movs	r3, #2
 8000a28:	e002      	b.n	8000a30 <HAL_GPIO_Init+0x204>
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e000      	b.n	8000a30 <HAL_GPIO_Init+0x204>
 8000a2e:	2300      	movs	r3, #0
 8000a30:	69fa      	ldr	r2, [r7, #28]
 8000a32:	f002 0203 	and.w	r2, r2, #3
 8000a36:	0092      	lsls	r2, r2, #2
 8000a38:	4093      	lsls	r3, r2
 8000a3a:	69ba      	ldr	r2, [r7, #24]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a40:	4934      	ldr	r1, [pc, #208]	; (8000b14 <HAL_GPIO_Init+0x2e8>)
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	089b      	lsrs	r3, r3, #2
 8000a46:	3302      	adds	r3, #2
 8000a48:	69ba      	ldr	r2, [r7, #24]
 8000a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a4e:	4b37      	ldr	r3, [pc, #220]	; (8000b2c <HAL_GPIO_Init+0x300>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	43db      	mvns	r3, r3
 8000a58:	69ba      	ldr	r2, [r7, #24]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d003      	beq.n	8000a72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a6a:	69ba      	ldr	r2, [r7, #24]
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a72:	4a2e      	ldr	r2, [pc, #184]	; (8000b2c <HAL_GPIO_Init+0x300>)
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a78:	4b2c      	ldr	r3, [pc, #176]	; (8000b2c <HAL_GPIO_Init+0x300>)
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	43db      	mvns	r3, r3
 8000a82:	69ba      	ldr	r2, [r7, #24]
 8000a84:	4013      	ands	r3, r2
 8000a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d003      	beq.n	8000a9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a94:	69ba      	ldr	r2, [r7, #24]
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a9c:	4a23      	ldr	r2, [pc, #140]	; (8000b2c <HAL_GPIO_Init+0x300>)
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aa2:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <HAL_GPIO_Init+0x300>)
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	69ba      	ldr	r2, [r7, #24]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d003      	beq.n	8000ac6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000abe:	69ba      	ldr	r2, [r7, #24]
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ac6:	4a19      	ldr	r2, [pc, #100]	; (8000b2c <HAL_GPIO_Init+0x300>)
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <HAL_GPIO_Init+0x300>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	69ba      	ldr	r2, [r7, #24]
 8000ad8:	4013      	ands	r3, r2
 8000ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d003      	beq.n	8000af0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ae8:	69ba      	ldr	r2, [r7, #24]
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000af0:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <HAL_GPIO_Init+0x300>)
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	3301      	adds	r3, #1
 8000afa:	61fb      	str	r3, [r7, #28]
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	2b0f      	cmp	r3, #15
 8000b00:	f67f aea2 	bls.w	8000848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b04:	bf00      	nop
 8000b06:	3724      	adds	r7, #36	; 0x24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40013800 	.word	0x40013800
 8000b18:	40020000 	.word	0x40020000
 8000b1c:	40020400 	.word	0x40020400
 8000b20:	40020800 	.word	0x40020800
 8000b24:	40020c00 	.word	0x40020c00
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	40013c00 	.word	0x40013c00

08000b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	807b      	strh	r3, [r7, #2]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b40:	787b      	ldrb	r3, [r7, #1]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d003      	beq.n	8000b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b46:	887a      	ldrh	r2, [r7, #2]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b4c:	e003      	b.n	8000b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b4e:	887b      	ldrh	r3, [r7, #2]
 8000b50:	041a      	lsls	r2, r3, #16
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	619a      	str	r2, [r3, #24]
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	695a      	ldr	r2, [r3, #20]
 8000b72:	887b      	ldrh	r3, [r7, #2]
 8000b74:	405a      	eors	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	615a      	str	r2, [r3, #20]
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8000b86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b88:	b08f      	sub	sp, #60	; 0x3c
 8000b8a:	af0a      	add	r7, sp, #40	; 0x28
 8000b8c:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d101      	bne.n	8000b9c <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	e0f7      	b.n	8000d8c <HAL_PCD_Init+0x206>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2203      	movs	r2, #3
 8000ba0:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f003 f951 	bl	8003e4c <HAL_PCD_MspInit>

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f001 ff68 	bl	8002a84 <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	603b      	str	r3, [r7, #0]
 8000bba:	687e      	ldr	r6, [r7, #4]
 8000bbc:	466d      	mov	r5, sp
 8000bbe:	f106 0410 	add.w	r4, r6, #16
 8000bc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bce:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bd2:	1d33      	adds	r3, r6, #4
 8000bd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bd6:	6838      	ldr	r0, [r7, #0]
 8000bd8:	f001 fef2 	bl	80029c0 <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 ff5f 	bl	8002aa6 <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	e04c      	b.n	8000c88 <HAL_PCD_Init+0x102>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8000bee:	6879      	ldr	r1, [r7, #4]
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	00db      	lsls	r3, r3, #3
 8000bf6:	1a9b      	subs	r3, r3, r2
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	440b      	add	r3, r1
 8000bfc:	3339      	adds	r3, #57	; 0x39
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	b2d8      	uxtb	r0, r3
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	68fa      	ldr	r2, [r7, #12]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	1a9b      	subs	r3, r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	440b      	add	r3, r1
 8000c14:	3338      	adds	r3, #56	; 0x38
 8000c16:	4602      	mov	r2, r0
 8000c18:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	b298      	uxth	r0, r3
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	4613      	mov	r3, r2
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	1a9b      	subs	r3, r3, r2
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	440b      	add	r3, r1
 8000c2c:	333e      	adds	r3, #62	; 0x3e
 8000c2e:	4602      	mov	r2, r0
 8000c30:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	68fa      	ldr	r2, [r7, #12]
 8000c36:	4613      	mov	r3, r2
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	1a9b      	subs	r3, r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	440b      	add	r3, r1
 8000c40:	333b      	adds	r3, #59	; 0x3b
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket = 0U;
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	1a9b      	subs	r3, r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	440b      	add	r3, r1
 8000c54:	3340      	adds	r3, #64	; 0x40
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0U;
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	68fa      	ldr	r2, [r7, #12]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	1a9b      	subs	r3, r3, r2
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	440b      	add	r3, r1
 8000c68:	3344      	adds	r3, #68	; 0x44
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0U;
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	68fa      	ldr	r2, [r7, #12]
 8000c72:	4613      	mov	r3, r2
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	1a9b      	subs	r3, r3, r2
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	334c      	adds	r3, #76	; 0x4c
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < 15U; i++)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	3301      	adds	r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2b0e      	cmp	r3, #14
 8000c8c:	d9af      	bls.n	8000bee <HAL_PCD_Init+0x68>
 }
 
 for (i = 0U; i < 15U; i++)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	e05a      	b.n	8000d4a <HAL_PCD_Init+0x1c4>
 {
   hpcd->OUT_ep[i].is_in = 0U;
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	1a9b      	subs	r3, r3, r2
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	f203 13f9 	addw	r3, r3, #505	; 0x1f9
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	b2d8      	uxtb	r0, r3
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	68fa      	ldr	r2, [r7, #12]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	1a9b      	subs	r3, r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	440b      	add	r3, r1
 8000cbc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	b298      	uxth	r0, r3
 8000cc8:	6879      	ldr	r1, [r7, #4]
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	1a9b      	subs	r3, r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	333e      	adds	r3, #62	; 0x3e
 8000cd8:	4602      	mov	r2, r0
 8000cda:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000cdc:	6879      	ldr	r1, [r7, #4]
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	1a9b      	subs	r3, r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	440b      	add	r3, r1
 8000cea:	f203 13fb 	addw	r3, r3, #507	; 0x1fb
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0U;
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	68fa      	ldr	r2, [r7, #12]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	1a9b      	subs	r3, r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	440b      	add	r3, r1
 8000d00:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d08:	6879      	ldr	r1, [r7, #4]
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	1a9b      	subs	r3, r3, r2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	440b      	add	r3, r1
 8000d16:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0U;
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	68fa      	ldr	r2, [r7, #12]
 8000d22:	4613      	mov	r3, r2
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	1a9b      	subs	r3, r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	3340      	adds	r3, #64	; 0x40
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	4413      	add	r3, r2
 8000d40:	2200      	movs	r2, #0
 8000d42:	605a      	str	r2, [r3, #4]
 for (i = 0U; i < 15U; i++)
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	3301      	adds	r3, #1
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	2b0e      	cmp	r3, #14
 8000d4e:	d9a1      	bls.n	8000c94 <HAL_PCD_Init+0x10e>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	603b      	str	r3, [r7, #0]
 8000d56:	687e      	ldr	r6, [r7, #4]
 8000d58:	466d      	mov	r5, sp
 8000d5a:	f106 0410 	add.w	r4, r6, #16
 8000d5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d6e:	1d33      	adds	r3, r6, #4
 8000d70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d72:	6838      	ldr	r0, [r7, #0]
 8000d74:	f001 febe 	bl	8002af4 <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f002 fedf 	bl	8003b48 <USB_DevDisconnect>
 return HAL_OK;
 8000d8a:	2300      	movs	r3, #0
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d94 <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd); 
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d101      	bne.n	8000daa <HAL_PCD_Start+0x16>
 8000da6:	2302      	movs	r3, #2
 8000da8:	e012      	b.n	8000dd0 <HAL_PCD_Start+0x3c>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2201      	movs	r2, #1
 8000dae:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f002 feaf 	bl	8003b1a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f001 fe4e 	bl	8002a62 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8000dce:	2300      	movs	r3, #0
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08c      	sub	sp, #48	; 0x30
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	623b      	str	r3, [r7, #32]
  uint32_t i = 0U, ep_intr = 0U, epint = 0U, epnum = 0U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dea:	2300      	movs	r3, #0
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
 8000df2:	2300      	movs	r3, #0
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk = 0U, temp = 0U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61bb      	str	r3, [r7, #24]
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
 8000dfe:	4b7c      	ldr	r3, [pc, #496]	; (8000ff0 <HAL_PCD_IRQHandler+0x218>)
 8000e00:	613b      	str	r3, [r7, #16]
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f002 ff40 	bl	8003c8c <USB_GetMode>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8468 	bne.w	80016e4 <HAL_PCD_IRQHandler+0x90c>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f002 feac 	bl	8003b76 <USB_ReadInterrupts>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f000 845e 	beq.w	80016e2 <HAL_PCD_IRQHandler+0x90a>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f002 fea3 	bl	8003b76 <USB_ReadInterrupts>
 8000e30:	4603      	mov	r3, r0
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d107      	bne.n	8000e4a <HAL_PCD_IRQHandler+0x72>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	6812      	ldr	r2, [r2, #0]
 8000e42:	6952      	ldr	r2, [r2, #20]
 8000e44:	f002 0202 	and.w	r2, r2, #2
 8000e48:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f002 fe91 	bl	8003b76 <USB_ReadInterrupts>
 8000e54:	4603      	mov	r3, r0
 8000e56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e5a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000e5e:	f040 80b2 	bne.w	8000fc6 <HAL_PCD_IRQHandler+0x1ee>
    {
      epnum = 0U;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f002 fe98 	bl	8003ba0 <USB_ReadDevAllOutEpInterrupt>
 8000e70:	62b8      	str	r0, [r7, #40]	; 0x28
      
      while ( ep_intr )
 8000e72:	e0a4      	b.n	8000fbe <HAL_PCD_IRQHandler+0x1e6>
      {
        if (ep_intr & 0x1U)
 8000e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f000 8099 	beq.w	8000fb2 <HAL_PCD_IRQHandler+0x1da>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	4611      	mov	r1, r2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f002 feb8 	bl	8003c00 <USB_ReadDevOutEPInterrupt>
 8000e90:	61f8      	str	r0, [r7, #28]
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d06b      	beq.n	8000f74 <HAL_PCD_IRQHandler+0x19c>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9e:	015a      	lsls	r2, r3, #5
 8000ea0:	6a3b      	ldr	r3, [r7, #32]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	2301      	movs	r3, #1
 8000eac:	6093      	str	r3, [r2, #8]
            
            if(hpcd->Init.dma_enable == 1U)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	691b      	ldr	r3, [r3, #16]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d13c      	bne.n	8000f30 <HAL_PCD_IRQHandler+0x158>
            {
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eba:	4613      	mov	r3, r2
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	1a9b      	subs	r3, r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ecc:	0159      	lsls	r1, r3, #5
 8000ece:	6a3b      	ldr	r3, [r7, #32]
 8000ed0:	440b      	add	r3, r1
 8000ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000ed6:	691b      	ldr	r3, [r3, #16]
 8000ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000edc:	1ad1      	subs	r1, r2, r3
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	1a9b      	subs	r3, r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4403      	add	r3, r0
 8000eec:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000ef0:	6019      	str	r1, [r3, #0]
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	1a9b      	subs	r3, r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	440b      	add	r3, r1
 8000f00:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000f04:	6819      	ldr	r1, [r3, #0]
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	1a9b      	subs	r3, r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	4403      	add	r3, r0
 8000f14:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4419      	add	r1, r3
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f20:	4613      	mov	r3, r2
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	1a9b      	subs	r3, r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4403      	add	r3, r0
 8000f2a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000f2e:	6019      	str	r1, [r3, #0]
            }
            
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8000f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	4619      	mov	r1, r3
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f002 ffe6 	bl	8003f08 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	691b      	ldr	r3, [r3, #16]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d117      	bne.n	8000f74 <HAL_PCD_IRQHandler+0x19c>
            {
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8000f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d114      	bne.n	8000f74 <HAL_PCD_IRQHandler+0x19c>
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f4e:	4613      	mov	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	1a9b      	subs	r3, r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	440b      	add	r3, r1
 8000f58:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d108      	bne.n	8000f74 <HAL_PCD_IRQHandler+0x19c>
              {
                 /* this is ZLP, so prepare EP0 for next setup */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6818      	ldr	r0, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	2101      	movs	r1, #1
 8000f70:	f002 fed0 	bl	8003d14 <USB_EP0_OutStart>
              }              
            }
          }
          
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d00b      	beq.n	8000f96 <HAL_PCD_IRQHandler+0x1be>
          {
            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f002 ffb0 	bl	8003ee4 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f86:	015a      	lsls	r2, r3, #5
 8000f88:	6a3b      	ldr	r3, [r7, #32]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f90:	461a      	mov	r2, r3
 8000f92:	2308      	movs	r3, #8
 8000f94:	6093      	str	r3, [r2, #8]
          }
          
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	f003 0310 	and.w	r3, r3, #16
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d008      	beq.n	8000fb2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa2:	015a      	lsls	r2, r3, #5
 8000fa4:	6a3b      	ldr	r3, [r7, #32]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fac:	461a      	mov	r2, r3
 8000fae:	2310      	movs	r3, #16
 8000fb0:	6093      	str	r3, [r2, #8]
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
          }
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        }
        epnum++;
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8000fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fba:	085b      	lsrs	r3, r3, #1
 8000fbc:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 8000fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	f47f af57 	bne.w	8000e74 <HAL_PCD_IRQHandler+0x9c>
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f002 fdd3 	bl	8003b76 <USB_ReadInterrupts>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000fda:	f040 80c5 	bne.w	8001168 <HAL_PCD_IRQHandler+0x390>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f002 fdf4 	bl	8003bd0 <USB_ReadDevAllInEpInterrupt>
 8000fe8:	62b8      	str	r0, [r7, #40]	; 0x28
      
      epnum = 0U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
      
      while ( ep_intr )
 8000fee:	e0b7      	b.n	8001160 <HAL_PCD_IRQHandler+0x388>
 8000ff0:	0aba9500 	.word	0x0aba9500
      {
        if (ep_intr & 0x1U) /* In ITR */
 8000ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f000 80aa 	beq.w	8001154 <HAL_PCD_IRQHandler+0x37c>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	4611      	mov	r1, r2
 800100a:	4618      	mov	r0, r3
 800100c:	f002 fe14 	bl	8003c38 <USB_ReadDevInEPInterrupt>
 8001010:	61f8      	str	r0, [r7, #28]

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	2b00      	cmp	r3, #0
 800101a:	d05a      	beq.n	80010d2 <HAL_PCD_IRQHandler+0x2fa>
          {
            fifoemptymsk = 0x1U << epnum;
 800101c:	2201      	movs	r2, #1
 800101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	61bb      	str	r3, [r7, #24]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001026:	6a3b      	ldr	r3, [r7, #32]
 8001028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800102c:	4619      	mov	r1, r3
 800102e:	6a3b      	ldr	r3, [r7, #32]
 8001030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	43db      	mvns	r3, r3
 800103a:	4013      	ands	r3, r2
 800103c:	634b      	str	r3, [r1, #52]	; 0x34
            
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001040:	015a      	lsls	r2, r3, #5
 8001042:	6a3b      	ldr	r3, [r7, #32]
 8001044:	4413      	add	r3, r2
 8001046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800104a:	461a      	mov	r2, r3
 800104c:	2301      	movs	r3, #1
 800104e:	6093      	str	r3, [r2, #8]
            
            if (hpcd->Init.dma_enable == 1U)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	691b      	ldr	r3, [r3, #16]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d11b      	bne.n	8001090 <HAL_PCD_IRQHandler+0x2b8>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800105c:	4613      	mov	r3, r2
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	1a9b      	subs	r3, r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	3344      	adds	r3, #68	; 0x44
 8001068:	6819      	ldr	r1, [r3, #0]
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800106e:	4613      	mov	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	1a9b      	subs	r3, r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4403      	add	r3, r0
 8001078:	3340      	adds	r3, #64	; 0x40
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4419      	add	r1, r3
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001082:	4613      	mov	r3, r2
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	1a9b      	subs	r3, r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4403      	add	r3, r0
 800108c:	3344      	adds	r3, #68	; 0x44
 800108e:	6019      	str	r1, [r3, #0]
            }
                                      
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	b2db      	uxtb	r3, r3
 8001094:	4619      	mov	r1, r3
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f002 ff51 	bl	8003f3e <HAL_PCD_DataInStageCallback>

            if (hpcd->Init.dma_enable == 1U)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d116      	bne.n	80010d2 <HAL_PCD_IRQHandler+0x2fa>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80010a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d113      	bne.n	80010d2 <HAL_PCD_IRQHandler+0x2fa>
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ae:	4613      	mov	r3, r2
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	1a9b      	subs	r3, r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	440b      	add	r3, r1
 80010b8:	334c      	adds	r3, #76	; 0x4c
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d108      	bne.n	80010d2 <HAL_PCD_IRQHandler+0x2fa>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80010ca:	461a      	mov	r2, r3
 80010cc:	2101      	movs	r1, #1
 80010ce:	f002 fe21 	bl	8003d14 <USB_EP0_OutStart>
              }
            }           
          }
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	f003 0308 	and.w	r3, r3, #8
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d008      	beq.n	80010ee <HAL_PCD_IRQHandler+0x316>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	015a      	lsls	r2, r3, #5
 80010e0:	6a3b      	ldr	r3, [r7, #32]
 80010e2:	4413      	add	r3, r2
 80010e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010e8:	461a      	mov	r2, r3
 80010ea:	2308      	movs	r3, #8
 80010ec:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	f003 0310 	and.w	r3, r3, #16
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d008      	beq.n	800110a <HAL_PCD_IRQHandler+0x332>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fa:	015a      	lsls	r2, r3, #5
 80010fc:	6a3b      	ldr	r3, [r7, #32]
 80010fe:	4413      	add	r3, r2
 8001100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001104:	461a      	mov	r2, r3
 8001106:	2310      	movs	r3, #16
 8001108:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001110:	2b00      	cmp	r3, #0
 8001112:	d008      	beq.n	8001126 <HAL_PCD_IRQHandler+0x34e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001116:	015a      	lsls	r2, r3, #5
 8001118:	6a3b      	ldr	r3, [r7, #32]
 800111a:	4413      	add	r3, r2
 800111c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001120:	461a      	mov	r2, r3
 8001122:	2340      	movs	r3, #64	; 0x40
 8001124:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d008      	beq.n	8001142 <HAL_PCD_IRQHandler+0x36a>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001132:	015a      	lsls	r2, r3, #5
 8001134:	6a3b      	ldr	r3, [r7, #32]
 8001136:	4413      	add	r3, r2
 8001138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800113c:	461a      	mov	r2, r3
 800113e:	2302      	movs	r3, #2
 8001140:	6093      	str	r3, [r2, #8]
          }       
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_PCD_IRQHandler+0x37c>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
 800114c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 fcf1 	bl	8001b36 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001156:	3301      	adds	r3, #1
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800115a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115c:	085b      	lsrs	r3, r3, #1
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 8001160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001162:	2b00      	cmp	r3, #0
 8001164:	f47f af46 	bne.w	8000ff4 <HAL_PCD_IRQHandler+0x21c>
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f002 fd02 	bl	8003b76 <USB_ReadInterrupts>
 8001172:	4603      	mov	r3, r0
 8001174:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001178:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800117c:	d115      	bne.n	80011aa <HAL_PCD_IRQHandler+0x3d2>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800117e:	6a3b      	ldr	r3, [r7, #32]
 8001180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001184:	461a      	mov	r2, r3
 8001186:	6a3b      	ldr	r3, [r7, #32]
 8001188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f023 0301 	bic.w	r3, r3, #1
 8001192:	6053      	str	r3, [r2, #4]
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f002 ff4b 	bl	8004030 <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	6952      	ldr	r2, [r2, #20]
 80011a4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80011a8:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f002 fce1 	bl	8003b76 <USB_ReadInterrupts>
 80011b4:	4603      	mov	r3, r0
 80011b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011be:	d112      	bne.n	80011e6 <HAL_PCD_IRQHandler+0x40e>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d102      	bne.n	80011d6 <HAL_PCD_IRQHandler+0x3fe>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f002 ff05 	bl	8003fe0 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	6812      	ldr	r2, [r2, #0]
 80011de:	6952      	ldr	r2, [r2, #20]
 80011e0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80011e4:	615a      	str	r2, [r3, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 fcc3 	bl	8003b76 <USB_ReadInterrupts>
 80011f0:	4603      	mov	r3, r0
 80011f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011fa:	f040 8091 	bne.w	8001320 <HAL_PCD_IRQHandler+0x548>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 80011fe:	6a3b      	ldr	r3, [r7, #32]
 8001200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001204:	461a      	mov	r2, r3
 8001206:	6a3b      	ldr	r3, [r7, #32]
 8001208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f023 0301 	bic.w	r3, r3, #1
 8001212:	6053      	str	r3, [r2, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2110      	movs	r1, #16
 800121a:	4618      	mov	r0, r3
 800121c:	f001 fd9c 	bl	8002d58 <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001220:	2300      	movs	r3, #0
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001224:	e014      	b.n	8001250 <HAL_PCD_IRQHandler+0x478>
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8001226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001228:	015a      	lsls	r2, r3, #5
 800122a:	6a3b      	ldr	r3, [r7, #32]
 800122c:	4413      	add	r3, r2
 800122e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001232:	461a      	mov	r2, r3
 8001234:	23ff      	movs	r3, #255	; 0xff
 8001236:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 8001238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123a:	015a      	lsls	r2, r3, #5
 800123c:	6a3b      	ldr	r3, [r7, #32]
 800123e:	4413      	add	r3, r2
 8001240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001244:	461a      	mov	r2, r3
 8001246:	23ff      	movs	r3, #255	; 0xff
 8001248:	6093      	str	r3, [r2, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800124a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124c:	3301      	adds	r3, #1
 800124e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	429a      	cmp	r2, r3
 8001258:	d8e5      	bhi.n	8001226 <HAL_PCD_IRQHandler+0x44e>
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 800125a:	6a3b      	ldr	r3, [r7, #32]
 800125c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001260:	461a      	mov	r2, r3
 8001262:	f04f 33ff 	mov.w	r3, #4294967295
 8001266:	6193      	str	r3, [r2, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001268:	6a3b      	ldr	r3, [r7, #32]
 800126a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800126e:	461a      	mov	r2, r3
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800127c:	61d3      	str	r3, [r2, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	2b00      	cmp	r3, #0
 8001284:	d018      	beq.n	80012b8 <HAL_PCD_IRQHandler+0x4e0>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8001286:	6a3b      	ldr	r3, [r7, #32]
 8001288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800128c:	461a      	mov	r2, r3
 800128e:	6a3b      	ldr	r3, [r7, #32]
 8001290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001298:	f043 030b 	orr.w	r3, r3, #11
 800129c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 80012a0:	6a3b      	ldr	r3, [r7, #32]
 80012a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012a6:	461a      	mov	r2, r3
 80012a8:	6a3b      	ldr	r3, [r7, #32]
 80012aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b0:	f043 030b 	orr.w	r3, r3, #11
 80012b4:	6453      	str	r3, [r2, #68]	; 0x44
 80012b6:	e015      	b.n	80012e4 <HAL_PCD_IRQHandler+0x50c>
      else
      {
#ifdef USB_OTG_DOEPINT_OTEPSPR
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
#else
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 80012b8:	6a3b      	ldr	r3, [r7, #32]
 80012ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012be:	461a      	mov	r2, r3
 80012c0:	6a3b      	ldr	r3, [r7, #32]
 80012c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	f043 030b 	orr.w	r3, r3, #11
 80012cc:	6153      	str	r3, [r2, #20]
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012d4:	461a      	mov	r2, r3
 80012d6:	6a3b      	ldr	r3, [r7, #32]
 80012d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	f043 030b 	orr.w	r3, r3, #11
 80012e2:	6113      	str	r3, [r2, #16]
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80012e4:	6a3b      	ldr	r3, [r7, #32]
 80012e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012ea:	461a      	mov	r2, r3
 80012ec:	6a3b      	ldr	r3, [r7, #32]
 80012ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80012f8:	6013      	str	r3, [r2, #0]
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	b2d9      	uxtb	r1, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 800130a:	461a      	mov	r2, r3
 800130c:	f002 fd02 	bl	8003d14 <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	6812      	ldr	r2, [r2, #0]
 8001318:	6952      	ldr	r2, [r2, #20]
 800131a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800131e:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f002 fc26 	bl	8003b76 <USB_ReadInterrupts>
 800132a:	4603      	mov	r3, r0
 800132c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001334:	f040 80da 	bne.w	80014ec <HAL_PCD_IRQHandler+0x714>
    {
      USB_ActivateSetup(hpcd->Instance);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f002 fcb3 	bl	8003ca8 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	6812      	ldr	r2, [r2, #0]
 800134a:	68d2      	ldr	r2, [r2, #12]
 800134c:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8001350:	60da      	str	r2, [r3, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f001 fd5e 	bl	8002e18 <USB_GetDevSpeed>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d10f      	bne.n	8001382 <HAL_PCD_IRQHandler+0x5aa>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800136e:	615a      	str	r2, [r3, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6812      	ldr	r2, [r2, #0]
 8001378:	68d2      	ldr	r2, [r2, #12]
 800137a:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	e0a9      	b.n	80014d6 <HAL_PCD_IRQHandler+0x6fe>
      }
      else
      {
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2203      	movs	r2, #3
 8001386:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2240      	movs	r2, #64	; 0x40
 800138c:	615a      	str	r2, [r3, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */
        
        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 800138e:	f001 f8ad 	bl	80024ec <HAL_RCC_GetHCLKFreq>
 8001392:	6138      	str	r0, [r7, #16]
        
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4a7b      	ldr	r2, [pc, #492]	; (8001584 <HAL_PCD_IRQHandler+0x7ac>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d90c      	bls.n	80013b6 <HAL_PCD_IRQHandler+0x5de>
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4a7a      	ldr	r2, [pc, #488]	; (8001588 <HAL_PCD_IRQHandler+0x7b0>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d808      	bhi.n	80013b6 <HAL_PCD_IRQHandler+0x5de>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	6812      	ldr	r2, [r2, #0]
 80013ac:	68d2      	ldr	r2, [r2, #12]
 80013ae:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	e08f      	b.n	80014d6 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4a73      	ldr	r2, [pc, #460]	; (8001588 <HAL_PCD_IRQHandler+0x7b0>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d90c      	bls.n	80013d8 <HAL_PCD_IRQHandler+0x600>
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	4a72      	ldr	r2, [pc, #456]	; (800158c <HAL_PCD_IRQHandler+0x7b4>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d808      	bhi.n	80013d8 <HAL_PCD_IRQHandler+0x600>
        {
          /* hclk Clock Range between 15-16 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	6812      	ldr	r2, [r2, #0]
 80013ce:	68d2      	ldr	r2, [r2, #12]
 80013d0:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	e07e      	b.n	80014d6 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4a6c      	ldr	r2, [pc, #432]	; (800158c <HAL_PCD_IRQHandler+0x7b4>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d90c      	bls.n	80013fa <HAL_PCD_IRQHandler+0x622>
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	4a6b      	ldr	r2, [pc, #428]	; (8001590 <HAL_PCD_IRQHandler+0x7b8>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d808      	bhi.n	80013fa <HAL_PCD_IRQHandler+0x622>
        {
          /* hclk Clock Range between 16-17.2 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	6812      	ldr	r2, [r2, #0]
 80013f0:	68d2      	ldr	r2, [r2, #12]
 80013f2:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 80013f6:	60da      	str	r2, [r3, #12]
 80013f8:	e06d      	b.n	80014d6 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4a64      	ldr	r2, [pc, #400]	; (8001590 <HAL_PCD_IRQHandler+0x7b8>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d90c      	bls.n	800141c <HAL_PCD_IRQHandler+0x644>
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4a63      	ldr	r2, [pc, #396]	; (8001594 <HAL_PCD_IRQHandler+0x7bc>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d808      	bhi.n	800141c <HAL_PCD_IRQHandler+0x644>
        {
          /* hclk Clock Range between 17.2-18.5 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6812      	ldr	r2, [r2, #0]
 8001412:	68d2      	ldr	r2, [r2, #12]
 8001414:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	e05c      	b.n	80014d6 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4a5d      	ldr	r2, [pc, #372]	; (8001594 <HAL_PCD_IRQHandler+0x7bc>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d90c      	bls.n	800143e <HAL_PCD_IRQHandler+0x666>
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4a5c      	ldr	r2, [pc, #368]	; (8001598 <HAL_PCD_IRQHandler+0x7c0>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d808      	bhi.n	800143e <HAL_PCD_IRQHandler+0x666>
        {
          /* hclk Clock Range between 18.5-20 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	6812      	ldr	r2, [r2, #0]
 8001434:	68d2      	ldr	r2, [r2, #12]
 8001436:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	e04b      	b.n	80014d6 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4a55      	ldr	r2, [pc, #340]	; (8001598 <HAL_PCD_IRQHandler+0x7c0>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d90c      	bls.n	8001460 <HAL_PCD_IRQHandler+0x688>
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	4a54      	ldr	r2, [pc, #336]	; (800159c <HAL_PCD_IRQHandler+0x7c4>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d808      	bhi.n	8001460 <HAL_PCD_IRQHandler+0x688>
        {
          /* hclk Clock Range between 20-21.8 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	6812      	ldr	r2, [r2, #0]
 8001456:	68d2      	ldr	r2, [r2, #12]
 8001458:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	e03a      	b.n	80014d6 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4a4e      	ldr	r2, [pc, #312]	; (800159c <HAL_PCD_IRQHandler+0x7c4>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d90c      	bls.n	8001482 <HAL_PCD_IRQHandler+0x6aa>
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4a4d      	ldr	r2, [pc, #308]	; (80015a0 <HAL_PCD_IRQHandler+0x7c8>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d808      	bhi.n	8001482 <HAL_PCD_IRQHandler+0x6aa>
        {
          /* hclk Clock Range between 21.8-24 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	6812      	ldr	r2, [r2, #0]
 8001478:	68d2      	ldr	r2, [r2, #12]
 800147a:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	e029      	b.n	80014d6 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	4a46      	ldr	r2, [pc, #280]	; (80015a0 <HAL_PCD_IRQHandler+0x7c8>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d90c      	bls.n	80014a4 <HAL_PCD_IRQHandler+0x6cc>
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4a45      	ldr	r2, [pc, #276]	; (80015a4 <HAL_PCD_IRQHandler+0x7cc>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d808      	bhi.n	80014a4 <HAL_PCD_IRQHandler+0x6cc>
        {
          /* hclk Clock Range between 24-27.7 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	6812      	ldr	r2, [r2, #0]
 800149a:	68d2      	ldr	r2, [r2, #12]
 800149c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	e018      	b.n	80014d6 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	4a3f      	ldr	r2, [pc, #252]	; (80015a4 <HAL_PCD_IRQHandler+0x7cc>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d90c      	bls.n	80014c6 <HAL_PCD_IRQHandler+0x6ee>
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4a3e      	ldr	r2, [pc, #248]	; (80015a8 <HAL_PCD_IRQHandler+0x7d0>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d808      	bhi.n	80014c6 <HAL_PCD_IRQHandler+0x6ee>
        {
          /* hclk Clock Range between 27.7-32 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	68d2      	ldr	r2, [r2, #12]
 80014be:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	e007      	b.n	80014d6 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	6812      	ldr	r2, [r2, #0]
 80014ce:	68d2      	ldr	r2, [r2, #12]
 80014d0:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 80014d4:	60da      	str	r2, [r3, #12]
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f002 fd59 	bl	8003f8e <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	6812      	ldr	r2, [r2, #0]
 80014e4:	6952      	ldr	r2, [r2, #20]
 80014e6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80014ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f002 fb40 	bl	8003b76 <USB_ReadInterrupts>
 80014f6:	4603      	mov	r3, r0
 80014f8:	f003 0310 	and.w	r3, r3, #16
 80014fc:	2b10      	cmp	r3, #16
 80014fe:	d174      	bne.n	80015ea <HAL_PCD_IRQHandler+0x812>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6812      	ldr	r2, [r2, #0]
 8001508:	6992      	ldr	r2, [r2, #24]
 800150a:	f022 0210 	bic.w	r2, r2, #16
 800150e:	619a      	str	r2, [r3, #24]
      
      temp = USBx->GRXSTSP;
 8001510:	6a3b      	ldr	r3, [r7, #32]
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	617b      	str	r3, [r7, #20]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f003 020f 	and.w	r2, r3, #15
 800151c:	4613      	mov	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	1a9b      	subs	r3, r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	4413      	add	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	0c5b      	lsrs	r3, r3, #17
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	2b02      	cmp	r3, #2
 8001538:	d138      	bne.n	80015ac <HAL_PCD_IRQHandler+0x7d4>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001540:	4013      	ands	r3, r2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d049      	beq.n	80015da <HAL_PCD_IRQHandler+0x802>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	68d9      	ldr	r1, [r3, #12]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	091b      	lsrs	r3, r3, #4
 800154e:	b29b      	uxth	r3, r3
 8001550:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001554:	b29b      	uxth	r3, r3
 8001556:	461a      	mov	r2, r3
 8001558:	6a38      	ldr	r0, [r7, #32]
 800155a:	f002 f9b3 	bl	80038c4 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	091b      	lsrs	r3, r3, #4
 8001566:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800156a:	441a      	add	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	699a      	ldr	r2, [r3, #24]
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	091b      	lsrs	r3, r3, #4
 8001578:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800157c:	441a      	add	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	619a      	str	r2, [r3, #24]
 8001582:	e02a      	b.n	80015da <HAL_PCD_IRQHandler+0x802>
 8001584:	00d8acbf 	.word	0x00d8acbf
 8001588:	00e4e1bf 	.word	0x00e4e1bf
 800158c:	00f423ff 	.word	0x00f423ff
 8001590:	0106737f 	.word	0x0106737f
 8001594:	011a499f 	.word	0x011a499f
 8001598:	01312cff 	.word	0x01312cff
 800159c:	014ca43f 	.word	0x014ca43f
 80015a0:	016e35ff 	.word	0x016e35ff
 80015a4:	01a6ab1f 	.word	0x01a6ab1f
 80015a8:	01e847ff 	.word	0x01e847ff
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	0c5b      	lsrs	r3, r3, #17
 80015b0:	f003 030f 	and.w	r3, r3, #15
 80015b4:	2b06      	cmp	r3, #6
 80015b6:	d110      	bne.n	80015da <HAL_PCD_IRQHandler+0x802>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80015be:	2208      	movs	r2, #8
 80015c0:	4619      	mov	r1, r3
 80015c2:	6a38      	ldr	r0, [r7, #32]
 80015c4:	f002 f97e 	bl	80038c4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	699a      	ldr	r2, [r3, #24]
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	091b      	lsrs	r3, r3, #4
 80015d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015d4:	441a      	add	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	619a      	str	r2, [r3, #24]
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	6992      	ldr	r2, [r2, #24]
 80015e4:	f042 0210 	orr.w	r2, r2, #16
 80015e8:	619a      	str	r2, [r3, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f002 fac1 	bl	8003b76 <USB_ReadInterrupts>
 80015f4:	4603      	mov	r3, r0
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d10a      	bne.n	8001614 <HAL_PCD_IRQHandler+0x83c>
    {
      HAL_PCD_SOFCallback(hpcd);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f002 fcb7 	bl	8003f72 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	6812      	ldr	r2, [r2, #0]
 800160c:	6952      	ldr	r2, [r2, #20]
 800160e:	f002 0208 	and.w	r2, r2, #8
 8001612:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f002 faac 	bl	8003b76 <USB_ReadInterrupts>
 800161e:	4603      	mov	r3, r0
 8001620:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001628:	d10d      	bne.n	8001646 <HAL_PCD_IRQHandler+0x86e>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	b2db      	uxtb	r3, r3
 800162e:	4619      	mov	r1, r3
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f002 fd1d 	bl	8004070 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6812      	ldr	r2, [r2, #0]
 800163e:	6952      	ldr	r2, [r2, #20]
 8001640:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001644:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f002 fa93 	bl	8003b76 <USB_ReadInterrupts>
 8001650:	4603      	mov	r3, r0
 8001652:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001656:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800165a:	d10d      	bne.n	8001678 <HAL_PCD_IRQHandler+0x8a0>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	b2db      	uxtb	r3, r3
 8001660:	4619      	mov	r1, r3
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f002 fcf2 	bl	800404c <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	6952      	ldr	r2, [r2, #20]
 8001672:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001676:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f002 fa7a 	bl	8003b76 <USB_ReadInterrupts>
 8001682:	4603      	mov	r3, r0
 8001684:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800168c:	d10a      	bne.n	80016a4 <HAL_PCD_IRQHandler+0x8cc>
    {
      HAL_PCD_ConnectCallback(hpcd);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f002 fd00 	bl	8004094 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	6952      	ldr	r2, [r2, #20]
 800169e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80016a2:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f002 fa64 	bl	8003b76 <USB_ReadInterrupts>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	d115      	bne.n	80016e4 <HAL_PCD_IRQHandler+0x90c>
    {
      temp = hpcd->Instance->GOTGINT;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	617b      	str	r3, [r7, #20]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d002      	beq.n	80016d0 <HAL_PCD_IRQHandler+0x8f8>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f002 fcf0 	bl	80040b0 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	6851      	ldr	r1, [r2, #4]
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	430a      	orrs	r2, r1
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	e000      	b.n	80016e4 <HAL_PCD_IRQHandler+0x90c>
      return;
 80016e2:	bf00      	nop
    }
  }
}
 80016e4:	3730      	adds	r7, #48	; 0x30
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop

080016ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd); 
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d101      	bne.n	8001706 <HAL_PCD_SetAddress+0x1a>
 8001702:	2302      	movs	r3, #2
 8001704:	e00f      	b.n	8001726 <HAL_PCD_SetAddress+0x3a>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	78fa      	ldrb	r2, [r7, #3]
 8001714:	4611      	mov	r1, r2
 8001716:	4618      	mov	r0, r3
 8001718:	f002 f9d9 	bl	8003ace <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	4608      	mov	r0, r1
 8001738:	4611      	mov	r1, r2
 800173a:	461a      	mov	r2, r3
 800173c:	4603      	mov	r3, r0
 800173e:	70fb      	strb	r3, [r7, #3]
 8001740:	460b      	mov	r3, r1
 8001742:	803b      	strh	r3, [r7, #0]
 8001744:	4613      	mov	r3, r2
 8001746:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 800174c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001750:	2b00      	cmp	r3, #0
 8001752:	da0b      	bge.n	800176c <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800175a:	4613      	mov	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	1a9b      	subs	r3, r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	3338      	adds	r3, #56	; 0x38
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	4413      	add	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	e00b      	b.n	8001784 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001772:	4613      	mov	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	1a9b      	subs	r3, r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800178a:	b2da      	uxtb	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8001790:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	09db      	lsrs	r3, r3, #7
 8001798:	b2db      	uxtb	r3, r3
 800179a:	461a      	mov	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 80017a0:	883a      	ldrh	r2, [r7, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	78ba      	ldrb	r2, [r7, #2]
 80017aa:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	785b      	ldrb	r3, [r3, #1]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d004      	beq.n	80017be <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
 80017be:	78bb      	ldrb	r3, [r7, #2]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d102      	bne.n	80017ca <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	711a      	strb	r2, [r3, #4]
  }
  
  __HAL_LOCK(hpcd); 
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d101      	bne.n	80017d8 <HAL_PCD_EP_Open+0xaa>
 80017d4:	2302      	movs	r3, #2
 80017d6:	e00e      	b.n	80017f6 <HAL_PCD_EP_Open+0xc8>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68f9      	ldr	r1, [r7, #12]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f001 fb4b 	bl	8002e82 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return ret;
 80017f4:	7afb      	ldrb	r3, [r7, #11]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 80017fe:	b580      	push	{r7, lr}
 8001800:	b084      	sub	sp, #16
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	460b      	mov	r3, r1
 8001808:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 800180a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800180e:	2b00      	cmp	r3, #0
 8001810:	da0b      	bge.n	800182a <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001812:	78fb      	ldrb	r3, [r7, #3]
 8001814:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001818:	4613      	mov	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	1a9b      	subs	r3, r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	3338      	adds	r3, #56	; 0x38
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	e00b      	b.n	8001842 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001830:	4613      	mov	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	1a9b      	subs	r3, r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	4413      	add	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8001842:	78fb      	ldrb	r3, [r7, #3]
 8001844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001848:	b2da      	uxtb	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800184e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	09db      	lsrs	r3, r3, #7
 8001856:	b2db      	uxtb	r3, r3
 8001858:	461a      	mov	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001864:	2b01      	cmp	r3, #1
 8001866:	d101      	bne.n	800186c <HAL_PCD_EP_Close+0x6e>
 8001868:	2302      	movs	r3, #2
 800186a:	e00e      	b.n	800188a <HAL_PCD_EP_Close+0x8c>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68f9      	ldr	r1, [r7, #12]
 800187a:	4618      	mov	r0, r3
 800187c:	f001 fb8a 	bl	8002f94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer   
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b086      	sub	sp, #24
 8001896:	af00      	add	r7, sp, #0
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	607a      	str	r2, [r7, #4]
 800189c:	603b      	str	r3, [r7, #0]
 800189e:	460b      	mov	r3, r1
 80018a0:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80018a2:	7afb      	ldrb	r3, [r7, #11]
 80018a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80018a8:	4613      	mov	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	1a9b      	subs	r3, r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	4413      	add	r3, r2
 80018b8:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	2200      	movs	r2, #0
 80018d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 80018d2:	7afb      	ldrb	r3, [r7, #11]
 80018d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d102      	bne.n	80018ec <HAL_PCD_EP_Receive+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	611a      	str	r2, [r3, #16]
  }
  
  if ((ep_addr & 0x7F) == 0)
 80018ec:	7afb      	ldrb	r3, [r7, #11]
 80018ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d109      	bne.n	800190a <HAL_PCD_EP_Receive+0x78>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6818      	ldr	r0, [r3, #0]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	461a      	mov	r2, r3
 8001902:	6979      	ldr	r1, [r7, #20]
 8001904:	f001 fe4a 	bl	800359c <USB_EP0StartXfer>
 8001908:	e008      	b.n	800191c <HAL_PCD_EP_Receive+0x8a>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6818      	ldr	r0, [r3, #0]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	461a      	mov	r2, r3
 8001916:	6979      	ldr	r1, [r7, #20]
 8001918:	f001 fbfe 	bl	8003118 <USB_EPStartXfer>
  }
  
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	460b      	mov	r3, r1
 8001930:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8001932:	78fb      	ldrb	r3, [r7, #3]
 8001934:	f003 020f 	and.w	r2, r3, #15
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	1a9b      	subs	r3, r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	440b      	add	r3, r1
 8001944:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	b29b      	uxth	r3, r3
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer   
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	460b      	mov	r3, r1
 8001966:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001968:	7afb      	ldrb	r3, [r7, #11]
 800196a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800196e:	4613      	mov	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	1a9b      	subs	r3, r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	3338      	adds	r3, #56	; 0x38
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	4413      	add	r3, r2
 800197c:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	2201      	movs	r2, #1
 8001994:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8001996:	7afb      	ldrb	r3, [r7, #11]
 8001998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800199c:	b2da      	uxtb	r2, r3
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d102      	bne.n	80019b0 <HAL_PCD_EP_Transmit+0x58>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	611a      	str	r2, [r3, #16]
  }
  
  if ((ep_addr & 0x7F) == 0)
 80019b0:	7afb      	ldrb	r3, [r7, #11]
 80019b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d109      	bne.n	80019ce <HAL_PCD_EP_Transmit+0x76>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	461a      	mov	r2, r3
 80019c6:	6979      	ldr	r1, [r7, #20]
 80019c8:	f001 fde8 	bl	800359c <USB_EP0StartXfer>
 80019cc:	e008      	b.n	80019e0 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6818      	ldr	r0, [r3, #0]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	6979      	ldr	r1, [r7, #20]
 80019dc:	f001 fb9c 	bl	8003118 <USB_EPStartXfer>
  }
  
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b084      	sub	sp, #16
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	460b      	mov	r3, r1
 80019f4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 80019f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	da0b      	bge.n	8001a16 <HAL_PCD_EP_SetStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80019fe:	78fb      	ldrb	r3, [r7, #3]
 8001a00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a04:	4613      	mov	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	1a9b      	subs	r3, r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	3338      	adds	r3, #56	; 0x38
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	e009      	b.n	8001a2a <HAL_PCD_EP_SetStall+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a16:	78fa      	ldrb	r2, [r7, #3]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	1a9b      	subs	r3, r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	4413      	add	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8001a30:	78fb      	ldrb	r3, [r7, #3]
 8001a32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001a3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	09db      	lsrs	r3, r3, #7
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	461a      	mov	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	705a      	strb	r2, [r3, #1]
  
  
  __HAL_LOCK(hpcd); 
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_PCD_EP_SetStall+0x70>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e01e      	b.n	8001a98 <HAL_PCD_EP_SetStall+0xae>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68f9      	ldr	r1, [r7, #12]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f001 ff52 	bl	8003912 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8001a6e:	78fb      	ldrb	r3, [r7, #3]
 8001a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10a      	bne.n	8001a8e <HAL_PCD_EP_SetStall+0xa4>
  {
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6818      	ldr	r0, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	b2d9      	uxtb	r1, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001a88:	461a      	mov	r2, r3
 8001a8a:	f002 f943 	bl	8003d14 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 8001aac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	da0b      	bge.n	8001acc <HAL_PCD_EP_ClrStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001aba:	4613      	mov	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	1a9b      	subs	r3, r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	3338      	adds	r3, #56	; 0x38
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	e009      	b.n	8001ae0 <HAL_PCD_EP_ClrStall+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001acc:	78fa      	ldrb	r2, [r7, #3]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	1a9b      	subs	r3, r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8001ae6:	78fb      	ldrb	r3, [r7, #3]
 8001ae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001af2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	09db      	lsrs	r3, r3, #7
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	461a      	mov	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d101      	bne.n	8001b10 <HAL_PCD_EP_ClrStall+0x70>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	e00e      	b.n	8001b2e <HAL_PCD_EP_ClrStall+0x8e>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68f9      	ldr	r1, [r7, #12]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f001 ff68 	bl	80039f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum  endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b08a      	sub	sp, #40	; 0x28
 8001b3a:	af02      	add	r7, sp, #8
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  int32_t len = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]

  ep = &hpcd->IN_ep[epnum];
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	4613      	mov	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	1a9b      	subs	r3, r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	3338      	adds	r3, #56	; 0x38
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]
  len = ep->xfer_len - ep->xfer_count;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	695a      	ldr	r2, [r3, #20]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	61fb      	str	r3, [r7, #28]
  
  if (len > ep->maxpacket)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d202      	bcs.n	8001b7c <PCD_WriteEmptyTxFifo+0x46>
  {
    len = ep->maxpacket;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	61fb      	str	r3, [r7, #28]
  }
  
  
  len32b = (len + 3U) / 4U;
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	3303      	adds	r3, #3
 8001b80:	089b      	lsrs	r3, r3, #2
 8001b82:	61bb      	str	r3, [r7, #24]
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001b84:	e02b      	b.n	8001bde <PCD_WriteEmptyTxFifo+0xa8>
          (ep->xfer_count < ep->xfer_len) &&
            (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	695a      	ldr	r2, [r3, #20]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	61fb      	str	r3, [r7, #28]
    
    if (len > ep->maxpacket)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d202      	bcs.n	8001ba2 <PCD_WriteEmptyTxFifo+0x6c>
    {
      len = ep->maxpacket;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3303      	adds	r3, #3
 8001ba6:	089b      	lsrs	r3, r3, #2
 8001ba8:	61bb      	str	r3, [r7, #24]
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	68d9      	ldr	r1, [r3, #12]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	b298      	uxth	r0, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	6978      	ldr	r0, [r7, #20]
 8001bc2:	f001 fe4a 	bl	800385a <USB_WritePacket>
    
    ep->xfer_buff  += len;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	441a      	add	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	699a      	ldr	r2, [r3, #24]
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	441a      	add	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	619a      	str	r2, [r3, #24]
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	015a      	lsls	r2, r3, #5
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	4413      	add	r3, r2
 8001be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d909      	bls.n	8001c08 <PCD_WriteEmptyTxFifo+0xd2>
          (ep->xfer_count < ep->xfer_len) &&
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	699a      	ldr	r2, [r3, #24]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	695b      	ldr	r3, [r3, #20]
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d203      	bcs.n	8001c08 <PCD_WriteEmptyTxFifo+0xd2>
            (ep->xfer_len != 0U))
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	695b      	ldr	r3, [r3, #20]
          (ep->xfer_count < ep->xfer_len) &&
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1be      	bne.n	8001b86 <PCD_WriteEmptyTxFifo+0x50>
  }
  
  if(len <= 0U)
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d110      	bne.n	8001c30 <PCD_WriteEmptyTxFifo+0xfa>
  {
    fifoemptymsk = 0x1U << epnum;
 8001c0e:	2201      	movs	r2, #1
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	613b      	str	r3, [r7, #16]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c1e:	4619      	mov	r1, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	634b      	str	r3, [r1, #52]	; 0x34
    
  }
  
  return HAL_OK;  
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3720      	adds	r7, #32
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b085      	sub	sp, #20
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	460b      	mov	r3, r1
 8001c44:	70fb      	strb	r3, [r7, #3]
 8001c46:	4613      	mov	r3, r2
 8001c48:	803b      	strh	r3, [r7, #0]
  uint8_t i = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t Tx_Offset = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60bb      	str	r3, [r7, #8]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	60bb      	str	r3, [r7, #8]
  
  if(fifo == 0)
 8001c5a:	78fb      	ldrb	r3, [r7, #3]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d107      	bne.n	8001c70 <HAL_PCDEx_SetTxFiFo+0x36>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	883a      	ldrh	r2, [r7, #0]
 8001c66:	0411      	lsls	r1, r2, #16
 8001c68:	68ba      	ldr	r2, [r7, #8]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	629a      	str	r2, [r3, #40]	; 0x28
 8001c6e:	e028      	b.n	8001cc2 <HAL_PCDEx_SetTxFiFo+0x88>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c76:	0c1b      	lsrs	r3, r3, #16
 8001c78:	68ba      	ldr	r2, [r7, #8]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	73fb      	strb	r3, [r7, #15]
 8001c82:	e00d      	b.n	8001ca0 <HAL_PCDEx_SetTxFiFo+0x66>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	3340      	adds	r3, #64	; 0x40
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	0c1b      	lsrs	r3, r3, #16
 8001c94:	68ba      	ldr	r2, [r7, #8]
 8001c96:	4413      	add	r3, r2
 8001c98:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
 8001ca0:	7bfa      	ldrb	r2, [r7, #15]
 8001ca2:	78fb      	ldrb	r3, [r7, #3]
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	dbec      	blt.n	8001c84 <HAL_PCDEx_SetTxFiFo+0x4a>
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6819      	ldr	r1, [r3, #0]
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	883a      	ldrh	r2, [r7, #0]
 8001cb4:	0410      	lsls	r0, r2, #16
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	4302      	orrs	r2, r0
 8001cba:	3340      	adds	r3, #64	; 0x40
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	887a      	ldrh	r2, [r7, #2]
 8001ce2:	625a      	str	r2, [r3, #36]	; 0x24
  
  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e22d      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d075      	beq.n	8001dfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d12:	4ba3      	ldr	r3, [pc, #652]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 030c 	and.w	r3, r3, #12
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d00c      	beq.n	8001d38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d1e:	4ba0      	ldr	r3, [pc, #640]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d112      	bne.n	8001d50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d2a:	4b9d      	ldr	r3, [pc, #628]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d36:	d10b      	bne.n	8001d50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d38:	4b99      	ldr	r3, [pc, #612]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d05b      	beq.n	8001dfc <HAL_RCC_OscConfig+0x108>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d157      	bne.n	8001dfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e208      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d58:	d106      	bne.n	8001d68 <HAL_RCC_OscConfig+0x74>
 8001d5a:	4a91      	ldr	r2, [pc, #580]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001d5c:	4b90      	ldr	r3, [pc, #576]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	e01d      	b.n	8001da4 <HAL_RCC_OscConfig+0xb0>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d70:	d10c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x98>
 8001d72:	4a8b      	ldr	r2, [pc, #556]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001d74:	4b8a      	ldr	r3, [pc, #552]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	4a88      	ldr	r2, [pc, #544]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001d80:	4b87      	ldr	r3, [pc, #540]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	e00b      	b.n	8001da4 <HAL_RCC_OscConfig+0xb0>
 8001d8c:	4a84      	ldr	r2, [pc, #528]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001d8e:	4b84      	ldr	r3, [pc, #528]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	4a81      	ldr	r2, [pc, #516]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001d9a:	4b81      	ldr	r3, [pc, #516]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d013      	beq.n	8001dd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dac:	f7fe fbe8 	bl	8000580 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db4:	f7fe fbe4 	bl	8000580 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b64      	cmp	r3, #100	; 0x64
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e1cd      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc6:	4b76      	ldr	r3, [pc, #472]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f0      	beq.n	8001db4 <HAL_RCC_OscConfig+0xc0>
 8001dd2:	e014      	b.n	8001dfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd4:	f7fe fbd4 	bl	8000580 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ddc:	f7fe fbd0 	bl	8000580 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b64      	cmp	r3, #100	; 0x64
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e1b9      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dee:	4b6c      	ldr	r3, [pc, #432]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0xe8>
 8001dfa:	e000      	b.n	8001dfe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d063      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e0a:	4b65      	ldr	r3, [pc, #404]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 030c 	and.w	r3, r3, #12
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00b      	beq.n	8001e2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e16:	4b62      	ldr	r3, [pc, #392]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e1e:	2b08      	cmp	r3, #8
 8001e20:	d11c      	bne.n	8001e5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e22:	4b5f      	ldr	r3, [pc, #380]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d116      	bne.n	8001e5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2e:	4b5c      	ldr	r3, [pc, #368]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d005      	beq.n	8001e46 <HAL_RCC_OscConfig+0x152>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d001      	beq.n	8001e46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e18d      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e46:	4956      	ldr	r1, [pc, #344]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001e48:	4b55      	ldr	r3, [pc, #340]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	4313      	orrs	r3, r2
 8001e58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5a:	e03a      	b.n	8001ed2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d020      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e64:	4b4f      	ldr	r3, [pc, #316]	; (8001fa4 <HAL_RCC_OscConfig+0x2b0>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6a:	f7fe fb89 	bl	8000580 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e72:	f7fe fb85 	bl	8000580 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e16e      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e84:	4b46      	ldr	r3, [pc, #280]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f0      	beq.n	8001e72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e90:	4943      	ldr	r1, [pc, #268]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001e92:	4b43      	ldr	r3, [pc, #268]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	600b      	str	r3, [r1, #0]
 8001ea4:	e015      	b.n	8001ed2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ea6:	4b3f      	ldr	r3, [pc, #252]	; (8001fa4 <HAL_RCC_OscConfig+0x2b0>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7fe fb68 	bl	8000580 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb4:	f7fe fb64 	bl	8000580 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e14d      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec6:	4b36      	ldr	r3, [pc, #216]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d030      	beq.n	8001f40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d016      	beq.n	8001f14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ee6:	4b30      	ldr	r3, [pc, #192]	; (8001fa8 <HAL_RCC_OscConfig+0x2b4>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eec:	f7fe fb48 	bl	8000580 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef4:	f7fe fb44 	bl	8000580 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e12d      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f06:	4b26      	ldr	r3, [pc, #152]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x200>
 8001f12:	e015      	b.n	8001f40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f14:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <HAL_RCC_OscConfig+0x2b4>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1a:	f7fe fb31 	bl	8000580 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f22:	f7fe fb2d 	bl	8000580 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e116      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f34:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1f0      	bne.n	8001f22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 80a0 	beq.w	800208e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f52:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10f      	bne.n	8001f7e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	4a0f      	ldr	r2, [pc, #60]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001f64:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6e:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <HAL_RCC_OscConfig+0x2ac>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <HAL_RCC_OscConfig+0x2b8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d121      	bne.n	8001fce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f8a:	4a08      	ldr	r2, [pc, #32]	; (8001fac <HAL_RCC_OscConfig+0x2b8>)
 8001f8c:	4b07      	ldr	r3, [pc, #28]	; (8001fac <HAL_RCC_OscConfig+0x2b8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f96:	f7fe faf3 	bl	8000580 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9c:	e011      	b.n	8001fc2 <HAL_RCC_OscConfig+0x2ce>
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	42470000 	.word	0x42470000
 8001fa8:	42470e80 	.word	0x42470e80
 8001fac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb0:	f7fe fae6 	bl	8000580 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e0cf      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc2:	4b6a      	ldr	r3, [pc, #424]	; (800216c <HAL_RCC_OscConfig+0x478>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d106      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x2f0>
 8001fd6:	4a66      	ldr	r2, [pc, #408]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8001fd8:	4b65      	ldr	r3, [pc, #404]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8001fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe2:	e01c      	b.n	800201e <HAL_RCC_OscConfig+0x32a>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b05      	cmp	r3, #5
 8001fea:	d10c      	bne.n	8002006 <HAL_RCC_OscConfig+0x312>
 8001fec:	4a60      	ldr	r2, [pc, #384]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8001fee:	4b60      	ldr	r3, [pc, #384]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8001ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff2:	f043 0304 	orr.w	r3, r3, #4
 8001ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff8:	4a5d      	ldr	r2, [pc, #372]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8001ffa:	4b5d      	ldr	r3, [pc, #372]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8001ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6713      	str	r3, [r2, #112]	; 0x70
 8002004:	e00b      	b.n	800201e <HAL_RCC_OscConfig+0x32a>
 8002006:	4a5a      	ldr	r2, [pc, #360]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8002008:	4b59      	ldr	r3, [pc, #356]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 800200a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200c:	f023 0301 	bic.w	r3, r3, #1
 8002010:	6713      	str	r3, [r2, #112]	; 0x70
 8002012:	4a57      	ldr	r2, [pc, #348]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8002014:	4b56      	ldr	r3, [pc, #344]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8002016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002018:	f023 0304 	bic.w	r3, r3, #4
 800201c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d015      	beq.n	8002052 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002026:	f7fe faab 	bl	8000580 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202c:	e00a      	b.n	8002044 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800202e:	f7fe faa7 	bl	8000580 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	f241 3288 	movw	r2, #5000	; 0x1388
 800203c:	4293      	cmp	r3, r2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e08e      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002044:	4b4a      	ldr	r3, [pc, #296]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8002046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0ee      	beq.n	800202e <HAL_RCC_OscConfig+0x33a>
 8002050:	e014      	b.n	800207c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002052:	f7fe fa95 	bl	8000580 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002058:	e00a      	b.n	8002070 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800205a:	f7fe fa91 	bl	8000580 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	f241 3288 	movw	r2, #5000	; 0x1388
 8002068:	4293      	cmp	r3, r2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e078      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002070:	4b3f      	ldr	r3, [pc, #252]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8002072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1ee      	bne.n	800205a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800207c:	7dfb      	ldrb	r3, [r7, #23]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d105      	bne.n	800208e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002082:	4a3b      	ldr	r2, [pc, #236]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8002084:	4b3a      	ldr	r3, [pc, #232]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800208c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d064      	beq.n	8002160 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002096:	4b36      	ldr	r3, [pc, #216]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d05c      	beq.n	800215c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d141      	bne.n	800212e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020aa:	4b32      	ldr	r3, [pc, #200]	; (8002174 <HAL_RCC_OscConfig+0x480>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b0:	f7fe fa66 	bl	8000580 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b8:	f7fe fa62 	bl	8000580 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e04b      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ca:	4b29      	ldr	r3, [pc, #164]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020d6:	4926      	ldr	r1, [pc, #152]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69da      	ldr	r2, [r3, #28]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	431a      	orrs	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	019b      	lsls	r3, r3, #6
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ee:	085b      	lsrs	r3, r3, #1
 80020f0:	3b01      	subs	r3, #1
 80020f2:	041b      	lsls	r3, r3, #16
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fa:	061b      	lsls	r3, r3, #24
 80020fc:	4313      	orrs	r3, r2
 80020fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002100:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <HAL_RCC_OscConfig+0x480>)
 8002102:	2201      	movs	r2, #1
 8002104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002106:	f7fe fa3b 	bl	8000580 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800210e:	f7fe fa37 	bl	8000580 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e020      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002120:	4b13      	ldr	r3, [pc, #76]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f0      	beq.n	800210e <HAL_RCC_OscConfig+0x41a>
 800212c:	e018      	b.n	8002160 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <HAL_RCC_OscConfig+0x480>)
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002134:	f7fe fa24 	bl	8000580 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800213c:	f7fe fa20 	bl	8000580 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e009      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800214e:	4b08      	ldr	r3, [pc, #32]	; (8002170 <HAL_RCC_OscConfig+0x47c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0x448>
 800215a:	e001      	b.n	8002160 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40007000 	.word	0x40007000
 8002170:	40023800 	.word	0x40023800
 8002174:	42470060 	.word	0x42470060

08002178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0ca      	b.n	8002322 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800218c:	4b67      	ldr	r3, [pc, #412]	; (800232c <HAL_RCC_ClockConfig+0x1b4>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 020f 	and.w	r2, r3, #15
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d20c      	bcs.n	80021b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219a:	4b64      	ldr	r3, [pc, #400]	; (800232c <HAL_RCC_ClockConfig+0x1b4>)
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a2:	4b62      	ldr	r3, [pc, #392]	; (800232c <HAL_RCC_ClockConfig+0x1b4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 020f 	and.w	r2, r3, #15
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0b6      	b.n	8002322 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d020      	beq.n	8002202 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021cc:	4a58      	ldr	r2, [pc, #352]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80021ce:	4b58      	ldr	r3, [pc, #352]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e4:	4a52      	ldr	r2, [pc, #328]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80021e6:	4b52      	ldr	r3, [pc, #328]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f0:	494f      	ldr	r1, [pc, #316]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80021f2:	4b4f      	ldr	r3, [pc, #316]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	4313      	orrs	r3, r2
 8002200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d044      	beq.n	8002298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d107      	bne.n	8002226 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002216:	4b46      	ldr	r3, [pc, #280]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d119      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e07d      	b.n	8002322 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d003      	beq.n	8002236 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002232:	2b03      	cmp	r3, #3
 8002234:	d107      	bne.n	8002246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002236:	4b3e      	ldr	r3, [pc, #248]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d109      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e06d      	b.n	8002322 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002246:	4b3a      	ldr	r3, [pc, #232]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e065      	b.n	8002322 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002256:	4936      	ldr	r1, [pc, #216]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 8002258:	4b35      	ldr	r3, [pc, #212]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f023 0203 	bic.w	r2, r3, #3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4313      	orrs	r3, r2
 8002266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002268:	f7fe f98a 	bl	8000580 <HAL_GetTick>
 800226c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226e:	e00a      	b.n	8002286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002270:	f7fe f986 	bl	8000580 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f241 3288 	movw	r2, #5000	; 0x1388
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e04d      	b.n	8002322 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002286:	4b2a      	ldr	r3, [pc, #168]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 020c 	and.w	r2, r3, #12
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	429a      	cmp	r2, r3
 8002296:	d1eb      	bne.n	8002270 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002298:	4b24      	ldr	r3, [pc, #144]	; (800232c <HAL_RCC_ClockConfig+0x1b4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 020f 	and.w	r2, r3, #15
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d90c      	bls.n	80022c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a6:	4b21      	ldr	r3, [pc, #132]	; (800232c <HAL_RCC_ClockConfig+0x1b4>)
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ae:	4b1f      	ldr	r3, [pc, #124]	; (800232c <HAL_RCC_ClockConfig+0x1b4>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 020f 	and.w	r2, r3, #15
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e030      	b.n	8002322 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022cc:	4918      	ldr	r1, [pc, #96]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80022ce:	4b18      	ldr	r3, [pc, #96]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	4313      	orrs	r3, r2
 80022dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d009      	beq.n	80022fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ea:	4911      	ldr	r1, [pc, #68]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80022ec:	4b10      	ldr	r3, [pc, #64]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4313      	orrs	r3, r2
 80022fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022fe:	f000 f81d 	bl	800233c <HAL_RCC_GetSysClockFreq>
 8002302:	4601      	mov	r1, r0
 8002304:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	091b      	lsrs	r3, r3, #4
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	4a09      	ldr	r2, [pc, #36]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 8002310:	5cd3      	ldrb	r3, [r2, r3]
 8002312:	fa21 f303 	lsr.w	r3, r1, r3
 8002316:	4a08      	ldr	r2, [pc, #32]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 8002318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800231a:	2000      	movs	r0, #0
 800231c:	f00e fbfa 	bl	8010b14 <HAL_InitTick>

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40023c00 	.word	0x40023c00
 8002330:	40023800 	.word	0x40023800
 8002334:	08011270 	.word	0x08011270
 8002338:	200001d0 	.word	0x200001d0

0800233c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800233c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002340:	b08f      	sub	sp, #60	; 0x3c
 8002342:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002348:	2300      	movs	r3, #0
 800234a:	637b      	str	r3, [r7, #52]	; 0x34
 800234c:	2300      	movs	r3, #0
 800234e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002354:	4b62      	ldr	r3, [pc, #392]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 030c 	and.w	r3, r3, #12
 800235c:	2b04      	cmp	r3, #4
 800235e:	d007      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0x34>
 8002360:	2b08      	cmp	r3, #8
 8002362:	d008      	beq.n	8002376 <HAL_RCC_GetSysClockFreq+0x3a>
 8002364:	2b00      	cmp	r3, #0
 8002366:	f040 80b2 	bne.w	80024ce <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800236a:	4b5e      	ldr	r3, [pc, #376]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800236c:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 800236e:	e0b1      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002370:	4b5d      	ldr	r3, [pc, #372]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002372:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002374:	e0ae      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002376:	4b5a      	ldr	r3, [pc, #360]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800237e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002380:	4b57      	ldr	r3, [pc, #348]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d04e      	beq.n	800242a <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800238c:	4b54      	ldr	r3, [pc, #336]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	099b      	lsrs	r3, r3, #6
 8002392:	f04f 0400 	mov.w	r4, #0
 8002396:	f240 11ff 	movw	r1, #511	; 0x1ff
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	ea01 0103 	and.w	r1, r1, r3
 80023a2:	ea02 0204 	and.w	r2, r2, r4
 80023a6:	460b      	mov	r3, r1
 80023a8:	4614      	mov	r4, r2
 80023aa:	0160      	lsls	r0, r4, #5
 80023ac:	6278      	str	r0, [r7, #36]	; 0x24
 80023ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023b0:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80023b4:	6278      	str	r0, [r7, #36]	; 0x24
 80023b6:	015b      	lsls	r3, r3, #5
 80023b8:	623b      	str	r3, [r7, #32]
 80023ba:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80023be:	1a5b      	subs	r3, r3, r1
 80023c0:	eb64 0402 	sbc.w	r4, r4, r2
 80023c4:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80023c8:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80023cc:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80023d0:	ebb8 0803 	subs.w	r8, r8, r3
 80023d4:	eb69 0904 	sbc.w	r9, r9, r4
 80023d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023dc:	61fb      	str	r3, [r7, #28]
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80023ea:	61bb      	str	r3, [r7, #24]
 80023ec:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80023f0:	eb18 0801 	adds.w	r8, r8, r1
 80023f4:	eb49 0902 	adc.w	r9, r9, r2
 80023f8:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002410:	4640      	mov	r0, r8
 8002412:	4649      	mov	r1, r9
 8002414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002416:	f04f 0400 	mov.w	r4, #0
 800241a:	461a      	mov	r2, r3
 800241c:	4623      	mov	r3, r4
 800241e:	f7fd fef1 	bl	8000204 <__aeabi_uldivmod>
 8002422:	4603      	mov	r3, r0
 8002424:	460c      	mov	r4, r1
 8002426:	637b      	str	r3, [r7, #52]	; 0x34
 8002428:	e043      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800242a:	4b2d      	ldr	r3, [pc, #180]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	099b      	lsrs	r3, r3, #6
 8002430:	f04f 0400 	mov.w	r4, #0
 8002434:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	ea01 0103 	and.w	r1, r1, r3
 8002440:	ea02 0204 	and.w	r2, r2, r4
 8002444:	460b      	mov	r3, r1
 8002446:	4614      	mov	r4, r2
 8002448:	0160      	lsls	r0, r4, #5
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	015b      	lsls	r3, r3, #5
 8002456:	60bb      	str	r3, [r7, #8]
 8002458:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800245c:	1a5b      	subs	r3, r3, r1
 800245e:	eb64 0402 	sbc.w	r4, r4, r2
 8002462:	01a6      	lsls	r6, r4, #6
 8002464:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8002468:	019d      	lsls	r5, r3, #6
 800246a:	1aed      	subs	r5, r5, r3
 800246c:	eb66 0604 	sbc.w	r6, r6, r4
 8002470:	00f3      	lsls	r3, r6, #3
 8002472:	607b      	str	r3, [r7, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800247a:	607b      	str	r3, [r7, #4]
 800247c:	00eb      	lsls	r3, r5, #3
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	e897 0060 	ldmia.w	r7, {r5, r6}
 8002484:	186d      	adds	r5, r5, r1
 8002486:	eb46 0602 	adc.w	r6, r6, r2
 800248a:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 800248e:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8002492:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8002496:	4655      	mov	r5, sl
 8002498:	465e      	mov	r6, fp
 800249a:	4628      	mov	r0, r5
 800249c:	4631      	mov	r1, r6
 800249e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a0:	f04f 0400 	mov.w	r4, #0
 80024a4:	461a      	mov	r2, r3
 80024a6:	4623      	mov	r3, r4
 80024a8:	f7fd feac 	bl	8000204 <__aeabi_uldivmod>
 80024ac:	4603      	mov	r3, r0
 80024ae:	460c      	mov	r4, r1
 80024b0:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024b2:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	0c1b      	lsrs	r3, r3, #16
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	3301      	adds	r3, #1
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 80024c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024cc:	e002      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024ce:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80024d0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	373c      	adds	r7, #60	; 0x3c
 80024da:	46bd      	mov	sp, r7
 80024dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024e0:	40023800 	.word	0x40023800
 80024e4:	00f42400 	.word	0x00f42400
 80024e8:	007a1200 	.word	0x007a1200

080024ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024f0:	4b03      	ldr	r3, [pc, #12]	; (8002500 <HAL_RCC_GetHCLKFreq+0x14>)
 80024f2:	681b      	ldr	r3, [r3, #0]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	200001d0 	.word	0x200001d0

08002504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002508:	f7ff fff0 	bl	80024ec <HAL_RCC_GetHCLKFreq>
 800250c:	4601      	mov	r1, r0
 800250e:	4b05      	ldr	r3, [pc, #20]	; (8002524 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	0b5b      	lsrs	r3, r3, #13
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	4a03      	ldr	r2, [pc, #12]	; (8002528 <HAL_RCC_GetPCLK2Freq+0x24>)
 800251a:	5cd3      	ldrb	r3, [r2, r3]
 800251c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002520:	4618      	mov	r0, r3
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40023800 	.word	0x40023800
 8002528:	08011280 	.word	0x08011280

0800252c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	220f      	movs	r2, #15
 800253a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800253c:	4b12      	ldr	r3, [pc, #72]	; (8002588 <HAL_RCC_GetClockConfig+0x5c>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0203 	and.w	r2, r3, #3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002548:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <HAL_RCC_GetClockConfig+0x5c>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002554:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <HAL_RCC_GetClockConfig+0x5c>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002560:	4b09      	ldr	r3, [pc, #36]	; (8002588 <HAL_RCC_GetClockConfig+0x5c>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	08db      	lsrs	r3, r3, #3
 8002566:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800256e:	4b07      	ldr	r3, [pc, #28]	; (800258c <HAL_RCC_GetClockConfig+0x60>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 020f 	and.w	r2, r3, #15
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	601a      	str	r2, [r3, #0]
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40023800 	.word	0x40023800
 800258c:	40023c00 	.word	0x40023c00

08002590 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e01d      	b.n	80025de <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d106      	bne.n	80025bc <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f815 	bl	80025e6 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3304      	adds	r3, #4
 80025cc:	4619      	mov	r1, r3
 80025ce:	4610      	mov	r0, r2
 80025d0:	f000 f95e 	bl	8002890 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_TIM_Base_MspInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6812      	ldr	r2, [r2, #0]
 800260a:	68d2      	ldr	r2, [r2, #12]
 800260c:	f042 0201 	orr.w	r2, r2, #1
 8002610:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	f042 0201 	orr.w	r2, r2, #1
 8002620:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b02      	cmp	r3, #2
 8002644:	d122      	bne.n	800268c <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b02      	cmp	r3, #2
 8002652:	d11b      	bne.n	800268c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0202 	mvn.w	r2, #2
 800265c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f8ee 	bl	8002854 <HAL_TIM_IC_CaptureCallback>
 8002678:	e005      	b.n	8002686 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f8e0 	bl	8002840 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f8f1 	bl	8002868 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	2b04      	cmp	r3, #4
 8002698:	d122      	bne.n	80026e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d11b      	bne.n	80026e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0204 	mvn.w	r2, #4
 80026b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2202      	movs	r2, #2
 80026b6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f8c4 	bl	8002854 <HAL_TIM_IC_CaptureCallback>
 80026cc:	e005      	b.n	80026da <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f8b6 	bl	8002840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f8c7 	bl	8002868 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d122      	bne.n	8002734 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d11b      	bne.n	8002734 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f06f 0208 	mvn.w	r2, #8
 8002704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2204      	movs	r2, #4
 800270a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f89a 	bl	8002854 <HAL_TIM_IC_CaptureCallback>
 8002720:	e005      	b.n	800272e <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f88c 	bl	8002840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f89d 	bl	8002868 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	f003 0310 	and.w	r3, r3, #16
 800273e:	2b10      	cmp	r3, #16
 8002740:	d122      	bne.n	8002788 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	f003 0310 	and.w	r3, r3, #16
 800274c:	2b10      	cmp	r3, #16
 800274e:	d11b      	bne.n	8002788 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f06f 0210 	mvn.w	r2, #16
 8002758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2208      	movs	r2, #8
 800275e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f870 	bl	8002854 <HAL_TIM_IC_CaptureCallback>
 8002774:	e005      	b.n	8002782 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f862 	bl	8002840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f873 	bl	8002868 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b01      	cmp	r3, #1
 8002794:	d10e      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d107      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f06f 0201 	mvn.w	r2, #1
 80027ac:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f00e f946 	bl	8010a40 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027be:	2b80      	cmp	r3, #128	; 0x80
 80027c0:	d10e      	bne.n	80027e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027cc:	2b80      	cmp	r3, #128	; 0x80
 80027ce:	d107      	bne.n	80027e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027d8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f8e6 	bl	80029ac <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ea:	2b40      	cmp	r3, #64	; 0x40
 80027ec:	d10e      	bne.n	800280c <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f8:	2b40      	cmp	r3, #64	; 0x40
 80027fa:	d107      	bne.n	800280c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002804:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f838 	bl	800287c <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f003 0320 	and.w	r3, r3, #32
 8002816:	2b20      	cmp	r3, #32
 8002818:	d10e      	bne.n	8002838 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f003 0320 	and.w	r3, r3, #32
 8002824:	2b20      	cmp	r3, #32
 8002826:	d107      	bne.n	8002838 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f06f 0220 	mvn.w	r2, #32
 8002830:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f8b0 	bl	8002998 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8002838:	bf00      	nop
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a35      	ldr	r2, [pc, #212]	; (800297c <TIM_Base_SetConfig+0xec>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d00f      	beq.n	80028cc <TIM_Base_SetConfig+0x3c>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b2:	d00b      	beq.n	80028cc <TIM_Base_SetConfig+0x3c>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a32      	ldr	r2, [pc, #200]	; (8002980 <TIM_Base_SetConfig+0xf0>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d007      	beq.n	80028cc <TIM_Base_SetConfig+0x3c>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a31      	ldr	r2, [pc, #196]	; (8002984 <TIM_Base_SetConfig+0xf4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d003      	beq.n	80028cc <TIM_Base_SetConfig+0x3c>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a30      	ldr	r2, [pc, #192]	; (8002988 <TIM_Base_SetConfig+0xf8>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d101      	bne.n	80028d0 <TIM_Base_SetConfig+0x40>
 80028cc:	2301      	movs	r3, #1
 80028ce:	e000      	b.n	80028d2 <TIM_Base_SetConfig+0x42>
 80028d0:	2300      	movs	r3, #0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d008      	beq.n	80028e8 <TIM_Base_SetConfig+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a24      	ldr	r2, [pc, #144]	; (800297c <TIM_Base_SetConfig+0xec>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d01b      	beq.n	8002928 <TIM_Base_SetConfig+0x98>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f6:	d017      	beq.n	8002928 <TIM_Base_SetConfig+0x98>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a21      	ldr	r2, [pc, #132]	; (8002980 <TIM_Base_SetConfig+0xf0>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d013      	beq.n	8002928 <TIM_Base_SetConfig+0x98>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a20      	ldr	r2, [pc, #128]	; (8002984 <TIM_Base_SetConfig+0xf4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d00f      	beq.n	8002928 <TIM_Base_SetConfig+0x98>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a1f      	ldr	r2, [pc, #124]	; (8002988 <TIM_Base_SetConfig+0xf8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d00b      	beq.n	8002928 <TIM_Base_SetConfig+0x98>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a1e      	ldr	r2, [pc, #120]	; (800298c <TIM_Base_SetConfig+0xfc>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d007      	beq.n	8002928 <TIM_Base_SetConfig+0x98>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a1d      	ldr	r2, [pc, #116]	; (8002990 <TIM_Base_SetConfig+0x100>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d003      	beq.n	8002928 <TIM_Base_SetConfig+0x98>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a1c      	ldr	r2, [pc, #112]	; (8002994 <TIM_Base_SetConfig+0x104>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d101      	bne.n	800292c <TIM_Base_SetConfig+0x9c>
 8002928:	2301      	movs	r3, #1
 800292a:	e000      	b.n	800292e <TIM_Base_SetConfig+0x9e>
 800292c:	2300      	movs	r3, #0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d008      	beq.n	8002944 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	4313      	orrs	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a07      	ldr	r2, [pc, #28]	; (800297c <TIM_Base_SetConfig+0xec>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d103      	bne.n	800296a <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	691a      	ldr	r2, [r3, #16]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	615a      	str	r2, [r3, #20]
}
 8002970:	bf00      	nop
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	40010000 	.word	0x40010000
 8002980:	40000400 	.word	0x40000400
 8002984:	40000800 	.word	0x40000800
 8002988:	40000c00 	.word	0x40000c00
 800298c:	40014000 	.word	0x40014000
 8002990:	40014400 	.word	0x40014400
 8002994:	40014800 	.word	0x40014800

08002998 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80029c0:	b084      	sub	sp, #16
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b082      	sub	sp, #8
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
 80029ca:	f107 0014 	add.w	r0, r7, #20
 80029ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80029d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d120      	bne.n	8002a1a <USB_CoreInit+0x5a>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80029ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	60d3      	str	r3, [r2, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1U)
 8002a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d105      	bne.n	8002a12 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f001 f9c4 	bl	8003da0 <USB_CoreReset>
 8002a18:	e00c      	b.n	8002a34 <USB_CoreInit+0x74>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f001 f9ba 	bl	8003da0 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a32:	639a      	str	r2, [r3, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d10b      	bne.n	8002a52 <USB_CoreInit+0x92>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f043 0206 	orr.w	r2, r3, #6
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	609a      	str	r2, [r3, #8]
  }  

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a5e:	b004      	add	sp, #16
 8002a60:	4770      	bx	lr

08002a62 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f043 0201 	orr.w	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f023 0201 	bic.w	r2, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	60da      	str	r2, [r3, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d106      	bne.n	8002ad2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	60da      	str	r2, [r3, #12]
 8002ad0:	e008      	b.n	8002ae4 <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 8002ad2:	78fb      	ldrb	r3, [r7, #3]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d105      	bne.n	8002ae4 <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50U);
 8002ae4:	2032      	movs	r0, #50	; 0x32
 8002ae6:	f7fd fd57 	bl	8000598 <HAL_Delay>
  
  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002af4:	b084      	sub	sp, #16
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b084      	sub	sp, #16
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	f107 001c 	add.w	r0, r7, #28
 8002b02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i = 0U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	60fb      	str	r3, [r7, #12]
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
 8002b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d106      	bne.n	8002b1e <USB_DevInit+0x2a>
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b14:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	639a      	str	r2, [r3, #56]	; 0x38
 8002b1c:	e005      	b.n	8002b2a <USB_DevInit+0x36>
  }
  else
  {
    /* Enable VBUS */
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b22:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002b30:	461a      	mov	r2, r3
 8002b32:	2300      	movs	r3, #0
 8002b34:	6013      	str	r3, [r2, #0]
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6013      	str	r3, [r2, #0]
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8002b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d10c      	bne.n	8002b68 <USB_DevInit+0x74>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d104      	bne.n	8002b5e <USB_DevInit+0x6a>
    {      
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 8002b54:	2100      	movs	r1, #0
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f946 	bl	8002de8 <USB_SetDevSpeed>
 8002b5c:	e008      	b.n	8002b70 <USB_DevInit+0x7c>
    }
    else 
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8002b5e:	2101      	movs	r1, #1
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f941 	bl	8002de8 <USB_SetDevSpeed>
 8002b66:	e003      	b.n	8002b70 <USB_DevInit+0x7c>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8002b68:	2103      	movs	r1, #3
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f93c 	bl	8002de8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 8002b70:	2110      	movs	r1, #16
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f8f0 	bl	8002d58 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f913 	bl	8002da4 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b84:	461a      	mov	r2, r3
 8002b86:	2300      	movs	r3, #0
 8002b88:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b90:	461a      	mov	r2, r3
 8002b92:	2300      	movs	r3, #0
 8002b94:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba2:	6193      	str	r3, [r2, #24]
  USBx_DEVICE->DAINTMSK = 0U;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002baa:	461a      	mov	r2, r3
 8002bac:	2300      	movs	r3, #0
 8002bae:	61d3      	str	r3, [r2, #28]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	e034      	b.n	8002c20 <USB_DevInit+0x12c>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	015a      	lsls	r2, r3, #5
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bcc:	d10a      	bne.n	8002be4 <USB_DevInit+0xf0>
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	015a      	lsls	r2, r3, #5
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	e008      	b.n	8002bf6 <USB_DevInit+0x102>
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	015a      	lsls	r2, r3, #5
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4413      	add	r3, r2
 8002bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	6013      	str	r3, [r2, #0]
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	015a      	lsls	r2, r3, #5
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c02:	461a      	mov	r2, r3
 8002c04:	2300      	movs	r3, #0
 8002c06:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c14:	461a      	mov	r2, r3
 8002c16:	23ff      	movs	r3, #255	; 0xff
 8002c18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d8c6      	bhi.n	8002bb6 <USB_DevInit+0xc2>
  }
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	e034      	b.n	8002c98 <USB_DevInit+0x1a4>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c44:	d10a      	bne.n	8002c5c <USB_DevInit+0x168>
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c52:	461a      	mov	r2, r3
 8002c54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	e008      	b.n	8002c6e <USB_DevInit+0x17a>
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c68:	461a      	mov	r2, r3
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	6013      	str	r3, [r2, #0]
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	015a      	lsls	r2, r3, #5
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	015a      	lsls	r2, r3, #5
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4413      	add	r3, r2
 8002c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	23ff      	movs	r3, #255	; 0xff
 8002c90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	3301      	adds	r3, #1
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	69fa      	ldr	r2, [r7, #28]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d8c6      	bhi.n	8002c2e <USB_DevInit+0x13a>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cb4:	6113      	str	r3, [r2, #16]
  
  if (cfg.dma_enable == 1U)
 8002cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d117      	bne.n	8002cec <USB_DevInit+0x1f8>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <USB_DevInit+0x25c>)
 8002cc6:	6313      	str	r3, [r2, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cce:	461a      	mov	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cdc:	f043 0303 	orr.w	r3, r3, #3
 8002ce0:	6313      	str	r3, [r2, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	60fb      	str	r3, [r7, #12]
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002cf8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8002cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d105      	bne.n	8002d0c <USB_DevInit+0x218>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	f043 0210 	orr.w	r2, r3, #16
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	619a      	str	r2, [r3, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699a      	ldr	r2, [r3, #24]
 8002d10:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <USB_DevInit+0x260>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 8002d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d005      	beq.n	8002d2a <USB_DevInit+0x236>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	f043 0208 	orr.w	r2, r3, #8
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 8002d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d107      	bne.n	8002d40 <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d38:	f043 0304 	orr.w	r3, r3, #4
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6193      	str	r3, [r2, #24]
  }
  
  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d4c:	b004      	add	sp, #16
 8002d4e:	4770      	bx	lr
 8002d50:	00800100 	.word	0x00800100
 8002d54:	803c3800 	.word	0x803c3800

08002d58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	019b      	lsls	r3, r3, #6
 8002d6a:	f043 0220 	orr.w	r2, r3, #32
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	3301      	adds	r3, #1
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4a09      	ldr	r2, [pc, #36]	; (8002da0 <USB_FlushTxFifo+0x48>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d901      	bls.n	8002d84 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e006      	b.n	8002d92 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	f003 0320 	and.w	r3, r3, #32
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	d0f0      	beq.n	8002d72 <USB_FlushTxFifo+0x1a>
  
  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	00030d40 	.word	0x00030d40

08002da4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2210      	movs	r2, #16
 8002db4:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	3301      	adds	r3, #1
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4a09      	ldr	r2, [pc, #36]	; (8002de4 <USB_FlushRxFifo+0x40>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d901      	bls.n	8002dc8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e006      	b.n	8002dd6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	f003 0310 	and.w	r3, r3, #16
 8002dd0:	2b10      	cmp	r3, #16
 8002dd2:	d0f0      	beq.n	8002db6 <USB_FlushRxFifo+0x12>
  
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	00030d40 	.word	0x00030d40

08002de8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG |= speed;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	78fb      	ldrb	r3, [r7, #3]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <USB_GetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint8_t speed = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	73fb      	strb	r3, [r7, #15]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 0306 	and.w	r3, r3, #6
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d102      	bne.n	8002e3a <USB_GetDevSpeed+0x22>
  {
    speed = USB_OTG_SPEED_HIGH;
 8002e34:	2300      	movs	r3, #0
 8002e36:	73fb      	strb	r3, [r7, #15]
 8002e38:	e01c      	b.n	8002e74 <USB_GetDevSpeed+0x5c>
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 0306 	and.w	r3, r3, #6
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d007      	beq.n	8002e5a <USB_GetDevSpeed+0x42>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8002e56:	2b06      	cmp	r3, #6
 8002e58:	d102      	bne.n	8002e60 <USB_GetDevSpeed+0x48>
  {
    speed = USB_OTG_SPEED_FULL;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	73fb      	strb	r3, [r7, #15]
 8002e5e:	e009      	b.n	8002e74 <USB_GetDevSpeed+0x5c>
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 0306 	and.w	r3, r3, #6
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d101      	bne.n	8002e74 <USB_GetDevSpeed+0x5c>
  {
    speed = USB_OTG_SPEED_LOW;
 8002e70:	2302      	movs	r3, #2
 8002e72:	73fb      	strb	r3, [r7, #15]
  }
  
  return speed;
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	785b      	ldrb	r3, [r3, #1]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d13e      	bne.n	8002f12 <USB_ActivateEndpoint+0x90>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ea2:	69da      	ldr	r2, [r3, #28]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	2301      	movs	r3, #1
 8002eac:	4083      	lsls	r3, r0
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61cb      	str	r3, [r1, #28]
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	015a      	lsls	r2, r3, #5
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d15c      	bne.n	8002f86 <USB_ActivateEndpoint+0x104>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	015a      	lsls	r2, r3, #5
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eda:	4618      	mov	r0, r3
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	015a      	lsls	r2, r3, #5
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ef4:	6839      	ldr	r1, [r7, #0]
 8002ef6:	78c9      	ldrb	r1, [r1, #3]
 8002ef8:	0489      	lsls	r1, r1, #18
 8002efa:	430b      	orrs	r3, r1
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
 8002efc:	6839      	ldr	r1, [r7, #0]
 8002efe:	7809      	ldrb	r1, [r1, #0]
 8002f00:	0589      	lsls	r1, r1, #22
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8002f02:	430b      	orrs	r3, r1
 8002f04:	4313      	orrs	r3, r2
 8002f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f0e:	6003      	str	r3, [r0, #0]
 8002f10:	e039      	b.n	8002f86 <USB_ActivateEndpoint+0x104>
    } 
  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f18:	4619      	mov	r1, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f20:	69da      	ldr	r2, [r3, #28]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	2301      	movs	r3, #1
 8002f2a:	4083      	lsls	r3, r0
 8002f2c:	041b      	lsls	r3, r3, #16
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	61cb      	str	r3, [r1, #28]
     
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d11d      	bne.n	8002f86 <USB_ActivateEndpoint+0x104>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	015a      	lsls	r2, r3, #5
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f58:	4618      	mov	r0, r3
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	015a      	lsls	r2, r3, #5
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4413      	add	r3, r2
 8002f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f72:	6839      	ldr	r1, [r7, #0]
 8002f74:	78c9      	ldrb	r1, [r1, #3]
 8002f76:	0489      	lsls	r1, r1, #18
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f84:	6003      	str	r3, [r0, #0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	785b      	ldrb	r3, [r3, #1]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d154      	bne.n	8003054 <USB_DeactivateEndpoint+0xc0>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fb8:	4619      	mov	r1, r3
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	015a      	lsls	r2, r3, #5
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002fce:	600b      	str	r3, [r1, #0]
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	015a      	lsls	r2, r3, #5
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fde:	461a      	mov	r2, r3
 8002fe0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002fe4:	6013      	str	r3, [r2, #0]
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ffa:	6013      	str	r3, [r2, #0]
    
    do
    {
      if (++count > 200000U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	3301      	adds	r3, #1
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4a43      	ldr	r2, [pc, #268]	; (8003114 <USB_DeactivateEndpoint+0x180>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d901      	bls.n	800300e <USB_DeactivateEndpoint+0x7a>
      {
        return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e07d      	b.n	800310a <USB_DeactivateEndpoint+0x176>
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	015a      	lsls	r2, r3, #5
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4413      	add	r3, r2
 8003018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003026:	d0e9      	beq.n	8002ffc <USB_DeactivateEndpoint+0x68>
    
    
    /* Flush any data remaining in the TxFIFO */
    USB_FlushTxFifo(USBx , 0x10U);
 8003028:	2110      	movs	r1, #16
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff fe94 	bl	8002d58 <USB_FlushTxFifo>
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003036:	4619      	mov	r1, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800303e:	69da      	ldr	r2, [r3, #28]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	2301      	movs	r3, #1
 8003048:	4083      	lsls	r3, r0
 800304a:	b29b      	uxth	r3, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	4013      	ands	r3, r2
 8003050:	61cb      	str	r3, [r1, #28]
 8003052:	e059      	b.n	8003108 <USB_DeactivateEndpoint+0x174>
  
  }
  else /* Disable the OUT endpoint */
  {
    
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4413      	add	r3, r2
 800305e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003062:	4619      	mov	r1, r3
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4413      	add	r3, r2
 800306e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003078:	600b      	str	r3, [r1, #0]
    
    /* sets the NAK bit for the OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	015a      	lsls	r2, r3, #5
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4413      	add	r3, r2
 8003084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003088:	461a      	mov	r2, r3
 800308a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800308e:	6013      	str	r3, [r2, #0]
    
    /* Disable OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	015a      	lsls	r2, r3, #5
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4413      	add	r3, r2
 800309a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800309e:	461a      	mov	r2, r3
 80030a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030a4:	6013      	str	r3, [r2, #0]
    
    do
    {
      if (++count > 200000U)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	3301      	adds	r3, #1
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4a19      	ldr	r2, [pc, #100]	; (8003114 <USB_DeactivateEndpoint+0x180>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d901      	bls.n	80030b8 <USB_DeactivateEndpoint+0x124>
      {
        return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e028      	b.n	800310a <USB_DeactivateEndpoint+0x176>
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	015a      	lsls	r2, r3, #5
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4413      	add	r3, r2
 80030c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	2b10      	cmp	r3, #16
 80030ce:	d0ea      	beq.n	80030a6 <USB_DeactivateEndpoint+0x112>
    
    /* Set the "Clear the Global OUT NAK bit" to disable global OUT NAK mode */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d6:	461a      	mov	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030e4:	6053      	str	r3, [r2, #4]
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ec:	4619      	mov	r1, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030f4:	69da      	ldr	r2, [r3, #28]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	2301      	movs	r3, #1
 80030fe:	4083      	lsls	r3, r0
 8003100:	041b      	lsls	r3, r3, #16
 8003102:	43db      	mvns	r3, r3
 8003104:	4013      	ands	r3, r2
 8003106:	61cb      	str	r3, [r1, #28]
  }
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	00030d40 	.word	0x00030d40

08003118 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af02      	add	r7, sp, #8
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	4613      	mov	r3, r2
 8003124:	71fb      	strb	r3, [r7, #7]
  uint16_t pktcnt = 0U;
 8003126:	2300      	movs	r3, #0
 8003128:	82fb      	strh	r3, [r7, #22]
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	785b      	ldrb	r3, [r3, #1]
 800312e:	2b01      	cmp	r3, #1
 8003130:	f040 8146 	bne.w	80033c0 <USB_EPStartXfer+0x2a8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d13b      	bne.n	80031b4 <USB_EPStartXfer+0x9c>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4413      	add	r3, r2
 8003146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800314a:	4619      	mov	r1, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4413      	add	r3, r2
 8003156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003160:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003164:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	015a      	lsls	r2, r3, #5
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4413      	add	r3, r2
 8003170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003174:	4619      	mov	r1, r3
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	015a      	lsls	r2, r3, #5
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4413      	add	r3, r2
 8003180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800318a:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	015a      	lsls	r2, r3, #5
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4413      	add	r3, r2
 8003196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800319a:	4619      	mov	r1, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	0cdb      	lsrs	r3, r3, #19
 80031ae:	04db      	lsls	r3, r3, #19
 80031b0:	610b      	str	r3, [r1, #16]
 80031b2:	e086      	b.n	80032c2 <USB_EPStartXfer+0x1aa>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	015a      	lsls	r2, r3, #5
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4413      	add	r3, r2
 80031be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031c2:	4619      	mov	r1, r3
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	015a      	lsls	r2, r3, #5
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4413      	add	r3, r2
 80031ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	0cdb      	lsrs	r3, r3, #19
 80031d6:	04db      	lsls	r3, r3, #19
 80031d8:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e8:	4619      	mov	r1, r3
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	015a      	lsls	r2, r3, #5
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80031fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003202:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4413      	add	r3, r2
 800320e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003212:	4618      	mov	r0, r3
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	015a      	lsls	r2, r3, #5
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4413      	add	r3, r2
 800321e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	6959      	ldr	r1, [r3, #20]
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	440b      	add	r3, r1
 800322e:	1e59      	subs	r1, r3, #1
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	fbb1 f3f3 	udiv	r3, r1, r3
 8003238:	04d9      	lsls	r1, r3, #19
 800323a:	4b8c      	ldr	r3, [pc, #560]	; (800346c <USB_EPStartXfer+0x354>)
 800323c:	400b      	ands	r3, r1
 800323e:	4313      	orrs	r3, r2
 8003240:	6103      	str	r3, [r0, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	015a      	lsls	r2, r3, #5
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4413      	add	r3, r2
 800324c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003250:	4619      	mov	r1, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4413      	add	r3, r2
 800325c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003260:	691a      	ldr	r2, [r3, #16]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800326a:	4313      	orrs	r3, r2
 800326c:	610b      	str	r3, [r1, #16]
      
      if (ep->type == EP_TYPE_ISOC)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	78db      	ldrb	r3, [r3, #3]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d125      	bne.n	80032c2 <USB_EPStartXfer+0x1aa>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	015a      	lsls	r2, r3, #5
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4413      	add	r3, r2
 8003280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003284:	4619      	mov	r1, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4413      	add	r3, r2
 8003290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800329a:	610b      	str	r3, [r1, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	015a      	lsls	r2, r3, #5
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032aa:	4619      	mov	r1, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032c0:	610b      	str	r3, [r1, #16]
      }       
    }

    if (dma == 1U)
 80032c2:	79fb      	ldrb	r3, [r7, #7]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d10b      	bne.n	80032e0 <USB_EPStartXfer+0x1c8>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	015a      	lsls	r2, r3, #5
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032d6:	461a      	mov	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	6153      	str	r3, [r2, #20]
 80032de:	e016      	b.n	800330e <USB_EPStartXfer+0x1f6>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	78db      	ldrb	r3, [r3, #3]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d012      	beq.n	800330e <USB_EPStartXfer+0x1f6>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00e      	beq.n	800330e <USB_EPStartXfer+0x1f6>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032f6:	4619      	mov	r1, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	2301      	movs	r3, #1
 8003308:	4083      	lsls	r3, r0
 800330a:	4313      	orrs	r3, r2
 800330c:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	78db      	ldrb	r3, [r3, #3]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d12e      	bne.n	8003374 <USB_EPStartXfer+0x25c>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003322:	2b00      	cmp	r3, #0
 8003324:	d113      	bne.n	800334e <USB_EPStartXfer+0x236>
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4413      	add	r3, r2
 8003330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003334:	4619      	mov	r1, r3
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4413      	add	r3, r2
 8003340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800334a:	600b      	str	r3, [r1, #0]
 800334c:	e012      	b.n	8003374 <USB_EPStartXfer+0x25c>
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4413      	add	r3, r2
 8003358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800335c:	4619      	mov	r1, r3
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4413      	add	r3, r2
 8003368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003372:	600b      	str	r3, [r1, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	015a      	lsls	r2, r3, #5
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	4413      	add	r3, r2
 800337e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003382:	4619      	mov	r1, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	015a      	lsls	r2, r3, #5
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	4413      	add	r3, r2
 800338e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003398:	600b      	str	r3, [r1, #0]
    
    if (ep->type == EP_TYPE_ISOC)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	78db      	ldrb	r3, [r3, #3]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	f040 80f5 	bne.w	800358e <USB_EPStartXfer+0x476>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	68d9      	ldr	r1, [r3, #12]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	781a      	ldrb	r2, [r3, #0]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	b298      	uxth	r0, r3
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	4603      	mov	r3, r0
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 fa4e 	bl	800385a <USB_WritePacket>
 80033be:	e0e6      	b.n	800358e <USB_EPStartXfer+0x476>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */  
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ce:	4619      	mov	r1, r3
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	015a      	lsls	r2, r3, #5
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4413      	add	r3, r2
 80033da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	0cdb      	lsrs	r3, r3, #19
 80033e2:	04db      	lsls	r3, r3, #19
 80033e4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f4:	4619      	mov	r1, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800340a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800340e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d12b      	bne.n	8003470 <USB_EPStartXfer+0x358>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4413      	add	r3, r2
 8003422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003426:	4619      	mov	r1, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	015a      	lsls	r2, r3, #5
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	4413      	add	r3, r2
 8003432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003436:	691a      	ldr	r2, [r3, #16]
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003440:	4313      	orrs	r3, r2
 8003442:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4413      	add	r3, r2
 800344e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003452:	4619      	mov	r1, r3
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	015a      	lsls	r2, r3, #5
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4413      	add	r3, r2
 800345e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003468:	610b      	str	r3, [r1, #16]
 800346a:	e03c      	b.n	80034e6 <USB_EPStartXfer+0x3ce>
 800346c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	695a      	ldr	r2, [r3, #20]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	4413      	add	r3, r2
 800347a:	1e5a      	subs	r2, r3, #1
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	fbb2 f3f3 	udiv	r3, r2, r3
 8003484:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4413      	add	r3, r2
 8003490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003494:	4619      	mov	r1, r3
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	015a      	lsls	r2, r3, #5
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a4:	691a      	ldr	r2, [r3, #16]
 80034a6:	8afb      	ldrh	r3, [r7, #22]
 80034a8:	04db      	lsls	r3, r3, #19
 80034aa:	4618      	mov	r0, r3
 80034ac:	4b3a      	ldr	r3, [pc, #232]	; (8003598 <USB_EPStartXfer+0x480>)
 80034ae:	4003      	ands	r3, r0
 80034b0:	4313      	orrs	r3, r2
 80034b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	015a      	lsls	r2, r3, #5
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	4413      	add	r3, r2
 80034be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c2:	4618      	mov	r0, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	015a      	lsls	r2, r3, #5
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4413      	add	r3, r2
 80034ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	8af9      	ldrh	r1, [r7, #22]
 80034da:	fb01 f303 	mul.w	r3, r1, r3
 80034de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e2:	4313      	orrs	r3, r2
 80034e4:	6103      	str	r3, [r0, #16]
    }

    if (dma == 1U)
 80034e6:	79fb      	ldrb	r3, [r7, #7]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d10a      	bne.n	8003502 <USB_EPStartXfer+0x3ea>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	015a      	lsls	r2, r3, #5
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4413      	add	r3, r2
 80034f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034fa:	461a      	mov	r2, r3
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	6153      	str	r3, [r2, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	78db      	ldrb	r3, [r3, #3]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d12e      	bne.n	8003568 <USB_EPStartXfer+0x450>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003516:	2b00      	cmp	r3, #0
 8003518:	d113      	bne.n	8003542 <USB_EPStartXfer+0x42a>
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4413      	add	r3, r2
 8003524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003528:	4619      	mov	r1, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4413      	add	r3, r2
 8003534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800353e:	600b      	str	r3, [r1, #0]
 8003540:	e012      	b.n	8003568 <USB_EPStartXfer+0x450>
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	015a      	lsls	r2, r3, #5
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4413      	add	r3, r2
 800354c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003550:	4619      	mov	r1, r3
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4413      	add	r3, r2
 800355c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003566:	600b      	str	r3, [r1, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	015a      	lsls	r2, r3, #5
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4413      	add	r3, r2
 8003572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003576:	4619      	mov	r1, r3
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	4413      	add	r3, r2
 8003582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800358c:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	1ff80000 	.word	0x1ff80000

0800359c <USB_EP0StartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	4613      	mov	r3, r2
 80035a8:	71fb      	strb	r3, [r7, #7]
  /* IN endpoint */
  if (ep->is_in == 1U)
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	785b      	ldrb	r3, [r3, #1]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	f040 80d2 	bne.w	8003758 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d13b      	bne.n	8003634 <USB_EP0StartXfer+0x98>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ca:	4619      	mov	r1, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80035e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80035e4:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035f4:	4619      	mov	r1, r3
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	015a      	lsls	r2, r3, #5
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4413      	add	r3, r2
 8003600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800360a:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4413      	add	r3, r2
 8003616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800361a:	4619      	mov	r1, r3
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	015a      	lsls	r2, r3, #5
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4413      	add	r3, r2
 8003626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	0cdb      	lsrs	r3, r3, #19
 800362e:	04db      	lsls	r3, r3, #19
 8003630:	610b      	str	r3, [r1, #16]
 8003632:	e05a      	b.n	80036ea <USB_EP0StartXfer+0x14e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	015a      	lsls	r2, r3, #5
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4413      	add	r3, r2
 800363e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003642:	4619      	mov	r1, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4413      	add	r3, r2
 800364e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	0cdb      	lsrs	r3, r3, #19
 8003656:	04db      	lsls	r3, r3, #19
 8003658:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4413      	add	r3, r2
 8003664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003668:	4619      	mov	r1, r3
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	015a      	lsls	r2, r3, #5
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4413      	add	r3, r2
 8003674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800367e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003682:	610b      	str	r3, [r1, #16]
      
      if(ep->xfer_len > ep->maxpacket)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	695a      	ldr	r2, [r3, #20]
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	429a      	cmp	r2, r3
 800368e:	d903      	bls.n	8003698 <USB_EP0StartXfer+0xfc>
      {
        ep->xfer_len = ep->maxpacket;
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a6:	4619      	mov	r1, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036bc:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	015a      	lsls	r2, r3, #5
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036cc:	4619      	mov	r1, r3
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036dc:	691a      	ldr	r2, [r3, #16]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036e6:	4313      	orrs	r3, r2
 80036e8:	610b      	str	r3, [r1, #16]
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f8:	4619      	mov	r1, r3
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	015a      	lsls	r2, r3, #5
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4413      	add	r3, r2
 8003704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800370e:	600b      	str	r3, [r1, #0]
    
    if (dma == 1)
 8003710:	79fb      	ldrb	r3, [r7, #7]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d10b      	bne.n	800372e <USB_EP0StartXfer+0x192>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4413      	add	r3, r2
 8003720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003724:	461a      	mov	r2, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	6153      	str	r3, [r2, #20]
 800372c:	e08e      	b.n	800384c <USB_EP0StartXfer+0x2b0>
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 808a 	beq.w	800384c <USB_EP0StartXfer+0x2b0>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800373e:	4619      	mov	r1, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	2301      	movs	r3, #1
 8003750:	4083      	lsls	r3, r0
 8003752:	4313      	orrs	r3, r2
 8003754:	634b      	str	r3, [r1, #52]	; 0x34
 8003756:	e079      	b.n	800384c <USB_EP0StartXfer+0x2b0>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	015a      	lsls	r2, r3, #5
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	4413      	add	r3, r2
 8003762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003766:	4619      	mov	r1, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	015a      	lsls	r2, r3, #5
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4413      	add	r3, r2
 8003772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	0cdb      	lsrs	r3, r3, #19
 800377a:	04db      	lsls	r3, r3, #19
 800377c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4413      	add	r3, r2
 8003788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800378c:	4619      	mov	r1, r3
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4413      	add	r3, r2
 8003798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80037a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80037a6:	610b      	str	r3, [r1, #16]
      
    if (ep->xfer_len > 0U)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <USB_EP0StartXfer+0x21c>
    {
      ep->xfer_len = ep->maxpacket;
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	615a      	str	r2, [r3, #20]
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c6:	4619      	mov	r1, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80037dc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ec:	4619      	mov	r1, r3
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037fc:	691a      	ldr	r2, [r3, #16]
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003806:	4313      	orrs	r3, r2
 8003808:	610b      	str	r3, [r1, #16]
    

    if (dma == 1U)
 800380a:	79fb      	ldrb	r3, [r7, #7]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d10a      	bne.n	8003826 <USB_EP0StartXfer+0x28a>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4413      	add	r3, r2
 800381a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800381e:	461a      	mov	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	6153      	str	r3, [r2, #20]
    }
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4413      	add	r3, r2
 8003830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003834:	4619      	mov	r1, r3
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4413      	add	r3, r2
 8003840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800384a:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800385a:	b480      	push	{r7}
 800385c:	b087      	sub	sp, #28
 800385e:	af00      	add	r7, sp, #0
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	4611      	mov	r1, r2
 8003866:	461a      	mov	r2, r3
 8003868:	460b      	mov	r3, r1
 800386a:	71fb      	strb	r3, [r7, #7]
 800386c:	4613      	mov	r3, r2
 800386e:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b = 0U , i = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	613b      	str	r3, [r7, #16]
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]
  
  if (dma == 0U)
 8003878:	f897 3020 	ldrb.w	r3, [r7, #32]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d11a      	bne.n	80038b6 <USB_WritePacket+0x5c>
  {
    count32b =  (len + 3U) / 4U;
 8003880:	88bb      	ldrh	r3, [r7, #4]
 8003882:	3303      	adds	r3, #3
 8003884:	089b      	lsrs	r3, r3, #2
 8003886:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++, src += 4U)
 8003888:	2300      	movs	r3, #0
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	e00f      	b.n	80038ae <USB_WritePacket+0x54>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	031a      	lsls	r2, r3, #12
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4413      	add	r3, r2
 8003896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800389a:	461a      	mov	r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6013      	str	r3, [r2, #0]
    for (i = 0U; i < count32b; i++, src += 4U)
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	3301      	adds	r3, #1
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	3304      	adds	r3, #4
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d3eb      	bcc.n	800388e <USB_WritePacket+0x34>
    }
  }
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	371c      	adds	r7, #28
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	4613      	mov	r3, r2
 80038d0:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3U) / 4U;
 80038d6:	88fb      	ldrh	r3, [r7, #6]
 80038d8:	3303      	adds	r3, #3
 80038da:	089b      	lsrs	r3, r3, #2
 80038dc:	613b      	str	r3, [r7, #16]
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	e00b      	b.n	80038fc <USB_ReadPacket+0x38>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	601a      	str	r2, [r3, #0]
  for ( i = 0U; i < count32b; i++, dest += 4U )
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	3301      	adds	r3, #1
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	3304      	adds	r3, #4
 80038fa:	60bb      	str	r3, [r7, #8]
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	429a      	cmp	r2, r3
 8003902:	d3ef      	bcc.n	80038e4 <USB_ReadPacket+0x20>
    
  }
  return ((void *)dest);
 8003904:	68bb      	ldr	r3, [r7, #8]
}
 8003906:	4618      	mov	r0, r3
 8003908:	371c      	adds	r7, #28
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	785b      	ldrb	r3, [r3, #1]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d130      	bne.n	8003986 <USB_EPSetStall+0x74>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4413      	add	r3, r2
 800392e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	db12      	blt.n	800395e <USB_EPSetStall+0x4c>
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS); 
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4413      	add	r3, r2
 8003942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003946:	4619      	mov	r1, r3
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4413      	add	r3, r2
 8003952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800395c:	600b      	str	r3, [r1, #0]
    } 
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4413      	add	r3, r2
 8003968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800396c:	4619      	mov	r1, r3
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4413      	add	r3, r2
 8003978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003982:	600b      	str	r3, [r1, #0]
 8003984:	e02f      	b.n	80039e6 <USB_EPSetStall+0xd4>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	db12      	blt.n	80039c0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a8:	4619      	mov	r1, r3
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80039be:	600b      	str	r3, [r1, #0]
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ce:	4619      	mov	r1, r3
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039e4:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	785b      	ldrb	r3, [r3, #1]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d12e      	bne.n	8003a64 <USB_EPClearStall+0x70>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a14:	4619      	mov	r1, r3
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a2a:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	78db      	ldrb	r3, [r3, #3]
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	d003      	beq.n	8003a3c <USB_EPClearStall+0x48>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	78db      	ldrb	r3, [r3, #3]
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d141      	bne.n	8003ac0 <USB_EPClearStall+0xcc>
    {
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a60:	600b      	str	r3, [r1, #0]
 8003a62:	e02d      	b.n	8003ac0 <USB_EPClearStall+0xcc>
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	015a      	lsls	r2, r3, #5
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a72:	4619      	mov	r1, r3
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	015a      	lsls	r2, r3, #5
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a88:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	78db      	ldrb	r3, [r3, #3]
 8003a8e:	2b03      	cmp	r3, #3
 8003a90:	d003      	beq.n	8003a9a <USB_EPClearStall+0xa6>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	78db      	ldrb	r3, [r3, #3]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d112      	bne.n	8003ac0 <USB_EPClearStall+0xcc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003abe:	600b      	str	r3, [r1, #0]
    }    
  }
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003aee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af6:	4619      	mov	r1, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	600b      	str	r3, [r1, #0]
  
  return HAL_OK;  
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b082      	sub	sp, #8
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b28:	461a      	mov	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f023 0302 	bic.w	r3, r3, #2
 8003b36:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003b38:	2003      	movs	r0, #3
 8003b3a:	f7fc fd2d 	bl	8000598 <HAL_Delay>
  
  return HAL_OK;  
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b56:	461a      	mov	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f043 0302 	orr.w	r3, r3, #2
 8003b64:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003b66:	2003      	movs	r0, #3
 8003b68:	f7fc fd16 	bl	8000598 <HAL_Delay>
  
  return HAL_OK;  
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b085      	sub	sp, #20
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  uint32_t v = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
  
  v = USBx->GINTSTS;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]
  return v;  
 8003b92:	68fb      	ldr	r3, [r7, #12]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000U) >> 16U);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	0c1b      	lsrs	r3, r3, #16
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4013      	ands	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]
  return ((v & 0xFFFFU));
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	b29b      	uxth	r3, r3
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8003c0c:	78fb      	ldrb	r3, [r7, #3]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DOEPMSK;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	4013      	ands	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]
  return v;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	460b      	mov	r3, r1
 8003c42:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	617b      	str	r3, [r7, #20]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c56:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8003c58:	78fb      	ldrb	r3, [r7, #3]
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c60:	01db      	lsls	r3, r3, #7
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	617b      	str	r3, [r7, #20]
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8003c6a:	78fb      	ldrb	r3, [r7, #3]
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]
  return v;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	371c      	adds	r7, #28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1U);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	f003 0301 	and.w	r3, r3, #1
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003cc4:	f023 0307 	bic.w	r3, r3, #7
 8003cc8:	6013      	str	r3, [r2, #0]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 0306 	and.w	r3, r3, #6
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d10a      	bne.n	8003cf0 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f043 0303 	orr.w	r3, r3, #3
 8003cee:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	607a      	str	r2, [r7, #4]
 8003d20:	72fb      	strb	r3, [r7, #11]
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d28:	461a      	mov	r2, r3
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d34:	461a      	mov	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d42:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	f043 0318 	orr.w	r3, r3, #24
 8003d58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d60:	461a      	mov	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8003d6e:	6113      	str	r3, [r2, #16]
  
  if (dma == 1U)
 8003d70:	7afb      	ldrb	r3, [r7, #11]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d10c      	bne.n	8003d90 <USB_EP0_OutStart+0x7c>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d88:	461a      	mov	r2, r3
 8003d8a:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 8003d8e:	6013      	str	r3, [r2, #0]
  }
  
  return HAL_OK;  
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
	...

08003da0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	3301      	adds	r3, #1
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4a13      	ldr	r2, [pc, #76]	; (8003e04 <USB_CoreReset+0x64>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d901      	bls.n	8003dbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e01b      	b.n	8003df6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	daf2      	bge.n	8003dac <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f043 0201 	orr.w	r2, r3, #1
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4a09      	ldr	r2, [pc, #36]	; (8003e04 <USB_CoreReset+0x64>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d901      	bls.n	8003de8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e006      	b.n	8003df6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d0f0      	beq.n	8003dd6 <USB_CoreReset+0x36>
  
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	00030d40 	.word	0x00030d40

08003e08 <MX_USB_DEVICE_Init>:
#include "usbd_rndis_if.h"

USBD_HandleTypeDef hUsbDeviceFS;

void MX_USB_DEVICE_Init(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
	USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	490b      	ldr	r1, [pc, #44]	; (8003e3c <MX_USB_DEVICE_Init+0x34>)
 8003e10:	480b      	ldr	r0, [pc, #44]	; (8003e40 <MX_USB_DEVICE_Init+0x38>)
 8003e12:	f002 fcb4 	bl	800677e <USBD_Init>

//	USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC);
//	USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
//	USBD_COMPOSITE_RegisterClass(&hUsbDeviceFS, 0x08, 0x06, 0x50);

	USBD_RegisterClass(&hUsbDeviceFS, &USBD_RNDIS);
 8003e16:	490b      	ldr	r1, [pc, #44]	; (8003e44 <MX_USB_DEVICE_Init+0x3c>)
 8003e18:	4809      	ldr	r0, [pc, #36]	; (8003e40 <MX_USB_DEVICE_Init+0x38>)
 8003e1a:	f002 fcdb 	bl	80067d4 <USBD_RegisterClass>
	USBD_RNDIS_RegisterInterface(&hUsbDeviceFS, &USBD_RNDIS_Interface_fops_FS);
 8003e1e:	490a      	ldr	r1, [pc, #40]	; (8003e48 <MX_USB_DEVICE_Init+0x40>)
 8003e20:	4807      	ldr	r0, [pc, #28]	; (8003e40 <MX_USB_DEVICE_Init+0x38>)
 8003e22:	f002 fc2b 	bl	800667c <USBD_RNDIS_RegisterInterface>
	USBD_COMPOSITE_RegisterClass(&hUsbDeviceFS, 0xE0, 0x01, 0x03);
 8003e26:	2303      	movs	r3, #3
 8003e28:	2201      	movs	r2, #1
 8003e2a:	21e0      	movs	r1, #224	; 0xe0
 8003e2c:	4804      	ldr	r0, [pc, #16]	; (8003e40 <MX_USB_DEVICE_Init+0x38>)
 8003e2e:	f001 ff53 	bl	8005cd8 <USBD_COMPOSITE_RegisterClass>

	USBD_Start(&hUsbDeviceFS);
 8003e32:	4803      	ldr	r0, [pc, #12]	; (8003e40 <MX_USB_DEVICE_Init+0x38>)
 8003e34:	f002 fce8 	bl	8006808 <USBD_Start>

}
 8003e38:	bf00      	nop
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	20000004 	.word	0x20000004
 8003e40:	20005780 	.word	0x20005780
 8003e44:	200000b4 	.word	0x200000b4
 8003e48:	2000003c 	.word	0x2000003c

08003e4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b088      	sub	sp, #32
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e5c:	d139      	bne.n	8003ed2 <HAL_PCD_MspInit+0x86>
	    PA8     ------> USB_OTG_FS_SOF
	    PA9     ------> USB_OTG_FS_VBUS
	    PA11     ------> USB_OTG_FS_DM
	    PA12     ------> USB_OTG_FS_DP
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8003e5e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003e62:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e64:	2302      	movs	r3, #2
 8003e66:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003e70:	230a      	movs	r3, #10
 8003e72:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e74:	f107 030c 	add.w	r3, r7, #12
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4818      	ldr	r0, [pc, #96]	; (8003edc <HAL_PCD_MspInit+0x90>)
 8003e7c:	f7fc fcd6 	bl	800082c <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e84:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e86:	2300      	movs	r3, #0
 8003e88:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e8e:	f107 030c 	add.w	r3, r7, #12
 8003e92:	4619      	mov	r1, r3
 8003e94:	4811      	ldr	r0, [pc, #68]	; (8003edc <HAL_PCD_MspInit+0x90>)
 8003e96:	f7fc fcc9 	bl	800082c <HAL_GPIO_Init>

	    /* Peripheral clock enable */
	    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003e9a:	4a11      	ldr	r2, [pc, #68]	; (8003ee0 <HAL_PCD_MspInit+0x94>)
 8003e9c:	4b10      	ldr	r3, [pc, #64]	; (8003ee0 <HAL_PCD_MspInit+0x94>)
 8003e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ea4:	6353      	str	r3, [r2, #52]	; 0x34
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	4a0d      	ldr	r2, [pc, #52]	; (8003ee0 <HAL_PCD_MspInit+0x94>)
 8003eac:	4b0c      	ldr	r3, [pc, #48]	; (8003ee0 <HAL_PCD_MspInit+0x94>)
 8003eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8003eb6:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <HAL_PCD_MspInit+0x94>)
 8003eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ebe:	60bb      	str	r3, [r7, #8]
 8003ec0:	68bb      	ldr	r3, [r7, #8]

	    /* Peripheral interrupt init */
	    HAL_NVIC_SetPriority(OTG_FS_IRQn, 7, 0);
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	2107      	movs	r1, #7
 8003ec6:	2043      	movs	r0, #67	; 0x43
 8003ec8:	f7fc fc5d 	bl	8000786 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003ecc:	2043      	movs	r0, #67	; 0x43
 8003ece:	f7fc fc76 	bl	80007be <HAL_NVIC_EnableIRQ>
	  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

	  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003ed2:	bf00      	nop
 8003ed4:	3720      	adds	r7, #32
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	40020000 	.word	0x40020000
 8003ee0:	40023800 	.word	0x40023800

08003ee4 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8d3 23ec 	ldr.w	r2, [r3, #1004]	; 0x3ec
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4610      	mov	r0, r2
 8003efc:	f002 fccd 	bl	800689a <USBD_LL_SetupStage>
}
 8003f00:	bf00      	nop
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	460b      	mov	r3, r1
 8003f12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	; 0x3ec
 8003f1a:	78fa      	ldrb	r2, [r7, #3]
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	1a9b      	subs	r3, r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	78fb      	ldrb	r3, [r7, #3]
 8003f30:	4619      	mov	r1, r3
 8003f32:	f002 fcfc 	bl	800692e <USBD_LL_DataOutStage>
}
 8003f36:	bf00      	nop
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b082      	sub	sp, #8
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
 8003f46:	460b      	mov	r3, r1
 8003f48:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	; 0x3ec
 8003f50:	78fa      	ldrb	r2, [r7, #3]
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	4613      	mov	r3, r2
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	1a9b      	subs	r3, r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	3344      	adds	r3, #68	; 0x44
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	78fb      	ldrb	r3, [r7, #3]
 8003f64:	4619      	mov	r1, r3
 8003f66:	f002 fd3d 	bl	80069e4 <USBD_LL_DataInStage>
}
 8003f6a:	bf00      	nop
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b082      	sub	sp, #8
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003f80:	4618      	mov	r0, r3
 8003f82:	f002 fe23 	bl	8006bcc <USBD_LL_SOF>
}
 8003f86:	bf00      	nop
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b084      	sub	sp, #16
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8003f96:	2301      	movs	r3, #1
 8003f98:	73fb      	strb	r3, [r7, #15]

  /*Set USB Current Speed*/
  switch (hpcd->Init.speed)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <HAL_PCD_ResetCallback+0x1a>
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d003      	beq.n	8003fae <HAL_PCD_ResetCallback+0x20>
 8003fa6:	e005      	b.n	8003fb4 <HAL_PCD_ResetCallback+0x26>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	73fb      	strb	r3, [r7, #15]
    break;
 8003fac:	e005      	b.n	8003fba <HAL_PCD_ResetCallback+0x2c>
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;    
 8003fae:	2301      	movs	r3, #1
 8003fb0:	73fb      	strb	r3, [r7, #15]
    break;
 8003fb2:	e002      	b.n	8003fba <HAL_PCD_ResetCallback+0x2c>
	
  default:
    speed = USBD_SPEED_FULL;    
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	73fb      	strb	r3, [r7, #15]
    break;    
 8003fb8:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003fc0:	7bfa      	ldrb	r2, [r7, #15]
 8003fc2:	4611      	mov	r1, r2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f002 fdcb 	bl	8006b60 <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f002 fd96 	bl	8006b02 <USBD_LL_Reset>
}
 8003fd6:	bf00      	nop
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{  
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
   /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f002 fdc6 	bl	8006b80 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f043 0301 	orr.w	r3, r3, #1
 800400c:	6013      	str	r3, [r2, #0]
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_PCD_SuspendCallback+0x42>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004016:	4a05      	ldr	r2, [pc, #20]	; (800402c <HAL_PCD_SuspendCallback+0x4c>)
 8004018:	4b04      	ldr	r3, [pc, #16]	; (800402c <HAL_PCD_SuspendCallback+0x4c>)
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	f043 0306 	orr.w	r3, r3, #6
 8004020:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8004022:	bf00      	nop
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	e000ed00 	.word	0xe000ed00

08004030 <HAL_PCD_ResumeCallback>:
    When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800403e:	4618      	mov	r0, r3
 8004040:	f002 fdb3 	bl	8006baa <USBD_LL_Resume>
  
}
 8004044:	bf00      	nop
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	460b      	mov	r3, r1
 8004056:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800405e:	78fa      	ldrb	r2, [r7, #3]
 8004060:	4611      	mov	r1, r2
 8004062:	4618      	mov	r0, r3
 8004064:	f002 fdd9 	bl	8006c1a <USBD_LL_IsoOUTIncomplete>
}
 8004068:	bf00      	nop
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8004082:	78fa      	ldrb	r2, [r7, #3]
 8004084:	4611      	mov	r1, r2
 8004086:	4618      	mov	r0, r3
 8004088:	f002 fdba 	bl	8006c00 <USBD_LL_IsoINIncomplete>
}
 800408c:	bf00      	nop
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80040a2:	4618      	mov	r0, r3
 80040a4:	f002 fdc6 	bl	8006c34 <USBD_LL_DevConnected>
}
 80040a8:	bf00      	nop
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80040be:	4618      	mov	r0, r3
 80040c0:	f002 fdc3 	bl	8006c4a <USBD_LL_DevDisconnected>
}
 80040c4:	bf00      	nop
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (pdev->id == DEVICE_FS) {
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d14c      	bne.n	8004176 <USBD_LL_Init+0xaa>
  /* Link The driver to the stack */	
  hpcd_USB_OTG_FS.pData = pdev;
 80040dc:	4a28      	ldr	r2, [pc, #160]	; (8004180 <USBD_LL_Init+0xb4>)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
  pdev->pData = &hpcd_USB_OTG_FS; 
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a26      	ldr	r2, [pc, #152]	; (8004180 <USBD_LL_Init+0xb4>)
 80040e8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80040ec:	4b24      	ldr	r3, [pc, #144]	; (8004180 <USBD_LL_Init+0xb4>)
 80040ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80040f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80040f4:	4b22      	ldr	r3, [pc, #136]	; (8004180 <USBD_LL_Init+0xb4>)
 80040f6:	2204      	movs	r2, #4
 80040f8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80040fa:	4b21      	ldr	r3, [pc, #132]	; (8004180 <USBD_LL_Init+0xb4>)
 80040fc:	2202      	movs	r2, #2
 80040fe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004100:	4b1f      	ldr	r3, [pc, #124]	; (8004180 <USBD_LL_Init+0xb4>)
 8004102:	2200      	movs	r2, #0
 8004104:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8004106:	4b1e      	ldr	r3, [pc, #120]	; (8004180 <USBD_LL_Init+0xb4>)
 8004108:	2200      	movs	r2, #0
 800410a:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800410c:	4b1c      	ldr	r3, [pc, #112]	; (8004180 <USBD_LL_Init+0xb4>)
 800410e:	2202      	movs	r2, #2
 8004110:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004112:	4b1b      	ldr	r3, [pc, #108]	; (8004180 <USBD_LL_Init+0xb4>)
 8004114:	2200      	movs	r2, #0
 8004116:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004118:	4b19      	ldr	r3, [pc, #100]	; (8004180 <USBD_LL_Init+0xb4>)
 800411a:	2200      	movs	r2, #0
 800411c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800411e:	4b18      	ldr	r3, [pc, #96]	; (8004180 <USBD_LL_Init+0xb4>)
 8004120:	2200      	movs	r2, #0
 8004122:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8004124:	4b16      	ldr	r3, [pc, #88]	; (8004180 <USBD_LL_Init+0xb4>)
 8004126:	2201      	movs	r2, #1
 8004128:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800412a:	4b15      	ldr	r3, [pc, #84]	; (8004180 <USBD_LL_Init+0xb4>)
 800412c:	2200      	movs	r2, #0
 800412e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004130:	4813      	ldr	r0, [pc, #76]	; (8004180 <USBD_LL_Init+0xb4>)
 8004132:	f7fc fd28 	bl	8000b86 <HAL_PCD_Init>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d004      	beq.n	8004146 <USBD_LL_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800413c:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004140:	4810      	ldr	r0, [pc, #64]	; (8004184 <USBD_LL_Init+0xb8>)
 8004142:	f00c fc8f 	bl	8010a64 <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8004146:	2180      	movs	r1, #128	; 0x80
 8004148:	480d      	ldr	r0, [pc, #52]	; (8004180 <USBD_LL_Init+0xb4>)
 800414a:	f7fd fdc1 	bl	8001cd0 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800414e:	2240      	movs	r2, #64	; 0x40
 8004150:	2100      	movs	r1, #0
 8004152:	480b      	ldr	r0, [pc, #44]	; (8004180 <USBD_LL_Init+0xb4>)
 8004154:	f7fd fd71 	bl	8001c3a <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x40);
 8004158:	2240      	movs	r2, #64	; 0x40
 800415a:	2101      	movs	r1, #1
 800415c:	4808      	ldr	r0, [pc, #32]	; (8004180 <USBD_LL_Init+0xb4>)
 800415e:	f7fd fd6c 	bl	8001c3a <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 2, 0x40);
 8004162:	2240      	movs	r2, #64	; 0x40
 8004164:	2102      	movs	r1, #2
 8004166:	4806      	ldr	r0, [pc, #24]	; (8004180 <USBD_LL_Init+0xb4>)
 8004168:	f7fd fd67 	bl	8001c3a <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 3, 0x40);
 800416c:	2240      	movs	r2, #64	; 0x40
 800416e:	2103      	movs	r1, #3
 8004170:	4803      	ldr	r0, [pc, #12]	; (8004180 <USBD_LL_Init+0xb4>)
 8004172:	f7fd fd62 	bl	8001c3a <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	200059a4 	.word	0x200059a4
 8004184:	08011084 	.word	0x08011084

08004188 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004190:	2300      	movs	r3, #0
 8004192:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004194:	2300      	movs	r3, #0
 8004196:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fc fdf8 	bl	8000d94 <HAL_PCD_Start>
 80041a4:	4603      	mov	r3, r0
 80041a6:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80041a8:	7bbb      	ldrb	r3, [r7, #14]
 80041aa:	2b03      	cmp	r3, #3
 80041ac:	d816      	bhi.n	80041dc <USBD_LL_Start+0x54>
 80041ae:	a201      	add	r2, pc, #4	; (adr r2, 80041b4 <USBD_LL_Start+0x2c>)
 80041b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b4:	080041c5 	.word	0x080041c5
 80041b8:	080041cb 	.word	0x080041cb
 80041bc:	080041d1 	.word	0x080041d1
 80041c0:	080041d7 	.word	0x080041d7
    case HAL_OK :
      usb_status = USBD_OK;
 80041c4:	2300      	movs	r3, #0
 80041c6:	73fb      	strb	r3, [r7, #15]
    break;
 80041c8:	e00b      	b.n	80041e2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80041ca:	2302      	movs	r3, #2
 80041cc:	73fb      	strb	r3, [r7, #15]
    break;
 80041ce:	e008      	b.n	80041e2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80041d0:	2301      	movs	r3, #1
 80041d2:	73fb      	strb	r3, [r7, #15]
    break;
 80041d4:	e005      	b.n	80041e2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80041d6:	2302      	movs	r3, #2
 80041d8:	73fb      	strb	r3, [r7, #15]
    break;
 80041da:	e002      	b.n	80041e2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80041dc:	2302      	movs	r3, #2
 80041de:	73fb      	strb	r3, [r7, #15]
    break;
 80041e0:	bf00      	nop
  }
  return usb_status;  
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	4608      	mov	r0, r1
 80041f6:	4611      	mov	r1, r2
 80041f8:	461a      	mov	r2, r3
 80041fa:	4603      	mov	r3, r0
 80041fc:	70fb      	strb	r3, [r7, #3]
 80041fe:	460b      	mov	r3, r1
 8004200:	70bb      	strb	r3, [r7, #2]
 8004202:	4613      	mov	r3, r2
 8004204:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	73fb      	strb	r3, [r7, #15]

  ep_addr=USBD_COMPOSITE_LL_EP_Conversion(pdev, ep_addr);
 800420e:	78fb      	ldrb	r3, [r7, #3]
 8004210:	4619      	mov	r1, r3
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f001 ffea 	bl	80061ec <USBD_COMPOSITE_LL_EP_Conversion>
 8004218:	4603      	mov	r3, r0
 800421a:	70fb      	strb	r3, [r7, #3]

  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8004222:	78bb      	ldrb	r3, [r7, #2]
 8004224:	883a      	ldrh	r2, [r7, #0]
 8004226:	78f9      	ldrb	r1, [r7, #3]
 8004228:	f7fd fa81 	bl	800172e <HAL_PCD_EP_Open>
 800422c:	4603      	mov	r3, r0
 800422e:	73bb      	strb	r3, [r7, #14]
                               ep_addr, 
                               ep_mps, 
                               ep_type);
  
     
  switch (hal_status) {
 8004230:	7bbb      	ldrb	r3, [r7, #14]
 8004232:	2b03      	cmp	r3, #3
 8004234:	d816      	bhi.n	8004264 <USBD_LL_OpenEP+0x78>
 8004236:	a201      	add	r2, pc, #4	; (adr r2, 800423c <USBD_LL_OpenEP+0x50>)
 8004238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423c:	0800424d 	.word	0x0800424d
 8004240:	08004253 	.word	0x08004253
 8004244:	08004259 	.word	0x08004259
 8004248:	0800425f 	.word	0x0800425f
    case HAL_OK :
      usb_status = USBD_OK;
 800424c:	2300      	movs	r3, #0
 800424e:	73fb      	strb	r3, [r7, #15]
    break;
 8004250:	e00b      	b.n	800426a <USBD_LL_OpenEP+0x7e>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004252:	2302      	movs	r3, #2
 8004254:	73fb      	strb	r3, [r7, #15]
    break;
 8004256:	e008      	b.n	800426a <USBD_LL_OpenEP+0x7e>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8004258:	2301      	movs	r3, #1
 800425a:	73fb      	strb	r3, [r7, #15]
    break;
 800425c:	e005      	b.n	800426a <USBD_LL_OpenEP+0x7e>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800425e:	2302      	movs	r3, #2
 8004260:	73fb      	strb	r3, [r7, #15]
    break;
 8004262:	e002      	b.n	800426a <USBD_LL_OpenEP+0x7e>
    default :
      usb_status = USBD_FAIL;
 8004264:	2302      	movs	r3, #2
 8004266:	73fb      	strb	r3, [r7, #15]
    break;
 8004268:	bf00      	nop
  }
  return usb_status; 
 800426a:	7bfb      	ldrb	r3, [r7, #15]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	460b      	mov	r3, r1
 800427e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004280:	2300      	movs	r3, #0
 8004282:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	73fb      	strb	r3, [r7, #15]
  
  ep_addr=USBD_COMPOSITE_LL_EP_Conversion(pdev, ep_addr);
 8004288:	78fb      	ldrb	r3, [r7, #3]
 800428a:	4619      	mov	r1, r3
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f001 ffad 	bl	80061ec <USBD_COMPOSITE_LL_EP_Conversion>
 8004292:	4603      	mov	r3, r0
 8004294:	70fb      	strb	r3, [r7, #3]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800429c:	78fa      	ldrb	r2, [r7, #3]
 800429e:	4611      	mov	r1, r2
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fd faac 	bl	80017fe <HAL_PCD_EP_Close>
 80042a6:	4603      	mov	r3, r0
 80042a8:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 80042aa:	7bbb      	ldrb	r3, [r7, #14]
 80042ac:	2b03      	cmp	r3, #3
 80042ae:	d817      	bhi.n	80042e0 <USBD_LL_CloseEP+0x6c>
 80042b0:	a201      	add	r2, pc, #4	; (adr r2, 80042b8 <USBD_LL_CloseEP+0x44>)
 80042b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b6:	bf00      	nop
 80042b8:	080042c9 	.word	0x080042c9
 80042bc:	080042cf 	.word	0x080042cf
 80042c0:	080042d5 	.word	0x080042d5
 80042c4:	080042db 	.word	0x080042db
    case HAL_OK :
      usb_status = USBD_OK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	73fb      	strb	r3, [r7, #15]
    break;
 80042cc:	e00b      	b.n	80042e6 <USBD_LL_CloseEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80042ce:	2302      	movs	r3, #2
 80042d0:	73fb      	strb	r3, [r7, #15]
    break;
 80042d2:	e008      	b.n	80042e6 <USBD_LL_CloseEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80042d4:	2301      	movs	r3, #1
 80042d6:	73fb      	strb	r3, [r7, #15]
    break;
 80042d8:	e005      	b.n	80042e6 <USBD_LL_CloseEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80042da:	2302      	movs	r3, #2
 80042dc:	73fb      	strb	r3, [r7, #15]
    break;
 80042de:	e002      	b.n	80042e6 <USBD_LL_CloseEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80042e0:	2302      	movs	r3, #2
 80042e2:	73fb      	strb	r3, [r7, #15]
    break;
 80042e4:	bf00      	nop
  }
  return usb_status;  
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	460b      	mov	r3, r1
 80042fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80042fc:	2300      	movs	r3, #0
 80042fe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004300:	2300      	movs	r3, #0
 8004302:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800430a:	78fa      	ldrb	r2, [r7, #3]
 800430c:	4611      	mov	r1, r2
 800430e:	4618      	mov	r0, r3
 8004310:	f7fd fb6b 	bl	80019ea <HAL_PCD_EP_SetStall>
 8004314:	4603      	mov	r3, r0
 8004316:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8004318:	7bbb      	ldrb	r3, [r7, #14]
 800431a:	2b03      	cmp	r3, #3
 800431c:	d816      	bhi.n	800434c <USBD_LL_StallEP+0x5c>
 800431e:	a201      	add	r2, pc, #4	; (adr r2, 8004324 <USBD_LL_StallEP+0x34>)
 8004320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004324:	08004335 	.word	0x08004335
 8004328:	0800433b 	.word	0x0800433b
 800432c:	08004341 	.word	0x08004341
 8004330:	08004347 	.word	0x08004347
    case HAL_OK :
      usb_status = USBD_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	73fb      	strb	r3, [r7, #15]
    break;
 8004338:	e00b      	b.n	8004352 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800433a:	2302      	movs	r3, #2
 800433c:	73fb      	strb	r3, [r7, #15]
    break;
 800433e:	e008      	b.n	8004352 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8004340:	2301      	movs	r3, #1
 8004342:	73fb      	strb	r3, [r7, #15]
    break;
 8004344:	e005      	b.n	8004352 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8004346:	2302      	movs	r3, #2
 8004348:	73fb      	strb	r3, [r7, #15]
    break;
 800434a:	e002      	b.n	8004352 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800434c:	2302      	movs	r3, #2
 800434e:	73fb      	strb	r3, [r7, #15]
    break;
 8004350:	bf00      	nop
  }
  return usb_status;  
 8004352:	7bfb      	ldrb	r3, [r7, #15]
}
 8004354:	4618      	mov	r0, r3
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	460b      	mov	r3, r1
 8004366:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800436c:	2300      	movs	r3, #0
 800436e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8004376:	78fa      	ldrb	r2, [r7, #3]
 8004378:	4611      	mov	r1, r2
 800437a:	4618      	mov	r0, r3
 800437c:	f7fd fb90 	bl	8001aa0 <HAL_PCD_EP_ClrStall>
 8004380:	4603      	mov	r3, r0
 8004382:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8004384:	7bbb      	ldrb	r3, [r7, #14]
 8004386:	2b03      	cmp	r3, #3
 8004388:	d816      	bhi.n	80043b8 <USBD_LL_ClearStallEP+0x5c>
 800438a:	a201      	add	r2, pc, #4	; (adr r2, 8004390 <USBD_LL_ClearStallEP+0x34>)
 800438c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004390:	080043a1 	.word	0x080043a1
 8004394:	080043a7 	.word	0x080043a7
 8004398:	080043ad 	.word	0x080043ad
 800439c:	080043b3 	.word	0x080043b3
    case HAL_OK :
      usb_status = USBD_OK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	73fb      	strb	r3, [r7, #15]
    break;
 80043a4:	e00b      	b.n	80043be <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80043a6:	2302      	movs	r3, #2
 80043a8:	73fb      	strb	r3, [r7, #15]
    break;
 80043aa:	e008      	b.n	80043be <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80043ac:	2301      	movs	r3, #1
 80043ae:	73fb      	strb	r3, [r7, #15]
    break;
 80043b0:	e005      	b.n	80043be <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80043b2:	2302      	movs	r3, #2
 80043b4:	73fb      	strb	r3, [r7, #15]
    break;
 80043b6:	e002      	b.n	80043be <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80043b8:	2302      	movs	r3, #2
 80043ba:	73fb      	strb	r3, [r7, #15]
    break;
 80043bc:	bf00      	nop
  }
  return usb_status; 
 80043be:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	460b      	mov	r3, r1
 80043d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80043da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80043dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	da0b      	bge.n	80043fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80043ea:	68f9      	ldr	r1, [r7, #12]
 80043ec:	4613      	mov	r3, r2
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	1a9b      	subs	r3, r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	333a      	adds	r3, #58	; 0x3a
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	e00b      	b.n	8004414 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80043fc:	78fb      	ldrb	r3, [r7, #3]
 80043fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004402:	68f9      	ldr	r1, [r7, #12]
 8004404:	4613      	mov	r3, r2
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	1a9b      	subs	r3, r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	440b      	add	r3, r1
 800440e:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 8004412:	781b      	ldrb	r3, [r3, #0]
  }
}
 8004414:	4618      	mov	r0, r3
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800442c:	2300      	movs	r3, #0
 800442e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004430:	2300      	movs	r3, #0
 8004432:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800443a:	78fa      	ldrb	r2, [r7, #3]
 800443c:	4611      	mov	r1, r2
 800443e:	4618      	mov	r0, r3
 8004440:	f7fd f954 	bl	80016ec <HAL_PCD_SetAddress>
 8004444:	4603      	mov	r3, r0
 8004446:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8004448:	7bbb      	ldrb	r3, [r7, #14]
 800444a:	2b03      	cmp	r3, #3
 800444c:	d816      	bhi.n	800447c <USBD_LL_SetUSBAddress+0x5c>
 800444e:	a201      	add	r2, pc, #4	; (adr r2, 8004454 <USBD_LL_SetUSBAddress+0x34>)
 8004450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004454:	08004465 	.word	0x08004465
 8004458:	0800446b 	.word	0x0800446b
 800445c:	08004471 	.word	0x08004471
 8004460:	08004477 	.word	0x08004477
    case HAL_OK :
      usb_status = USBD_OK;
 8004464:	2300      	movs	r3, #0
 8004466:	73fb      	strb	r3, [r7, #15]
    break;
 8004468:	e00b      	b.n	8004482 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800446a:	2302      	movs	r3, #2
 800446c:	73fb      	strb	r3, [r7, #15]
    break;
 800446e:	e008      	b.n	8004482 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8004470:	2301      	movs	r3, #1
 8004472:	73fb      	strb	r3, [r7, #15]
    break;
 8004474:	e005      	b.n	8004482 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8004476:	2302      	movs	r3, #2
 8004478:	73fb      	strb	r3, [r7, #15]
    break;
 800447a:	e002      	b.n	8004482 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800447c:	2302      	movs	r3, #2
 800447e:	73fb      	strb	r3, [r7, #15]
    break;
 8004480:	bf00      	nop
  }
  return usb_status;  
 8004482:	7bfb      	ldrb	r3, [r7, #15]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	607a      	str	r2, [r7, #4]
 8004496:	461a      	mov	r2, r3
 8004498:	460b      	mov	r3, r1
 800449a:	72fb      	strb	r3, [r7, #11]
 800449c:	4613      	mov	r3, r2
 800449e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80044a4:	2300      	movs	r3, #0
 80044a6:	75fb      	strb	r3, [r7, #23]

  ep_addr=USBD_COMPOSITE_LL_EP_Conversion(pdev, ep_addr);
 80044a8:	7afb      	ldrb	r3, [r7, #11]
 80044aa:	4619      	mov	r1, r3
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f001 fe9d 	bl	80061ec <USBD_COMPOSITE_LL_EP_Conversion>
 80044b2:	4603      	mov	r3, r0
 80044b4:	72fb      	strb	r3, [r7, #11]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80044bc:	893b      	ldrh	r3, [r7, #8]
 80044be:	7af9      	ldrb	r1, [r7, #11]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	f7fd fa49 	bl	8001958 <HAL_PCD_EP_Transmit>
 80044c6:	4603      	mov	r3, r0
 80044c8:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 80044ca:	7dbb      	ldrb	r3, [r7, #22]
 80044cc:	2b03      	cmp	r3, #3
 80044ce:	d817      	bhi.n	8004500 <USBD_LL_Transmit+0x74>
 80044d0:	a201      	add	r2, pc, #4	; (adr r2, 80044d8 <USBD_LL_Transmit+0x4c>)
 80044d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d6:	bf00      	nop
 80044d8:	080044e9 	.word	0x080044e9
 80044dc:	080044ef 	.word	0x080044ef
 80044e0:	080044f5 	.word	0x080044f5
 80044e4:	080044fb 	.word	0x080044fb
    case HAL_OK :
      usb_status = USBD_OK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	75fb      	strb	r3, [r7, #23]
    break;
 80044ec:	e00b      	b.n	8004506 <USBD_LL_Transmit+0x7a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80044ee:	2302      	movs	r3, #2
 80044f0:	75fb      	strb	r3, [r7, #23]
    break;
 80044f2:	e008      	b.n	8004506 <USBD_LL_Transmit+0x7a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80044f4:	2301      	movs	r3, #1
 80044f6:	75fb      	strb	r3, [r7, #23]
    break;
 80044f8:	e005      	b.n	8004506 <USBD_LL_Transmit+0x7a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80044fa:	2302      	movs	r3, #2
 80044fc:	75fb      	strb	r3, [r7, #23]
    break;
 80044fe:	e002      	b.n	8004506 <USBD_LL_Transmit+0x7a>
    default :
      usb_status = USBD_FAIL;
 8004500:	2302      	movs	r3, #2
 8004502:	75fb      	strb	r3, [r7, #23]
    break;
 8004504:	bf00      	nop
  }
  return usb_status;    
 8004506:	7dfb      	ldrb	r3, [r7, #23]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	607a      	str	r2, [r7, #4]
 800451a:	461a      	mov	r2, r3
 800451c:	460b      	mov	r3, r1
 800451e:	72fb      	strb	r3, [r7, #11]
 8004520:	4613      	mov	r3, r2
 8004522:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004524:	2300      	movs	r3, #0
 8004526:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004528:	2300      	movs	r3, #0
 800452a:	75fb      	strb	r3, [r7, #23]

  ep_addr=USBD_COMPOSITE_LL_EP_Conversion(pdev, ep_addr);
 800452c:	7afb      	ldrb	r3, [r7, #11]
 800452e:	4619      	mov	r1, r3
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f001 fe5b 	bl	80061ec <USBD_COMPOSITE_LL_EP_Conversion>
 8004536:	4603      	mov	r3, r0
 8004538:	72fb      	strb	r3, [r7, #11]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8004540:	893b      	ldrh	r3, [r7, #8]
 8004542:	7af9      	ldrb	r1, [r7, #11]
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	f7fd f9a4 	bl	8001892 <HAL_PCD_EP_Receive>
 800454a:	4603      	mov	r3, r0
 800454c:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800454e:	7dbb      	ldrb	r3, [r7, #22]
 8004550:	2b03      	cmp	r3, #3
 8004552:	d817      	bhi.n	8004584 <USBD_LL_PrepareReceive+0x74>
 8004554:	a201      	add	r2, pc, #4	; (adr r2, 800455c <USBD_LL_PrepareReceive+0x4c>)
 8004556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455a:	bf00      	nop
 800455c:	0800456d 	.word	0x0800456d
 8004560:	08004573 	.word	0x08004573
 8004564:	08004579 	.word	0x08004579
 8004568:	0800457f 	.word	0x0800457f
    case HAL_OK :
      usb_status = USBD_OK;
 800456c:	2300      	movs	r3, #0
 800456e:	75fb      	strb	r3, [r7, #23]
    break;
 8004570:	e00b      	b.n	800458a <USBD_LL_PrepareReceive+0x7a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004572:	2302      	movs	r3, #2
 8004574:	75fb      	strb	r3, [r7, #23]
    break;
 8004576:	e008      	b.n	800458a <USBD_LL_PrepareReceive+0x7a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8004578:	2301      	movs	r3, #1
 800457a:	75fb      	strb	r3, [r7, #23]
    break;
 800457c:	e005      	b.n	800458a <USBD_LL_PrepareReceive+0x7a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800457e:	2302      	movs	r3, #2
 8004580:	75fb      	strb	r3, [r7, #23]
    break;
 8004582:	e002      	b.n	800458a <USBD_LL_PrepareReceive+0x7a>
    default :
      usb_status = USBD_FAIL;
 8004584:	2302      	movs	r3, #2
 8004586:	75fb      	strb	r3, [r7, #23]
    break;
 8004588:	bf00      	nop
  }
  return usb_status; 
 800458a:	7dfb      	ldrb	r3, [r7, #23]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	460b      	mov	r3, r1
 800459e:	70fb      	strb	r3, [r7, #3]
  ep_addr=USBD_COMPOSITE_LL_EP_Conversion(pdev, ep_addr);
 80045a0:	78fb      	ldrb	r3, [r7, #3]
 80045a2:	4619      	mov	r1, r3
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f001 fe21 	bl	80061ec <USBD_COMPOSITE_LL_EP_Conversion>
 80045aa:	4603      	mov	r3, r0
 80045ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80045b4:	78fa      	ldrb	r2, [r7, #3]
 80045b6:	4611      	mov	r1, r2
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fd f9b4 	bl	8001926 <HAL_PCD_EP_GetRxCount>
 80045be:	4603      	mov	r3, r0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB On The Go FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80045cc:	4802      	ldr	r0, [pc, #8]	; (80045d8 <OTG_FS_IRQHandler+0x10>)
 80045ce:	f7fc fc03 	bl	8000dd8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80045d2:	bf00      	nop
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	200059a4 	.word	0x200059a4

080045dc <USBD_FS_DeviceDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	6039      	str	r1, [r7, #0]
 80045e6:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	2212      	movs	r2, #18
 80045ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80045ee:	4b03      	ldr	r3, [pc, #12]	; (80045fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	20000020 	.word	0x20000020

08004600 <USBD_FS_LangIDStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	4603      	mov	r3, r0
 8004608:	6039      	str	r1, [r7, #0]
 800460a:	71fb      	strb	r3, [r7, #7]
  *length =  sizeof(USBD_LangIDDesc);  
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	2204      	movs	r2, #4
 8004610:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8004612:	4b03      	ldr	r3, [pc, #12]	; (8004620 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8004614:	4618      	mov	r0, r3
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	20000034 	.word	0x20000034

08004624 <USBD_FS_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	4603      	mov	r3, r0
 800462c:	6039      	str	r1, [r7, #0]
 800462e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004630:	79fb      	ldrb	r3, [r7, #7]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d105      	bne.n	8004642 <USBD_FS_ProductStrDescriptor+0x1e>
  {   
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	4907      	ldr	r1, [pc, #28]	; (8004658 <USBD_FS_ProductStrDescriptor+0x34>)
 800463a:	4808      	ldr	r0, [pc, #32]	; (800465c <USBD_FS_ProductStrDescriptor+0x38>)
 800463c:	f002 ff1f 	bl	800747e <USBD_GetString>
 8004640:	e004      	b.n	800464c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	4904      	ldr	r1, [pc, #16]	; (8004658 <USBD_FS_ProductStrDescriptor+0x34>)
 8004646:	4805      	ldr	r0, [pc, #20]	; (800465c <USBD_FS_ProductStrDescriptor+0x38>)
 8004648:	f002 ff19 	bl	800747e <USBD_GetString>
  }
  return USBD_StrDesc;
 800464c:	4b02      	ldr	r3, [pc, #8]	; (8004658 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800464e:	4618      	mov	r0, r3
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20005d94 	.word	0x20005d94
 800465c:	080110c4 	.word	0x080110c4

08004660 <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	4603      	mov	r3, r0
 8004668:	6039      	str	r1, [r7, #0]
 800466a:	71fb      	strb	r3, [r7, #7]
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	4904      	ldr	r1, [pc, #16]	; (8004680 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8004670:	4804      	ldr	r0, [pc, #16]	; (8004684 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8004672:	f002 ff04 	bl	800747e <USBD_GetString>
  return USBD_StrDesc;
 8004676:	4b02      	ldr	r3, [pc, #8]	; (8004680 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8004678:	4618      	mov	r0, r3
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	20005d94 	.word	0x20005d94
 8004684:	080110d4 	.word	0x080110d4

08004688 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	4603      	mov	r3, r0
 8004690:	6039      	str	r1, [r7, #0]
 8004692:	71fb      	strb	r3, [r7, #7]
  if(speed  == USBD_SPEED_HIGH)
 8004694:	79fb      	ldrb	r3, [r7, #7]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d105      	bne.n	80046a6 <USBD_FS_SerialStrDescriptor+0x1e>
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	4907      	ldr	r1, [pc, #28]	; (80046bc <USBD_FS_SerialStrDescriptor+0x34>)
 800469e:	4808      	ldr	r0, [pc, #32]	; (80046c0 <USBD_FS_SerialStrDescriptor+0x38>)
 80046a0:	f002 feed 	bl	800747e <USBD_GetString>
 80046a4:	e004      	b.n	80046b0 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	4904      	ldr	r1, [pc, #16]	; (80046bc <USBD_FS_SerialStrDescriptor+0x34>)
 80046aa:	4805      	ldr	r0, [pc, #20]	; (80046c0 <USBD_FS_SerialStrDescriptor+0x38>)
 80046ac:	f002 fee7 	bl	800747e <USBD_GetString>
  }
  return USBD_StrDesc;
 80046b0:	4b02      	ldr	r3, [pc, #8]	; (80046bc <USBD_FS_SerialStrDescriptor+0x34>)
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	20005d94 	.word	0x20005d94
 80046c0:	080110dc 	.word	0x080110dc

080046c4 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	4603      	mov	r3, r0
 80046cc:	6039      	str	r1, [r7, #0]
 80046ce:	71fb      	strb	r3, [r7, #7]
  if(speed  == USBD_SPEED_HIGH)
 80046d0:	79fb      	ldrb	r3, [r7, #7]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d105      	bne.n	80046e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	4907      	ldr	r1, [pc, #28]	; (80046f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80046da:	4808      	ldr	r0, [pc, #32]	; (80046fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80046dc:	f002 fecf 	bl	800747e <USBD_GetString>
 80046e0:	e004      	b.n	80046ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	4904      	ldr	r1, [pc, #16]	; (80046f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80046e6:	4805      	ldr	r0, [pc, #20]	; (80046fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80046e8:	f002 fec9 	bl	800747e <USBD_GetString>
  }
  return USBD_StrDesc;  
 80046ec:	4b02      	ldr	r3, [pc, #8]	; (80046f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	20005d94 	.word	0x20005d94
 80046fc:	080110ec 	.word	0x080110ec

08004700 <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	4603      	mov	r3, r0
 8004708:	6039      	str	r1, [r7, #0]
 800470a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800470c:	79fb      	ldrb	r3, [r7, #7]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d105      	bne.n	800471e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	4907      	ldr	r1, [pc, #28]	; (8004734 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8004716:	4808      	ldr	r0, [pc, #32]	; (8004738 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8004718:	f002 feb1 	bl	800747e <USBD_GetString>
 800471c:	e004      	b.n	8004728 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	4904      	ldr	r1, [pc, #16]	; (8004734 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8004722:	4805      	ldr	r0, [pc, #20]	; (8004738 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8004724:	f002 feab 	bl	800747e <USBD_GetString>
  }
  return USBD_StrDesc;  
 8004728:	4b02      	ldr	r3, [pc, #8]	; (8004734 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800472a:	4618      	mov	r0, r3
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	20005d94 	.word	0x20005d94
 8004738:	080110fc 	.word	0x080110fc

0800473c <RNDIS_Disconnect>:
};


/* Private functions ---------------------------------------------------------*/

void RNDIS_Disconnect(){
 800473c:	b598      	push	{r3, r4, r7, lr}
 800473e:	af00      	add	r7, sp, #0
	rndis_oid_gen_xmit_ok=0;
 8004740:	4a0a      	ldr	r2, [pc, #40]	; (800476c <RNDIS_Disconnect+0x30>)
 8004742:	f04f 0300 	mov.w	r3, #0
 8004746:	f04f 0400 	mov.w	r4, #0
 800474a:	e882 0018 	stmia.w	r2, {r3, r4}
	rndis_oid_gen_rcv_ok=0;
 800474e:	4a08      	ldr	r2, [pc, #32]	; (8004770 <RNDIS_Disconnect+0x34>)
 8004750:	f04f 0300 	mov.w	r3, #0
 8004754:	f04f 0400 	mov.w	r4, #0
 8004758:	e882 0018 	stmia.w	r2, {r3, r4}
	rndis_state=RNDIS_STATE_HALTED;
 800475c:	4b05      	ldr	r3, [pc, #20]	; (8004774 <RNDIS_Disconnect+0x38>)
 800475e:	2201      	movs	r2, #1
 8004760:	701a      	strb	r2, [r3, #0]
	FreeRTOS_NetworkDownFromISR();
 8004762:	f006 fc95 	bl	800b090 <FreeRTOS_NetworkDownFromISR>
}
 8004766:	bf00      	nop
 8004768:	bd98      	pop	{r3, r4, r7, pc}
 800476a:	bf00      	nop
 800476c:	20000c08 	.word	0x20000c08
 8004770:	20000c10 	.word	0x20000c10
 8004774:	20000038 	.word	0x20000038

08004778 <RNDIS_Init_FS>:
 *         Initializes the RNDIS media low layer over the FS USB IP
 * @param  None
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t RNDIS_Init_FS(void)
{ 
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800477c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004780:	4807      	ldr	r0, [pc, #28]	; (80047a0 <RNDIS_Init_FS+0x28>)
 8004782:	f7fc f9ee 	bl	8000b62 <HAL_GPIO_TogglePin>
	USBD_RNDIS_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8004786:	2200      	movs	r2, #0
 8004788:	4906      	ldr	r1, [pc, #24]	; (80047a4 <RNDIS_Init_FS+0x2c>)
 800478a:	4807      	ldr	r0, [pc, #28]	; (80047a8 <RNDIS_Init_FS+0x30>)
 800478c:	f001 ff8d 	bl	80066aa <USBD_RNDIS_SetTxBuffer>
	USBD_RNDIS_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS_Temp);
 8004790:	4906      	ldr	r1, [pc, #24]	; (80047ac <RNDIS_Init_FS+0x34>)
 8004792:	4805      	ldr	r0, [pc, #20]	; (80047a8 <RNDIS_Init_FS+0x30>)
 8004794:	f001 ffa3 	bl	80066de <USBD_RNDIS_SetRxBuffer>
	//RNDIS_Disconnect();
	return (USBD_OK);
 8004798:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 800479a:	4618      	mov	r0, r3
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	40020c00 	.word	0x40020c00
 80047a4:	20005f94 	.word	0x20005f94
 80047a8:	20005780 	.word	0x20005780
 80047ac:	20000bc4 	.word	0x20000bc4

080047b0 <RNDIS_DeInit_FS>:
 *         DeInitializes the RNDIS media low layer
 * @param  None
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t RNDIS_DeInit_FS(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	RNDIS_Disconnect();
 80047b4:	f7ff ffc2 	bl	800473c <RNDIS_Disconnect>
	return (USBD_OK);
 80047b8:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	bd80      	pop	{r7, pc}
	...

080047c0 <RNDIS_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t RNDIS_Control_FS  (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{ 
 80047c0:	b590      	push	{r4, r7, lr}
 80047c2:	b089      	sub	sp, #36	; 0x24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	4603      	mov	r3, r0
 80047c8:	6039      	str	r1, [r7, #0]
 80047ca:	71fb      	strb	r3, [r7, #7]
 80047cc:	4613      	mov	r3, r2
 80047ce:	80bb      	strh	r3, [r7, #4]
	static const char nome[]="IMBEL TPP-1400";
	static RNDIS_DATA rndis_data;
	uint32_t *buf32=(uint32_t *)pbuf;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	617b      	str	r3, [r7, #20]
	uint8_t len = 0;
 80047d4:	2300      	movs	r3, #0
 80047d6:	77fb      	strb	r3, [r7, #31]
	int pos=0;
 80047d8:	2300      	movs	r3, #0
 80047da:	61bb      	str	r3, [r7, #24]
	USBD_RNDIS_HandleTypeDef *hrndis = (USBD_RNDIS_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80047dc:	4ba0      	ldr	r3, [pc, #640]	; (8004a60 <RNDIS_Control_FS+0x2a0>)
 80047de:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80047e2:	613b      	str	r3, [r7, #16]

	switch (cmd)
 80047e4:	79fb      	ldrb	r3, [r7, #7]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <RNDIS_Control_FS+0x30>
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d06e      	beq.n	80048cc <RNDIS_Control_FS+0x10c>
		}
		if(!len) len=buf32[1]=pos*4;
		USBD_CtlSendData(&hUsbDeviceFS, pbuf, len);
		break;
	default:
		break;
 80047ee:	e3f9      	b.n	8004fe4 <RNDIS_Control_FS+0x824>
		rndis_data.MessageType=buf32[0];
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a9b      	ldr	r2, [pc, #620]	; (8004a64 <RNDIS_Control_FS+0x2a4>)
 80047f6:	6013      	str	r3, [r2, #0]
		rndis_data.RequestId=buf32[2];
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	4a99      	ldr	r2, [pc, #612]	; (8004a64 <RNDIS_Control_FS+0x2a4>)
 80047fe:	6053      	str	r3, [r2, #4]
		if(buf32[0]==RNDIS_MSG_INIT){
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b02      	cmp	r3, #2
 8004806:	d11a      	bne.n	800483e <RNDIS_Control_FS+0x7e>
			RNDIS_Disconnect();
 8004808:	f7ff ff98 	bl	800473c <RNDIS_Disconnect>
			rndis_data.MajorVersion=buf32[3];
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	4a94      	ldr	r2, [pc, #592]	; (8004a64 <RNDIS_Control_FS+0x2a4>)
 8004812:	6093      	str	r3, [r2, #8]
			rndis_data.MinorVersion=buf32[4];
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	4a92      	ldr	r2, [pc, #584]	; (8004a64 <RNDIS_Control_FS+0x2a4>)
 800481a:	60d3      	str	r3, [r2, #12]
			rndis_data.MaxTransferSize=buf32[5];
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	4a90      	ldr	r2, [pc, #576]	; (8004a64 <RNDIS_Control_FS+0x2a4>)
 8004822:	6113      	str	r3, [r2, #16]
			rndis_state=RNDIS_STATE_NORMAL;
 8004824:	4b90      	ldr	r3, [pc, #576]	; (8004a68 <RNDIS_Control_FS+0x2a8>)
 8004826:	2200      	movs	r2, #0
 8004828:	701a      	strb	r2, [r3, #0]
			hrndis->TxState=0;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	2200      	movs	r2, #0
 800482e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			USBD_RNDIS_TransmitControl(&hUsbDeviceFS, (uint8_t*)response, 8);
 8004832:	2208      	movs	r2, #8
 8004834:	498d      	ldr	r1, [pc, #564]	; (8004a6c <RNDIS_Control_FS+0x2ac>)
 8004836:	488a      	ldr	r0, [pc, #552]	; (8004a60 <RNDIS_Control_FS+0x2a0>)
 8004838:	f001 ff8f 	bl	800675a <USBD_RNDIS_TransmitControl>
		break;
 800483c:	e3d1      	b.n	8004fe2 <RNDIS_Control_FS+0x822>
		} else if(buf32[0]==RNDIS_MSG_HALT){
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b03      	cmp	r3, #3
 8004844:	d109      	bne.n	800485a <RNDIS_Control_FS+0x9a>
			hrndis->TxState=1;
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	2201      	movs	r2, #1
 800484a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			RNDIS_Disconnect();
 800484e:	f7ff ff75 	bl	800473c <RNDIS_Disconnect>
			rndis_state=RNDIS_STATE_HALTED;
 8004852:	4b85      	ldr	r3, [pc, #532]	; (8004a68 <RNDIS_Control_FS+0x2a8>)
 8004854:	2201      	movs	r2, #1
 8004856:	701a      	strb	r2, [r3, #0]
		break;
 8004858:	e3c3      	b.n	8004fe2 <RNDIS_Control_FS+0x822>
		} else if(buf32[0]==RNDIS_MSG_QUERY){
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b04      	cmp	r3, #4
 8004860:	d115      	bne.n	800488e <RNDIS_Control_FS+0xce>
			rndis_data.Oid=buf32[3];
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	4a7f      	ldr	r2, [pc, #508]	; (8004a64 <RNDIS_Control_FS+0x2a4>)
 8004868:	6153      	str	r3, [r2, #20]
			rndis_data.InformationBufferLength=buf32[4];
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	4a7d      	ldr	r2, [pc, #500]	; (8004a64 <RNDIS_Control_FS+0x2a4>)
 8004870:	6193      	str	r3, [r2, #24]
			rndis_data.InformationBufferOffset=buf32[5];
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	4a7b      	ldr	r2, [pc, #492]	; (8004a64 <RNDIS_Control_FS+0x2a4>)
 8004878:	61d3      	str	r3, [r2, #28]
			rndis_data.DeviceVcHandle=buf32[6];
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	4a79      	ldr	r2, [pc, #484]	; (8004a64 <RNDIS_Control_FS+0x2a4>)
 8004880:	6213      	str	r3, [r2, #32]
			USBD_RNDIS_TransmitControl(&hUsbDeviceFS, (uint8_t*)response, 8);
 8004882:	2208      	movs	r2, #8
 8004884:	4979      	ldr	r1, [pc, #484]	; (8004a6c <RNDIS_Control_FS+0x2ac>)
 8004886:	4876      	ldr	r0, [pc, #472]	; (8004a60 <RNDIS_Control_FS+0x2a0>)
 8004888:	f001 ff67 	bl	800675a <USBD_RNDIS_TransmitControl>
		break;
 800488c:	e3a9      	b.n	8004fe2 <RNDIS_Control_FS+0x822>
		} else if(buf32[0]==RNDIS_MSG_SET){
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b05      	cmp	r3, #5
 8004894:	d105      	bne.n	80048a2 <RNDIS_Control_FS+0xe2>
			USBD_RNDIS_TransmitControl(&hUsbDeviceFS, (uint8_t*)response, 8);
 8004896:	2208      	movs	r2, #8
 8004898:	4974      	ldr	r1, [pc, #464]	; (8004a6c <RNDIS_Control_FS+0x2ac>)
 800489a:	4871      	ldr	r0, [pc, #452]	; (8004a60 <RNDIS_Control_FS+0x2a0>)
 800489c:	f001 ff5d 	bl	800675a <USBD_RNDIS_TransmitControl>
		break;
 80048a0:	e39f      	b.n	8004fe2 <RNDIS_Control_FS+0x822>
		} else if(buf32[0]==RNDIS_MSG_RESET){
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b06      	cmp	r3, #6
 80048a8:	d105      	bne.n	80048b6 <RNDIS_Control_FS+0xf6>
			USBD_RNDIS_TransmitControl(&hUsbDeviceFS, (uint8_t*)response, 8);
 80048aa:	2208      	movs	r2, #8
 80048ac:	496f      	ldr	r1, [pc, #444]	; (8004a6c <RNDIS_Control_FS+0x2ac>)
 80048ae:	486c      	ldr	r0, [pc, #432]	; (8004a60 <RNDIS_Control_FS+0x2a0>)
 80048b0:	f001 ff53 	bl	800675a <USBD_RNDIS_TransmitControl>
		break;
 80048b4:	e395      	b.n	8004fe2 <RNDIS_Control_FS+0x822>
		} else if(buf32[0]==RNDIS_MSG_KEEPALIVE){
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	f040 8391 	bne.w	8004fe2 <RNDIS_Control_FS+0x822>
			USBD_RNDIS_TransmitControl(&hUsbDeviceFS, (uint8_t*)response, 8);
 80048c0:	2208      	movs	r2, #8
 80048c2:	496a      	ldr	r1, [pc, #424]	; (8004a6c <RNDIS_Control_FS+0x2ac>)
 80048c4:	4866      	ldr	r0, [pc, #408]	; (8004a60 <RNDIS_Control_FS+0x2a0>)
 80048c6:	f001 ff48 	bl	800675a <USBD_RNDIS_TransmitControl>
		break;
 80048ca:	e38a      	b.n	8004fe2 <RNDIS_Control_FS+0x822>
		if(rndis_data.MessageType==RNDIS_MSG_INIT){
 80048cc:	4b65      	ldr	r3, [pc, #404]	; (8004a64 <RNDIS_Control_FS+0x2a4>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d165      	bne.n	80049a0 <RNDIS_Control_FS+0x1e0>
			buf32[pos++]=RNDIS_MSG_INIT_C;							//MessageType			Specifies the type of message being sent. Set to 0x80000002.
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	1c5a      	adds	r2, r3, #1
 80048d8:	61ba      	str	r2, [r7, #24]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	4413      	add	r3, r2
 80048e0:	4a63      	ldr	r2, [pc, #396]	; (8004a70 <RNDIS_Control_FS+0x2b0>)
 80048e2:	601a      	str	r2, [r3, #0]
			pos++;
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	3301      	adds	r3, #1
 80048e8:	61bb      	str	r3, [r7, #24]
			buf32[pos++]=rndis_data.RequestId;						//RequestId				Specifies the Remote NDIS message ID value. This value is used to match messages sent by the host with device responses.
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	61ba      	str	r2, [r7, #24]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	4413      	add	r3, r2
 80048f6:	4a5b      	ldr	r2, [pc, #364]	; (8004a64 <RNDIS_Control_FS+0x2a4>)
 80048f8:	6852      	ldr	r2, [r2, #4]
 80048fa:	601a      	str	r2, [r3, #0]
			buf32[pos++]=RNDIS_STATUS_SUCCESS;						//Status				Specifies RNDIS_STATUS_SUCCESS if the device initialized successfully; otherwise, it specifies an error code that indicates the failure.
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	1c5a      	adds	r2, r3, #1
 8004900:	61ba      	str	r2, [r7, #24]
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	4413      	add	r3, r2
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]
			buf32[pos++]=1;											//MajorVersion			Specifies the highest Remote NDIS major protocol version supported by the device.
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	61ba      	str	r2, [r7, #24]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	4413      	add	r3, r2
 8004918:	2201      	movs	r2, #1
 800491a:	601a      	str	r2, [r3, #0]
			buf32[pos++]=0;											//MinorVersion			Specifies the highest Remote NDIS minor protocol version supported by the device.
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	61ba      	str	r2, [r7, #24]
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	4413      	add	r3, r2
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]
			buf32[pos++]=RNDIS_DF_CONNECTIONLESS;					//DeviceFlags			Specifies the miniport driver type as either connectionless or connection-oriented. This value can be one of the following:
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	61ba      	str	r2, [r7, #24]
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	4413      	add	r3, r2
 8004938:	2201      	movs	r2, #1
 800493a:	601a      	str	r2, [r3, #0]
			buf32[pos++]=RNDIS_MEDIUM_802_3;						//Medium				Specifies the medium supported by the device. Set to RNDIS_MEDIUM_802_3 (0x00000000)
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	1c5a      	adds	r2, r3, #1
 8004940:	61ba      	str	r2, [r7, #24]
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	4413      	add	r3, r2
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]
			buf32[pos++]=1;											//MaxPacketsPerMessage	Specifies the maximum number of Remote NDIS data messages that the device can handle in a single transfer to it. This value should be at least one.
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	61ba      	str	r2, [r7, #24]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	4413      	add	r3, r2
 8004958:	2201      	movs	r2, #1
 800495a:	601a      	str	r2, [r3, #0]
			buf32[pos++]=1580;										//MaxTransferSize		Specifies the maximum size in bytes of any single bus data transfer that the device expects to receive from the host.
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	61ba      	str	r2, [r7, #24]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	4413      	add	r3, r2
 8004968:	f240 622c 	movw	r2, #1580	; 0x62c
 800496c:	601a      	str	r2, [r3, #0]
			buf32[pos++]=3;											//PacketAlignmentFactor	Specifies the byte alignment that the device expects for each Remote NDIS message that is part of a multimessage transfer to it. This value is specified in powers of 2. For example, this value is set to three to indicate 8-byte alignment. This value has a maximum setting of seven, which specifies 128-byte alignment.
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	61ba      	str	r2, [r7, #24]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	4413      	add	r3, r2
 800497a:	2203      	movs	r2, #3
 800497c:	601a      	str	r2, [r3, #0]
			buf32[pos++]=0;											//AFListOffset			Reserved for connection-oriented devices. Set value to zero.
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	1c5a      	adds	r2, r3, #1
 8004982:	61ba      	str	r2, [r7, #24]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	4413      	add	r3, r2
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]
			buf32[pos++]=0;											//AFListSize			Reserved for connection-oriented devices. Set value to zero.
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	61ba      	str	r2, [r7, #24]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	4413      	add	r3, r2
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	e30e      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
		} else if(rndis_data.MessageType==RNDIS_MSG_QUERY){
 80049a0:	4b30      	ldr	r3, [pc, #192]	; (8004a64 <RNDIS_Control_FS+0x2a4>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	f040 828f 	bne.w	8004ec8 <RNDIS_Control_FS+0x708>
			uint32_t temp=0;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
			buf32[pos++]=RNDIS_MSG_QUERY_C;
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	61ba      	str	r2, [r7, #24]
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	4413      	add	r3, r2
 80049ba:	4a2e      	ldr	r2, [pc, #184]	; (8004a74 <RNDIS_Control_FS+0x2b4>)
 80049bc:	601a      	str	r2, [r3, #0]
			pos++;
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	3301      	adds	r3, #1
 80049c2:	61bb      	str	r3, [r7, #24]
			buf32[pos++]=rndis_data.RequestId;
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	61ba      	str	r2, [r7, #24]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	4413      	add	r3, r2
 80049d0:	4a24      	ldr	r2, [pc, #144]	; (8004a64 <RNDIS_Control_FS+0x2a4>)
 80049d2:	6852      	ldr	r2, [r2, #4]
 80049d4:	601a      	str	r2, [r3, #0]
			buf32[pos++]=RNDIS_STATUS_SUCCESS;
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	61ba      	str	r2, [r7, #24]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	4413      	add	r3, r2
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]
			switch(rndis_data.Oid){
 80049e6:	4b1f      	ldr	r3, [pc, #124]	; (8004a64 <RNDIS_Control_FS+0x2a4>)
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	4a23      	ldr	r2, [pc, #140]	; (8004a78 <RNDIS_Control_FS+0x2b8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	f000 808e 	beq.w	8004b0e <RNDIS_Control_FS+0x34e>
 80049f2:	4a21      	ldr	r2, [pc, #132]	; (8004a78 <RNDIS_Control_FS+0x2b8>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d81f      	bhi.n	8004a38 <RNDIS_Control_FS+0x278>
 80049f8:	4a20      	ldr	r2, [pc, #128]	; (8004a7c <RNDIS_Control_FS+0x2bc>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	f000 820d 	beq.w	8004e1a <RNDIS_Control_FS+0x65a>
 8004a00:	4a1e      	ldr	r2, [pc, #120]	; (8004a7c <RNDIS_Control_FS+0x2bc>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d80b      	bhi.n	8004a1e <RNDIS_Control_FS+0x25e>
 8004a06:	4a1e      	ldr	r2, [pc, #120]	; (8004a80 <RNDIS_Control_FS+0x2c0>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	f000 8099 	beq.w	8004b40 <RNDIS_Control_FS+0x380>
 8004a0e:	4a1d      	ldr	r2, [pc, #116]	; (8004a84 <RNDIS_Control_FS+0x2c4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	f000 80af 	beq.w	8004b74 <RNDIS_Control_FS+0x3b4>
 8004a16:	4a1c      	ldr	r2, [pc, #112]	; (8004a88 <RNDIS_Control_FS+0x2c8>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d058      	beq.n	8004ace <RNDIS_Control_FS+0x30e>
 8004a1c:	e242      	b.n	8004ea4 <RNDIS_Control_FS+0x6e4>
 8004a1e:	4a1b      	ldr	r2, [pc, #108]	; (8004a8c <RNDIS_Control_FS+0x2cc>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	f000 814f 	beq.w	8004cc4 <RNDIS_Control_FS+0x504>
 8004a26:	4a1a      	ldr	r2, [pc, #104]	; (8004a90 <RNDIS_Control_FS+0x2d0>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	f000 80bd 	beq.w	8004ba8 <RNDIS_Control_FS+0x3e8>
 8004a2e:	4a19      	ldr	r2, [pc, #100]	; (8004a94 <RNDIS_Control_FS+0x2d4>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	f000 8213 	beq.w	8004e5c <RNDIS_Control_FS+0x69c>
 8004a36:	e235      	b.n	8004ea4 <RNDIS_Control_FS+0x6e4>
 8004a38:	4a17      	ldr	r2, [pc, #92]	; (8004a98 <RNDIS_Control_FS+0x2d8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	f000 81a2 	beq.w	8004d84 <RNDIS_Control_FS+0x5c4>
 8004a40:	4a15      	ldr	r2, [pc, #84]	; (8004a98 <RNDIS_Control_FS+0x2d8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d82e      	bhi.n	8004aa4 <RNDIS_Control_FS+0x2e4>
 8004a46:	4a15      	ldr	r2, [pc, #84]	; (8004a9c <RNDIS_Control_FS+0x2dc>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	f000 8181 	beq.w	8004d50 <RNDIS_Control_FS+0x590>
 8004a4e:	4a13      	ldr	r2, [pc, #76]	; (8004a9c <RNDIS_Control_FS+0x2dc>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	f200 81c9 	bhi.w	8004de8 <RNDIS_Control_FS+0x628>
 8004a56:	4a12      	ldr	r2, [pc, #72]	; (8004aa0 <RNDIS_Control_FS+0x2e0>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	f000 814d 	beq.w	8004cf8 <RNDIS_Control_FS+0x538>
 8004a5e:	e221      	b.n	8004ea4 <RNDIS_Control_FS+0x6e4>
 8004a60:	20005780 	.word	0x20005780
 8004a64:	20000c20 	.word	0x20000c20
 8004a68:	20000038 	.word	0x20000038
 8004a6c:	080111e4 	.word	0x080111e4
 8004a70:	80000002 	.word	0x80000002
 8004a74:	80000004 	.word	0x80000004
 8004a78:	00010202 	.word	0x00010202
 8004a7c:	0001010c 	.word	0x0001010c
 8004a80:	00010106 	.word	0x00010106
 8004a84:	00010107 	.word	0x00010107
 8004a88:	00010101 	.word	0x00010101
 8004a8c:	00010111 	.word	0x00010111
 8004a90:	00010114 	.word	0x00010114
 8004a94:	0001010d 	.word	0x0001010d
 8004a98:	00020104 	.word	0x00020104
 8004a9c:	00020102 	.word	0x00020102
 8004aa0:	00020101 	.word	0x00020101
 8004aa4:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
 8004aa8:	f000 80e2 	beq.w	8004c70 <RNDIS_Control_FS+0x4b0>
 8004aac:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
 8004ab0:	d804      	bhi.n	8004abc <RNDIS_Control_FS+0x2fc>
 8004ab2:	4a9e      	ldr	r2, [pc, #632]	; (8004d2c <RNDIS_Control_FS+0x56c>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	f000 817e 	beq.w	8004db6 <RNDIS_Control_FS+0x5f6>
 8004aba:	e1f3      	b.n	8004ea4 <RNDIS_Control_FS+0x6e4>
 8004abc:	f113 3ffe 	cmn.w	r3, #4278124286	; 0xfefefefe
 8004ac0:	f000 80a4 	beq.w	8004c0c <RNDIS_Control_FS+0x44c>
 8004ac4:	4a9a      	ldr	r2, [pc, #616]	; (8004d30 <RNDIS_Control_FS+0x570>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	f000 8087 	beq.w	8004bda <RNDIS_Control_FS+0x41a>
 8004acc:	e1ea      	b.n	8004ea4 <RNDIS_Control_FS+0x6e4>
				temp=sizeof(OID_GEN_SUPPORTED);
 8004ace:	2364      	movs	r3, #100	; 0x64
 8004ad0:	60fb      	str	r3, [r7, #12]
				buf32[pos++]=temp;
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	1c5a      	adds	r2, r3, #1
 8004ad6:	61ba      	str	r2, [r7, #24]
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	4413      	add	r3, r2
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	601a      	str	r2, [r3, #0]
				buf32[pos++]=16;
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	1c5a      	adds	r2, r3, #1
 8004ae6:	61ba      	str	r2, [r7, #24]
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	4413      	add	r3, r2
 8004aee:	2210      	movs	r2, #16
 8004af0:	601a      	str	r2, [r3, #0]
				USBD_memcpy(buf32+pos, OID_GEN_SUPPORTED, temp);
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	4413      	add	r3, r2
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	498d      	ldr	r1, [pc, #564]	; (8004d34 <RNDIS_Control_FS+0x574>)
 8004afe:	4618      	mov	r0, r3
 8004b00:	f00c f92d 	bl	8010d5e <memcpy>
				pos+=temp;
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4413      	add	r3, r2
 8004b0a:	61bb      	str	r3, [r7, #24]
				break;
 8004b0c:	e257      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				buf32[pos++]=4;
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	61ba      	str	r2, [r7, #24]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	4413      	add	r3, r2
 8004b1a:	2204      	movs	r2, #4
 8004b1c:	601a      	str	r2, [r3, #0]
				buf32[pos++]=16;
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	61ba      	str	r2, [r7, #24]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	4413      	add	r3, r2
 8004b2a:	2210      	movs	r2, #16
 8004b2c:	601a      	str	r2, [r3, #0]
				buf32[pos++]=0;
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	1c5a      	adds	r2, r3, #1
 8004b32:	61ba      	str	r2, [r7, #24]
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4413      	add	r3, r2
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]
				break;
 8004b3e:	e23e      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				buf32[pos++]=4;
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	61ba      	str	r2, [r7, #24]
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	2204      	movs	r2, #4
 8004b4e:	601a      	str	r2, [r3, #0]
				buf32[pos++]=16;
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	1c5a      	adds	r2, r3, #1
 8004b54:	61ba      	str	r2, [r7, #24]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	2210      	movs	r2, #16
 8004b5e:	601a      	str	r2, [r3, #0]
				buf32[pos++]=1500;
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	61ba      	str	r2, [r7, #24]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004b70:	601a      	str	r2, [r3, #0]
				break;
 8004b72:	e224      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				buf32[pos++]=4;
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	61ba      	str	r2, [r7, #24]
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	4413      	add	r3, r2
 8004b80:	2204      	movs	r2, #4
 8004b82:	601a      	str	r2, [r3, #0]
				buf32[pos++]=16;
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	61ba      	str	r2, [r7, #24]
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	4413      	add	r3, r2
 8004b90:	2210      	movs	r2, #16
 8004b92:	601a      	str	r2, [r3, #0]
				buf32[pos++]=100000/100;
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	61ba      	str	r2, [r7, #24]
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ba4:	601a      	str	r2, [r3, #0]
				break;
 8004ba6:	e20a      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				buf32[pos++]=4;
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	61ba      	str	r2, [r7, #24]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	2204      	movs	r2, #4
 8004bb6:	601a      	str	r2, [r3, #0]
				buf32[pos++]=16;
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	1c5a      	adds	r2, r3, #1
 8004bbc:	61ba      	str	r2, [r7, #24]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	2210      	movs	r2, #16
 8004bc6:	601a      	str	r2, [r3, #0]
				buf32[pos++]=NdisMediaStateConnected;
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	1c5a      	adds	r2, r3, #1
 8004bcc:	61ba      	str	r2, [r7, #24]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	601a      	str	r2, [r3, #0]
				break;
 8004bd8:	e1f1      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				buf32[pos++]=4;
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	61ba      	str	r2, [r7, #24]
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	4413      	add	r3, r2
 8004be6:	2204      	movs	r2, #4
 8004be8:	601a      	str	r2, [r3, #0]
				buf32[pos++]=16;
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	1c5a      	adds	r2, r3, #1
 8004bee:	61ba      	str	r2, [r7, #24]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	2210      	movs	r2, #16
 8004bf8:	601a      	str	r2, [r3, #0]
				buf32[pos++]=1;
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	61ba      	str	r2, [r7, #24]
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	4413      	add	r3, r2
 8004c06:	2201      	movs	r2, #1
 8004c08:	601a      	str	r2, [r3, #0]
				break;
 8004c0a:	e1d8      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				buf32[pos++]=6;
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	61ba      	str	r2, [r7, #24]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	4413      	add	r3, r2
 8004c18:	2206      	movs	r2, #6
 8004c1a:	601a      	str	r2, [r3, #0]
				buf32[pos++]=16;
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	1c5a      	adds	r2, r3, #1
 8004c20:	61ba      	str	r2, [r7, #24]
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	4413      	add	r3, r2
 8004c28:	2210      	movs	r2, #16
 8004c2a:	601a      	str	r2, [r3, #0]
				buf32[pos++]=0x00757840 | (DeviceID_8[0]<<24);
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	1c5a      	adds	r2, r3, #1
 8004c30:	61ba      	str	r2, [r7, #24]
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	441a      	add	r2, r3
 8004c38:	4b3f      	ldr	r3, [pc, #252]	; (8004d38 <RNDIS_Control_FS+0x578>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	0619      	lsls	r1, r3, #24
 8004c3e:	4b3f      	ldr	r3, [pc, #252]	; (8004d3c <RNDIS_Control_FS+0x57c>)
 8004c40:	430b      	orrs	r3, r1
 8004c42:	6013      	str	r3, [r2, #0]
				buf32[pos++]=DeviceID_8[2]<<8 | DeviceID_8[1];
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	61ba      	str	r2, [r7, #24]
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	4413      	add	r3, r2
 8004c50:	4a3b      	ldr	r2, [pc, #236]	; (8004d40 <RNDIS_Control_FS+0x580>)
 8004c52:	7812      	ldrb	r2, [r2, #0]
 8004c54:	0212      	lsls	r2, r2, #8
 8004c56:	493b      	ldr	r1, [pc, #236]	; (8004d44 <RNDIS_Control_FS+0x584>)
 8004c58:	7809      	ldrb	r1, [r1, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	601a      	str	r2, [r3, #0]
				len=buf32[1]=pos*4-2;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	3304      	adds	r3, #4
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	0092      	lsls	r2, r2, #2
 8004c66:	3a02      	subs	r2, #2
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	77fb      	strb	r3, [r7, #31]
				break;
 8004c6e:	e1a6      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				buf32[pos++]=6;
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	1c5a      	adds	r2, r3, #1
 8004c74:	61ba      	str	r2, [r7, #24]
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	2206      	movs	r2, #6
 8004c7e:	601a      	str	r2, [r3, #0]
				buf32[pos++]=16;
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	61ba      	str	r2, [r7, #24]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	2210      	movs	r2, #16
 8004c8e:	601a      	str	r2, [r3, #0]
				buf32[pos++]=0xDD757840;
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	1c5a      	adds	r2, r3, #1
 8004c94:	61ba      	str	r2, [r7, #24]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	4a2a      	ldr	r2, [pc, #168]	; (8004d48 <RNDIS_Control_FS+0x588>)
 8004c9e:	601a      	str	r2, [r3, #0]
				buf32[pos++]=0xFFEE;
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	1c5a      	adds	r2, r3, #1
 8004ca4:	61ba      	str	r2, [r7, #24]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	4413      	add	r3, r2
 8004cac:	f64f 72ee 	movw	r2, #65518	; 0xffee
 8004cb0:	601a      	str	r2, [r3, #0]
				len=buf32[1]=pos*4-2;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	0092      	lsls	r2, r2, #2
 8004cba:	3a02      	subs	r2, #2
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	77fb      	strb	r3, [r7, #31]
				break;
 8004cc2:	e17c      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				buf32[pos++]=4;
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	61ba      	str	r2, [r7, #24]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	4413      	add	r3, r2
 8004cd0:	2204      	movs	r2, #4
 8004cd2:	601a      	str	r2, [r3, #0]
				buf32[pos++]=16;
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	1c5a      	adds	r2, r3, #1
 8004cd8:	61ba      	str	r2, [r7, #24]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	4413      	add	r3, r2
 8004ce0:	2210      	movs	r2, #16
 8004ce2:	601a      	str	r2, [r3, #0]
				buf32[pos++]=1558;
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	61ba      	str	r2, [r7, #24]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f240 6216 	movw	r2, #1558	; 0x616
 8004cf4:	601a      	str	r2, [r3, #0]
				break;
 8004cf6:	e162      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				buf32[pos++]=4;
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	1c5a      	adds	r2, r3, #1
 8004cfc:	61ba      	str	r2, [r7, #24]
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	4413      	add	r3, r2
 8004d04:	2204      	movs	r2, #4
 8004d06:	601a      	str	r2, [r3, #0]
				buf32[pos++]=16;
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	61ba      	str	r2, [r7, #24]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	4413      	add	r3, r2
 8004d14:	2210      	movs	r2, #16
 8004d16:	601a      	str	r2, [r3, #0]
				buf32[pos++]=rndis_oid_gen_xmit_ok & 0xffffffff;
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	61ba      	str	r2, [r7, #24]
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	441a      	add	r2, r3
 8004d24:	4b09      	ldr	r3, [pc, #36]	; (8004d4c <RNDIS_Control_FS+0x58c>)
 8004d26:	cb18      	ldmia	r3, {r3, r4}
 8004d28:	6013      	str	r3, [r2, #0]
				break;
 8004d2a:	e148      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
 8004d2c:	00020105 	.word	0x00020105
 8004d30:	01010104 	.word	0x01010104
 8004d34:	08011180 	.word	0x08011180
 8004d38:	1fff7a10 	.word	0x1fff7a10
 8004d3c:	00757840 	.word	0x00757840
 8004d40:	1fff7a12 	.word	0x1fff7a12
 8004d44:	1fff7a11 	.word	0x1fff7a11
 8004d48:	dd757840 	.word	0xdd757840
 8004d4c:	20000c08 	.word	0x20000c08
				buf32[pos++]=4;
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	1c5a      	adds	r2, r3, #1
 8004d54:	61ba      	str	r2, [r7, #24]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	2204      	movs	r2, #4
 8004d5e:	601a      	str	r2, [r3, #0]
				buf32[pos++]=16;
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	1c5a      	adds	r2, r3, #1
 8004d64:	61ba      	str	r2, [r7, #24]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	2210      	movs	r2, #16
 8004d6e:	601a      	str	r2, [r3, #0]
				buf32[pos++]=rndis_oid_gen_rcv_ok & 0xffffffff;
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	61ba      	str	r2, [r7, #24]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	441a      	add	r2, r3
 8004d7c:	4b9c      	ldr	r3, [pc, #624]	; (8004ff0 <RNDIS_Control_FS+0x830>)
 8004d7e:	cb18      	ldmia	r3, {r3, r4}
 8004d80:	6013      	str	r3, [r2, #0]
				break;
 8004d82:	e11c      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				buf32[pos++]=4;
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	1c5a      	adds	r2, r3, #1
 8004d88:	61ba      	str	r2, [r7, #24]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	4413      	add	r3, r2
 8004d90:	2204      	movs	r2, #4
 8004d92:	601a      	str	r2, [r3, #0]
				buf32[pos++]=16;
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	61ba      	str	r2, [r7, #24]
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	4413      	add	r3, r2
 8004da0:	2210      	movs	r2, #16
 8004da2:	601a      	str	r2, [r3, #0]
				buf32[pos++]=0;
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	61ba      	str	r2, [r7, #24]
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	4413      	add	r3, r2
 8004db0:	2200      	movs	r2, #0
 8004db2:	601a      	str	r2, [r3, #0]
				break;
 8004db4:	e103      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				buf32[pos++]=4;
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	61ba      	str	r2, [r7, #24]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	2204      	movs	r2, #4
 8004dc4:	601a      	str	r2, [r3, #0]
				buf32[pos++]=16;
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	1c5a      	adds	r2, r3, #1
 8004dca:	61ba      	str	r2, [r7, #24]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	2210      	movs	r2, #16
 8004dd4:	601a      	str	r2, [r3, #0]
				buf32[pos++]=0;
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	61ba      	str	r2, [r7, #24]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	4413      	add	r3, r2
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
				break;
 8004de6:	e0ea      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				buf32[pos++]=4;
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	1c5a      	adds	r2, r3, #1
 8004dec:	61ba      	str	r2, [r7, #24]
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	4413      	add	r3, r2
 8004df4:	2204      	movs	r2, #4
 8004df6:	601a      	str	r2, [r3, #0]
				buf32[pos++]=16;
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	61ba      	str	r2, [r7, #24]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	4413      	add	r3, r2
 8004e04:	2210      	movs	r2, #16
 8004e06:	601a      	str	r2, [r3, #0]
				buf32[pos++]=0;
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	1c5a      	adds	r2, r3, #1
 8004e0c:	61ba      	str	r2, [r7, #24]
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	4413      	add	r3, r2
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]
				break;
 8004e18:	e0d1      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				buf32[pos++]=3;
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	1c5a      	adds	r2, r3, #1
 8004e1e:	61ba      	str	r2, [r7, #24]
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	4413      	add	r3, r2
 8004e26:	2203      	movs	r2, #3
 8004e28:	601a      	str	r2, [r3, #0]
				buf32[pos++]=20;
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	61ba      	str	r2, [r7, #24]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	4413      	add	r3, r2
 8004e36:	2214      	movs	r2, #20
 8004e38:	601a      	str	r2, [r3, #0]
				buf32[pos++]=0x00757840;
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	61ba      	str	r2, [r7, #24]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	4413      	add	r3, r2
 8004e46:	4a6b      	ldr	r2, [pc, #428]	; (8004ff4 <RNDIS_Control_FS+0x834>)
 8004e48:	601a      	str	r2, [r3, #0]
				len=buf32[1]=pos*4-1;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	0092      	lsls	r2, r2, #2
 8004e52:	3a01      	subs	r2, #1
 8004e54:	601a      	str	r2, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	77fb      	strb	r3, [r7, #31]
				break;
 8004e5a:	e0b0      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				buf32[pos++]=sizeof(nome);
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	61ba      	str	r2, [r7, #24]
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	4413      	add	r3, r2
 8004e68:	220f      	movs	r2, #15
 8004e6a:	601a      	str	r2, [r3, #0]
				buf32[pos++]=16;
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	1c5a      	adds	r2, r3, #1
 8004e70:	61ba      	str	r2, [r7, #24]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	4413      	add	r3, r2
 8004e78:	2210      	movs	r2, #16
 8004e7a:	601a      	str	r2, [r3, #0]
				USBD_memcpy((char*)&buf32[pos++], nome, sizeof(nome));
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	61ba      	str	r2, [r7, #24]
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	4413      	add	r3, r2
 8004e88:	220f      	movs	r2, #15
 8004e8a:	495b      	ldr	r1, [pc, #364]	; (8004ff8 <RNDIS_Control_FS+0x838>)
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f00b ff66 	bl	8010d5e <memcpy>
				len=buf32[1]=pos*4+sizeof(nome);
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	3304      	adds	r3, #4
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	0092      	lsls	r2, r2, #2
 8004e9a:	320f      	adds	r2, #15
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	77fb      	strb	r3, [r7, #31]
				break;
 8004ea2:	e08c      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				buf32[pos++]=0;
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	61ba      	str	r2, [r7, #24]
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	4413      	add	r3, r2
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]
				buf32[pos++]=20;
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	61ba      	str	r2, [r7, #24]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	2214      	movs	r2, #20
 8004ec2:	601a      	str	r2, [r3, #0]
				break;
 8004ec4:	bf00      	nop
 8004ec6:	e07a      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
		} else if(rndis_data.MessageType==RNDIS_MSG_SET){
 8004ec8:	4b4c      	ldr	r3, [pc, #304]	; (8004ffc <RNDIS_Control_FS+0x83c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b05      	cmp	r3, #5
 8004ece:	d12e      	bne.n	8004f2e <RNDIS_Control_FS+0x76e>
			buf32[pos++]=RNDIS_MSG_SET_C;
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	61ba      	str	r2, [r7, #24]
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	4413      	add	r3, r2
 8004edc:	4a48      	ldr	r2, [pc, #288]	; (8005000 <RNDIS_Control_FS+0x840>)
 8004ede:	601a      	str	r2, [r3, #0]
			pos++;
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	61bb      	str	r3, [r7, #24]
			buf32[pos++]=rndis_data.RequestId;
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	61ba      	str	r2, [r7, #24]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	4a42      	ldr	r2, [pc, #264]	; (8004ffc <RNDIS_Control_FS+0x83c>)
 8004ef4:	6852      	ldr	r2, [r2, #4]
 8004ef6:	601a      	str	r2, [r3, #0]
			buf32[pos++]=RNDIS_STATUS_SUCCESS;
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	1c5a      	adds	r2, r3, #1
 8004efc:	61ba      	str	r2, [r7, #24]
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	4413      	add	r3, r2
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]
			switch(rndis_data.Oid){
 8004f08:	4b3c      	ldr	r3, [pc, #240]	; (8004ffc <RNDIS_Control_FS+0x83c>)
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	4a3d      	ldr	r2, [pc, #244]	; (8005004 <RNDIS_Control_FS+0x844>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d04e      	beq.n	8004fb0 <RNDIS_Control_FS+0x7f0>
 8004f12:	4a3c      	ldr	r2, [pc, #240]	; (8005004 <RNDIS_Control_FS+0x844>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d803      	bhi.n	8004f20 <RNDIS_Control_FS+0x760>
 8004f18:	4a3b      	ldr	r2, [pc, #236]	; (8005008 <RNDIS_Control_FS+0x848>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d04a      	beq.n	8004fb4 <RNDIS_Control_FS+0x7f4>
				break;
 8004f1e:	e04e      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
			switch(rndis_data.Oid){
 8004f20:	4a3a      	ldr	r2, [pc, #232]	; (800500c <RNDIS_Control_FS+0x84c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d048      	beq.n	8004fb8 <RNDIS_Control_FS+0x7f8>
 8004f26:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
 8004f2a:	d047      	beq.n	8004fbc <RNDIS_Control_FS+0x7fc>
				break;
 8004f2c:	e047      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
		} else if(rndis_data.MessageType==RNDIS_MSG_RESET){
 8004f2e:	4b33      	ldr	r3, [pc, #204]	; (8004ffc <RNDIS_Control_FS+0x83c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2b06      	cmp	r3, #6
 8004f34:	d11b      	bne.n	8004f6e <RNDIS_Control_FS+0x7ae>
			buf32[pos++]=RNDIS_MSG_RESET_C;
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	1c5a      	adds	r2, r3, #1
 8004f3a:	61ba      	str	r2, [r7, #24]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	4413      	add	r3, r2
 8004f42:	4a33      	ldr	r2, [pc, #204]	; (8005010 <RNDIS_Control_FS+0x850>)
 8004f44:	601a      	str	r2, [r3, #0]
			pos++;
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	61bb      	str	r3, [r7, #24]
			buf32[pos++]=RNDIS_STATUS_SUCCESS;
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	1c5a      	adds	r2, r3, #1
 8004f50:	61ba      	str	r2, [r7, #24]
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	4413      	add	r3, r2
 8004f58:	2200      	movs	r2, #0
 8004f5a:	601a      	str	r2, [r3, #0]
			buf32[pos++]=0;
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	1c5a      	adds	r2, r3, #1
 8004f60:	61ba      	str	r2, [r7, #24]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	4413      	add	r3, r2
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	e027      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
		} else if(rndis_data.MessageType==RNDIS_MSG_KEEPALIVE){
 8004f6e:	4b23      	ldr	r3, [pc, #140]	; (8004ffc <RNDIS_Control_FS+0x83c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2b08      	cmp	r3, #8
 8004f74:	d123      	bne.n	8004fbe <RNDIS_Control_FS+0x7fe>
			buf32[pos++]=RNDIS_MSG_KEEPALIVE_C;
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	61ba      	str	r2, [r7, #24]
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	4413      	add	r3, r2
 8004f82:	4a24      	ldr	r2, [pc, #144]	; (8005014 <RNDIS_Control_FS+0x854>)
 8004f84:	601a      	str	r2, [r3, #0]
			pos++;
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	61bb      	str	r3, [r7, #24]
			buf32[pos++]=rndis_data.RequestId;
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	61ba      	str	r2, [r7, #24]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	4413      	add	r3, r2
 8004f98:	4a18      	ldr	r2, [pc, #96]	; (8004ffc <RNDIS_Control_FS+0x83c>)
 8004f9a:	6852      	ldr	r2, [r2, #4]
 8004f9c:	601a      	str	r2, [r3, #0]
			buf32[pos++]=RNDIS_STATUS_SUCCESS;
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	61ba      	str	r2, [r7, #24]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	4413      	add	r3, r2
 8004faa:	2200      	movs	r2, #0
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	e006      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				break;
 8004fb0:	bf00      	nop
 8004fb2:	e004      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				break;
 8004fb4:	bf00      	nop
 8004fb6:	e002      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				break;
 8004fb8:	bf00      	nop
 8004fba:	e000      	b.n	8004fbe <RNDIS_Control_FS+0x7fe>
				break;
 8004fbc:	bf00      	nop
		if(!len) len=buf32[1]=pos*4;
 8004fbe:	7ffb      	ldrb	r3, [r7, #31]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d106      	bne.n	8004fd2 <RNDIS_Control_FS+0x812>
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	0092      	lsls	r2, r2, #2
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	77fb      	strb	r3, [r7, #31]
		USBD_CtlSendData(&hUsbDeviceFS, pbuf, len);
 8004fd2:	7ffb      	ldrb	r3, [r7, #31]
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	6839      	ldr	r1, [r7, #0]
 8004fda:	480f      	ldr	r0, [pc, #60]	; (8005018 <RNDIS_Control_FS+0x858>)
 8004fdc:	f002 faaa 	bl	8007534 <USBD_CtlSendData>
		break;
 8004fe0:	e000      	b.n	8004fe4 <RNDIS_Control_FS+0x824>
		break;
 8004fe2:	bf00      	nop
	}
	return (USBD_OK);
 8004fe4:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3724      	adds	r7, #36	; 0x24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd90      	pop	{r4, r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	20000c10 	.word	0x20000c10
 8004ff4:	00757840 	.word	0x00757840
 8004ff8:	08011204 	.word	0x08011204
 8004ffc:	20000c20 	.word	0x20000c20
 8005000:	80000005 	.word	0x80000005
 8005004:	00010111 	.word	0x00010111
 8005008:	0001010e 	.word	0x0001010e
 800500c:	00010114 	.word	0x00010114
 8005010:	80000006 	.word	0x80000006
 8005014:	80000008 	.word	0x80000008
 8005018:	20005780 	.word	0x20005780

0800501c <RNDIS_Receive_FS>:
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
//uint64_t timestamp;
static int8_t RNDIS_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
 800501c:	b590      	push	{r4, r7, lr}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
	BaseType_t xHigherPriorityTaskWoken;
	static uint16_t len=0;

	if(*Len>64){
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2b40      	cmp	r3, #64	; 0x40
 800502c:	d902      	bls.n	8005034 <RNDIS_Receive_FS+0x18>
		*Len=64;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2240      	movs	r2, #64	; 0x40
 8005032:	601a      	str	r2, [r3, #0]
	}
	memcpy(UserRxBufferFS+len, UserRxBufferFS_Temp, *Len);
 8005034:	4b25      	ldr	r3, [pc, #148]	; (80050cc <RNDIS_Receive_FS+0xb0>)
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	461a      	mov	r2, r3
 800503a:	4b25      	ldr	r3, [pc, #148]	; (80050d0 <RNDIS_Receive_FS+0xb4>)
 800503c:	18d0      	adds	r0, r2, r3
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	4923      	ldr	r1, [pc, #140]	; (80050d4 <RNDIS_Receive_FS+0xb8>)
 8005046:	f00b fe8a 	bl	8010d5e <memcpy>
	len+=(*Len);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	b29a      	uxth	r2, r3
 8005050:	4b1e      	ldr	r3, [pc, #120]	; (80050cc <RNDIS_Receive_FS+0xb0>)
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	4413      	add	r3, r2
 8005056:	b29a      	uxth	r2, r3
 8005058:	4b1c      	ldr	r3, [pc, #112]	; (80050cc <RNDIS_Receive_FS+0xb0>)
 800505a:	801a      	strh	r2, [r3, #0]

	if(*Len!=64 && xEMACTaskHandle!=0){
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b40      	cmp	r3, #64	; 0x40
 8005062:	d026      	beq.n	80050b2 <RNDIS_Receive_FS+0x96>
 8005064:	4b1c      	ldr	r3, [pc, #112]	; (80050d8 <RNDIS_Receive_FS+0xbc>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d022      	beq.n	80050b2 <RNDIS_Receive_FS+0x96>
		UserRxSize=len;
 800506c:	4b17      	ldr	r3, [pc, #92]	; (80050cc <RNDIS_Receive_FS+0xb0>)
 800506e:	881a      	ldrh	r2, [r3, #0]
 8005070:	4b1a      	ldr	r3, [pc, #104]	; (80050dc <RNDIS_Receive_FS+0xc0>)
 8005072:	801a      	strh	r2, [r3, #0]
		//timestamp=ullGetHighResolutionTime();
		len=0;
 8005074:	4b15      	ldr	r3, [pc, #84]	; (80050cc <RNDIS_Receive_FS+0xb0>)
 8005076:	2200      	movs	r2, #0
 8005078:	801a      	strh	r2, [r3, #0]
		vTaskNotifyGiveFromISR(xEMACTaskHandle, &xHigherPriorityTaskWoken);
 800507a:	4b17      	ldr	r3, [pc, #92]	; (80050d8 <RNDIS_Receive_FS+0xbc>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f107 020c 	add.w	r2, r7, #12
 8005082:	4611      	mov	r1, r2
 8005084:	4618      	mov	r0, r3
 8005086:	f004 fd79 	bl	8009b7c <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d007      	beq.n	80050a0 <RNDIS_Receive_FS+0x84>
 8005090:	4b13      	ldr	r3, [pc, #76]	; (80050e0 <RNDIS_Receive_FS+0xc4>)
 8005092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	f3bf 8f6f 	isb	sy
		rndis_oid_gen_rcv_ok++;
 80050a0:	4b10      	ldr	r3, [pc, #64]	; (80050e4 <RNDIS_Receive_FS+0xc8>)
 80050a2:	cb18      	ldmia	r3, {r3, r4}
 80050a4:	3301      	adds	r3, #1
 80050a6:	f144 0400 	adc.w	r4, r4, #0
 80050aa:	4a0e      	ldr	r2, [pc, #56]	; (80050e4 <RNDIS_Receive_FS+0xc8>)
 80050ac:	e882 0018 	stmia.w	r2, {r3, r4}
 80050b0:	e006      	b.n	80050c0 <RNDIS_Receive_FS+0xa4>
	} else {
		USBD_RNDIS_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS_Temp);
 80050b2:	4908      	ldr	r1, [pc, #32]	; (80050d4 <RNDIS_Receive_FS+0xb8>)
 80050b4:	480c      	ldr	r0, [pc, #48]	; (80050e8 <RNDIS_Receive_FS+0xcc>)
 80050b6:	f001 fb12 	bl	80066de <USBD_RNDIS_SetRxBuffer>
		USBD_RNDIS_ReceivePacket(&hUsbDeviceFS);
 80050ba:	480b      	ldr	r0, [pc, #44]	; (80050e8 <RNDIS_Receive_FS+0xcc>)
 80050bc:	f001 fb23 	bl	8006706 <USBD_RNDIS_ReceivePacket>
	}
	return (USBD_OK);
 80050c0:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd90      	pop	{r4, r7, pc}
 80050ca:	bf00      	nop
 80050cc:	20000c44 	.word	0x20000c44
 80050d0:	200003c4 	.word	0x200003c4
 80050d4:	20000bc4 	.word	0x20000bc4
 80050d8:	20000c1c 	.word	0x20000c1c
 80050dc:	20000c18 	.word	0x20000c18
 80050e0:	e000ed04 	.word	0xe000ed04
 80050e4:	20000c10 	.word	0x20000c10
 80050e8:	20005780 	.word	0x20005780

080050ec <xNetworkInterfaceInitialise>:
}

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
/* USER CODE END PRIVATE_FUNCTIONS_IMPLEMENTATION */

BaseType_t xNetworkInterfaceInitialise( void ){
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af02      	add	r7, sp, #8
	/* When returning non-zero, the stack will become active and
    start DHCP (if configured) */
	BaseType_t ret=0;
 80050f2:	2300      	movs	r3, #0
 80050f4:	607b      	str	r3, [r7, #4]

	/* The deferred interrupt handler task is created at the highest
	possible priority to ensure the interrupt handler can return directly
	to it.  The task's handle is stored in xEMACTaskHandle so interrupts can
	notify the task when there is something to process. */
	if(rndis_state==RNDIS_STATE_NORMAL){
 80050f6:	4b0d      	ldr	r3, [pc, #52]	; (800512c <xNetworkInterfaceInitialise+0x40>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d110      	bne.n	8005120 <xNetworkInterfaceInitialise+0x34>
		ret=1;
 80050fe:	2301      	movs	r3, #1
 8005100:	607b      	str	r3, [r7, #4]
		if(xEMACTaskHandle==0){
 8005102:	4b0b      	ldr	r3, [pc, #44]	; (8005130 <xNetworkInterfaceInitialise+0x44>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10a      	bne.n	8005120 <xNetworkInterfaceInitialise+0x34>
			xTaskCreate( prvEMACHandlerTask, "EMAC", configEMAC_TASK_STACK_SIZE, NULL, configMAX_PRIORITIES - 1, &xEMACTaskHandle );
 800510a:	4b09      	ldr	r3, [pc, #36]	; (8005130 <xNetworkInterfaceInitialise+0x44>)
 800510c:	9301      	str	r3, [sp, #4]
 800510e:	2306      	movs	r3, #6
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	2300      	movs	r3, #0
 8005114:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005118:	4906      	ldr	r1, [pc, #24]	; (8005134 <xNetworkInterfaceInitialise+0x48>)
 800511a:	4807      	ldr	r0, [pc, #28]	; (8005138 <xNetworkInterfaceInitialise+0x4c>)
 800511c:	f003 fdc4 	bl	8008ca8 <xTaskCreate>
		}
	}

	return ret;
 8005120:	687b      	ldr	r3, [r7, #4]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20000038 	.word	0x20000038
 8005130:	20000c1c 	.word	0x20000c1c
 8005134:	08011110 	.word	0x08011110
 8005138:	08005161 	.word	0x08005161

0800513c <xNetworkInterfaceOutput>:


BaseType_t xNetworkInterfaceOutput( NetworkBufferDescriptor_t * const pxDescriptor, BaseType_t xReleaseAfterSend  ){
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
	    takes a pointer to the start of the data to be sent and the length of the
	    data to be sent as two separate parameters.  The start of the data is located
	    by pxDescriptor->pucEthernetBuffer.  The length of the data is located
	    by pxDescriptor->xDataLength. */

	uint8_t retries=0;
 8005146:	2300      	movs	r3, #0
 8005148:	73fb      	strb	r3, [r7, #15]

	iptraceNETWORK_INTERFACE_TRANSMIT();

	/* Call the standard trace macro to log the send event. */

	if( xReleaseAfterSend != pdFALSE )
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d002      	beq.n	8005156 <xNetworkInterfaceOutput+0x1a>
	{
		/* It is assumed SendData() copies the data out of the FreeRTOS+TCP Ethernet
	        buffer.  The Ethernet buffer is therefore no longer needed, and must be
	        freed for re-use. */
		vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f00b faef 	bl	8010734 <vReleaseNetworkBufferAndDescriptor>
	}

	return pdTRUE;
 8005156:	2301      	movs	r3, #1

}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <prvEMACHandlerTask>:
		}

		return xReturn;
}

static void prvEMACHandlerTask( void *pvParameters ){
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
	{
		/* Wait for the Ethernet MAC interrupt to indicate that another packet
	        has been received.  The task notification is used in a similar way to a
	        counting semaphore to count Rx events, but is a lot more efficient than
	        a semaphore. */
		ulTaskNotifyTake( pdFALSE, portMAX_DELAY );
 8005168:	f04f 31ff 	mov.w	r1, #4294967295
 800516c:	2000      	movs	r0, #0
 800516e:	f004 fcbd 	bl	8009aec <ulTaskNotifyTake>

		/* See how much data was received.  Here it is assumed ReceiveSize() is
	        a peripheral driver function that returns the number of bytes in the
	        received Ethernet frame. */

		xBytesReceived = UserRxSize;
 8005172:	4b05      	ldr	r3, [pc, #20]	; (8005188 <prvEMACHandlerTask+0x28>)
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	617b      	str	r3, [r7, #20]
//				/* The event was lost because a network buffer was not available.
//	                Call the standard trace macro to log the occurrence. */
//				iptraceETHERNET_RX_EVENT_LOST();
//			}
//		}
		USBD_RNDIS_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS_Temp);
 8005178:	4904      	ldr	r1, [pc, #16]	; (800518c <prvEMACHandlerTask+0x2c>)
 800517a:	4805      	ldr	r0, [pc, #20]	; (8005190 <prvEMACHandlerTask+0x30>)
 800517c:	f001 faaf 	bl	80066de <USBD_RNDIS_SetRxBuffer>
		USBD_RNDIS_ReceivePacket(&hUsbDeviceFS);
 8005180:	4803      	ldr	r0, [pc, #12]	; (8005190 <prvEMACHandlerTask+0x30>)
 8005182:	f001 fac0 	bl	8006706 <USBD_RNDIS_ReceivePacket>
		ulTaskNotifyTake( pdFALSE, portMAX_DELAY );
 8005186:	e7ef      	b.n	8005168 <prvEMACHandlerTask+0x8>
 8005188:	20000c18 	.word	0x20000c18
 800518c:	20000bc4 	.word	0x20000bc4
 8005190:	20005780 	.word	0x20005780

08005194 <USBD_COMPOSITE_Init>:
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t  USBD_COMPOSITE_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	460b      	mov	r3, r1
 800519e:	70fb      	strb	r3, [r7, #3]
	uint8_t ret = 0;
 80051a0:	2300      	movs	r3, #0
 80051a2:	73fb      	strb	r3, [r7, #15]
	uint8_t index=0;
 80051a4:	2300      	movs	r3, #0
 80051a6:	73bb      	strb	r3, [r7, #14]

	for(index=0 ; index<usbd_composite_pClass_count;index++){
 80051a8:	2300      	movs	r3, #0
 80051aa:	73bb      	strb	r3, [r7, #14]
 80051ac:	e045      	b.n	800523a <USBD_COMPOSITE_Init+0xa6>
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 80051ae:	7bba      	ldrb	r2, [r7, #14]
 80051b0:	4927      	ldr	r1, [pc, #156]	; (8005250 <USBD_COMPOSITE_Init+0xbc>)
 80051b2:	4613      	mov	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	011b      	lsls	r3, r3, #4
 80051ba:	440b      	add	r3, r1
 80051bc:	3308      	adds	r3, #8
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 80051c6:	7bba      	ldrb	r2, [r7, #14]
 80051c8:	4921      	ldr	r1, [pc, #132]	; (8005250 <USBD_COMPOSITE_Init+0xbc>)
 80051ca:	4613      	mov	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	011b      	lsls	r3, r3, #4
 80051d2:	440b      	add	r3, r1
 80051d4:	330c      	adds	r3, #12
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

		ret|=usbd_composite_class_data[index].pClass->Init(pdev, cfgidx);
 80051de:	7bba      	ldrb	r2, [r7, #14]
 80051e0:	491b      	ldr	r1, [pc, #108]	; (8005250 <USBD_COMPOSITE_Init+0xbc>)
 80051e2:	4613      	mov	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	440b      	add	r3, r1
 80051ec:	3304      	adds	r3, #4
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	78fa      	ldrb	r2, [r7, #3]
 80051f4:	4611      	mov	r1, r2
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	4798      	blx	r3
 80051fa:	4603      	mov	r3, r0
 80051fc:	461a      	mov	r2, r3
 80051fe:	7bfb      	ldrb	r3, [r7, #15]
 8005200:	4313      	orrs	r3, r2
 8005202:	73fb      	strb	r3, [r7, #15]

		usbd_composite_class_data[index].pClassData=pdev->pClassData;
 8005204:	7bba      	ldrb	r2, [r7, #14]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
 800520c:	4810      	ldr	r0, [pc, #64]	; (8005250 <USBD_COMPOSITE_Init+0xbc>)
 800520e:	4613      	mov	r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4413      	add	r3, r2
 8005214:	011b      	lsls	r3, r3, #4
 8005216:	4403      	add	r3, r0
 8005218:	3308      	adds	r3, #8
 800521a:	6019      	str	r1, [r3, #0]
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
 800521c:	7bba      	ldrb	r2, [r7, #14]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8005224:	480a      	ldr	r0, [pc, #40]	; (8005250 <USBD_COMPOSITE_Init+0xbc>)
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	4403      	add	r3, r0
 8005230:	330c      	adds	r3, #12
 8005232:	6019      	str	r1, [r3, #0]
	for(index=0 ; index<usbd_composite_pClass_count;index++){
 8005234:	7bbb      	ldrb	r3, [r7, #14]
 8005236:	3301      	adds	r3, #1
 8005238:	73bb      	strb	r3, [r7, #14]
 800523a:	4b06      	ldr	r3, [pc, #24]	; (8005254 <USBD_COMPOSITE_Init+0xc0>)
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	7bba      	ldrb	r2, [r7, #14]
 8005240:	429a      	cmp	r2, r3
 8005242:	d3b4      	bcc.n	80051ae <USBD_COMPOSITE_Init+0x1a>
	}
	return ret;
 8005244:	7bfb      	ldrb	r3, [r7, #15]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	200067c0 	.word	0x200067c0
 8005254:	20000c46 	.word	0x20000c46

08005258 <USBD_COMPOSITE_DeInit>:
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t  USBD_COMPOSITE_DeInit (USBD_HandleTypeDef *pdev,
		uint8_t cfgidx)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	460b      	mov	r3, r1
 8005262:	70fb      	strb	r3, [r7, #3]
	uint8_t ret = 0;
 8005264:	2300      	movs	r3, #0
 8005266:	73fb      	strb	r3, [r7, #15]

	uint8_t index=0;
 8005268:	2300      	movs	r3, #0
 800526a:	73bb      	strb	r3, [r7, #14]

	for(index=0 ; index<usbd_composite_pClass_count;index++){
 800526c:	2300      	movs	r3, #0
 800526e:	73bb      	strb	r3, [r7, #14]
 8005270:	e045      	b.n	80052fe <USBD_COMPOSITE_DeInit+0xa6>
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8005272:	7bba      	ldrb	r2, [r7, #14]
 8005274:	4927      	ldr	r1, [pc, #156]	; (8005314 <USBD_COMPOSITE_DeInit+0xbc>)
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	440b      	add	r3, r1
 8005280:	3308      	adds	r3, #8
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 800528a:	7bba      	ldrb	r2, [r7, #14]
 800528c:	4921      	ldr	r1, [pc, #132]	; (8005314 <USBD_COMPOSITE_DeInit+0xbc>)
 800528e:	4613      	mov	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	011b      	lsls	r3, r3, #4
 8005296:	440b      	add	r3, r1
 8005298:	330c      	adds	r3, #12
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

		ret|=usbd_composite_class_data[index].pClass->DeInit(pdev, cfgidx);
 80052a2:	7bba      	ldrb	r2, [r7, #14]
 80052a4:	491b      	ldr	r1, [pc, #108]	; (8005314 <USBD_COMPOSITE_DeInit+0xbc>)
 80052a6:	4613      	mov	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4413      	add	r3, r2
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	440b      	add	r3, r1
 80052b0:	3304      	adds	r3, #4
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	78fa      	ldrb	r2, [r7, #3]
 80052b8:	4611      	mov	r1, r2
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	4798      	blx	r3
 80052be:	4603      	mov	r3, r0
 80052c0:	461a      	mov	r2, r3
 80052c2:	7bfb      	ldrb	r3, [r7, #15]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	73fb      	strb	r3, [r7, #15]

		usbd_composite_class_data[index].pClassData=pdev->pClassData;
 80052c8:	7bba      	ldrb	r2, [r7, #14]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
 80052d0:	4810      	ldr	r0, [pc, #64]	; (8005314 <USBD_COMPOSITE_DeInit+0xbc>)
 80052d2:	4613      	mov	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4413      	add	r3, r2
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	4403      	add	r3, r0
 80052dc:	3308      	adds	r3, #8
 80052de:	6019      	str	r1, [r3, #0]
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
 80052e0:	7bba      	ldrb	r2, [r7, #14]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 80052e8:	480a      	ldr	r0, [pc, #40]	; (8005314 <USBD_COMPOSITE_DeInit+0xbc>)
 80052ea:	4613      	mov	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	011b      	lsls	r3, r3, #4
 80052f2:	4403      	add	r3, r0
 80052f4:	330c      	adds	r3, #12
 80052f6:	6019      	str	r1, [r3, #0]
	for(index=0 ; index<usbd_composite_pClass_count;index++){
 80052f8:	7bbb      	ldrb	r3, [r7, #14]
 80052fa:	3301      	adds	r3, #1
 80052fc:	73bb      	strb	r3, [r7, #14]
 80052fe:	4b06      	ldr	r3, [pc, #24]	; (8005318 <USBD_COMPOSITE_DeInit+0xc0>)
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	7bba      	ldrb	r2, [r7, #14]
 8005304:	429a      	cmp	r2, r3
 8005306:	d3b4      	bcc.n	8005272 <USBD_COMPOSITE_DeInit+0x1a>
	}

	return ret;
 8005308:	7bfb      	ldrb	r3, [r7, #15]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	200067c0 	.word	0x200067c0
 8005318:	20000c46 	.word	0x20000c46

0800531c <USBD_COMPOSITE_Setup>:
 * @param  req: usb requests
 * @retval status
 */
static uint8_t  USBD_COMPOSITE_Setup (USBD_HandleTypeDef *pdev,
		USBD_SetupReqTypedef *req)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
	uint8_t status=USBD_OK;
 8005326:	2300      	movs	r3, #0
 8005328:	73fb      	strb	r3, [r7, #15]
	uint8_t itf=0;
 800532a:	2300      	movs	r3, #0
 800532c:	73bb      	strb	r3, [r7, #14]
	uint8_t index=-1;
 800532e:	23ff      	movs	r3, #255	; 0xff
 8005330:	737b      	strb	r3, [r7, #13]
	uint8_t i=0;
 8005332:	2300      	movs	r3, #0
 8005334:	733b      	strb	r3, [r7, #12]

	switch(req->bmRequest & 0x1F) {
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	f003 031f 	and.w	r3, r3, #31
 800533e:	2b01      	cmp	r3, #1
 8005340:	d002      	beq.n	8005348 <USBD_COMPOSITE_Setup+0x2c>
 8005342:	2b02      	cmp	r3, #2
 8005344:	d020      	beq.n	8005388 <USBD_COMPOSITE_Setup+0x6c>
 8005346:	e08a      	b.n	800545e <USBD_COMPOSITE_Setup+0x142>
	case USB_REQ_RECIPIENT_INTERFACE:
		for(index=0;index<usbd_composite_pClass_count;index++){
 8005348:	2300      	movs	r3, #0
 800534a:	737b      	strb	r3, [r7, #13]
 800534c:	e014      	b.n	8005378 <USBD_COMPOSITE_Setup+0x5c>
			itf+=usbd_composite_class_data[index].bInterfaces;
 800534e:	7b7a      	ldrb	r2, [r7, #13]
 8005350:	496d      	ldr	r1, [pc, #436]	; (8005508 <USBD_COMPOSITE_Setup+0x1ec>)
 8005352:	4613      	mov	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	440b      	add	r3, r1
 800535c:	3303      	adds	r3, #3
 800535e:	781a      	ldrb	r2, [r3, #0]
 8005360:	7bbb      	ldrb	r3, [r7, #14]
 8005362:	4413      	add	r3, r2
 8005364:	73bb      	strb	r3, [r7, #14]
			if(LOBYTE(req->wIndex)<itf)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	889b      	ldrh	r3, [r3, #4]
 800536a:	b2db      	uxtb	r3, r3
 800536c:	7bba      	ldrb	r2, [r7, #14]
 800536e:	429a      	cmp	r2, r3
 8005370:	d808      	bhi.n	8005384 <USBD_COMPOSITE_Setup+0x68>
		for(index=0;index<usbd_composite_pClass_count;index++){
 8005372:	7b7b      	ldrb	r3, [r7, #13]
 8005374:	3301      	adds	r3, #1
 8005376:	737b      	strb	r3, [r7, #13]
 8005378:	4b64      	ldr	r3, [pc, #400]	; (800550c <USBD_COMPOSITE_Setup+0x1f0>)
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	7b7a      	ldrb	r2, [r7, #13]
 800537e:	429a      	cmp	r2, r3
 8005380:	d3e5      	bcc.n	800534e <USBD_COMPOSITE_Setup+0x32>
				break;
		}
		break;
 8005382:	e06c      	b.n	800545e <USBD_COMPOSITE_Setup+0x142>
				break;
 8005384:	bf00      	nop
		break;
 8005386:	e06a      	b.n	800545e <USBD_COMPOSITE_Setup+0x142>
	case USB_REQ_RECIPIENT_ENDPOINT:
		for(index=0;index<usbd_composite_pClass_count;index++){
 8005388:	2300      	movs	r3, #0
 800538a:	737b      	strb	r3, [r7, #13]
 800538c:	e05f      	b.n	800544e <USBD_COMPOSITE_Setup+0x132>
			if(req->wIndex & 0x80){
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	889b      	ldrh	r3, [r3, #4]
 8005392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005396:	2b00      	cmp	r3, #0
 8005398:	d024      	beq.n	80053e4 <USBD_COMPOSITE_Setup+0xc8>
				for(i=0;i<usbd_composite_class_data[index].inEP;i++){
 800539a:	2300      	movs	r3, #0
 800539c:	733b      	strb	r3, [r7, #12]
 800539e:	e014      	b.n	80053ca <USBD_COMPOSITE_Setup+0xae>
					if(usbd_composite_class_data[index].inEPa[i]==(req->wIndex & 0x7F)){
 80053a0:	7b7a      	ldrb	r2, [r7, #13]
 80053a2:	7b39      	ldrb	r1, [r7, #12]
 80053a4:	4858      	ldr	r0, [pc, #352]	; (8005508 <USBD_COMPOSITE_Setup+0x1ec>)
 80053a6:	4613      	mov	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	011b      	lsls	r3, r3, #4
 80053ae:	4403      	add	r3, r0
 80053b0:	440b      	add	r3, r1
 80053b2:	3330      	adds	r3, #48	; 0x30
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	461a      	mov	r2, r3
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	889b      	ldrh	r3, [r3, #4]
 80053bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d032      	beq.n	800542a <USBD_COMPOSITE_Setup+0x10e>
				for(i=0;i<usbd_composite_class_data[index].inEP;i++){
 80053c4:	7b3b      	ldrb	r3, [r7, #12]
 80053c6:	3301      	adds	r3, #1
 80053c8:	733b      	strb	r3, [r7, #12]
 80053ca:	7b7a      	ldrb	r2, [r7, #13]
 80053cc:	494e      	ldr	r1, [pc, #312]	; (8005508 <USBD_COMPOSITE_Setup+0x1ec>)
 80053ce:	4613      	mov	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	011b      	lsls	r3, r3, #4
 80053d6:	440b      	add	r3, r1
 80053d8:	3310      	adds	r3, #16
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	7b3a      	ldrb	r2, [r7, #12]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d3de      	bcc.n	80053a0 <USBD_COMPOSITE_Setup+0x84>
 80053e2:	e025      	b.n	8005430 <USBD_COMPOSITE_Setup+0x114>
						break;
					}
				}
			} else {
				for(i=0;i<usbd_composite_class_data[index].outEP;i++){
 80053e4:	2300      	movs	r3, #0
 80053e6:	733b      	strb	r3, [r7, #12]
 80053e8:	e012      	b.n	8005410 <USBD_COMPOSITE_Setup+0xf4>
					if(usbd_composite_class_data[index].outEPa[i]==LOBYTE(req->wIndex)){
 80053ea:	7b7a      	ldrb	r2, [r7, #13]
 80053ec:	7b39      	ldrb	r1, [r7, #12]
 80053ee:	4846      	ldr	r0, [pc, #280]	; (8005508 <USBD_COMPOSITE_Setup+0x1ec>)
 80053f0:	4613      	mov	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	011b      	lsls	r3, r3, #4
 80053f8:	4403      	add	r3, r0
 80053fa:	440b      	add	r3, r1
 80053fc:	333f      	adds	r3, #63	; 0x3f
 80053fe:	781a      	ldrb	r2, [r3, #0]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	889b      	ldrh	r3, [r3, #4]
 8005404:	b2db      	uxtb	r3, r3
 8005406:	429a      	cmp	r2, r3
 8005408:	d011      	beq.n	800542e <USBD_COMPOSITE_Setup+0x112>
				for(i=0;i<usbd_composite_class_data[index].outEP;i++){
 800540a:	7b3b      	ldrb	r3, [r7, #12]
 800540c:	3301      	adds	r3, #1
 800540e:	733b      	strb	r3, [r7, #12]
 8005410:	7b7a      	ldrb	r2, [r7, #13]
 8005412:	493d      	ldr	r1, [pc, #244]	; (8005508 <USBD_COMPOSITE_Setup+0x1ec>)
 8005414:	4613      	mov	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	011b      	lsls	r3, r3, #4
 800541c:	440b      	add	r3, r1
 800541e:	3311      	adds	r3, #17
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	7b3a      	ldrb	r2, [r7, #12]
 8005424:	429a      	cmp	r2, r3
 8005426:	d3e0      	bcc.n	80053ea <USBD_COMPOSITE_Setup+0xce>
 8005428:	e002      	b.n	8005430 <USBD_COMPOSITE_Setup+0x114>
						break;
 800542a:	bf00      	nop
 800542c:	e000      	b.n	8005430 <USBD_COMPOSITE_Setup+0x114>
						break;
 800542e:	bf00      	nop
					}
				}
			}
			if(i!=usbd_composite_class_data[index].inEP){
 8005430:	7b7a      	ldrb	r2, [r7, #13]
 8005432:	4935      	ldr	r1, [pc, #212]	; (8005508 <USBD_COMPOSITE_Setup+0x1ec>)
 8005434:	4613      	mov	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	011b      	lsls	r3, r3, #4
 800543c:	440b      	add	r3, r1
 800543e:	3310      	adds	r3, #16
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	7b3a      	ldrb	r2, [r7, #12]
 8005444:	429a      	cmp	r2, r3
 8005446:	d108      	bne.n	800545a <USBD_COMPOSITE_Setup+0x13e>
		for(index=0;index<usbd_composite_pClass_count;index++){
 8005448:	7b7b      	ldrb	r3, [r7, #13]
 800544a:	3301      	adds	r3, #1
 800544c:	737b      	strb	r3, [r7, #13]
 800544e:	4b2f      	ldr	r3, [pc, #188]	; (800550c <USBD_COMPOSITE_Setup+0x1f0>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	7b7a      	ldrb	r2, [r7, #13]
 8005454:	429a      	cmp	r2, r3
 8005456:	d39a      	bcc.n	800538e <USBD_COMPOSITE_Setup+0x72>
				break;
			}
		}
		break;
 8005458:	e000      	b.n	800545c <USBD_COMPOSITE_Setup+0x140>
				break;
 800545a:	bf00      	nop
		break;
 800545c:	bf00      	nop
	}
	if(index!=-1 && index!=usbd_composite_pClass_count){
 800545e:	4b2b      	ldr	r3, [pc, #172]	; (800550c <USBD_COMPOSITE_Setup+0x1f0>)
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	7b7a      	ldrb	r2, [r7, #13]
 8005464:	429a      	cmp	r2, r3
 8005466:	d04a      	beq.n	80054fe <USBD_COMPOSITE_Setup+0x1e2>
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8005468:	7b7a      	ldrb	r2, [r7, #13]
 800546a:	4927      	ldr	r1, [pc, #156]	; (8005508 <USBD_COMPOSITE_Setup+0x1ec>)
 800546c:	4613      	mov	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	011b      	lsls	r3, r3, #4
 8005474:	440b      	add	r3, r1
 8005476:	3308      	adds	r3, #8
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8005480:	7b7a      	ldrb	r2, [r7, #13]
 8005482:	4921      	ldr	r1, [pc, #132]	; (8005508 <USBD_COMPOSITE_Setup+0x1ec>)
 8005484:	4613      	mov	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	011b      	lsls	r3, r3, #4
 800548c:	440b      	add	r3, r1
 800548e:	330c      	adds	r3, #12
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

		if(usbd_composite_class_data[index].pClass->Setup){
 8005498:	7b7a      	ldrb	r2, [r7, #13]
 800549a:	491b      	ldr	r1, [pc, #108]	; (8005508 <USBD_COMPOSITE_Setup+0x1ec>)
 800549c:	4613      	mov	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	440b      	add	r3, r1
 80054a6:	3304      	adds	r3, #4
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00e      	beq.n	80054ce <USBD_COMPOSITE_Setup+0x1b2>
			status=usbd_composite_class_data[index].pClass->Setup(pdev, req);
 80054b0:	7b7a      	ldrb	r2, [r7, #13]
 80054b2:	4915      	ldr	r1, [pc, #84]	; (8005508 <USBD_COMPOSITE_Setup+0x1ec>)
 80054b4:	4613      	mov	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	440b      	add	r3, r1
 80054be:	3304      	adds	r3, #4
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	6839      	ldr	r1, [r7, #0]
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	4798      	blx	r3
 80054ca:	4603      	mov	r3, r0
 80054cc:	73fb      	strb	r3, [r7, #15]
		}

		usbd_composite_class_data[index].pClassData=pdev->pClassData;
 80054ce:	7b7a      	ldrb	r2, [r7, #13]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
 80054d6:	480c      	ldr	r0, [pc, #48]	; (8005508 <USBD_COMPOSITE_Setup+0x1ec>)
 80054d8:	4613      	mov	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	011b      	lsls	r3, r3, #4
 80054e0:	4403      	add	r3, r0
 80054e2:	3308      	adds	r3, #8
 80054e4:	6019      	str	r1, [r3, #0]
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
 80054e6:	7b7a      	ldrb	r2, [r7, #13]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 80054ee:	4806      	ldr	r0, [pc, #24]	; (8005508 <USBD_COMPOSITE_Setup+0x1ec>)
 80054f0:	4613      	mov	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	011b      	lsls	r3, r3, #4
 80054f8:	4403      	add	r3, r0
 80054fa:	330c      	adds	r3, #12
 80054fc:	6019      	str	r1, [r3, #0]
	}

	return status;
 80054fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	200067c0 	.word	0x200067c0
 800550c:	20000c46 	.word	0x20000c46

08005510 <USBD_COMPOSITE_DataIn>:
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t  USBD_COMPOSITE_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005510:	b590      	push	{r4, r7, lr}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	460b      	mov	r3, r1
 800551a:	70fb      	strb	r3, [r7, #3]
	uint8_t status=USBD_OK;
 800551c:	2300      	movs	r3, #0
 800551e:	73fb      	strb	r3, [r7, #15]
	uint8_t index=0;
 8005520:	2300      	movs	r3, #0
 8005522:	73bb      	strb	r3, [r7, #14]
	uint8_t i=0;
 8005524:	2300      	movs	r3, #0
 8005526:	737b      	strb	r3, [r7, #13]

	for(index=0;index<usbd_composite_pClass_count;index++){
 8005528:	2300      	movs	r3, #0
 800552a:	73bb      	strb	r3, [r7, #14]
 800552c:	e07d      	b.n	800562a <USBD_COMPOSITE_DataIn+0x11a>
		for(i=0;i<usbd_composite_class_data[index].inEP;i++){
 800552e:	2300      	movs	r3, #0
 8005530:	737b      	strb	r3, [r7, #13]
 8005532:	e06b      	b.n	800560c <USBD_COMPOSITE_DataIn+0xfc>
			if(usbd_composite_class_data[index].inEPa[i]==epnum){
 8005534:	7bba      	ldrb	r2, [r7, #14]
 8005536:	7b79      	ldrb	r1, [r7, #13]
 8005538:	4841      	ldr	r0, [pc, #260]	; (8005640 <USBD_COMPOSITE_DataIn+0x130>)
 800553a:	4613      	mov	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4413      	add	r3, r2
 8005540:	011b      	lsls	r3, r3, #4
 8005542:	4403      	add	r3, r0
 8005544:	440b      	add	r3, r1
 8005546:	3330      	adds	r3, #48	; 0x30
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	78fa      	ldrb	r2, [r7, #3]
 800554c:	429a      	cmp	r2, r3
 800554e:	d15a      	bne.n	8005606 <USBD_COMPOSITE_DataIn+0xf6>
				pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8005550:	7bba      	ldrb	r2, [r7, #14]
 8005552:	493b      	ldr	r1, [pc, #236]	; (8005640 <USBD_COMPOSITE_DataIn+0x130>)
 8005554:	4613      	mov	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	011b      	lsls	r3, r3, #4
 800555c:	440b      	add	r3, r1
 800555e:	3308      	adds	r3, #8
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
				pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8005568:	7bba      	ldrb	r2, [r7, #14]
 800556a:	4935      	ldr	r1, [pc, #212]	; (8005640 <USBD_COMPOSITE_DataIn+0x130>)
 800556c:	4613      	mov	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	440b      	add	r3, r1
 8005576:	330c      	adds	r3, #12
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

				if(usbd_composite_class_data[index].pClass->DataOut){
 8005580:	7bba      	ldrb	r2, [r7, #14]
 8005582:	492f      	ldr	r1, [pc, #188]	; (8005640 <USBD_COMPOSITE_DataIn+0x130>)
 8005584:	4613      	mov	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	440b      	add	r3, r1
 800558e:	3304      	adds	r3, #4
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d01c      	beq.n	80055d2 <USBD_COMPOSITE_DataIn+0xc2>
					status|=usbd_composite_class_data[index].pClass->DataIn(pdev, usbd_composite_class_data[index].inEPn[i]);
 8005598:	7bba      	ldrb	r2, [r7, #14]
 800559a:	4929      	ldr	r1, [pc, #164]	; (8005640 <USBD_COMPOSITE_DataIn+0x130>)
 800559c:	4613      	mov	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	011b      	lsls	r3, r3, #4
 80055a4:	440b      	add	r3, r1
 80055a6:	3304      	adds	r3, #4
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	695c      	ldr	r4, [r3, #20]
 80055ac:	7bba      	ldrb	r2, [r7, #14]
 80055ae:	7b79      	ldrb	r1, [r7, #13]
 80055b0:	4823      	ldr	r0, [pc, #140]	; (8005640 <USBD_COMPOSITE_DataIn+0x130>)
 80055b2:	4613      	mov	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	011b      	lsls	r3, r3, #4
 80055ba:	4403      	add	r3, r0
 80055bc:	440b      	add	r3, r1
 80055be:	3312      	adds	r3, #18
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	4619      	mov	r1, r3
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	47a0      	blx	r4
 80055c8:	4603      	mov	r3, r0
 80055ca:	461a      	mov	r2, r3
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	73fb      	strb	r3, [r7, #15]
				}

				usbd_composite_class_data[index].pClassData=pdev->pClassData;
 80055d2:	7bba      	ldrb	r2, [r7, #14]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
 80055da:	4819      	ldr	r0, [pc, #100]	; (8005640 <USBD_COMPOSITE_DataIn+0x130>)
 80055dc:	4613      	mov	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4413      	add	r3, r2
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	4403      	add	r3, r0
 80055e6:	3308      	adds	r3, #8
 80055e8:	6019      	str	r1, [r3, #0]
				usbd_composite_class_data[index].pUserData=pdev->pUserData;
 80055ea:	7bba      	ldrb	r2, [r7, #14]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 80055f2:	4813      	ldr	r0, [pc, #76]	; (8005640 <USBD_COMPOSITE_DataIn+0x130>)
 80055f4:	4613      	mov	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	4403      	add	r3, r0
 80055fe:	330c      	adds	r3, #12
 8005600:	6019      	str	r1, [r3, #0]
				return status;
 8005602:	7bfb      	ldrb	r3, [r7, #15]
 8005604:	e018      	b.n	8005638 <USBD_COMPOSITE_DataIn+0x128>
		for(i=0;i<usbd_composite_class_data[index].inEP;i++){
 8005606:	7b7b      	ldrb	r3, [r7, #13]
 8005608:	3301      	adds	r3, #1
 800560a:	737b      	strb	r3, [r7, #13]
 800560c:	7bba      	ldrb	r2, [r7, #14]
 800560e:	490c      	ldr	r1, [pc, #48]	; (8005640 <USBD_COMPOSITE_DataIn+0x130>)
 8005610:	4613      	mov	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4413      	add	r3, r2
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	440b      	add	r3, r1
 800561a:	3310      	adds	r3, #16
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	7b7a      	ldrb	r2, [r7, #13]
 8005620:	429a      	cmp	r2, r3
 8005622:	d387      	bcc.n	8005534 <USBD_COMPOSITE_DataIn+0x24>
	for(index=0;index<usbd_composite_pClass_count;index++){
 8005624:	7bbb      	ldrb	r3, [r7, #14]
 8005626:	3301      	adds	r3, #1
 8005628:	73bb      	strb	r3, [r7, #14]
 800562a:	4b06      	ldr	r3, [pc, #24]	; (8005644 <USBD_COMPOSITE_DataIn+0x134>)
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	7bba      	ldrb	r2, [r7, #14]
 8005630:	429a      	cmp	r2, r3
 8005632:	f4ff af7c 	bcc.w	800552e <USBD_COMPOSITE_DataIn+0x1e>
			}
		}
	}
	return status;
 8005636:	7bfb      	ldrb	r3, [r7, #15]
}
 8005638:	4618      	mov	r0, r3
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	bd90      	pop	{r4, r7, pc}
 8005640:	200067c0 	.word	0x200067c0
 8005644:	20000c46 	.word	0x20000c46

08005648 <USBD_COMPOSITE_DataOut>:
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t  USBD_COMPOSITE_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8005648:	b590      	push	{r4, r7, lr}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	460b      	mov	r3, r1
 8005652:	70fb      	strb	r3, [r7, #3]
	uint8_t status=USBD_OK;
 8005654:	2300      	movs	r3, #0
 8005656:	73fb      	strb	r3, [r7, #15]
	uint8_t index=0;
 8005658:	2300      	movs	r3, #0
 800565a:	73bb      	strb	r3, [r7, #14]
	for(index=0;index<usbd_composite_pClass_count;index++){
 800565c:	2300      	movs	r3, #0
 800565e:	73bb      	strb	r3, [r7, #14]
 8005660:	e07f      	b.n	8005762 <USBD_COMPOSITE_DataOut+0x11a>
		uint8_t i=0;
 8005662:	2300      	movs	r3, #0
 8005664:	737b      	strb	r3, [r7, #13]
		for(i=0;i<usbd_composite_class_data[index].outEP;i++){
 8005666:	2300      	movs	r3, #0
 8005668:	737b      	strb	r3, [r7, #13]
 800566a:	e06b      	b.n	8005744 <USBD_COMPOSITE_DataOut+0xfc>
			if(usbd_composite_class_data[index].outEPa[i]==epnum){
 800566c:	7bba      	ldrb	r2, [r7, #14]
 800566e:	7b79      	ldrb	r1, [r7, #13]
 8005670:	4841      	ldr	r0, [pc, #260]	; (8005778 <USBD_COMPOSITE_DataOut+0x130>)
 8005672:	4613      	mov	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	011b      	lsls	r3, r3, #4
 800567a:	4403      	add	r3, r0
 800567c:	440b      	add	r3, r1
 800567e:	333f      	adds	r3, #63	; 0x3f
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	78fa      	ldrb	r2, [r7, #3]
 8005684:	429a      	cmp	r2, r3
 8005686:	d15a      	bne.n	800573e <USBD_COMPOSITE_DataOut+0xf6>
				pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8005688:	7bba      	ldrb	r2, [r7, #14]
 800568a:	493b      	ldr	r1, [pc, #236]	; (8005778 <USBD_COMPOSITE_DataOut+0x130>)
 800568c:	4613      	mov	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	011b      	lsls	r3, r3, #4
 8005694:	440b      	add	r3, r1
 8005696:	3308      	adds	r3, #8
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
				pdev->pUserData=usbd_composite_class_data[index].pUserData;
 80056a0:	7bba      	ldrb	r2, [r7, #14]
 80056a2:	4935      	ldr	r1, [pc, #212]	; (8005778 <USBD_COMPOSITE_DataOut+0x130>)
 80056a4:	4613      	mov	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	440b      	add	r3, r1
 80056ae:	330c      	adds	r3, #12
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

				if(usbd_composite_class_data[index].pClass->DataOut){
 80056b8:	7bba      	ldrb	r2, [r7, #14]
 80056ba:	492f      	ldr	r1, [pc, #188]	; (8005778 <USBD_COMPOSITE_DataOut+0x130>)
 80056bc:	4613      	mov	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	011b      	lsls	r3, r3, #4
 80056c4:	440b      	add	r3, r1
 80056c6:	3304      	adds	r3, #4
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d01c      	beq.n	800570a <USBD_COMPOSITE_DataOut+0xc2>
					status|=usbd_composite_class_data[index].pClass->DataOut(pdev, usbd_composite_class_data[index].outEPn[i]);
 80056d0:	7bba      	ldrb	r2, [r7, #14]
 80056d2:	4929      	ldr	r1, [pc, #164]	; (8005778 <USBD_COMPOSITE_DataOut+0x130>)
 80056d4:	4613      	mov	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4413      	add	r3, r2
 80056da:	011b      	lsls	r3, r3, #4
 80056dc:	440b      	add	r3, r1
 80056de:	3304      	adds	r3, #4
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	699c      	ldr	r4, [r3, #24]
 80056e4:	7bba      	ldrb	r2, [r7, #14]
 80056e6:	7b79      	ldrb	r1, [r7, #13]
 80056e8:	4823      	ldr	r0, [pc, #140]	; (8005778 <USBD_COMPOSITE_DataOut+0x130>)
 80056ea:	4613      	mov	r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	4413      	add	r3, r2
 80056f0:	011b      	lsls	r3, r3, #4
 80056f2:	4403      	add	r3, r0
 80056f4:	440b      	add	r3, r1
 80056f6:	3321      	adds	r3, #33	; 0x21
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	4619      	mov	r1, r3
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	47a0      	blx	r4
 8005700:	4603      	mov	r3, r0
 8005702:	461a      	mov	r2, r3
 8005704:	7bfb      	ldrb	r3, [r7, #15]
 8005706:	4313      	orrs	r3, r2
 8005708:	73fb      	strb	r3, [r7, #15]
				}

				usbd_composite_class_data[index].pClassData=pdev->pClassData;
 800570a:	7bba      	ldrb	r2, [r7, #14]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
 8005712:	4819      	ldr	r0, [pc, #100]	; (8005778 <USBD_COMPOSITE_DataOut+0x130>)
 8005714:	4613      	mov	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	4403      	add	r3, r0
 800571e:	3308      	adds	r3, #8
 8005720:	6019      	str	r1, [r3, #0]
				usbd_composite_class_data[index].pUserData=pdev->pUserData;
 8005722:	7bba      	ldrb	r2, [r7, #14]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 800572a:	4813      	ldr	r0, [pc, #76]	; (8005778 <USBD_COMPOSITE_DataOut+0x130>)
 800572c:	4613      	mov	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	4403      	add	r3, r0
 8005736:	330c      	adds	r3, #12
 8005738:	6019      	str	r1, [r3, #0]
				return status;
 800573a:	7bfb      	ldrb	r3, [r7, #15]
 800573c:	e018      	b.n	8005770 <USBD_COMPOSITE_DataOut+0x128>
		for(i=0;i<usbd_composite_class_data[index].outEP;i++){
 800573e:	7b7b      	ldrb	r3, [r7, #13]
 8005740:	3301      	adds	r3, #1
 8005742:	737b      	strb	r3, [r7, #13]
 8005744:	7bba      	ldrb	r2, [r7, #14]
 8005746:	490c      	ldr	r1, [pc, #48]	; (8005778 <USBD_COMPOSITE_DataOut+0x130>)
 8005748:	4613      	mov	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	440b      	add	r3, r1
 8005752:	3311      	adds	r3, #17
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	7b7a      	ldrb	r2, [r7, #13]
 8005758:	429a      	cmp	r2, r3
 800575a:	d387      	bcc.n	800566c <USBD_COMPOSITE_DataOut+0x24>
	for(index=0;index<usbd_composite_pClass_count;index++){
 800575c:	7bbb      	ldrb	r3, [r7, #14]
 800575e:	3301      	adds	r3, #1
 8005760:	73bb      	strb	r3, [r7, #14]
 8005762:	4b06      	ldr	r3, [pc, #24]	; (800577c <USBD_COMPOSITE_DataOut+0x134>)
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	7bba      	ldrb	r2, [r7, #14]
 8005768:	429a      	cmp	r2, r3
 800576a:	f4ff af7a 	bcc.w	8005662 <USBD_COMPOSITE_DataOut+0x1a>
			}
		}
	}
	return status;
 800576e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3714      	adds	r7, #20
 8005774:	46bd      	mov	sp, r7
 8005776:	bd90      	pop	{r4, r7, pc}
 8005778:	200067c0 	.word	0x200067c0
 800577c:	20000c46 	.word	0x20000c46

08005780 <USBD_COMPOSITE_EP0_RxReady>:
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t  USBD_COMPOSITE_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
	uint8_t status=USBD_OK;
 8005788:	2300      	movs	r3, #0
 800578a:	73fb      	strb	r3, [r7, #15]
	uint8_t index;
	for(index=0;index<usbd_composite_pClass_count;index++){
 800578c:	2300      	movs	r3, #0
 800578e:	73bb      	strb	r3, [r7, #14]
 8005790:	e04f      	b.n	8005832 <USBD_COMPOSITE_EP0_RxReady+0xb2>
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8005792:	7bba      	ldrb	r2, [r7, #14]
 8005794:	492c      	ldr	r1, [pc, #176]	; (8005848 <USBD_COMPOSITE_EP0_RxReady+0xc8>)
 8005796:	4613      	mov	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	011b      	lsls	r3, r3, #4
 800579e:	440b      	add	r3, r1
 80057a0:	3308      	adds	r3, #8
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 80057aa:	7bba      	ldrb	r2, [r7, #14]
 80057ac:	4926      	ldr	r1, [pc, #152]	; (8005848 <USBD_COMPOSITE_EP0_RxReady+0xc8>)
 80057ae:	4613      	mov	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	011b      	lsls	r3, r3, #4
 80057b6:	440b      	add	r3, r1
 80057b8:	330c      	adds	r3, #12
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

		if(usbd_composite_class_data[index].pClass->EP0_RxReady){
 80057c2:	7bba      	ldrb	r2, [r7, #14]
 80057c4:	4920      	ldr	r1, [pc, #128]	; (8005848 <USBD_COMPOSITE_EP0_RxReady+0xc8>)
 80057c6:	4613      	mov	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	011b      	lsls	r3, r3, #4
 80057ce:	440b      	add	r3, r1
 80057d0:	3304      	adds	r3, #4
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d010      	beq.n	80057fc <USBD_COMPOSITE_EP0_RxReady+0x7c>
			status|=usbd_composite_class_data[index].pClass->EP0_RxReady(pdev);
 80057da:	7bba      	ldrb	r2, [r7, #14]
 80057dc:	491a      	ldr	r1, [pc, #104]	; (8005848 <USBD_COMPOSITE_EP0_RxReady+0xc8>)
 80057de:	4613      	mov	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	440b      	add	r3, r1
 80057e8:	3304      	adds	r3, #4
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	4798      	blx	r3
 80057f2:	4603      	mov	r3, r0
 80057f4:	461a      	mov	r2, r3
 80057f6:	7bfb      	ldrb	r3, [r7, #15]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	73fb      	strb	r3, [r7, #15]
		}

		usbd_composite_class_data[index].pClassData=pdev->pClassData;
 80057fc:	7bba      	ldrb	r2, [r7, #14]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
 8005804:	4810      	ldr	r0, [pc, #64]	; (8005848 <USBD_COMPOSITE_EP0_RxReady+0xc8>)
 8005806:	4613      	mov	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4413      	add	r3, r2
 800580c:	011b      	lsls	r3, r3, #4
 800580e:	4403      	add	r3, r0
 8005810:	3308      	adds	r3, #8
 8005812:	6019      	str	r1, [r3, #0]
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
 8005814:	7bba      	ldrb	r2, [r7, #14]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 800581c:	480a      	ldr	r0, [pc, #40]	; (8005848 <USBD_COMPOSITE_EP0_RxReady+0xc8>)
 800581e:	4613      	mov	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	011b      	lsls	r3, r3, #4
 8005826:	4403      	add	r3, r0
 8005828:	330c      	adds	r3, #12
 800582a:	6019      	str	r1, [r3, #0]
	for(index=0;index<usbd_composite_pClass_count;index++){
 800582c:	7bbb      	ldrb	r3, [r7, #14]
 800582e:	3301      	adds	r3, #1
 8005830:	73bb      	strb	r3, [r7, #14]
 8005832:	4b06      	ldr	r3, [pc, #24]	; (800584c <USBD_COMPOSITE_EP0_RxReady+0xcc>)
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	7bba      	ldrb	r2, [r7, #14]
 8005838:	429a      	cmp	r2, r3
 800583a:	d3aa      	bcc.n	8005792 <USBD_COMPOSITE_EP0_RxReady+0x12>
	}
	return status;
 800583c:	7bfb      	ldrb	r3, [r7, #15]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	200067c0 	.word	0x200067c0
 800584c:	20000c46 	.word	0x20000c46

08005850 <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_COMPOSITE_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
	uint8_t status=USBD_OK;
 8005858:	2300      	movs	r3, #0
 800585a:	73fb      	strb	r3, [r7, #15]
	uint8_t index;
	for(index=0;index<usbd_composite_pClass_count;index++){
 800585c:	2300      	movs	r3, #0
 800585e:	73bb      	strb	r3, [r7, #14]
 8005860:	e04f      	b.n	8005902 <USBD_COMPOSITE_EP0_TxReady+0xb2>
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8005862:	7bba      	ldrb	r2, [r7, #14]
 8005864:	492c      	ldr	r1, [pc, #176]	; (8005918 <USBD_COMPOSITE_EP0_TxReady+0xc8>)
 8005866:	4613      	mov	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4413      	add	r3, r2
 800586c:	011b      	lsls	r3, r3, #4
 800586e:	440b      	add	r3, r1
 8005870:	3308      	adds	r3, #8
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 800587a:	7bba      	ldrb	r2, [r7, #14]
 800587c:	4926      	ldr	r1, [pc, #152]	; (8005918 <USBD_COMPOSITE_EP0_TxReady+0xc8>)
 800587e:	4613      	mov	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4413      	add	r3, r2
 8005884:	011b      	lsls	r3, r3, #4
 8005886:	440b      	add	r3, r1
 8005888:	330c      	adds	r3, #12
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

		if(usbd_composite_class_data[index].pClass->EP0_TxSent){
 8005892:	7bba      	ldrb	r2, [r7, #14]
 8005894:	4920      	ldr	r1, [pc, #128]	; (8005918 <USBD_COMPOSITE_EP0_TxReady+0xc8>)
 8005896:	4613      	mov	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	011b      	lsls	r3, r3, #4
 800589e:	440b      	add	r3, r1
 80058a0:	3304      	adds	r3, #4
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d010      	beq.n	80058cc <USBD_COMPOSITE_EP0_TxReady+0x7c>
			status|=usbd_composite_class_data[index].pClass->EP0_TxSent(pdev);
 80058aa:	7bba      	ldrb	r2, [r7, #14]
 80058ac:	491a      	ldr	r1, [pc, #104]	; (8005918 <USBD_COMPOSITE_EP0_TxReady+0xc8>)
 80058ae:	4613      	mov	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	011b      	lsls	r3, r3, #4
 80058b6:	440b      	add	r3, r1
 80058b8:	3304      	adds	r3, #4
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	4798      	blx	r3
 80058c2:	4603      	mov	r3, r0
 80058c4:	461a      	mov	r2, r3
 80058c6:	7bfb      	ldrb	r3, [r7, #15]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	73fb      	strb	r3, [r7, #15]
		}

		usbd_composite_class_data[index].pClassData=pdev->pClassData;
 80058cc:	7bba      	ldrb	r2, [r7, #14]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
 80058d4:	4810      	ldr	r0, [pc, #64]	; (8005918 <USBD_COMPOSITE_EP0_TxReady+0xc8>)
 80058d6:	4613      	mov	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	011b      	lsls	r3, r3, #4
 80058de:	4403      	add	r3, r0
 80058e0:	3308      	adds	r3, #8
 80058e2:	6019      	str	r1, [r3, #0]
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
 80058e4:	7bba      	ldrb	r2, [r7, #14]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 80058ec:	480a      	ldr	r0, [pc, #40]	; (8005918 <USBD_COMPOSITE_EP0_TxReady+0xc8>)
 80058ee:	4613      	mov	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	011b      	lsls	r3, r3, #4
 80058f6:	4403      	add	r3, r0
 80058f8:	330c      	adds	r3, #12
 80058fa:	6019      	str	r1, [r3, #0]
	for(index=0;index<usbd_composite_pClass_count;index++){
 80058fc:	7bbb      	ldrb	r3, [r7, #14]
 80058fe:	3301      	adds	r3, #1
 8005900:	73bb      	strb	r3, [r7, #14]
 8005902:	4b06      	ldr	r3, [pc, #24]	; (800591c <USBD_COMPOSITE_EP0_TxReady+0xcc>)
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	7bba      	ldrb	r2, [r7, #14]
 8005908:	429a      	cmp	r2, r3
 800590a:	d3aa      	bcc.n	8005862 <USBD_COMPOSITE_EP0_TxReady+0x12>
	}
	return status;
 800590c:	7bfb      	ldrb	r3, [r7, #15]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	200067c0 	.word	0x200067c0
 800591c:	20000c46 	.word	0x20000c46

08005920 <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_COMPOSITE_SOF (USBD_HandleTypeDef *pdev)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
	uint8_t status=USBD_OK;
 8005928:	2300      	movs	r3, #0
 800592a:	73fb      	strb	r3, [r7, #15]
	uint8_t index;
	for(index=0;index<usbd_composite_pClass_count;index++){
 800592c:	2300      	movs	r3, #0
 800592e:	73bb      	strb	r3, [r7, #14]
 8005930:	e04f      	b.n	80059d2 <USBD_COMPOSITE_SOF+0xb2>
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8005932:	7bba      	ldrb	r2, [r7, #14]
 8005934:	492c      	ldr	r1, [pc, #176]	; (80059e8 <USBD_COMPOSITE_SOF+0xc8>)
 8005936:	4613      	mov	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	011b      	lsls	r3, r3, #4
 800593e:	440b      	add	r3, r1
 8005940:	3308      	adds	r3, #8
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 800594a:	7bba      	ldrb	r2, [r7, #14]
 800594c:	4926      	ldr	r1, [pc, #152]	; (80059e8 <USBD_COMPOSITE_SOF+0xc8>)
 800594e:	4613      	mov	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	011b      	lsls	r3, r3, #4
 8005956:	440b      	add	r3, r1
 8005958:	330c      	adds	r3, #12
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

		if(usbd_composite_class_data[index].pClass->SOF){
 8005962:	7bba      	ldrb	r2, [r7, #14]
 8005964:	4920      	ldr	r1, [pc, #128]	; (80059e8 <USBD_COMPOSITE_SOF+0xc8>)
 8005966:	4613      	mov	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	011b      	lsls	r3, r3, #4
 800596e:	440b      	add	r3, r1
 8005970:	3304      	adds	r3, #4
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d010      	beq.n	800599c <USBD_COMPOSITE_SOF+0x7c>
			status|=usbd_composite_class_data[index].pClass->SOF(pdev);
 800597a:	7bba      	ldrb	r2, [r7, #14]
 800597c:	491a      	ldr	r1, [pc, #104]	; (80059e8 <USBD_COMPOSITE_SOF+0xc8>)
 800597e:	4613      	mov	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	011b      	lsls	r3, r3, #4
 8005986:	440b      	add	r3, r1
 8005988:	3304      	adds	r3, #4
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	4798      	blx	r3
 8005992:	4603      	mov	r3, r0
 8005994:	461a      	mov	r2, r3
 8005996:	7bfb      	ldrb	r3, [r7, #15]
 8005998:	4313      	orrs	r3, r2
 800599a:	73fb      	strb	r3, [r7, #15]
		}

		usbd_composite_class_data[index].pClassData=pdev->pClassData;
 800599c:	7bba      	ldrb	r2, [r7, #14]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
 80059a4:	4810      	ldr	r0, [pc, #64]	; (80059e8 <USBD_COMPOSITE_SOF+0xc8>)
 80059a6:	4613      	mov	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	011b      	lsls	r3, r3, #4
 80059ae:	4403      	add	r3, r0
 80059b0:	3308      	adds	r3, #8
 80059b2:	6019      	str	r1, [r3, #0]
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
 80059b4:	7bba      	ldrb	r2, [r7, #14]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 80059bc:	480a      	ldr	r0, [pc, #40]	; (80059e8 <USBD_COMPOSITE_SOF+0xc8>)
 80059be:	4613      	mov	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4413      	add	r3, r2
 80059c4:	011b      	lsls	r3, r3, #4
 80059c6:	4403      	add	r3, r0
 80059c8:	330c      	adds	r3, #12
 80059ca:	6019      	str	r1, [r3, #0]
	for(index=0;index<usbd_composite_pClass_count;index++){
 80059cc:	7bbb      	ldrb	r3, [r7, #14]
 80059ce:	3301      	adds	r3, #1
 80059d0:	73bb      	strb	r3, [r7, #14]
 80059d2:	4b06      	ldr	r3, [pc, #24]	; (80059ec <USBD_COMPOSITE_SOF+0xcc>)
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	7bba      	ldrb	r2, [r7, #14]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d3aa      	bcc.n	8005932 <USBD_COMPOSITE_SOF+0x12>
	}
	return status;
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	200067c0 	.word	0x200067c0
 80059ec:	20000c46 	.word	0x20000c46

080059f0 <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_COMPOSITE_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059f0:	b590      	push	{r4, r7, lr}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	460b      	mov	r3, r1
 80059fa:	70fb      	strb	r3, [r7, #3]
	uint8_t status=USBD_OK;
 80059fc:	2300      	movs	r3, #0
 80059fe:	73fb      	strb	r3, [r7, #15]
	uint8_t index=0;
 8005a00:	2300      	movs	r3, #0
 8005a02:	73bb      	strb	r3, [r7, #14]
	for(index=0;index<usbd_composite_pClass_count;index++){
 8005a04:	2300      	movs	r3, #0
 8005a06:	73bb      	strb	r3, [r7, #14]
 8005a08:	e07f      	b.n	8005b0a <USBD_COMPOSITE_IsoINIncomplete+0x11a>
		uint8_t i=0;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	737b      	strb	r3, [r7, #13]
		for(i=0;i<usbd_composite_class_data[index].inEP;i++){
 8005a0e:	2300      	movs	r3, #0
 8005a10:	737b      	strb	r3, [r7, #13]
 8005a12:	e06b      	b.n	8005aec <USBD_COMPOSITE_IsoINIncomplete+0xfc>
			if(usbd_composite_class_data[index].inEPa[i]==epnum){
 8005a14:	7bba      	ldrb	r2, [r7, #14]
 8005a16:	7b79      	ldrb	r1, [r7, #13]
 8005a18:	4841      	ldr	r0, [pc, #260]	; (8005b20 <USBD_COMPOSITE_IsoINIncomplete+0x130>)
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	011b      	lsls	r3, r3, #4
 8005a22:	4403      	add	r3, r0
 8005a24:	440b      	add	r3, r1
 8005a26:	3330      	adds	r3, #48	; 0x30
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	78fa      	ldrb	r2, [r7, #3]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d15a      	bne.n	8005ae6 <USBD_COMPOSITE_IsoINIncomplete+0xf6>
				pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8005a30:	7bba      	ldrb	r2, [r7, #14]
 8005a32:	493b      	ldr	r1, [pc, #236]	; (8005b20 <USBD_COMPOSITE_IsoINIncomplete+0x130>)
 8005a34:	4613      	mov	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	440b      	add	r3, r1
 8005a3e:	3308      	adds	r3, #8
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
				pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8005a48:	7bba      	ldrb	r2, [r7, #14]
 8005a4a:	4935      	ldr	r1, [pc, #212]	; (8005b20 <USBD_COMPOSITE_IsoINIncomplete+0x130>)
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	4413      	add	r3, r2
 8005a52:	011b      	lsls	r3, r3, #4
 8005a54:	440b      	add	r3, r1
 8005a56:	330c      	adds	r3, #12
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

				if(usbd_composite_class_data[index].pClass->IsoINIncomplete){
 8005a60:	7bba      	ldrb	r2, [r7, #14]
 8005a62:	492f      	ldr	r1, [pc, #188]	; (8005b20 <USBD_COMPOSITE_IsoINIncomplete+0x130>)
 8005a64:	4613      	mov	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	011b      	lsls	r3, r3, #4
 8005a6c:	440b      	add	r3, r1
 8005a6e:	3304      	adds	r3, #4
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d01c      	beq.n	8005ab2 <USBD_COMPOSITE_IsoINIncomplete+0xc2>
					status|=usbd_composite_class_data[index].pClass->IsoINIncomplete(pdev, usbd_composite_class_data[index].inEPn[i]);
 8005a78:	7bba      	ldrb	r2, [r7, #14]
 8005a7a:	4929      	ldr	r1, [pc, #164]	; (8005b20 <USBD_COMPOSITE_IsoINIncomplete+0x130>)
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	011b      	lsls	r3, r3, #4
 8005a84:	440b      	add	r3, r1
 8005a86:	3304      	adds	r3, #4
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6a1c      	ldr	r4, [r3, #32]
 8005a8c:	7bba      	ldrb	r2, [r7, #14]
 8005a8e:	7b79      	ldrb	r1, [r7, #13]
 8005a90:	4823      	ldr	r0, [pc, #140]	; (8005b20 <USBD_COMPOSITE_IsoINIncomplete+0x130>)
 8005a92:	4613      	mov	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	011b      	lsls	r3, r3, #4
 8005a9a:	4403      	add	r3, r0
 8005a9c:	440b      	add	r3, r1
 8005a9e:	3312      	adds	r3, #18
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	47a0      	blx	r4
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	461a      	mov	r2, r3
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	73fb      	strb	r3, [r7, #15]
				}

				usbd_composite_class_data[index].pClassData=pdev->pClassData;
 8005ab2:	7bba      	ldrb	r2, [r7, #14]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
 8005aba:	4819      	ldr	r0, [pc, #100]	; (8005b20 <USBD_COMPOSITE_IsoINIncomplete+0x130>)
 8005abc:	4613      	mov	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	4403      	add	r3, r0
 8005ac6:	3308      	adds	r3, #8
 8005ac8:	6019      	str	r1, [r3, #0]
				usbd_composite_class_data[index].pUserData=pdev->pUserData;
 8005aca:	7bba      	ldrb	r2, [r7, #14]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8005ad2:	4813      	ldr	r0, [pc, #76]	; (8005b20 <USBD_COMPOSITE_IsoINIncomplete+0x130>)
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4413      	add	r3, r2
 8005ada:	011b      	lsls	r3, r3, #4
 8005adc:	4403      	add	r3, r0
 8005ade:	330c      	adds	r3, #12
 8005ae0:	6019      	str	r1, [r3, #0]
				return status;
 8005ae2:	7bfb      	ldrb	r3, [r7, #15]
 8005ae4:	e018      	b.n	8005b18 <USBD_COMPOSITE_IsoINIncomplete+0x128>
		for(i=0;i<usbd_composite_class_data[index].inEP;i++){
 8005ae6:	7b7b      	ldrb	r3, [r7, #13]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	737b      	strb	r3, [r7, #13]
 8005aec:	7bba      	ldrb	r2, [r7, #14]
 8005aee:	490c      	ldr	r1, [pc, #48]	; (8005b20 <USBD_COMPOSITE_IsoINIncomplete+0x130>)
 8005af0:	4613      	mov	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	440b      	add	r3, r1
 8005afa:	3310      	adds	r3, #16
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	7b7a      	ldrb	r2, [r7, #13]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d387      	bcc.n	8005a14 <USBD_COMPOSITE_IsoINIncomplete+0x24>
	for(index=0;index<usbd_composite_pClass_count;index++){
 8005b04:	7bbb      	ldrb	r3, [r7, #14]
 8005b06:	3301      	adds	r3, #1
 8005b08:	73bb      	strb	r3, [r7, #14]
 8005b0a:	4b06      	ldr	r3, [pc, #24]	; (8005b24 <USBD_COMPOSITE_IsoINIncomplete+0x134>)
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	7bba      	ldrb	r2, [r7, #14]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	f4ff af7a 	bcc.w	8005a0a <USBD_COMPOSITE_IsoINIncomplete+0x1a>
			}
		}
	}
	return status;
 8005b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd90      	pop	{r4, r7, pc}
 8005b20:	200067c0 	.word	0x200067c0
 8005b24:	20000c46 	.word	0x20000c46

08005b28 <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_COMPOSITE_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b28:	b590      	push	{r4, r7, lr}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	460b      	mov	r3, r1
 8005b32:	70fb      	strb	r3, [r7, #3]

	uint8_t status=USBD_OK;
 8005b34:	2300      	movs	r3, #0
 8005b36:	73fb      	strb	r3, [r7, #15]
	uint8_t index=0;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	73bb      	strb	r3, [r7, #14]
	for(index=0;index<usbd_composite_pClass_count;index++){
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	73bb      	strb	r3, [r7, #14]
 8005b40:	e07f      	b.n	8005c42 <USBD_COMPOSITE_IsoOutIncomplete+0x11a>
		uint8_t i=0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	737b      	strb	r3, [r7, #13]
		for(i=0;i<usbd_composite_class_data[index].outEP;i++){
 8005b46:	2300      	movs	r3, #0
 8005b48:	737b      	strb	r3, [r7, #13]
 8005b4a:	e06b      	b.n	8005c24 <USBD_COMPOSITE_IsoOutIncomplete+0xfc>
			if(usbd_composite_class_data[index].outEPa[i]==epnum){
 8005b4c:	7bba      	ldrb	r2, [r7, #14]
 8005b4e:	7b79      	ldrb	r1, [r7, #13]
 8005b50:	4841      	ldr	r0, [pc, #260]	; (8005c58 <USBD_COMPOSITE_IsoOutIncomplete+0x130>)
 8005b52:	4613      	mov	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	011b      	lsls	r3, r3, #4
 8005b5a:	4403      	add	r3, r0
 8005b5c:	440b      	add	r3, r1
 8005b5e:	333f      	adds	r3, #63	; 0x3f
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	78fa      	ldrb	r2, [r7, #3]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d15a      	bne.n	8005c1e <USBD_COMPOSITE_IsoOutIncomplete+0xf6>
				pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8005b68:	7bba      	ldrb	r2, [r7, #14]
 8005b6a:	493b      	ldr	r1, [pc, #236]	; (8005c58 <USBD_COMPOSITE_IsoOutIncomplete+0x130>)
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	011b      	lsls	r3, r3, #4
 8005b74:	440b      	add	r3, r1
 8005b76:	3308      	adds	r3, #8
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
				pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8005b80:	7bba      	ldrb	r2, [r7, #14]
 8005b82:	4935      	ldr	r1, [pc, #212]	; (8005c58 <USBD_COMPOSITE_IsoOutIncomplete+0x130>)
 8005b84:	4613      	mov	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	011b      	lsls	r3, r3, #4
 8005b8c:	440b      	add	r3, r1
 8005b8e:	330c      	adds	r3, #12
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

				if(usbd_composite_class_data[index].pClass->IsoOUTIncomplete){
 8005b98:	7bba      	ldrb	r2, [r7, #14]
 8005b9a:	492f      	ldr	r1, [pc, #188]	; (8005c58 <USBD_COMPOSITE_IsoOutIncomplete+0x130>)
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	011b      	lsls	r3, r3, #4
 8005ba4:	440b      	add	r3, r1
 8005ba6:	3304      	adds	r3, #4
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d01c      	beq.n	8005bea <USBD_COMPOSITE_IsoOutIncomplete+0xc2>
					status|=usbd_composite_class_data[index].pClass->IsoOUTIncomplete(pdev, usbd_composite_class_data[index].outEPn[i]);
 8005bb0:	7bba      	ldrb	r2, [r7, #14]
 8005bb2:	4929      	ldr	r1, [pc, #164]	; (8005c58 <USBD_COMPOSITE_IsoOutIncomplete+0x130>)
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	011b      	lsls	r3, r3, #4
 8005bbc:	440b      	add	r3, r1
 8005bbe:	3304      	adds	r3, #4
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005bc4:	7bba      	ldrb	r2, [r7, #14]
 8005bc6:	7b79      	ldrb	r1, [r7, #13]
 8005bc8:	4823      	ldr	r0, [pc, #140]	; (8005c58 <USBD_COMPOSITE_IsoOutIncomplete+0x130>)
 8005bca:	4613      	mov	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	011b      	lsls	r3, r3, #4
 8005bd2:	4403      	add	r3, r0
 8005bd4:	440b      	add	r3, r1
 8005bd6:	3321      	adds	r3, #33	; 0x21
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	4619      	mov	r1, r3
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	47a0      	blx	r4
 8005be0:	4603      	mov	r3, r0
 8005be2:	461a      	mov	r2, r3
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	73fb      	strb	r3, [r7, #15]
				}

				usbd_composite_class_data[index].pClassData=pdev->pClassData;
 8005bea:	7bba      	ldrb	r2, [r7, #14]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
 8005bf2:	4819      	ldr	r0, [pc, #100]	; (8005c58 <USBD_COMPOSITE_IsoOutIncomplete+0x130>)
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4413      	add	r3, r2
 8005bfa:	011b      	lsls	r3, r3, #4
 8005bfc:	4403      	add	r3, r0
 8005bfe:	3308      	adds	r3, #8
 8005c00:	6019      	str	r1, [r3, #0]
				usbd_composite_class_data[index].pUserData=pdev->pUserData;
 8005c02:	7bba      	ldrb	r2, [r7, #14]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8005c0a:	4813      	ldr	r0, [pc, #76]	; (8005c58 <USBD_COMPOSITE_IsoOutIncomplete+0x130>)
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	011b      	lsls	r3, r3, #4
 8005c14:	4403      	add	r3, r0
 8005c16:	330c      	adds	r3, #12
 8005c18:	6019      	str	r1, [r3, #0]
				return status;
 8005c1a:	7bfb      	ldrb	r3, [r7, #15]
 8005c1c:	e018      	b.n	8005c50 <USBD_COMPOSITE_IsoOutIncomplete+0x128>
		for(i=0;i<usbd_composite_class_data[index].outEP;i++){
 8005c1e:	7b7b      	ldrb	r3, [r7, #13]
 8005c20:	3301      	adds	r3, #1
 8005c22:	737b      	strb	r3, [r7, #13]
 8005c24:	7bba      	ldrb	r2, [r7, #14]
 8005c26:	490c      	ldr	r1, [pc, #48]	; (8005c58 <USBD_COMPOSITE_IsoOutIncomplete+0x130>)
 8005c28:	4613      	mov	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	011b      	lsls	r3, r3, #4
 8005c30:	440b      	add	r3, r1
 8005c32:	3311      	adds	r3, #17
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	7b7a      	ldrb	r2, [r7, #13]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d387      	bcc.n	8005b4c <USBD_COMPOSITE_IsoOutIncomplete+0x24>
	for(index=0;index<usbd_composite_pClass_count;index++){
 8005c3c:	7bbb      	ldrb	r3, [r7, #14]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	73bb      	strb	r3, [r7, #14]
 8005c42:	4b06      	ldr	r3, [pc, #24]	; (8005c5c <USBD_COMPOSITE_IsoOutIncomplete+0x134>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	7bba      	ldrb	r2, [r7, #14]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	f4ff af7a 	bcc.w	8005b42 <USBD_COMPOSITE_IsoOutIncomplete+0x1a>
			}
		}
	}
	return status;
 8005c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd90      	pop	{r4, r7, pc}
 8005c58:	200067c0 	.word	0x200067c0
 8005c5c:	20000c46 	.word	0x20000c46

08005c60 <USBD_COMPOSITE_GetFSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t  *USBD_COMPOSITE_GetFSCfgDesc (uint16_t *length)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
	*length=descriptor_size;
 8005c68:	4b05      	ldr	r3, [pc, #20]	; (8005c80 <USBD_COMPOSITE_GetFSCfgDesc+0x20>)
 8005c6a:	881a      	ldrh	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	801a      	strh	r2, [r3, #0]
	return descriptor;
 8005c70:	4b04      	ldr	r3, [pc, #16]	; (8005c84 <USBD_COMPOSITE_GetFSCfgDesc+0x24>)
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	20001048 	.word	0x20001048
 8005c84:	20000c48 	.word	0x20000c48

08005c88 <USBD_COMPOSITE_GetHSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t  *USBD_COMPOSITE_GetHSCfgDesc (uint16_t *length)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
	return USBD_COMPOSITE_GetFSCfgDesc(length);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f7ff ffe5 	bl	8005c60 <USBD_COMPOSITE_GetFSCfgDesc>
 8005c96:	4603      	mov	r3, r0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3708      	adds	r7, #8
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t  *USBD_COMPOSITE_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
	return USBD_COMPOSITE_GetFSCfgDesc(length);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7ff ffd9 	bl	8005c60 <USBD_COMPOSITE_GetFSCfgDesc>
 8005cae:	4603      	mov	r3, r0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3708      	adds	r7, #8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <USBD_COMPOSITE_GetDeviceQualifierDescriptor>:
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
uint8_t  *USBD_COMPOSITE_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
	*length = sizeof (USBD_COMPOSITE_DeviceQualifierDesc);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	220a      	movs	r2, #10
 8005cc4:	801a      	strh	r2, [r3, #0]
	return USBD_COMPOSITE_DeviceQualifierDesc;
 8005cc6:	4b03      	ldr	r3, [pc, #12]	; (8005cd4 <USBD_COMPOSITE_GetDeviceQualifierDescriptor+0x1c>)
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	20000050 	.word	0x20000050

08005cd8 <USBD_COMPOSITE_RegisterClass>:

USBD_StatusTypeDef  USBD_COMPOSITE_RegisterClass(USBD_HandleTypeDef *pdev, uint8_t bFunctionClass, uint8_t bFunctionSubClass, uint8_t bFunctionProtocol){
 8005cd8:	b5b0      	push	{r4, r5, r7, lr}
 8005cda:	b08a      	sub	sp, #40	; 0x28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	4608      	mov	r0, r1
 8005ce2:	4611      	mov	r1, r2
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	70fb      	strb	r3, [r7, #3]
 8005cea:	460b      	mov	r3, r1
 8005cec:	70bb      	strb	r3, [r7, #2]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	707b      	strb	r3, [r7, #1]
	USBD_StatusTypeDef   status = USBD_OK;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t lastIfc=-1;
 8005cf8:	23ff      	movs	r3, #255	; 0xff
 8005cfa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(descriptor_size==0){
 8005cfe:	4ba9      	ldr	r3, [pc, #676]	; (8005fa4 <USBD_COMPOSITE_RegisterClass+0x2cc>)
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10a      	bne.n	8005d1c <USBD_COMPOSITE_RegisterClass+0x44>
		USBD_memcpy(descriptor, USBD_COMPOSITE_CfgFSDesc, USB_COMPOSITE_CONFIG_DESC_SIZ);
 8005d06:	4ba8      	ldr	r3, [pc, #672]	; (8005fa8 <USBD_COMPOSITE_RegisterClass+0x2d0>)
 8005d08:	4aa8      	ldr	r2, [pc, #672]	; (8005fac <USBD_COMPOSITE_RegisterClass+0x2d4>)
 8005d0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8005d0c:	c303      	stmia	r3!, {r0, r1}
 8005d0e:	701a      	strb	r2, [r3, #0]
		descriptor_size+=USB_COMPOSITE_CONFIG_DESC_SIZ;
 8005d10:	4ba4      	ldr	r3, [pc, #656]	; (8005fa4 <USBD_COMPOSITE_RegisterClass+0x2cc>)
 8005d12:	881b      	ldrh	r3, [r3, #0]
 8005d14:	3309      	adds	r3, #9
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	4ba2      	ldr	r3, [pc, #648]	; (8005fa4 <USBD_COMPOSITE_RegisterClass+0x2cc>)
 8005d1a:	801a      	strh	r2, [r3, #0]
	}

	if(pdev->pClass != 0 && pdev->pClass != &USBD_COMPOSITE && usbd_composite_pClass_count<USB_COMPOSITE_MAX_CLASSES)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 8248 	beq.w	80061b8 <USBD_COMPOSITE_RegisterClass+0x4e0>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d2e:	4aa0      	ldr	r2, [pc, #640]	; (8005fb0 <USBD_COMPOSITE_RegisterClass+0x2d8>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	f000 8241 	beq.w	80061b8 <USBD_COMPOSITE_RegisterClass+0x4e0>
 8005d36:	4b9f      	ldr	r3, [pc, #636]	; (8005fb4 <USBD_COMPOSITE_RegisterClass+0x2dc>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b04      	cmp	r3, #4
 8005d3c:	f200 823c 	bhi.w	80061b8 <USBD_COMPOSITE_RegisterClass+0x4e0>
	{
		/* link the class to the USB Device handle */
		usbd_composite_class_data[usbd_composite_pClass_count].bFunctionClass=bFunctionClass;
 8005d40:	4b9c      	ldr	r3, [pc, #624]	; (8005fb4 <USBD_COMPOSITE_RegisterClass+0x2dc>)
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	4619      	mov	r1, r3
 8005d46:	4a9c      	ldr	r2, [pc, #624]	; (8005fb8 <USBD_COMPOSITE_RegisterClass+0x2e0>)
 8005d48:	460b      	mov	r3, r1
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	440b      	add	r3, r1
 8005d4e:	011b      	lsls	r3, r3, #4
 8005d50:	4413      	add	r3, r2
 8005d52:	78fa      	ldrb	r2, [r7, #3]
 8005d54:	701a      	strb	r2, [r3, #0]
		usbd_composite_class_data[usbd_composite_pClass_count].bFunctionSubClass=bFunctionSubClass;
 8005d56:	4b97      	ldr	r3, [pc, #604]	; (8005fb4 <USBD_COMPOSITE_RegisterClass+0x2dc>)
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	4a96      	ldr	r2, [pc, #600]	; (8005fb8 <USBD_COMPOSITE_RegisterClass+0x2e0>)
 8005d5e:	460b      	mov	r3, r1
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	440b      	add	r3, r1
 8005d64:	011b      	lsls	r3, r3, #4
 8005d66:	4413      	add	r3, r2
 8005d68:	3301      	adds	r3, #1
 8005d6a:	78ba      	ldrb	r2, [r7, #2]
 8005d6c:	701a      	strb	r2, [r3, #0]
		usbd_composite_class_data[usbd_composite_pClass_count].bFunctionProtocol=bFunctionProtocol;
 8005d6e:	4b91      	ldr	r3, [pc, #580]	; (8005fb4 <USBD_COMPOSITE_RegisterClass+0x2dc>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	4619      	mov	r1, r3
 8005d74:	4a90      	ldr	r2, [pc, #576]	; (8005fb8 <USBD_COMPOSITE_RegisterClass+0x2e0>)
 8005d76:	460b      	mov	r3, r1
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	440b      	add	r3, r1
 8005d7c:	011b      	lsls	r3, r3, #4
 8005d7e:	4413      	add	r3, r2
 8005d80:	3302      	adds	r3, #2
 8005d82:	787a      	ldrb	r2, [r7, #1]
 8005d84:	701a      	strb	r2, [r3, #0]
		usbd_composite_class_data[usbd_composite_pClass_count].pClass=pdev->pClass;
 8005d86:	4b8b      	ldr	r3, [pc, #556]	; (8005fb4 <USBD_COMPOSITE_RegisterClass+0x2dc>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005d92:	4989      	ldr	r1, [pc, #548]	; (8005fb8 <USBD_COMPOSITE_RegisterClass+0x2e0>)
 8005d94:	4603      	mov	r3, r0
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4403      	add	r3, r0
 8005d9a:	011b      	lsls	r3, r3, #4
 8005d9c:	440b      	add	r3, r1
 8005d9e:	3304      	adds	r3, #4
 8005da0:	601a      	str	r2, [r3, #0]
		usbd_composite_class_data[usbd_composite_pClass_count].pClassData=pdev->pClassData;
 8005da2:	4b84      	ldr	r3, [pc, #528]	; (8005fb4 <USBD_COMPOSITE_RegisterClass+0x2dc>)
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	4618      	mov	r0, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005dae:	4982      	ldr	r1, [pc, #520]	; (8005fb8 <USBD_COMPOSITE_RegisterClass+0x2e0>)
 8005db0:	4603      	mov	r3, r0
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4403      	add	r3, r0
 8005db6:	011b      	lsls	r3, r3, #4
 8005db8:	440b      	add	r3, r1
 8005dba:	3308      	adds	r3, #8
 8005dbc:	601a      	str	r2, [r3, #0]
		usbd_composite_class_data[usbd_composite_pClass_count].pUserData=pdev->pUserData;
 8005dbe:	4b7d      	ldr	r3, [pc, #500]	; (8005fb4 <USBD_COMPOSITE_RegisterClass+0x2dc>)
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005dca:	497b      	ldr	r1, [pc, #492]	; (8005fb8 <USBD_COMPOSITE_RegisterClass+0x2e0>)
 8005dcc:	4603      	mov	r3, r0
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4403      	add	r3, r0
 8005dd2:	011b      	lsls	r3, r3, #4
 8005dd4:	440b      	add	r3, r1
 8005dd6:	330c      	adds	r3, #12
 8005dd8:	601a      	str	r2, [r3, #0]

		uint16_t length_temp;
		uint8_t *descriptor_temp=usbd_composite_class_data[usbd_composite_pClass_count].pClass->GetFSConfigDescriptor(&length_temp);
 8005dda:	4b76      	ldr	r3, [pc, #472]	; (8005fb4 <USBD_COMPOSITE_RegisterClass+0x2dc>)
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	4619      	mov	r1, r3
 8005de0:	4a75      	ldr	r2, [pc, #468]	; (8005fb8 <USBD_COMPOSITE_RegisterClass+0x2e0>)
 8005de2:	460b      	mov	r3, r1
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	440b      	add	r3, r1
 8005de8:	011b      	lsls	r3, r3, #4
 8005dea:	4413      	add	r3, r2
 8005dec:	3304      	adds	r3, #4
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df2:	f107 020e 	add.w	r2, r7, #14
 8005df6:	4610      	mov	r0, r2
 8005df8:	4798      	blx	r3
 8005dfa:	6238      	str	r0, [r7, #32]
		uint8_t *descriptor_end=descriptor_temp+length_temp;
 8005dfc:	89fb      	ldrh	r3, [r7, #14]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	6a3b      	ldr	r3, [r7, #32]
 8005e02:	4413      	add	r3, r2
 8005e04:	61fb      	str	r3, [r7, #28]
		USBD_COMPOSITE_ItfAssocDescriptor *itfAssocDescriptor;

		while(descriptor_temp<descriptor_end){
 8005e06:	e1b4      	b.n	8006172 <USBD_COMPOSITE_RegisterClass+0x49a>
			uint8_t *descriptor_current=descriptor+descriptor_size;
 8005e08:	4b66      	ldr	r3, [pc, #408]	; (8005fa4 <USBD_COMPOSITE_RegisterClass+0x2cc>)
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	4b66      	ldr	r3, [pc, #408]	; (8005fa8 <USBD_COMPOSITE_RegisterClass+0x2d0>)
 8005e10:	4413      	add	r3, r2
 8005e12:	61bb      	str	r3, [r7, #24]
			USBD_memcpy(descriptor_current, descriptor_temp, descriptor_temp[0]);
 8005e14:	6a3b      	ldr	r3, [r7, #32]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	461a      	mov	r2, r3
 8005e1a:	6a39      	ldr	r1, [r7, #32]
 8005e1c:	69b8      	ldr	r0, [r7, #24]
 8005e1e:	f00a ff9e 	bl	8010d5e <memcpy>
			descriptor_size+=descriptor_temp[0];
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	4b5e      	ldr	r3, [pc, #376]	; (8005fa4 <USBD_COMPOSITE_RegisterClass+0x2cc>)
 8005e2a:	881b      	ldrh	r3, [r3, #0]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	4b5c      	ldr	r3, [pc, #368]	; (8005fa4 <USBD_COMPOSITE_RegisterClass+0x2cc>)
 8005e32:	801a      	strh	r2, [r3, #0]
			descriptor_temp+=descriptor_temp[0];
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	623b      	str	r3, [r7, #32]
			uint8_t itf_num_temp=0;
 8005e40:	2300      	movs	r3, #0
 8005e42:	75fb      	strb	r3, [r7, #23]

			switch(descriptor_current[1]){
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	3301      	adds	r3, #1
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	3b02      	subs	r3, #2
 8005e4c:	2b22      	cmp	r3, #34	; 0x22
 8005e4e:	f200 818f 	bhi.w	8006170 <USBD_COMPOSITE_RegisterClass+0x498>
 8005e52:	a201      	add	r2, pc, #4	; (adr r2, 8005e58 <USBD_COMPOSITE_RegisterClass+0x180>)
 8005e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e58:	08005ee5 	.word	0x08005ee5
 8005e5c:	08006171 	.word	0x08006171
 8005e60:	08005f3d 	.word	0x08005f3d
 8005e64:	08005fc5 	.word	0x08005fc5
 8005e68:	08006171 	.word	0x08006171
 8005e6c:	08006171 	.word	0x08006171
 8005e70:	08006171 	.word	0x08006171
 8005e74:	08006171 	.word	0x08006171
 8005e78:	08006171 	.word	0x08006171
 8005e7c:	08006171 	.word	0x08006171
 8005e80:	08006171 	.word	0x08006171
 8005e84:	08006171 	.word	0x08006171
 8005e88:	08006171 	.word	0x08006171
 8005e8c:	08006171 	.word	0x08006171
 8005e90:	08006171 	.word	0x08006171
 8005e94:	08006171 	.word	0x08006171
 8005e98:	08006171 	.word	0x08006171
 8005e9c:	08006171 	.word	0x08006171
 8005ea0:	08006171 	.word	0x08006171
 8005ea4:	08006171 	.word	0x08006171
 8005ea8:	08006171 	.word	0x08006171
 8005eac:	08006171 	.word	0x08006171
 8005eb0:	08006171 	.word	0x08006171
 8005eb4:	08006171 	.word	0x08006171
 8005eb8:	08006171 	.word	0x08006171
 8005ebc:	08006171 	.word	0x08006171
 8005ec0:	08006171 	.word	0x08006171
 8005ec4:	08006171 	.word	0x08006171
 8005ec8:	08006171 	.word	0x08006171
 8005ecc:	08006171 	.word	0x08006171
 8005ed0:	08006171 	.word	0x08006171
 8005ed4:	08006171 	.word	0x08006171
 8005ed8:	08006171 	.word	0x08006171
 8005edc:	08006171 	.word	0x08006171
 8005ee0:	08006113 	.word	0x08006113
			case 0x02: // Configuration descriptor
				itf_num_temp=descriptor_current[4];
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	791b      	ldrb	r3, [r3, #4]
 8005ee8:	75fb      	strb	r3, [r7, #23]
				descriptor_size-=descriptor_current[0];
 8005eea:	4b2e      	ldr	r3, [pc, #184]	; (8005fa4 <USBD_COMPOSITE_RegisterClass+0x2cc>)
 8005eec:	881a      	ldrh	r2, [r3, #0]
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	4b2a      	ldr	r3, [pc, #168]	; (8005fa4 <USBD_COMPOSITE_RegisterClass+0x2cc>)
 8005efa:	801a      	strh	r2, [r3, #0]
				USBD_memcpy(descriptor_current, USBD_COMPOSITE_IfcAssocDesc, USB_COMPOSITE_IFC_ASSOC_DESC_SIZ);
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	492f      	ldr	r1, [pc, #188]	; (8005fbc <USBD_COMPOSITE_RegisterClass+0x2e4>)
 8005f00:	461a      	mov	r2, r3
 8005f02:	460b      	mov	r3, r1
 8005f04:	cb03      	ldmia	r3!, {r0, r1}
 8005f06:	6010      	str	r0, [r2, #0]
 8005f08:	6051      	str	r1, [r2, #4]
				descriptor_size+=USB_COMPOSITE_IFC_ASSOC_DESC_SIZ;
 8005f0a:	4b26      	ldr	r3, [pc, #152]	; (8005fa4 <USBD_COMPOSITE_RegisterClass+0x2cc>)
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	3308      	adds	r3, #8
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	4b24      	ldr	r3, [pc, #144]	; (8005fa4 <USBD_COMPOSITE_RegisterClass+0x2cc>)
 8005f14:	801a      	strh	r2, [r3, #0]

				itfAssocDescriptor=(USBD_COMPOSITE_ItfAssocDescriptor*)(descriptor_current);
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	613b      	str	r3, [r7, #16]
				itfAssocDescriptor->bFirstInterface=itf_num;													//Use next available interface
 8005f1a:	4b29      	ldr	r3, [pc, #164]	; (8005fc0 <USBD_COMPOSITE_RegisterClass+0x2e8>)
 8005f1c:	781a      	ldrb	r2, [r3, #0]
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	709a      	strb	r2, [r3, #2]
				itfAssocDescriptor->bInterfaceCount=itf_num_temp;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	7dfa      	ldrb	r2, [r7, #23]
 8005f26:	70da      	strb	r2, [r3, #3]
				itfAssocDescriptor->bFunctionClass=bFunctionClass;
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	78fa      	ldrb	r2, [r7, #3]
 8005f2c:	711a      	strb	r2, [r3, #4]
				itfAssocDescriptor->bFunctionSubClass=bFunctionSubClass;
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	78ba      	ldrb	r2, [r7, #2]
 8005f32:	715a      	strb	r2, [r3, #5]
				itfAssocDescriptor->bFunctionProtocol=bFunctionProtocol;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	787a      	ldrb	r2, [r7, #1]
 8005f38:	719a      	strb	r2, [r3, #6]
				break;
 8005f3a:	e11a      	b.n	8006172 <USBD_COMPOSITE_RegisterClass+0x49a>
			case 0x04: // Interface descriptor
				if(descriptor_current[2]!=lastIfc){ // Check if same interface different configuration.
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	3302      	adds	r3, #2
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d023      	beq.n	8005f92 <USBD_COMPOSITE_RegisterClass+0x2ba>
					lastIfc=descriptor_current[2];
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	789b      	ldrb	r3, [r3, #2]
 8005f4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					descriptor_current[2]=itf_num++;
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	1c9a      	adds	r2, r3, #2
 8005f56:	4b1a      	ldr	r3, [pc, #104]	; (8005fc0 <USBD_COMPOSITE_RegisterClass+0x2e8>)
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	1c59      	adds	r1, r3, #1
 8005f5c:	b2c8      	uxtb	r0, r1
 8005f5e:	4918      	ldr	r1, [pc, #96]	; (8005fc0 <USBD_COMPOSITE_RegisterClass+0x2e8>)
 8005f60:	7008      	strb	r0, [r1, #0]
 8005f62:	7013      	strb	r3, [r2, #0]
					usbd_composite_class_data[usbd_composite_pClass_count].bInterfaces++;
 8005f64:	4b13      	ldr	r3, [pc, #76]	; (8005fb4 <USBD_COMPOSITE_RegisterClass+0x2dc>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	461a      	mov	r2, r3
 8005f6a:	4913      	ldr	r1, [pc, #76]	; (8005fb8 <USBD_COMPOSITE_RegisterClass+0x2e0>)
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	011b      	lsls	r3, r3, #4
 8005f74:	440b      	add	r3, r1
 8005f76:	3303      	adds	r3, #3
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	b2d8      	uxtb	r0, r3
 8005f7e:	490e      	ldr	r1, [pc, #56]	; (8005fb8 <USBD_COMPOSITE_RegisterClass+0x2e0>)
 8005f80:	4613      	mov	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	011b      	lsls	r3, r3, #4
 8005f88:	440b      	add	r3, r1
 8005f8a:	3303      	adds	r3, #3
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	701a      	strb	r2, [r3, #0]
 8005f90:	e0ef      	b.n	8006172 <USBD_COMPOSITE_RegisterClass+0x49a>
				} else {
					descriptor_current[2]=itf_num-1;
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	3302      	adds	r3, #2
 8005f96:	4a0a      	ldr	r2, [pc, #40]	; (8005fc0 <USBD_COMPOSITE_RegisterClass+0x2e8>)
 8005f98:	7812      	ldrb	r2, [r2, #0]
 8005f9a:	3a01      	subs	r2, #1
 8005f9c:	b2d2      	uxtb	r2, r2
 8005f9e:	701a      	strb	r2, [r3, #0]
				}
				break;
 8005fa0:	e0e7      	b.n	8006172 <USBD_COMPOSITE_RegisterClass+0x49a>
 8005fa2:	bf00      	nop
 8005fa4:	20001048 	.word	0x20001048
 8005fa8:	20000c48 	.word	0x20000c48
 8005fac:	20000094 	.word	0x20000094
 8005fb0:	2000005c 	.word	0x2000005c
 8005fb4:	20000c46 	.word	0x20000c46
 8005fb8:	200067c0 	.word	0x200067c0
 8005fbc:	200000a0 	.word	0x200000a0
 8005fc0:	2000104a 	.word	0x2000104a
			case 0x05: // Endpoint descriptor
				if(descriptor_current[2] & 0x80) // Check if IN EP
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	3302      	adds	r3, #2
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	b25b      	sxtb	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	da51      	bge.n	8006074 <USBD_COMPOSITE_RegisterClass+0x39c>
				{
					usbd_composite_class_data[usbd_composite_pClass_count].inEPn[usbd_composite_class_data[usbd_composite_pClass_count].inEP]=descriptor_current[2] & 0x7F;
 8005fd0:	4b7e      	ldr	r3, [pc, #504]	; (80061cc <USBD_COMPOSITE_RegisterClass+0x4f4>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	4b7d      	ldr	r3, [pc, #500]	; (80061cc <USBD_COMPOSITE_RegisterClass+0x4f4>)
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	4a7c      	ldr	r2, [pc, #496]	; (80061d0 <USBD_COMPOSITE_RegisterClass+0x4f8>)
 8005fde:	4603      	mov	r3, r0
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4403      	add	r3, r0
 8005fe4:	011b      	lsls	r3, r3, #4
 8005fe6:	4413      	add	r3, r2
 8005fe8:	3310      	adds	r3, #16
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	461c      	mov	r4, r3
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	3302      	adds	r3, #2
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ff8:	b2d8      	uxtb	r0, r3
 8005ffa:	4a75      	ldr	r2, [pc, #468]	; (80061d0 <USBD_COMPOSITE_RegisterClass+0x4f8>)
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	440b      	add	r3, r1
 8006002:	011b      	lsls	r3, r3, #4
 8006004:	4413      	add	r3, r2
 8006006:	4423      	add	r3, r4
 8006008:	3312      	adds	r3, #18
 800600a:	4602      	mov	r2, r0
 800600c:	701a      	strb	r2, [r3, #0]
//					usbd_composite_class_data[usbd_composite_pClass_count].inEPa[usbd_composite_class_data[usbd_composite_pClass_count].inEP++]=descriptor_current[2] & 0x7F;
//					inEP++;
					usbd_composite_class_data[usbd_composite_pClass_count].inEPa[usbd_composite_class_data[usbd_composite_pClass_count].inEP++]=inEP;
 800600e:	4b6f      	ldr	r3, [pc, #444]	; (80061cc <USBD_COMPOSITE_RegisterClass+0x4f4>)
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	461c      	mov	r4, r3
 8006014:	4b6d      	ldr	r3, [pc, #436]	; (80061cc <USBD_COMPOSITE_RegisterClass+0x4f4>)
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	461a      	mov	r2, r3
 800601a:	496d      	ldr	r1, [pc, #436]	; (80061d0 <USBD_COMPOSITE_RegisterClass+0x4f8>)
 800601c:	4613      	mov	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	011b      	lsls	r3, r3, #4
 8006024:	440b      	add	r3, r1
 8006026:	3310      	adds	r3, #16
 8006028:	7819      	ldrb	r1, [r3, #0]
 800602a:	1c4b      	adds	r3, r1, #1
 800602c:	b2dd      	uxtb	r5, r3
 800602e:	4868      	ldr	r0, [pc, #416]	; (80061d0 <USBD_COMPOSITE_RegisterClass+0x4f8>)
 8006030:	4613      	mov	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	011b      	lsls	r3, r3, #4
 8006038:	4403      	add	r3, r0
 800603a:	3310      	adds	r3, #16
 800603c:	462a      	mov	r2, r5
 800603e:	701a      	strb	r2, [r3, #0]
 8006040:	4608      	mov	r0, r1
 8006042:	4b64      	ldr	r3, [pc, #400]	; (80061d4 <USBD_COMPOSITE_RegisterClass+0x4fc>)
 8006044:	7819      	ldrb	r1, [r3, #0]
 8006046:	4a62      	ldr	r2, [pc, #392]	; (80061d0 <USBD_COMPOSITE_RegisterClass+0x4f8>)
 8006048:	4623      	mov	r3, r4
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4423      	add	r3, r4
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	4413      	add	r3, r2
 8006052:	4403      	add	r3, r0
 8006054:	3330      	adds	r3, #48	; 0x30
 8006056:	460a      	mov	r2, r1
 8006058:	701a      	strb	r2, [r3, #0]
					descriptor_current[2]=inEP++ | 0x80;
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	1c9a      	adds	r2, r3, #2
 800605e:	4b5d      	ldr	r3, [pc, #372]	; (80061d4 <USBD_COMPOSITE_RegisterClass+0x4fc>)
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	1c59      	adds	r1, r3, #1
 8006064:	b2c8      	uxtb	r0, r1
 8006066:	495b      	ldr	r1, [pc, #364]	; (80061d4 <USBD_COMPOSITE_RegisterClass+0x4fc>)
 8006068:	7008      	strb	r0, [r1, #0]
 800606a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800606e:	b2db      	uxtb	r3, r3
 8006070:	7013      	strb	r3, [r2, #0]
 8006072:	e07e      	b.n	8006172 <USBD_COMPOSITE_RegisterClass+0x49a>
				} else {
					usbd_composite_class_data[usbd_composite_pClass_count].outEPn[usbd_composite_class_data[usbd_composite_pClass_count].outEP]=descriptor_current[2] & 0x7F;
 8006074:	4b55      	ldr	r3, [pc, #340]	; (80061cc <USBD_COMPOSITE_RegisterClass+0x4f4>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	4619      	mov	r1, r3
 800607a:	4b54      	ldr	r3, [pc, #336]	; (80061cc <USBD_COMPOSITE_RegisterClass+0x4f4>)
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	4618      	mov	r0, r3
 8006080:	4a53      	ldr	r2, [pc, #332]	; (80061d0 <USBD_COMPOSITE_RegisterClass+0x4f8>)
 8006082:	4603      	mov	r3, r0
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4403      	add	r3, r0
 8006088:	011b      	lsls	r3, r3, #4
 800608a:	4413      	add	r3, r2
 800608c:	3311      	adds	r3, #17
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	461c      	mov	r4, r3
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	3302      	adds	r3, #2
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800609c:	b2d8      	uxtb	r0, r3
 800609e:	4a4c      	ldr	r2, [pc, #304]	; (80061d0 <USBD_COMPOSITE_RegisterClass+0x4f8>)
 80060a0:	460b      	mov	r3, r1
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	440b      	add	r3, r1
 80060a6:	011b      	lsls	r3, r3, #4
 80060a8:	4413      	add	r3, r2
 80060aa:	4423      	add	r3, r4
 80060ac:	3321      	adds	r3, #33	; 0x21
 80060ae:	4602      	mov	r2, r0
 80060b0:	701a      	strb	r2, [r3, #0]
//					usbd_composite_class_data[usbd_composite_pClass_count].outEPa[usbd_composite_class_data[usbd_composite_pClass_count].outEP++]=descriptor_current[2] & 0x7F;
//					outEP++;
					usbd_composite_class_data[usbd_composite_pClass_count].outEPa[usbd_composite_class_data[usbd_composite_pClass_count].outEP++]=outEP;
 80060b2:	4b46      	ldr	r3, [pc, #280]	; (80061cc <USBD_COMPOSITE_RegisterClass+0x4f4>)
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	461c      	mov	r4, r3
 80060b8:	4b44      	ldr	r3, [pc, #272]	; (80061cc <USBD_COMPOSITE_RegisterClass+0x4f4>)
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	461a      	mov	r2, r3
 80060be:	4944      	ldr	r1, [pc, #272]	; (80061d0 <USBD_COMPOSITE_RegisterClass+0x4f8>)
 80060c0:	4613      	mov	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	011b      	lsls	r3, r3, #4
 80060c8:	440b      	add	r3, r1
 80060ca:	3311      	adds	r3, #17
 80060cc:	7819      	ldrb	r1, [r3, #0]
 80060ce:	1c4b      	adds	r3, r1, #1
 80060d0:	b2dd      	uxtb	r5, r3
 80060d2:	483f      	ldr	r0, [pc, #252]	; (80061d0 <USBD_COMPOSITE_RegisterClass+0x4f8>)
 80060d4:	4613      	mov	r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4413      	add	r3, r2
 80060da:	011b      	lsls	r3, r3, #4
 80060dc:	4403      	add	r3, r0
 80060de:	3311      	adds	r3, #17
 80060e0:	462a      	mov	r2, r5
 80060e2:	701a      	strb	r2, [r3, #0]
 80060e4:	4608      	mov	r0, r1
 80060e6:	4b3c      	ldr	r3, [pc, #240]	; (80061d8 <USBD_COMPOSITE_RegisterClass+0x500>)
 80060e8:	7819      	ldrb	r1, [r3, #0]
 80060ea:	4a39      	ldr	r2, [pc, #228]	; (80061d0 <USBD_COMPOSITE_RegisterClass+0x4f8>)
 80060ec:	4623      	mov	r3, r4
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4423      	add	r3, r4
 80060f2:	011b      	lsls	r3, r3, #4
 80060f4:	4413      	add	r3, r2
 80060f6:	4403      	add	r3, r0
 80060f8:	333f      	adds	r3, #63	; 0x3f
 80060fa:	460a      	mov	r2, r1
 80060fc:	701a      	strb	r2, [r3, #0]
					descriptor_current[2]=outEP++;
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	1c9a      	adds	r2, r3, #2
 8006102:	4b35      	ldr	r3, [pc, #212]	; (80061d8 <USBD_COMPOSITE_RegisterClass+0x500>)
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	1c59      	adds	r1, r3, #1
 8006108:	b2c8      	uxtb	r0, r1
 800610a:	4933      	ldr	r1, [pc, #204]	; (80061d8 <USBD_COMPOSITE_RegisterClass+0x500>)
 800610c:	7008      	strb	r0, [r1, #0]
 800610e:	7013      	strb	r3, [r2, #0]
				}
				break;
 8006110:	e02f      	b.n	8006172 <USBD_COMPOSITE_RegisterClass+0x49a>
			case 0x24: // CS Interface
				switch(descriptor_current[2]){
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	3302      	adds	r3, #2
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d002      	beq.n	8006122 <USBD_COMPOSITE_RegisterClass+0x44a>
 800611c:	2b06      	cmp	r3, #6
 800611e:	d00d      	beq.n	800613c <USBD_COMPOSITE_RegisterClass+0x464>
 8006120:	e025      	b.n	800616e <USBD_COMPOSITE_RegisterClass+0x496>
				case 0x01: //Check if Union Functional Descriptor
					descriptor_current[4]=itf_num-1+descriptor_current[4];
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	3304      	adds	r3, #4
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	3204      	adds	r2, #4
 800612a:	7811      	ldrb	r1, [r2, #0]
 800612c:	4a2b      	ldr	r2, [pc, #172]	; (80061dc <USBD_COMPOSITE_RegisterClass+0x504>)
 800612e:	7812      	ldrb	r2, [r2, #0]
 8006130:	440a      	add	r2, r1
 8006132:	b2d2      	uxtb	r2, r2
 8006134:	3a01      	subs	r2, #1
 8006136:	b2d2      	uxtb	r2, r2
 8006138:	701a      	strb	r2, [r3, #0]
					break;
 800613a:	e018      	b.n	800616e <USBD_COMPOSITE_RegisterClass+0x496>
				case 0x06: //Check if Union Functional Descriptor
					descriptor_current[3]=itf_num-1+descriptor_current[3];
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	3303      	adds	r3, #3
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	3203      	adds	r2, #3
 8006144:	7811      	ldrb	r1, [r2, #0]
 8006146:	4a25      	ldr	r2, [pc, #148]	; (80061dc <USBD_COMPOSITE_RegisterClass+0x504>)
 8006148:	7812      	ldrb	r2, [r2, #0]
 800614a:	440a      	add	r2, r1
 800614c:	b2d2      	uxtb	r2, r2
 800614e:	3a01      	subs	r2, #1
 8006150:	b2d2      	uxtb	r2, r2
 8006152:	701a      	strb	r2, [r3, #0]
					descriptor_current[4]=itf_num-1+descriptor_current[4];
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	3304      	adds	r3, #4
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	3204      	adds	r2, #4
 800615c:	7811      	ldrb	r1, [r2, #0]
 800615e:	4a1f      	ldr	r2, [pc, #124]	; (80061dc <USBD_COMPOSITE_RegisterClass+0x504>)
 8006160:	7812      	ldrb	r2, [r2, #0]
 8006162:	440a      	add	r2, r1
 8006164:	b2d2      	uxtb	r2, r2
 8006166:	3a01      	subs	r2, #1
 8006168:	b2d2      	uxtb	r2, r2
 800616a:	701a      	strb	r2, [r3, #0]
					break;
 800616c:	bf00      	nop
				}
				break;
 800616e:	e000      	b.n	8006172 <USBD_COMPOSITE_RegisterClass+0x49a>
			default:
				break;
 8006170:	bf00      	nop
		while(descriptor_temp<descriptor_end){
 8006172:	6a3a      	ldr	r2, [r7, #32]
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	429a      	cmp	r2, r3
 8006178:	f4ff ae46 	bcc.w	8005e08 <USBD_COMPOSITE_RegisterClass+0x130>
			}
		}

		descriptor[2]=LOBYTE(descriptor_size);		//Update Config Descritor Total Size
 800617c:	4b18      	ldr	r3, [pc, #96]	; (80061e0 <USBD_COMPOSITE_RegisterClass+0x508>)
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	b2da      	uxtb	r2, r3
 8006182:	4b18      	ldr	r3, [pc, #96]	; (80061e4 <USBD_COMPOSITE_RegisterClass+0x50c>)
 8006184:	709a      	strb	r2, [r3, #2]
		descriptor[3]=HIBYTE(descriptor_size);	//Update Config Descritor Total Size
 8006186:	4b16      	ldr	r3, [pc, #88]	; (80061e0 <USBD_COMPOSITE_RegisterClass+0x508>)
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	0a1b      	lsrs	r3, r3, #8
 800618c:	b29b      	uxth	r3, r3
 800618e:	b2da      	uxtb	r2, r3
 8006190:	4b14      	ldr	r3, [pc, #80]	; (80061e4 <USBD_COMPOSITE_RegisterClass+0x50c>)
 8006192:	70da      	strb	r2, [r3, #3]
		descriptor[4]=itf_num;			//Update the total interface count
 8006194:	4b11      	ldr	r3, [pc, #68]	; (80061dc <USBD_COMPOSITE_RegisterClass+0x504>)
 8006196:	781a      	ldrb	r2, [r3, #0]
 8006198:	4b12      	ldr	r3, [pc, #72]	; (80061e4 <USBD_COMPOSITE_RegisterClass+0x50c>)
 800619a:	711a      	strb	r2, [r3, #4]

		usbd_composite_pClass_count++;
 800619c:	4b0b      	ldr	r3, [pc, #44]	; (80061cc <USBD_COMPOSITE_RegisterClass+0x4f4>)
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	3301      	adds	r3, #1
 80061a2:	b2da      	uxtb	r2, r3
 80061a4:	4b09      	ldr	r3, [pc, #36]	; (80061cc <USBD_COMPOSITE_RegisterClass+0x4f4>)
 80061a6:	701a      	strb	r2, [r3, #0]
		pdev->pClass = &USBD_COMPOSITE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a0f      	ldr	r2, [pc, #60]	; (80061e8 <USBD_COMPOSITE_RegisterClass+0x510>)
 80061ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

		status = USBD_OK;
 80061b0:	2300      	movs	r3, #0
 80061b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	{
 80061b6:	e002      	b.n	80061be <USBD_COMPOSITE_RegisterClass+0x4e6>
	}
	else
	{
		USBD_ErrLog("Invalid Class handle");
		status = USBD_FAIL;
 80061b8:	2302      	movs	r3, #2
 80061ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return status;
 80061be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3728      	adds	r7, #40	; 0x28
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bdb0      	pop	{r4, r5, r7, pc}
 80061ca:	bf00      	nop
 80061cc:	20000c46 	.word	0x20000c46
 80061d0:	200067c0 	.word	0x200067c0
 80061d4:	2000004c 	.word	0x2000004c
 80061d8:	2000004d 	.word	0x2000004d
 80061dc:	2000104a 	.word	0x2000104a
 80061e0:	20001048 	.word	0x20001048
 80061e4:	20000c48 	.word	0x20000c48
 80061e8:	2000005c 	.word	0x2000005c

080061ec <USBD_COMPOSITE_LL_EP_Conversion>:

uint8_t  USBD_COMPOSITE_LL_EP_Conversion  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr){
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	460b      	mov	r3, r1
 80061f6:	70fb      	strb	r3, [r7, #3]
	uint8_t index=0;
 80061f8:	2300      	movs	r3, #0
 80061fa:	73fb      	strb	r3, [r7, #15]
	uint8_t i=0;
 80061fc:	2300      	movs	r3, #0
 80061fe:	73bb      	strb	r3, [r7, #14]
	if((ep_addr & 0x7f)==0){
 8006200:	78fb      	ldrb	r3, [r7, #3]
 8006202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <USBD_COMPOSITE_LL_EP_Conversion+0x22>
		return ep_addr;
 800620a:	78fb      	ldrb	r3, [r7, #3]
 800620c:	e08b      	b.n	8006326 <USBD_COMPOSITE_LL_EP_Conversion+0x13a>
	}
	for(index=0;index<usbd_composite_pClass_count;index++){
 800620e:	2300      	movs	r3, #0
 8006210:	73fb      	strb	r3, [r7, #15]
 8006212:	e081      	b.n	8006318 <USBD_COMPOSITE_LL_EP_Conversion+0x12c>
		if(pdev->pClassData==usbd_composite_class_data[index].pClassData && pdev->pUserData==usbd_composite_class_data[index].pUserData){
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
 800621a:	7bfa      	ldrb	r2, [r7, #15]
 800621c:	4845      	ldr	r0, [pc, #276]	; (8006334 <USBD_COMPOSITE_LL_EP_Conversion+0x148>)
 800621e:	4613      	mov	r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4413      	add	r3, r2
 8006224:	011b      	lsls	r3, r3, #4
 8006226:	4403      	add	r3, r0
 8006228:	3308      	adds	r3, #8
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4299      	cmp	r1, r3
 800622e:	d170      	bne.n	8006312 <USBD_COMPOSITE_LL_EP_Conversion+0x126>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8006236:	7bfa      	ldrb	r2, [r7, #15]
 8006238:	483e      	ldr	r0, [pc, #248]	; (8006334 <USBD_COMPOSITE_LL_EP_Conversion+0x148>)
 800623a:	4613      	mov	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	4413      	add	r3, r2
 8006240:	011b      	lsls	r3, r3, #4
 8006242:	4403      	add	r3, r0
 8006244:	330c      	adds	r3, #12
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4299      	cmp	r1, r3
 800624a:	d162      	bne.n	8006312 <USBD_COMPOSITE_LL_EP_Conversion+0x126>
			if(ep_addr & 0x80){
 800624c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006250:	2b00      	cmp	r3, #0
 8006252:	da32      	bge.n	80062ba <USBD_COMPOSITE_LL_EP_Conversion+0xce>
				for(i=0;i<usbd_composite_class_data[index].inEP;i++){
 8006254:	2300      	movs	r3, #0
 8006256:	73bb      	strb	r3, [r7, #14]
 8006258:	e022      	b.n	80062a0 <USBD_COMPOSITE_LL_EP_Conversion+0xb4>
					if(usbd_composite_class_data[index].inEPn[i]==(ep_addr & 0x7f)){
 800625a:	7bfa      	ldrb	r2, [r7, #15]
 800625c:	7bb9      	ldrb	r1, [r7, #14]
 800625e:	4835      	ldr	r0, [pc, #212]	; (8006334 <USBD_COMPOSITE_LL_EP_Conversion+0x148>)
 8006260:	4613      	mov	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	011b      	lsls	r3, r3, #4
 8006268:	4403      	add	r3, r0
 800626a:	440b      	add	r3, r1
 800626c:	3312      	adds	r3, #18
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	461a      	mov	r2, r3
 8006272:	78fb      	ldrb	r3, [r7, #3]
 8006274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006278:	429a      	cmp	r2, r3
 800627a:	d10e      	bne.n	800629a <USBD_COMPOSITE_LL_EP_Conversion+0xae>
						return usbd_composite_class_data[index].inEPa[i] | 0x80;
 800627c:	7bfa      	ldrb	r2, [r7, #15]
 800627e:	7bb9      	ldrb	r1, [r7, #14]
 8006280:	482c      	ldr	r0, [pc, #176]	; (8006334 <USBD_COMPOSITE_LL_EP_Conversion+0x148>)
 8006282:	4613      	mov	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	011b      	lsls	r3, r3, #4
 800628a:	4403      	add	r3, r0
 800628c:	440b      	add	r3, r1
 800628e:	3330      	adds	r3, #48	; 0x30
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006296:	b2db      	uxtb	r3, r3
 8006298:	e045      	b.n	8006326 <USBD_COMPOSITE_LL_EP_Conversion+0x13a>
				for(i=0;i<usbd_composite_class_data[index].inEP;i++){
 800629a:	7bbb      	ldrb	r3, [r7, #14]
 800629c:	3301      	adds	r3, #1
 800629e:	73bb      	strb	r3, [r7, #14]
 80062a0:	7bfa      	ldrb	r2, [r7, #15]
 80062a2:	4924      	ldr	r1, [pc, #144]	; (8006334 <USBD_COMPOSITE_LL_EP_Conversion+0x148>)
 80062a4:	4613      	mov	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	011b      	lsls	r3, r3, #4
 80062ac:	440b      	add	r3, r1
 80062ae:	3310      	adds	r3, #16
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	7bba      	ldrb	r2, [r7, #14]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d3d0      	bcc.n	800625a <USBD_COMPOSITE_LL_EP_Conversion+0x6e>
 80062b8:	e02b      	b.n	8006312 <USBD_COMPOSITE_LL_EP_Conversion+0x126>
					}
				}
			} else {
				for(i=0;i<usbd_composite_class_data[index].outEP;i++){
 80062ba:	2300      	movs	r3, #0
 80062bc:	73bb      	strb	r3, [r7, #14]
 80062be:	e01c      	b.n	80062fa <USBD_COMPOSITE_LL_EP_Conversion+0x10e>
					if(usbd_composite_class_data[index].outEPn[i]==ep_addr){
 80062c0:	7bfa      	ldrb	r2, [r7, #15]
 80062c2:	7bb9      	ldrb	r1, [r7, #14]
 80062c4:	481b      	ldr	r0, [pc, #108]	; (8006334 <USBD_COMPOSITE_LL_EP_Conversion+0x148>)
 80062c6:	4613      	mov	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4413      	add	r3, r2
 80062cc:	011b      	lsls	r3, r3, #4
 80062ce:	4403      	add	r3, r0
 80062d0:	440b      	add	r3, r1
 80062d2:	3321      	adds	r3, #33	; 0x21
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	78fa      	ldrb	r2, [r7, #3]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d10b      	bne.n	80062f4 <USBD_COMPOSITE_LL_EP_Conversion+0x108>
						return usbd_composite_class_data[index].outEPa[i];
 80062dc:	7bfa      	ldrb	r2, [r7, #15]
 80062de:	7bb9      	ldrb	r1, [r7, #14]
 80062e0:	4814      	ldr	r0, [pc, #80]	; (8006334 <USBD_COMPOSITE_LL_EP_Conversion+0x148>)
 80062e2:	4613      	mov	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	011b      	lsls	r3, r3, #4
 80062ea:	4403      	add	r3, r0
 80062ec:	440b      	add	r3, r1
 80062ee:	333f      	adds	r3, #63	; 0x3f
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	e018      	b.n	8006326 <USBD_COMPOSITE_LL_EP_Conversion+0x13a>
				for(i=0;i<usbd_composite_class_data[index].outEP;i++){
 80062f4:	7bbb      	ldrb	r3, [r7, #14]
 80062f6:	3301      	adds	r3, #1
 80062f8:	73bb      	strb	r3, [r7, #14]
 80062fa:	7bfa      	ldrb	r2, [r7, #15]
 80062fc:	490d      	ldr	r1, [pc, #52]	; (8006334 <USBD_COMPOSITE_LL_EP_Conversion+0x148>)
 80062fe:	4613      	mov	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4413      	add	r3, r2
 8006304:	011b      	lsls	r3, r3, #4
 8006306:	440b      	add	r3, r1
 8006308:	3311      	adds	r3, #17
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	7bba      	ldrb	r2, [r7, #14]
 800630e:	429a      	cmp	r2, r3
 8006310:	d3d6      	bcc.n	80062c0 <USBD_COMPOSITE_LL_EP_Conversion+0xd4>
	for(index=0;index<usbd_composite_pClass_count;index++){
 8006312:	7bfb      	ldrb	r3, [r7, #15]
 8006314:	3301      	adds	r3, #1
 8006316:	73fb      	strb	r3, [r7, #15]
 8006318:	4b07      	ldr	r3, [pc, #28]	; (8006338 <USBD_COMPOSITE_LL_EP_Conversion+0x14c>)
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	7bfa      	ldrb	r2, [r7, #15]
 800631e:	429a      	cmp	r2, r3
 8006320:	f4ff af78 	bcc.w	8006214 <USBD_COMPOSITE_LL_EP_Conversion+0x28>
					}
				}
			}
		}
	}
	return ep_addr;
 8006324:	78fb      	ldrb	r3, [r7, #3]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	200067c0 	.word	0x200067c0
 8006338:	20000c46 	.word	0x20000c46

0800633c <USBD_RNDIS_Init>:
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t  USBD_RNDIS_Init (USBD_HandleTypeDef *pdev,
		uint8_t cfgidx)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	460b      	mov	r3, r1
 8006346:	70fb      	strb	r3, [r7, #3]
	uint8_t ret = 0;
 8006348:	2300      	movs	r3, #0
 800634a:	73fb      	strb	r3, [r7, #15]
	USBD_RNDIS_HandleTypeDef   *hrndis;

	if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	7c1b      	ldrb	r3, [r3, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10e      	bne.n	8006372 <USBD_RNDIS_Init+0x36>
	{
		/* Open EP IN */
		USBD_LL_OpenEP(pdev,
 8006354:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006358:	2202      	movs	r2, #2
 800635a:	2181      	movs	r1, #129	; 0x81
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f7fd ff45 	bl	80041ec <USBD_LL_OpenEP>
				RNDIS_IN_EP,
				USBD_EP_TYPE_BULK,
				RNDIS_DATA_HS_IN_PACKET_SIZE);

		/* Open EP OUT */
		USBD_LL_OpenEP(pdev,
 8006362:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006366:	2202      	movs	r2, #2
 8006368:	2101      	movs	r1, #1
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7fd ff3e 	bl	80041ec <USBD_LL_OpenEP>
 8006370:	e00b      	b.n	800638a <USBD_RNDIS_Init+0x4e>

	}
	else
	{
		/* Open EP IN */
		USBD_LL_OpenEP(pdev,
 8006372:	2340      	movs	r3, #64	; 0x40
 8006374:	2202      	movs	r2, #2
 8006376:	2181      	movs	r1, #129	; 0x81
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f7fd ff37 	bl	80041ec <USBD_LL_OpenEP>
				RNDIS_IN_EP,
				USBD_EP_TYPE_BULK,
				RNDIS_DATA_FS_IN_PACKET_SIZE);

		/* Open EP OUT */
		USBD_LL_OpenEP(pdev,
 800637e:	2340      	movs	r3, #64	; 0x40
 8006380:	2202      	movs	r2, #2
 8006382:	2101      	movs	r1, #1
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f7fd ff31 	bl	80041ec <USBD_LL_OpenEP>
				RNDIS_OUT_EP,
				USBD_EP_TYPE_BULK,
				RNDIS_DATA_FS_OUT_PACKET_SIZE);
	}
	/* Open Command IN EP */
	USBD_LL_OpenEP(pdev,
 800638a:	2308      	movs	r3, #8
 800638c:	2203      	movs	r2, #3
 800638e:	2182      	movs	r1, #130	; 0x82
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7fd ff2b 	bl	80041ec <USBD_LL_OpenEP>
			RNDIS_CMD_EP,
			USBD_EP_TYPE_INTR,
			RNDIS_CMD_PACKET_SIZE);


	pdev->pClassData = USBD_malloc(sizeof (USBD_RNDIS_HandleTypeDef));
 8006396:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800639a:	f00a fcc1 	bl	8010d20 <malloc>
 800639e:	4603      	mov	r3, r0
 80063a0:	461a      	mov	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	if(pdev->pClassData == NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d102      	bne.n	80063b8 <USBD_RNDIS_Init+0x7c>
	{
		ret = 1;
 80063b2:	2301      	movs	r3, #1
 80063b4:	73fb      	strb	r3, [r7, #15]
 80063b6:	e026      	b.n	8006406 <USBD_RNDIS_Init+0xca>
	}
	else
	{
		hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80063be:	60bb      	str	r3, [r7, #8]

		/* Init  physical Interface components */
		((USBD_RNDIS_ItfTypeDef *)pdev->pUserData)->Init();
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4798      	blx	r3

		/* Init Xfer states */
		hrndis->TxState =0;
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
		hrndis->RxState =0;
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

		if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	7c1b      	ldrb	r3, [r3, #16]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d109      	bne.n	80063f6 <USBD_RNDIS_Init+0xba>
		{
			/* Prepare Out endpoint to receive next packet */
			USBD_LL_PrepareReceive(pdev,
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063ec:	2101      	movs	r1, #1
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7fe f88e 	bl	8004510 <USBD_LL_PrepareReceive>
 80063f4:	e007      	b.n	8006406 <USBD_RNDIS_Init+0xca>
					RNDIS_DATA_HS_OUT_PACKET_SIZE);
		}
		else
		{
			/* Prepare Out endpoint to receive next packet */
			USBD_LL_PrepareReceive(pdev,
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063fc:	2340      	movs	r3, #64	; 0x40
 80063fe:	2101      	movs	r1, #1
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f7fe f885 	bl	8004510 <USBD_LL_PrepareReceive>
					RNDIS_DATA_FS_OUT_PACKET_SIZE);
		}


	}
	return ret;
 8006406:	7bfb      	ldrb	r3, [r7, #15]
}
 8006408:	4618      	mov	r0, r3
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <USBD_RNDIS_DeInit>:
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t  USBD_RNDIS_DeInit (USBD_HandleTypeDef *pdev,
		uint8_t cfgidx)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	460b      	mov	r3, r1
 800641a:	70fb      	strb	r3, [r7, #3]
	uint8_t ret = 0;
 800641c:	2300      	movs	r3, #0
 800641e:	73fb      	strb	r3, [r7, #15]

	/* Open EP IN */
	USBD_LL_CloseEP(pdev,
 8006420:	2181      	movs	r1, #129	; 0x81
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7fd ff26 	bl	8004274 <USBD_LL_CloseEP>
			RNDIS_IN_EP);

	/* Open EP OUT */
	USBD_LL_CloseEP(pdev,
 8006428:	2101      	movs	r1, #1
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7fd ff22 	bl	8004274 <USBD_LL_CloseEP>
			RNDIS_OUT_EP);

	/* Open Command IN EP */
	USBD_LL_CloseEP(pdev,
 8006430:	2182      	movs	r1, #130	; 0x82
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7fd ff1e 	bl	8004274 <USBD_LL_CloseEP>
			RNDIS_CMD_EP);


	/* DeInit  physical Interface components */
	if(pdev->pClassData != NULL)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00e      	beq.n	8006460 <USBD_RNDIS_DeInit+0x50>
	{
		((USBD_RNDIS_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	4798      	blx	r3
		USBD_free(pdev->pClassData);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006452:	4618      	mov	r0, r3
 8006454:	f00a fc6c 	bl	8010d30 <free>
		pdev->pClassData = NULL;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	}

	return ret;
 8006460:	7bfb      	ldrb	r3, [r7, #15]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
	...

0800646c <USBD_RNDIS_Setup>:
 * @param  pdev: instance
 * @param  req: usb requests
 * @retval status
 */
static uint8_t  USBD_RNDIS_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800647c:	60fb      	str	r3, [r7, #12]
	static uint8_t ifalt = 0;

	switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006486:	2b00      	cmp	r3, #0
 8006488:	d033      	beq.n	80064f2 <USBD_RNDIS_Setup+0x86>
 800648a:	2b20      	cmp	r3, #32
 800648c:	d000      	beq.n	8006490 <USBD_RNDIS_Setup+0x24>
		case USB_REQ_SET_INTERFACE :
			break;
		}

		default:
			break;
 800648e:	e03c      	b.n	800650a <USBD_RNDIS_Setup+0x9e>
		if (req->wLength)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	88db      	ldrh	r3, [r3, #6]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d022      	beq.n	80064de <USBD_RNDIS_Setup+0x72>
			if (req->bmRequest & 0x80)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	b25b      	sxtb	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	da0a      	bge.n	80064b8 <USBD_RNDIS_Setup+0x4c>
				((USBD_RNDIS_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest, (uint8_t *)hrndis->data, req->wLength);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	7850      	ldrb	r0, [r2, #1]
 80064ae:	68f9      	ldr	r1, [r7, #12]
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	88d2      	ldrh	r2, [r2, #6]
 80064b4:	4798      	blx	r3
		break;
 80064b6:	e029      	b.n	800650c <USBD_RNDIS_Setup+0xa0>
				hrndis->CmdOpCode = req->bRequest;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	785a      	ldrb	r2, [r3, #1]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				hrndis->CmdLength = req->wLength;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	88db      	ldrh	r3, [r3, #6]
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
				USBD_CtlPrepareRx (pdev, (uint8_t *)hrndis->data, req->wLength);
 80064ce:	68f9      	ldr	r1, [r7, #12]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	88db      	ldrh	r3, [r3, #6]
 80064d4:	461a      	mov	r2, r3
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f001 f85a 	bl	8007590 <USBD_CtlPrepareRx>
		break;
 80064dc:	e016      	b.n	800650c <USBD_RNDIS_Setup+0xa0>
			((USBD_RNDIS_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest, (uint8_t*)req, 0);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	7850      	ldrb	r0, [r2, #1]
 80064ea:	2200      	movs	r2, #0
 80064ec:	6839      	ldr	r1, [r7, #0]
 80064ee:	4798      	blx	r3
		break;
 80064f0:	e00c      	b.n	800650c <USBD_RNDIS_Setup+0xa0>
		switch (req->bRequest)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	785b      	ldrb	r3, [r3, #1]
 80064f6:	2b0a      	cmp	r3, #10
 80064f8:	d001      	beq.n	80064fe <USBD_RNDIS_Setup+0x92>
 80064fa:	2b0b      	cmp	r3, #11
			break;
 80064fc:	e005      	b.n	800650a <USBD_RNDIS_Setup+0x9e>
			USBD_CtlSendData (pdev, &ifalt, 1);
 80064fe:	2201      	movs	r2, #1
 8006500:	4905      	ldr	r1, [pc, #20]	; (8006518 <USBD_RNDIS_Setup+0xac>)
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f001 f816 	bl	8007534 <USBD_CtlSendData>
			break;
 8006508:	bf00      	nop
			break;
 800650a:	bf00      	nop
	}
	return USBD_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	2000104b 	.word	0x2000104b

0800651c <USBD_RNDIS_DataIn>:
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t  USBD_RNDIS_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	460b      	mov	r3, r1
 8006526:	70fb      	strb	r3, [r7, #3]
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800652e:	60fb      	str	r3, [r7, #12]

	if(pdev->pClassData != NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006536:	2b00      	cmp	r3, #0
 8006538:	d005      	beq.n	8006546 <USBD_RNDIS_DataIn+0x2a>
	{

		hrndis->TxState = 0;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

		return USBD_OK;
 8006542:	2300      	movs	r3, #0
 8006544:	e000      	b.n	8006548 <USBD_RNDIS_DataIn+0x2c>
	}
	else
	{
		return USBD_FAIL;
 8006546:	2302      	movs	r3, #2
	}
}
 8006548:	4618      	mov	r0, r3
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <USBD_RNDIS_DataOut>:
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t  USBD_RNDIS_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	460b      	mov	r3, r1
 800655e:	70fb      	strb	r3, [r7, #3]
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006566:	60fb      	str	r3, [r7, #12]

	/* Get the received data length */
	hrndis->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006568:	78fb      	ldrb	r3, [r7, #3]
 800656a:	4619      	mov	r1, r3
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f7fe f811 	bl	8004594 <USBD_LL_GetRxDataSize>
 8006572:	4602      	mov	r2, r0
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
	if(pdev->pClassData != NULL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00d      	beq.n	80065a0 <USBD_RNDIS_DataOut+0x4c>
	{
		((USBD_RNDIS_ItfTypeDef *)pdev->pUserData)->Receive(hrndis->RxBuffer, &hrndis->RxLength);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006598:	4611      	mov	r1, r2
 800659a:	4798      	blx	r3

		return USBD_OK;
 800659c:	2300      	movs	r3, #0
 800659e:	e000      	b.n	80065a2 <USBD_RNDIS_DataOut+0x4e>
	}
	else
	{
		return USBD_FAIL;
 80065a0:	2302      	movs	r3, #2
	}
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <USBD_RNDIS_EP0_RxReady>:
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t  USBD_RNDIS_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b084      	sub	sp, #16
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80065b8:	60fb      	str	r3, [r7, #12]

	if((pdev->pUserData != NULL) && (hrndis->CmdOpCode != 0xFF))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d015      	beq.n	80065f0 <USBD_RNDIS_EP0_RxReady+0x46>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80065ca:	2bff      	cmp	r3, #255	; 0xff
 80065cc:	d010      	beq.n	80065f0 <USBD_RNDIS_EP0_RxReady+0x46>
	{
		((USBD_RNDIS_ItfTypeDef *)pdev->pUserData)->Control(hrndis->CmdOpCode,
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
				(uint8_t *)hrndis->data,
 80065dc:	68f9      	ldr	r1, [r7, #12]
				hrndis->CmdLength);
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
		((USBD_RNDIS_ItfTypeDef *)pdev->pUserData)->Control(hrndis->CmdOpCode,
 80065e4:	b292      	uxth	r2, r2
 80065e6:	4798      	blx	r3
		hrndis->CmdOpCode = 0xFF;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	22ff      	movs	r2, #255	; 0xff
 80065ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

	}
	return USBD_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
	...

080065fc <USBD_RNDIS_GetFSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t  *USBD_RNDIS_GetFSCfgDesc (uint16_t *length)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
	*length = sizeof (USBD_RNDIS_CfgFSDesc);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	223e      	movs	r2, #62	; 0x3e
 8006608:	801a      	strh	r2, [r3, #0]
	return USBD_RNDIS_CfgFSDesc;
 800660a:	4b03      	ldr	r3, [pc, #12]	; (8006618 <USBD_RNDIS_GetFSCfgDesc+0x1c>)
}
 800660c:	4618      	mov	r0, r3
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr
 8006618:	2000012c 	.word	0x2000012c

0800661c <USBD_RNDIS_GetHSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t  *USBD_RNDIS_GetHSCfgDesc (uint16_t *length)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
	*length = sizeof (USBD_RNDIS_CfgHSDesc);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	223e      	movs	r2, #62	; 0x3e
 8006628:	801a      	strh	r2, [r3, #0]
	return USBD_RNDIS_CfgHSDesc;
 800662a:	4b03      	ldr	r3, [pc, #12]	; (8006638 <USBD_RNDIS_GetHSCfgDesc+0x1c>)
}
 800662c:	4618      	mov	r0, r3
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr
 8006638:	200000ec 	.word	0x200000ec

0800663c <USBD_RNDIS_GetOtherSpeedCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t  *USBD_RNDIS_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
	*length = sizeof (USBD_RNDIS_OtherSpeedCfgDesc);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	223e      	movs	r2, #62	; 0x3e
 8006648:	801a      	strh	r2, [r3, #0]
	return USBD_RNDIS_OtherSpeedCfgDesc;
 800664a:	4b03      	ldr	r3, [pc, #12]	; (8006658 <USBD_RNDIS_GetOtherSpeedCfgDesc+0x1c>)
}
 800664c:	4618      	mov	r0, r3
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	2000016c 	.word	0x2000016c

0800665c <USBD_RNDIS_GetDeviceQualifierDescriptor>:
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
uint8_t  *USBD_RNDIS_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
	*length = sizeof (USBD_RNDIS_DeviceQualifierDesc);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	220a      	movs	r2, #10
 8006668:	801a      	strh	r2, [r3, #0]
	return USBD_RNDIS_DeviceQualifierDesc;
 800666a:	4b03      	ldr	r3, [pc, #12]	; (8006678 <USBD_RNDIS_GetDeviceQualifierDescriptor+0x1c>)
}
 800666c:	4618      	mov	r0, r3
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr
 8006678:	200000a8 	.word	0x200000a8

0800667c <USBD_RNDIS_RegisterInterface>:
 * @param  fops: CD  Interface callback
 * @retval status
 */
uint8_t  USBD_RNDIS_RegisterInterface  (USBD_HandleTypeDef   *pdev,
		USBD_RNDIS_ItfTypeDef *fops)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
	uint8_t  ret = USBD_FAIL;
 8006686:	2302      	movs	r3, #2
 8006688:	73fb      	strb	r3, [r7, #15]

	if(fops != NULL)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d005      	beq.n	800669c <USBD_RNDIS_RegisterInterface+0x20>
	{
		pdev->pUserData= fops;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	683a      	ldr	r2, [r7, #0]
 8006694:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
		ret = USBD_OK;
 8006698:	2300      	movs	r3, #0
 800669a:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 800669c:	7bfb      	ldrb	r3, [r7, #15]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <USBD_RNDIS_SetTxBuffer>:
 * @retval status
 */
uint8_t  USBD_RNDIS_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
		uint8_t  *pbuff,
		uint16_t length)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b087      	sub	sp, #28
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	60f8      	str	r0, [r7, #12]
 80066b2:	60b9      	str	r1, [r7, #8]
 80066b4:	4613      	mov	r3, r2
 80066b6:	80fb      	strh	r3, [r7, #6]
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80066be:	617b      	str	r3, [r7, #20]

	hrndis->TxBuffer = pbuff;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	hrndis->TxLength = length;
 80066c8:	88fa      	ldrh	r2, [r7, #6]
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	return USBD_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	371c      	adds	r7, #28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <USBD_RNDIS_SetRxBuffer>:
 * @param  pbuff: Rx Buffer
 * @retval status
 */
uint8_t  USBD_RNDIS_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
		uint8_t  *pbuff)
{
 80066de:	b480      	push	{r7}
 80066e0:	b085      	sub	sp, #20
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
 80066e6:	6039      	str	r1, [r7, #0]
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80066ee:	60fb      	str	r3, [r7, #12]

	hrndis->RxBuffer = pbuff;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	683a      	ldr	r2, [r7, #0]
 80066f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

	return USBD_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <USBD_RNDIS_ReceivePacket>:
 *         prepare OUT Endpoint for reception
 * @param  pdev: device instance
 * @retval status
 */
uint8_t  USBD_RNDIS_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b084      	sub	sp, #16
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006714:	60fb      	str	r3, [r7, #12]

	/* Suspend or Resume USB Out process */
	if(pdev->pClassData != NULL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800671c:	2b00      	cmp	r3, #0
 800671e:	d017      	beq.n	8006750 <USBD_RNDIS_ReceivePacket+0x4a>
	{
		if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	7c1b      	ldrb	r3, [r3, #16]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d109      	bne.n	800673c <USBD_RNDIS_ReceivePacket+0x36>
		{
			/* Prepare Out endpoint to receive next packet */
			USBD_LL_PrepareReceive(pdev,
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800672e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006732:	2101      	movs	r1, #1
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f7fd feeb 	bl	8004510 <USBD_LL_PrepareReceive>
 800673a:	e007      	b.n	800674c <USBD_RNDIS_ReceivePacket+0x46>
					RNDIS_DATA_HS_OUT_PACKET_SIZE);
		}
		else
		{
			/* Prepare Out endpoint to receive next packet */
			USBD_LL_PrepareReceive(pdev,
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006742:	2340      	movs	r3, #64	; 0x40
 8006744:	2101      	movs	r1, #1
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7fd fee2 	bl	8004510 <USBD_LL_PrepareReceive>
					RNDIS_OUT_EP,
					hrndis->RxBuffer,
					RNDIS_DATA_FS_OUT_PACKET_SIZE);
		}
		return USBD_OK;
 800674c:	2300      	movs	r3, #0
 800674e:	e000      	b.n	8006752 <USBD_RNDIS_ReceivePacket+0x4c>
	}
	else
	{
		return USBD_FAIL;
 8006750:	2302      	movs	r3, #2
	}
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <USBD_RNDIS_TransmitControl>:
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
uint8_t  USBD_RNDIS_TransmitControl(USBD_HandleTypeDef *pdev, uint8_t *buff, uint16_t length)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b084      	sub	sp, #16
 800675e:	af00      	add	r7, sp, #0
 8006760:	60f8      	str	r0, [r7, #12]
 8006762:	60b9      	str	r1, [r7, #8]
 8006764:	4613      	mov	r3, r2
 8006766:	80fb      	strh	r3, [r7, #6]
//		{
//			/* Tx Transfer in progress */
//			hrndis->TxState = 1;
//
//			/* Transmit next packet */
			USBD_LL_Transmit(pdev, RNDIS_CMD_EP, buff, length);
 8006768:	88fb      	ldrh	r3, [r7, #6]
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	2182      	movs	r1, #130	; 0x82
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f7fd fe8c 	bl	800448c <USBD_LL_Transmit>

			return USBD_OK;
 8006774:	2300      	movs	r3, #0
//	}
//	else
//	{
//		return USBD_FAIL;
//	}
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b084      	sub	sp, #16
 8006782:	af00      	add	r7, sp, #0
 8006784:	60f8      	str	r0, [r7, #12]
 8006786:	60b9      	str	r1, [r7, #8]
 8006788:	4613      	mov	r3, r2
 800678a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8006792:	2302      	movs	r3, #2
 8006794:	e01a      	b.n	80067cc <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800679c:	2b00      	cmp	r3, #0
 800679e:	d003      	beq.n	80067a8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d003      	beq.n	80067b6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	79fa      	ldrb	r2, [r7, #7]
 80067c2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f7fd fc81 	bl	80040cc <USBD_LL_Init>
  
  return USBD_OK; 
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80067de:	2300      	movs	r3, #0
 80067e0:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d006      	beq.n	80067f6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	73fb      	strb	r3, [r7, #15]
 80067f4:	e001      	b.n	80067fa <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 80067f6:	2302      	movs	r3, #2
 80067f8:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80067fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f7fd fcb9 	bl	8004188 <USBD_LL_Start>
  
  return USBD_OK;  
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	370c      	adds	r7, #12
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	460b      	mov	r3, r1
 8006840:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8006842:	2302      	movs	r3, #2
 8006844:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00c      	beq.n	800686a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	78fa      	ldrb	r2, [r7, #3]
 800685a:	4611      	mov	r1, r2
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	4798      	blx	r3
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 800686a:	7bfb      	ldrb	r3, [r7, #15]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	460b      	mov	r3, r1
 800687e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	78fa      	ldrb	r2, [r7, #3]
 800688a:	4611      	mov	r1, r2
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	4798      	blx	r3
  return USBD_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b082      	sub	sp, #8
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80068aa:	6839      	ldr	r1, [r7, #0]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f000 fd98 	bl	80073e2 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80068c0:	461a      	mov	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80068ce:	f003 031f 	and.w	r3, r3, #31
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d00b      	beq.n	80068ee <USBD_LL_SetupStage+0x54>
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d011      	beq.n	80068fe <USBD_LL_SetupStage+0x64>
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d117      	bne.n	800690e <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80068e4:	4619      	mov	r1, r3
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f9c6 	bl	8006c78 <USBD_StdDevReq>
    break;
 80068ec:	e01a      	b.n	8006924 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80068f4:	4619      	mov	r1, r3
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fa0e 	bl	8006d18 <USBD_StdItfReq>
    break;
 80068fc:	e012      	b.n	8006924 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006904:	4619      	mov	r1, r3
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fa39 	bl	8006d7e <USBD_StdEPReq>
    break;
 800690c:	e00a      	b.n	8006924 <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8006914:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006918:	b2db      	uxtb	r3, r3
 800691a:	4619      	mov	r1, r3
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f7fd fce7 	bl	80042f0 <USBD_LL_StallEP>
    break;
 8006922:	bf00      	nop
  }  
  return USBD_OK;  
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3708      	adds	r7, #8
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b086      	sub	sp, #24
 8006932:	af00      	add	r7, sp, #0
 8006934:	60f8      	str	r0, [r7, #12]
 8006936:	460b      	mov	r3, r1
 8006938:	607a      	str	r2, [r7, #4]
 800693a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800693c:	7afb      	ldrb	r3, [r7, #11]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d138      	bne.n	80069b4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8006948:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8006950:	2b03      	cmp	r3, #3
 8006952:	d142      	bne.n	80069da <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	689a      	ldr	r2, [r3, #8]
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	429a      	cmp	r2, r3
 800695e:	d914      	bls.n	800698a <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	1ad2      	subs	r2, r2, r3
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	68da      	ldr	r2, [r3, #12]
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	4293      	cmp	r3, r2
 8006978:	bf28      	it	cs
 800697a:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 800697c:	b29b      	uxth	r3, r3
 800697e:	461a      	mov	r2, r3
 8006980:	6879      	ldr	r1, [r7, #4]
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f000 fe22 	bl	80075cc <USBD_CtlContinueRx>
 8006988:	e027      	b.n	80069da <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00a      	beq.n	80069ac <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800699c:	2b03      	cmp	r3, #3
 800699e:	d105      	bne.n	80069ac <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 fe1f 	bl	80075f0 <USBD_CtlSendStatus>
 80069b2:	e012      	b.n	80069da <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00c      	beq.n	80069da <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 80069c6:	2b03      	cmp	r3, #3
 80069c8:	d107      	bne.n	80069da <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	7afa      	ldrb	r2, [r7, #11]
 80069d4:	4611      	mov	r1, r2
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	4798      	blx	r3
  }  
  return USBD_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3718      	adds	r7, #24
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	460b      	mov	r3, r1
 80069ee:	607a      	str	r2, [r7, #4]
 80069f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80069f2:	7afb      	ldrb	r3, [r7, #11]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d16c      	bne.n	8006ad2 <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	3314      	adds	r3, #20
 80069fc:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d157      	bne.n	8006ab8 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	689a      	ldr	r2, [r3, #8]
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d915      	bls.n	8006a40 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	689a      	ldr	r2, [r3, #8]
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	1ad2      	subs	r2, r2, r3
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	461a      	mov	r2, r3
 8006a2a:	6879      	ldr	r1, [r7, #4]
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f000 fd9d 	bl	800756c <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8006a32:	2300      	movs	r3, #0
 8006a34:	2200      	movs	r2, #0
 8006a36:	2100      	movs	r1, #0
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f7fd fd69 	bl	8004510 <USBD_LL_PrepareReceive>
 8006a3e:	e03b      	b.n	8006ab8 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	68d2      	ldr	r2, [r2, #12]
 8006a48:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a4c:	fb02 f201 	mul.w	r2, r2, r1
 8006a50:	1a9b      	subs	r3, r3, r2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d11c      	bne.n	8006a90 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	685a      	ldr	r2, [r3, #4]
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d316      	bcc.n	8006a90 <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	685a      	ldr	r2, [r3, #4]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d20f      	bcs.n	8006a90 <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8006a70:	2200      	movs	r2, #0
 8006a72:	2100      	movs	r1, #0
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f000 fd79 	bl	800756c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8006a82:	2300      	movs	r3, #0
 8006a84:	2200      	movs	r2, #0
 8006a86:	2100      	movs	r1, #0
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f7fd fd41 	bl	8004510 <USBD_LL_PrepareReceive>
 8006a8e:	e013      	b.n	8006ab8 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00a      	beq.n	8006ab2 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006aa2:	2b03      	cmp	r3, #3
 8006aa4:	d105      	bne.n	8006ab2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f000 fdaf 	bl	8007616 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d11a      	bne.n	8006af8 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f7ff feac 	bl	8006820 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8006ad0:	e012      	b.n	8006af8 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00c      	beq.n	8006af8 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8006ae4:	2b03      	cmp	r3, #3
 8006ae6:	d107      	bne.n	8006af8 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	7afa      	ldrb	r2, [r7, #11]
 8006af2:	4611      	mov	r1, r2
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	4798      	blx	r3
  }  
  return USBD_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3718      	adds	r7, #24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b082      	sub	sp, #8
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8006b0a:	2340      	movs	r3, #64	; 0x40
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	2100      	movs	r1, #0
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f7fd fb6b 	bl	80041ec <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2240      	movs	r2, #64	; 0x40
 8006b1a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8006b1e:	2340      	movs	r3, #64	; 0x40
 8006b20:	2200      	movs	r2, #0
 8006b22:	2180      	movs	r1, #128	; 0x80
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f7fd fb61 	bl	80041ec <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2240      	movs	r2, #64	; 0x40
 8006b2e:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d009      	beq.n	8006b56 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	6852      	ldr	r2, [r2, #4]
 8006b4e:	b2d2      	uxtb	r2, r2
 8006b50:	4611      	mov	r1, r2
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	4798      	blx	r3
 
  
  return USBD_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	460b      	mov	r3, r1
 8006b6a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	78fa      	ldrb	r2, [r7, #3]
 8006b70:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2204      	movs	r2, #4
 8006b98:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	370c      	adds	r7, #12
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr

08006baa <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8006baa:	b480      	push	{r7}
 8006bac:	b083      	sub	sp, #12
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006bda:	2b03      	cmp	r3, #3
 8006bdc:	d10b      	bne.n	8006bf6 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d005      	beq.n	8006bf6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3708      	adds	r7, #8
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	460b      	mov	r3, r1
 8006c0a:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	370c      	adds	r7, #12
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b083      	sub	sp, #12
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
 8006c22:	460b      	mov	r3, r1
 8006c24:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b082      	sub	sp, #8
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	6852      	ldr	r2, [r2, #4]
 8006c66:	b2d2      	uxtb	r2, r2
 8006c68:	4611      	mov	r1, r2
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	4798      	blx	r3
   
  return USBD_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8006c82:	2300      	movs	r3, #0
 8006c84:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	785b      	ldrb	r3, [r3, #1]
 8006c8a:	2b09      	cmp	r3, #9
 8006c8c:	d839      	bhi.n	8006d02 <USBD_StdDevReq+0x8a>
 8006c8e:	a201      	add	r2, pc, #4	; (adr r2, 8006c94 <USBD_StdDevReq+0x1c>)
 8006c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c94:	08006ce5 	.word	0x08006ce5
 8006c98:	08006cf9 	.word	0x08006cf9
 8006c9c:	08006d03 	.word	0x08006d03
 8006ca0:	08006cef 	.word	0x08006cef
 8006ca4:	08006d03 	.word	0x08006d03
 8006ca8:	08006cc7 	.word	0x08006cc7
 8006cac:	08006cbd 	.word	0x08006cbd
 8006cb0:	08006d03 	.word	0x08006d03
 8006cb4:	08006cdb 	.word	0x08006cdb
 8006cb8:	08006cd1 	.word	0x08006cd1
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8006cbc:	6839      	ldr	r1, [r7, #0]
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f936 	bl	8006f30 <USBD_GetDescriptor>
    break;
 8006cc4:	e022      	b.n	8006d0c <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8006cc6:	6839      	ldr	r1, [r7, #0]
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fa25 	bl	8007118 <USBD_SetAddress>
    break;
 8006cce:	e01d      	b.n	8006d0c <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fa5e 	bl	8007194 <USBD_SetConfig>
    break;
 8006cd8:	e018      	b.n	8006d0c <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8006cda:	6839      	ldr	r1, [r7, #0]
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fae1 	bl	80072a4 <USBD_GetConfig>
    break;
 8006ce2:	e013      	b.n	8006d0c <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fb0e 	bl	8007308 <USBD_GetStatus>
    break;
 8006cec:	e00e      	b.n	8006d0c <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fb33 	bl	800735c <USBD_SetFeature>
    break;
 8006cf6:	e009      	b.n	8006d0c <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8006cf8:	6839      	ldr	r1, [r7, #0]
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fb49 	bl	8007392 <USBD_ClrFeature>
    break;
 8006d00:	e004      	b.n	8006d0c <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8006d02:	6839      	ldr	r1, [r7, #0]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fba9 	bl	800745c <USBD_CtlError>
    break;
 8006d0a:	bf00      	nop
  }
  
  return ret;
 8006d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop

08006d18 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 8006d22:	2300      	movs	r3, #0
 8006d24:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006d2c:	2b03      	cmp	r3, #3
 8006d2e:	d11b      	bne.n	8006d68 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	889b      	ldrh	r3, [r3, #4]
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b04      	cmp	r3, #4
 8006d38:	d811      	bhi.n	8006d5e <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	6839      	ldr	r1, [r7, #0]
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	88db      	ldrh	r3, [r3, #6]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d110      	bne.n	8006d72 <USBD_StdItfReq+0x5a>
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10d      	bne.n	8006d72 <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fc4a 	bl	80075f0 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8006d5c:	e009      	b.n	8006d72 <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 8006d5e:	6839      	ldr	r1, [r7, #0]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fb7b 	bl	800745c <USBD_CtlError>
    break;
 8006d66:	e004      	b.n	8006d72 <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 8006d68:	6839      	ldr	r1, [r7, #0]
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 fb76 	bl	800745c <USBD_CtlError>
    break;
 8006d70:	e000      	b.n	8006d74 <USBD_StdItfReq+0x5c>
    break;
 8006d72:	bf00      	nop
  }
  return USBD_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
 8006d86:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8006d88:	2300      	movs	r3, #0
 8006d8a:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	889b      	ldrh	r3, [r3, #4]
 8006d90:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d9a:	2b20      	cmp	r3, #32
 8006d9c:	d108      	bne.n	8006db0 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	6839      	ldr	r1, [r7, #0]
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	4798      	blx	r3
    
    return USBD_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	e0ba      	b.n	8006f26 <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	785b      	ldrb	r3, [r3, #1]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d039      	beq.n	8006e2c <USBD_StdEPReq+0xae>
 8006db8:	2b03      	cmp	r3, #3
 8006dba:	d002      	beq.n	8006dc2 <USBD_StdEPReq+0x44>
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d06b      	beq.n	8006e98 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 8006dc0:	e0b0      	b.n	8006f24 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d002      	beq.n	8006dd2 <USBD_StdEPReq+0x54>
 8006dcc:	2b03      	cmp	r3, #3
 8006dce:	d00c      	beq.n	8006dea <USBD_StdEPReq+0x6c>
 8006dd0:	e025      	b.n	8006e1e <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8006dd2:	7bbb      	ldrb	r3, [r7, #14]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d027      	beq.n	8006e28 <USBD_StdEPReq+0xaa>
 8006dd8:	7bbb      	ldrb	r3, [r7, #14]
 8006dda:	2b80      	cmp	r3, #128	; 0x80
 8006ddc:	d024      	beq.n	8006e28 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 8006dde:	7bbb      	ldrb	r3, [r7, #14]
 8006de0:	4619      	mov	r1, r3
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7fd fa84 	bl	80042f0 <USBD_LL_StallEP>
      break;	
 8006de8:	e01e      	b.n	8006e28 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	885b      	ldrh	r3, [r3, #2]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10a      	bne.n	8006e08 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8006df2:	7bbb      	ldrb	r3, [r7, #14]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d007      	beq.n	8006e08 <USBD_StdEPReq+0x8a>
 8006df8:	7bbb      	ldrb	r3, [r7, #14]
 8006dfa:	2b80      	cmp	r3, #128	; 0x80
 8006dfc:	d004      	beq.n	8006e08 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 8006dfe:	7bbb      	ldrb	r3, [r7, #14]
 8006e00:	4619      	mov	r1, r3
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7fd fa74 	bl	80042f0 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	6839      	ldr	r1, [r7, #0]
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fbea 	bl	80075f0 <USBD_CtlSendStatus>
      break;
 8006e1c:	e005      	b.n	8006e2a <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fb1b 	bl	800745c <USBD_CtlError>
      break;    
 8006e26:	e000      	b.n	8006e2a <USBD_StdEPReq+0xac>
      break;	
 8006e28:	bf00      	nop
    break;
 8006e2a:	e07b      	b.n	8006f24 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d002      	beq.n	8006e3c <USBD_StdEPReq+0xbe>
 8006e36:	2b03      	cmp	r3, #3
 8006e38:	d00c      	beq.n	8006e54 <USBD_StdEPReq+0xd6>
 8006e3a:	e024      	b.n	8006e86 <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8006e3c:	7bbb      	ldrb	r3, [r7, #14]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d026      	beq.n	8006e90 <USBD_StdEPReq+0x112>
 8006e42:	7bbb      	ldrb	r3, [r7, #14]
 8006e44:	2b80      	cmp	r3, #128	; 0x80
 8006e46:	d023      	beq.n	8006e90 <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 8006e48:	7bbb      	ldrb	r3, [r7, #14]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f7fd fa4f 	bl	80042f0 <USBD_LL_StallEP>
      break;	
 8006e52:	e01d      	b.n	8006e90 <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	885b      	ldrh	r3, [r3, #2]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d11b      	bne.n	8006e94 <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 8006e5c:	7bbb      	ldrb	r3, [r7, #14]
 8006e5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00b      	beq.n	8006e7e <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8006e66:	7bbb      	ldrb	r3, [r7, #14]
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7fd fa76 	bl	800435c <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	6839      	ldr	r1, [r7, #0]
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fbb6 	bl	80075f0 <USBD_CtlSendStatus>
      break;
 8006e84:	e006      	b.n	8006e94 <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 8006e86:	6839      	ldr	r1, [r7, #0]
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fae7 	bl	800745c <USBD_CtlError>
      break;    
 8006e8e:	e002      	b.n	8006e96 <USBD_StdEPReq+0x118>
      break;	
 8006e90:	bf00      	nop
 8006e92:	e047      	b.n	8006f24 <USBD_StdEPReq+0x1a6>
      break;
 8006e94:	bf00      	nop
    break;
 8006e96:	e045      	b.n	8006f24 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d002      	beq.n	8006ea8 <USBD_StdEPReq+0x12a>
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	d00b      	beq.n	8006ebe <USBD_StdEPReq+0x140>
 8006ea6:	e036      	b.n	8006f16 <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 8006ea8:	7bbb      	ldrb	r3, [r7, #14]
 8006eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d036      	beq.n	8006f20 <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 8006eb2:	7bbb      	ldrb	r3, [r7, #14]
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7fd fa1a 	bl	80042f0 <USBD_LL_StallEP>
      break;	
 8006ebc:	e030      	b.n	8006f20 <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8006ebe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	da08      	bge.n	8006ed8 <USBD_StdEPReq+0x15a>
 8006ec6:	7bbb      	ldrb	r3, [r7, #14]
 8006ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ecc:	3301      	adds	r3, #1
 8006ece:	011b      	lsls	r3, r3, #4
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	3304      	adds	r3, #4
 8006ed6:	e007      	b.n	8006ee8 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8006ed8:	7bbb      	ldrb	r3, [r7, #14]
 8006eda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8006ede:	3310      	adds	r3, #16
 8006ee0:	011b      	lsls	r3, r3, #4
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	3304      	adds	r3, #4
 8006ee8:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8006eea:	7bbb      	ldrb	r3, [r7, #14]
 8006eec:	4619      	mov	r1, r3
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7fd fa6a 	bl	80043c8 <USBD_LL_IsStallEP>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d003      	beq.n	8006f02 <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	2201      	movs	r2, #1
 8006efe:	601a      	str	r2, [r3, #0]
 8006f00:	e002      	b.n	8006f08 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	2200      	movs	r2, #0
 8006f06:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 8006f08:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fb10 	bl	8007534 <USBD_CtlSendData>
      break;
 8006f14:	e005      	b.n	8006f22 <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 8006f16:	6839      	ldr	r1, [r7, #0]
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fa9f 	bl	800745c <USBD_CtlError>
      break;
 8006f1e:	e000      	b.n	8006f22 <USBD_StdEPReq+0x1a4>
      break;	
 8006f20:	bf00      	nop
    break;
 8006f22:	bf00      	nop
  }
  return ret;
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
	...

08006f30 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	885b      	ldrh	r3, [r3, #2]
 8006f3e:	0a1b      	lsrs	r3, r3, #8
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	3b01      	subs	r3, #1
 8006f44:	2b06      	cmp	r3, #6
 8006f46:	f200 80c9 	bhi.w	80070dc <USBD_GetDescriptor+0x1ac>
 8006f4a:	a201      	add	r2, pc, #4	; (adr r2, 8006f50 <USBD_GetDescriptor+0x20>)
 8006f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f50:	08006f6d 	.word	0x08006f6d
 8006f54:	08006f85 	.word	0x08006f85
 8006f58:	08006fc5 	.word	0x08006fc5
 8006f5c:	080070dd 	.word	0x080070dd
 8006f60:	080070dd 	.word	0x080070dd
 8006f64:	08007089 	.word	0x08007089
 8006f68:	080070af 	.word	0x080070af
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	7c12      	ldrb	r2, [r2, #16]
 8006f78:	f107 010a 	add.w	r1, r7, #10
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	4798      	blx	r3
 8006f80:	60f8      	str	r0, [r7, #12]
    break;
 8006f82:	e0b0      	b.n	80070e6 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	7c1b      	ldrb	r3, [r3, #16]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10d      	bne.n	8006fa8 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f94:	f107 020a 	add.w	r2, r7, #10
 8006f98:	4610      	mov	r0, r2
 8006f9a:	4798      	blx	r3
 8006f9c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006fa6:	e09e      	b.n	80070e6 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb0:	f107 020a 	add.w	r2, r7, #10
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	4798      	blx	r3
 8006fb8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	701a      	strb	r2, [r3, #0]
    break;
 8006fc2:	e090      	b.n	80070e6 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	885b      	ldrh	r3, [r3, #2]
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b05      	cmp	r3, #5
 8006fcc:	d856      	bhi.n	800707c <USBD_GetDescriptor+0x14c>
 8006fce:	a201      	add	r2, pc, #4	; (adr r2, 8006fd4 <USBD_GetDescriptor+0xa4>)
 8006fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd4:	08006fed 	.word	0x08006fed
 8006fd8:	08007005 	.word	0x08007005
 8006fdc:	0800701d 	.word	0x0800701d
 8006fe0:	08007035 	.word	0x08007035
 8006fe4:	0800704d 	.word	0x0800704d
 8006fe8:	08007065 	.word	0x08007065
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	7c12      	ldrb	r2, [r2, #16]
 8006ff8:	f107 010a 	add.w	r1, r7, #10
 8006ffc:	4610      	mov	r0, r2
 8006ffe:	4798      	blx	r3
 8007000:	60f8      	str	r0, [r7, #12]
      break;
 8007002:	e040      	b.n	8007086 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	7c12      	ldrb	r2, [r2, #16]
 8007010:	f107 010a 	add.w	r1, r7, #10
 8007014:	4610      	mov	r0, r2
 8007016:	4798      	blx	r3
 8007018:	60f8      	str	r0, [r7, #12]
      break;
 800701a:	e034      	b.n	8007086 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	7c12      	ldrb	r2, [r2, #16]
 8007028:	f107 010a 	add.w	r1, r7, #10
 800702c:	4610      	mov	r0, r2
 800702e:	4798      	blx	r3
 8007030:	60f8      	str	r0, [r7, #12]
      break;
 8007032:	e028      	b.n	8007086 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	7c12      	ldrb	r2, [r2, #16]
 8007040:	f107 010a 	add.w	r1, r7, #10
 8007044:	4610      	mov	r0, r2
 8007046:	4798      	blx	r3
 8007048:	60f8      	str	r0, [r7, #12]
      break;
 800704a:	e01c      	b.n	8007086 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007052:	695b      	ldr	r3, [r3, #20]
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	7c12      	ldrb	r2, [r2, #16]
 8007058:	f107 010a 	add.w	r1, r7, #10
 800705c:	4610      	mov	r0, r2
 800705e:	4798      	blx	r3
 8007060:	60f8      	str	r0, [r7, #12]
      break;
 8007062:	e010      	b.n	8007086 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	7c12      	ldrb	r2, [r2, #16]
 8007070:	f107 010a 	add.w	r1, r7, #10
 8007074:	4610      	mov	r0, r2
 8007076:	4798      	blx	r3
 8007078:	60f8      	str	r0, [r7, #12]
      break;
 800707a:	e004      	b.n	8007086 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 800707c:	6839      	ldr	r1, [r7, #0]
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f9ec 	bl	800745c <USBD_CtlError>
      return;
 8007084:	e044      	b.n	8007110 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 8007086:	e02e      	b.n	80070e6 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	7c1b      	ldrb	r3, [r3, #16]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d109      	bne.n	80070a4 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007098:	f107 020a 	add.w	r2, r7, #10
 800709c:	4610      	mov	r0, r2
 800709e:	4798      	blx	r3
 80070a0:	60f8      	str	r0, [r7, #12]
      break;
 80070a2:	e020      	b.n	80070e6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f9d8 	bl	800745c <USBD_CtlError>
      return;
 80070ac:	e030      	b.n	8007110 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	7c1b      	ldrb	r3, [r3, #16]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10d      	bne.n	80070d2 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80070bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070be:	f107 020a 	add.w	r2, r7, #10
 80070c2:	4610      	mov	r0, r2
 80070c4:	4798      	blx	r3
 80070c6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	3301      	adds	r3, #1
 80070cc:	2207      	movs	r2, #7
 80070ce:	701a      	strb	r2, [r3, #0]
      break; 
 80070d0:	e009      	b.n	80070e6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80070d2:	6839      	ldr	r1, [r7, #0]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 f9c1 	bl	800745c <USBD_CtlError>
      return;
 80070da:	e019      	b.n	8007110 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 80070dc:	6839      	ldr	r1, [r7, #0]
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f9bc 	bl	800745c <USBD_CtlError>
    return;
 80070e4:	e014      	b.n	8007110 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 80070e6:	897b      	ldrh	r3, [r7, #10]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d011      	beq.n	8007110 <USBD_GetDescriptor+0x1e0>
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	88db      	ldrh	r3, [r3, #6]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00d      	beq.n	8007110 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	88da      	ldrh	r2, [r3, #6]
 80070f8:	897b      	ldrh	r3, [r7, #10]
 80070fa:	4293      	cmp	r3, r2
 80070fc:	bf28      	it	cs
 80070fe:	4613      	movcs	r3, r2
 8007100:	b29b      	uxth	r3, r3
 8007102:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8007104:	897b      	ldrh	r3, [r7, #10]
 8007106:	461a      	mov	r2, r3
 8007108:	68f9      	ldr	r1, [r7, #12]
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fa12 	bl	8007534 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop

08007118 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	889b      	ldrh	r3, [r3, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d12c      	bne.n	8007184 <USBD_SetAddress+0x6c>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	88db      	ldrh	r3, [r3, #6]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d128      	bne.n	8007184 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	885b      	ldrh	r3, [r3, #2]
 8007136:	b2db      	uxtb	r3, r3
 8007138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800713c:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8007144:	2b03      	cmp	r3, #3
 8007146:	d104      	bne.n	8007152 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 8007148:	6839      	ldr	r1, [r7, #0]
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f986 	bl	800745c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8007150:	e01c      	b.n	800718c <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	7bfa      	ldrb	r2, [r7, #15]
 8007156:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800715a:	7bfb      	ldrb	r3, [r7, #15]
 800715c:	4619      	mov	r1, r3
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f7fd f95e 	bl	8004420 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fa43 	bl	80075f0 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 800716a:	7bfb      	ldrb	r3, [r7, #15]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d004      	beq.n	800717a <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2202      	movs	r2, #2
 8007174:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8007178:	e008      	b.n	800718c <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8007182:	e003      	b.n	800718c <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8007184:	6839      	ldr	r1, [r7, #0]
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f968 	bl	800745c <USBD_CtlError>
  } 
}
 800718c:	bf00      	nop
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	885b      	ldrh	r3, [r3, #2]
 80071a2:	b2da      	uxtb	r2, r3
 80071a4:	4b3e      	ldr	r3, [pc, #248]	; (80072a0 <USBD_SetConfig+0x10c>)
 80071a6:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80071a8:	4b3d      	ldr	r3, [pc, #244]	; (80072a0 <USBD_SetConfig+0x10c>)
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d904      	bls.n	80071ba <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 80071b0:	6839      	ldr	r1, [r7, #0]
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f952 	bl	800745c <USBD_CtlError>
 80071b8:	e06f      	b.n	800729a <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d002      	beq.n	80071ca <USBD_SetConfig+0x36>
 80071c4:	2b03      	cmp	r3, #3
 80071c6:	d023      	beq.n	8007210 <USBD_SetConfig+0x7c>
 80071c8:	e062      	b.n	8007290 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 80071ca:	4b35      	ldr	r3, [pc, #212]	; (80072a0 <USBD_SetConfig+0x10c>)
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d01a      	beq.n	8007208 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 80071d2:	4b33      	ldr	r3, [pc, #204]	; (80072a0 <USBD_SetConfig+0x10c>)
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	461a      	mov	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2203      	movs	r2, #3
 80071e0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80071e4:	4b2e      	ldr	r3, [pc, #184]	; (80072a0 <USBD_SetConfig+0x10c>)
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	4619      	mov	r1, r3
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f7ff fb23 	bl	8006836 <USBD_SetClassConfig>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d104      	bne.n	8007200 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f92f 	bl	800745c <USBD_CtlError>
          return;
 80071fe:	e04c      	b.n	800729a <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 f9f5 	bl	80075f0 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8007206:	e048      	b.n	800729a <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 f9f1 	bl	80075f0 <USBD_CtlSendStatus>
      break;
 800720e:	e044      	b.n	800729a <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8007210:	4b23      	ldr	r3, [pc, #140]	; (80072a0 <USBD_SetConfig+0x10c>)
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d112      	bne.n	800723e <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8007220:	4b1f      	ldr	r3, [pc, #124]	; (80072a0 <USBD_SetConfig+0x10c>)
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	461a      	mov	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800722a:	4b1d      	ldr	r3, [pc, #116]	; (80072a0 <USBD_SetConfig+0x10c>)
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	4619      	mov	r1, r3
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f7ff fb1f 	bl	8006874 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f9da 	bl	80075f0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800723c:	e02d      	b.n	800729a <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 800723e:	4b18      	ldr	r3, [pc, #96]	; (80072a0 <USBD_SetConfig+0x10c>)
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	461a      	mov	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	429a      	cmp	r2, r3
 800724a:	d01d      	beq.n	8007288 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	b2db      	uxtb	r3, r3
 8007252:	4619      	mov	r1, r3
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f7ff fb0d 	bl	8006874 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800725a:	4b11      	ldr	r3, [pc, #68]	; (80072a0 <USBD_SetConfig+0x10c>)
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8007264:	4b0e      	ldr	r3, [pc, #56]	; (80072a0 <USBD_SetConfig+0x10c>)
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f7ff fae3 	bl	8006836 <USBD_SetClassConfig>
 8007270:	4603      	mov	r3, r0
 8007272:	2b02      	cmp	r3, #2
 8007274:	d104      	bne.n	8007280 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 8007276:	6839      	ldr	r1, [r7, #0]
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f8ef 	bl	800745c <USBD_CtlError>
          return;
 800727e:	e00c      	b.n	800729a <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f9b5 	bl	80075f0 <USBD_CtlSendStatus>
      break;
 8007286:	e008      	b.n	800729a <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f9b1 	bl	80075f0 <USBD_CtlSendStatus>
      break;
 800728e:	e004      	b.n	800729a <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8007290:	6839      	ldr	r1, [r7, #0]
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f8e2 	bl	800745c <USBD_CtlError>
      break;
 8007298:	bf00      	nop
    }
  }
}
 800729a:	3708      	adds	r7, #8
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	2000104c 	.word	0x2000104c

080072a4 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	88db      	ldrh	r3, [r3, #6]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d004      	beq.n	80072c0 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 80072b6:	6839      	ldr	r1, [r7, #0]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f8cf 	bl	800745c <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80072be:	e01f      	b.n	8007300 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d002      	beq.n	80072d0 <USBD_GetConfig+0x2c>
 80072ca:	2b03      	cmp	r3, #3
 80072cc:	d00b      	beq.n	80072e6 <USBD_GetConfig+0x42>
 80072ce:	e012      	b.n	80072f6 <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 80072da:	2201      	movs	r2, #1
 80072dc:	4619      	mov	r1, r3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f928 	bl	8007534 <USBD_CtlSendData>
      break;
 80072e4:	e00c      	b.n	8007300 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 80072ea:	2201      	movs	r2, #1
 80072ec:	4619      	mov	r1, r3
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f920 	bl	8007534 <USBD_CtlSendData>
      break;
 80072f4:	e004      	b.n	8007300 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 80072f6:	6839      	ldr	r1, [r7, #0]
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 f8af 	bl	800745c <USBD_CtlError>
      break;
 80072fe:	bf00      	nop
}
 8007300:	bf00      	nop
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8007318:	3b02      	subs	r3, #2
 800731a:	2b01      	cmp	r3, #1
 800731c:	d815      	bhi.n	800734a <USBD_GetStatus+0x42>
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
#else
    pdev->dev_config_status = 0;                                   
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	60da      	str	r2, [r3, #12]
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800732a:	2b00      	cmp	r3, #0
 800732c:	d005      	beq.n	800733a <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	f043 0202 	orr.w	r2, r3, #2
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 800733e:	2202      	movs	r2, #2
 8007340:	4619      	mov	r1, r3
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f8f6 	bl	8007534 <USBD_CtlSendData>
                      2);
    break;
 8007348:	e004      	b.n	8007354 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 800734a:	6839      	ldr	r1, [r7, #0]
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f885 	bl	800745c <USBD_CtlError>
    break;
 8007352:	bf00      	nop
  }
}
 8007354:	bf00      	nop
 8007356:	3708      	adds	r7, #8
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	885b      	ldrh	r3, [r3, #2]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d10d      	bne.n	800738a <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2201      	movs	r2, #1
 8007372:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	6839      	ldr	r1, [r7, #0]
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f933 	bl	80075f0 <USBD_CtlSendStatus>
  }

}
 800738a:	bf00      	nop
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b082      	sub	sp, #8
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80073a2:	3b02      	subs	r3, #2
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d812      	bhi.n	80073ce <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	885b      	ldrh	r3, [r3, #2]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d113      	bne.n	80073d8 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	6839      	ldr	r1, [r7, #0]
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f912 	bl	80075f0 <USBD_CtlSendStatus>
    }
    break;
 80073cc:	e004      	b.n	80073d8 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 80073ce:	6839      	ldr	r1, [r7, #0]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 f843 	bl	800745c <USBD_CtlError>
    break;
 80073d6:	e000      	b.n	80073da <USBD_ClrFeature+0x48>
    break;
 80073d8:	bf00      	nop
  }
}
 80073da:	bf00      	nop
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b083      	sub	sp, #12
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	781a      	ldrb	r2, [r3, #0]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	785a      	ldrb	r2, [r3, #1]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	3302      	adds	r3, #2
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	b29a      	uxth	r2, r3
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	3303      	adds	r3, #3
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	b29b      	uxth	r3, r3
 800740c:	021b      	lsls	r3, r3, #8
 800740e:	b29b      	uxth	r3, r3
 8007410:	4413      	add	r3, r2
 8007412:	b29a      	uxth	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	3304      	adds	r3, #4
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	b29a      	uxth	r2, r3
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	3305      	adds	r3, #5
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	b29b      	uxth	r3, r3
 8007428:	021b      	lsls	r3, r3, #8
 800742a:	b29b      	uxth	r3, r3
 800742c:	4413      	add	r3, r2
 800742e:	b29a      	uxth	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	3306      	adds	r3, #6
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	b29a      	uxth	r2, r3
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	3307      	adds	r3, #7
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	b29b      	uxth	r3, r3
 8007444:	021b      	lsls	r3, r3, #8
 8007446:	b29b      	uxth	r3, r3
 8007448:	4413      	add	r3, r2
 800744a:	b29a      	uxth	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	80da      	strh	r2, [r3, #6]

}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 8007466:	2180      	movs	r1, #128	; 0x80
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f7fc ff41 	bl	80042f0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800746e:	2100      	movs	r1, #0
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f7fc ff3d 	bl	80042f0 <USBD_LL_StallEP>
}
 8007476:	bf00      	nop
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b086      	sub	sp, #24
 8007482:	af00      	add	r7, sp, #0
 8007484:	60f8      	str	r0, [r7, #12]
 8007486:	60b9      	str	r1, [r7, #8]
 8007488:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 800748a:	2300      	movs	r3, #0
 800748c:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d033      	beq.n	80074fc <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 f835 	bl	8007504 <USBD_GetLen>
 800749a:	4603      	mov	r3, r0
 800749c:	3301      	adds	r3, #1
 800749e:	b29b      	uxth	r3, r3
 80074a0:	005b      	lsls	r3, r3, #1
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 80074a8:	7dfb      	ldrb	r3, [r7, #23]
 80074aa:	1c5a      	adds	r2, r3, #1
 80074ac:	75fa      	strb	r2, [r7, #23]
 80074ae:	461a      	mov	r2, r3
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	4413      	add	r3, r2
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	8812      	ldrh	r2, [r2, #0]
 80074b8:	b2d2      	uxtb	r2, r2
 80074ba:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80074bc:	7dfb      	ldrb	r3, [r7, #23]
 80074be:	1c5a      	adds	r2, r3, #1
 80074c0:	75fa      	strb	r2, [r7, #23]
 80074c2:	461a      	mov	r2, r3
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	4413      	add	r3, r2
 80074c8:	2203      	movs	r2, #3
 80074ca:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 80074cc:	e012      	b.n	80074f4 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 80074ce:	7dfb      	ldrb	r3, [r7, #23]
 80074d0:	1c5a      	adds	r2, r3, #1
 80074d2:	75fa      	strb	r2, [r7, #23]
 80074d4:	461a      	mov	r2, r3
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	441a      	add	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	1c59      	adds	r1, r3, #1
 80074de:	60f9      	str	r1, [r7, #12]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 80074e4:	7dfb      	ldrb	r3, [r7, #23]
 80074e6:	1c5a      	adds	r2, r3, #1
 80074e8:	75fa      	strb	r2, [r7, #23]
 80074ea:	461a      	mov	r2, r3
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	4413      	add	r3, r2
 80074f0:	2200      	movs	r2, #0
 80074f2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1e8      	bne.n	80074ce <USBD_GetString+0x50>
    }
  } 
}
 80074fc:	bf00      	nop
 80074fe:	3718      	adds	r7, #24
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 800750c:	2300      	movs	r3, #0
 800750e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8007510:	e005      	b.n	800751e <USBD_GetLen+0x1a>
    {
        len++;
 8007512:	7bfb      	ldrb	r3, [r7, #15]
 8007514:	3301      	adds	r3, #1
 8007516:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	3301      	adds	r3, #1
 800751c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1f5      	bne.n	8007512 <USBD_GetLen+0xe>
    }

    return len;
 8007526:	7bfb      	ldrb	r3, [r7, #15]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3714      	adds	r7, #20
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	4613      	mov	r3, r2
 8007540:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2202      	movs	r2, #2
 8007546:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800754a:	88fa      	ldrh	r2, [r7, #6]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8007550:	88fa      	ldrh	r2, [r7, #6]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8007556:	88fb      	ldrh	r3, [r7, #6]
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	2100      	movs	r1, #0
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f7fc ff95 	bl	800448c <USBD_LL_Transmit>
  
  return USBD_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3710      	adds	r7, #16
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	4613      	mov	r3, r2
 8007578:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800757a:	88fb      	ldrh	r3, [r7, #6]
 800757c:	68ba      	ldr	r2, [r7, #8]
 800757e:	2100      	movs	r1, #0
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f7fc ff83 	bl	800448c <USBD_LL_Transmit>
  
  return USBD_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	4613      	mov	r3, r2
 800759c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2203      	movs	r2, #3
 80075a2:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 80075a6:	88fa      	ldrh	r2, [r7, #6]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 80075ae:	88fa      	ldrh	r2, [r7, #6]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80075b6:	88fb      	ldrh	r3, [r7, #6]
 80075b8:	68ba      	ldr	r2, [r7, #8]
 80075ba:	2100      	movs	r1, #0
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f7fc ffa7 	bl	8004510 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	4613      	mov	r3, r2
 80075d8:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 80075da:	88fb      	ldrh	r3, [r7, #6]
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	2100      	movs	r1, #0
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f7fc ff95 	bl	8004510 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2204      	movs	r2, #4
 80075fc:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8007600:	2300      	movs	r3, #0
 8007602:	2200      	movs	r2, #0
 8007604:	2100      	movs	r1, #0
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7fc ff40 	bl	800448c <USBD_LL_Transmit>
  
  return USBD_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3708      	adds	r7, #8
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b082      	sub	sp, #8
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2205      	movs	r2, #5
 8007622:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8007626:	2300      	movs	r3, #0
 8007628:	2200      	movs	r2, #0
 800762a:	2100      	movs	r1, #0
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f7fc ff6f 	bl	8004510 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	4603      	mov	r3, r0
 8007644:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007646:	2300      	movs	r3, #0
 8007648:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800764a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800764e:	2b84      	cmp	r3, #132	; 0x84
 8007650:	d005      	beq.n	800765e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007652:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	4413      	add	r3, r2
 800765a:	3303      	adds	r3, #3
 800765c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800765e:	68fb      	ldr	r3, [r7, #12]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3714      	adds	r7, #20
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007670:	f001 fc80 	bl	8008f74 <vTaskStartScheduler>
  
  return osOK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	bd80      	pop	{r7, pc}

0800767a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800767a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800767c:	b087      	sub	sp, #28
 800767e:	af02      	add	r7, sp, #8
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685c      	ldr	r4, [r3, #4]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007690:	b29e      	uxth	r6, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007698:	4618      	mov	r0, r3
 800769a:	f7ff ffcf 	bl	800763c <makeFreeRtosPriority>
 800769e:	4602      	mov	r2, r0
 80076a0:	f107 030c 	add.w	r3, r7, #12
 80076a4:	9301      	str	r3, [sp, #4]
 80076a6:	9200      	str	r2, [sp, #0]
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	4632      	mov	r2, r6
 80076ac:	4629      	mov	r1, r5
 80076ae:	4620      	mov	r0, r4
 80076b0:	f001 fafa 	bl	8008ca8 <xTaskCreate>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d001      	beq.n	80076be <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80076ba:	2300      	movs	r3, #0
 80076bc:	e000      	b.n	80076c0 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80076be:	68fb      	ldr	r3, [r7, #12]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3714      	adds	r7, #20
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080076c8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <osDelay+0x16>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	e000      	b.n	80076e0 <osDelay+0x18>
 80076de:	2301      	movs	r3, #1
 80076e0:	4618      	mov	r0, r3
 80076e2:	f001 fc13 	bl	8008f0c <vTaskDelay>
  
  return osOK;
 80076e6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80076f4:	f002 f8ce 	bl	8009894 <xTaskGetSchedulerState>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d001      	beq.n	8007702 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 80076fe:	f000 fb4b 	bl	8007d98 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8007702:	bf00      	nop
 8007704:	bd80      	pop	{r7, pc}

08007706 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8007706:	b580      	push	{r7, lr}
 8007708:	b082      	sub	sp, #8
 800770a:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 800770c:	2018      	movs	r0, #24
 800770e:	f000 fbc7 	bl	8007ea0 <pvPortMalloc>
 8007712:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d007      	beq.n	800772a <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	3304      	adds	r3, #4
 8007724:	4618      	mov	r0, r3
 8007726:	f000 f8f4 	bl	8007912 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 800772a:	687b      	ldr	r3, [r7, #4]
	}
 800772c:	4618      	mov	r0, r3
 800772e:	3708      	adds	r7, #8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <xEventGroupClearBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d109      	bne.n	800775c <xEventGroupClearBits+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007748:	f04f 0340 	mov.w	r3, #64	; 0x40
 800774c:	f383 8811 	msr	BASEPRI, r3
 8007750:	f3bf 8f6f 	isb	sy
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	60fb      	str	r3, [r7, #12]
 800775a:	e7fe      	b.n	800775a <xEventGroupClearBits+0x26>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d009      	beq.n	800777a <xEventGroupClearBits+0x46>
 8007766:	f04f 0340 	mov.w	r3, #64	; 0x40
 800776a:	f383 8811 	msr	BASEPRI, r3
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f3bf 8f4f 	dsb	sy
 8007776:	60bb      	str	r3, [r7, #8]
 8007778:	e7fe      	b.n	8007778 <xEventGroupClearBits+0x44>

	taskENTER_CRITICAL();
 800777a:	f000 fa81 	bl	8007c80 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	43db      	mvns	r3, r3
 800778c:	401a      	ands	r2, r3
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8007792:	f000 faa3 	bl	8007cdc <vPortExitCritical>

	return uxReturn;
 8007796:	693b      	ldr	r3, [r7, #16]
}
 8007798:	4618      	mov	r0, r3
 800779a:	3718      	adds	r7, #24
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b08e      	sub	sp, #56	; 0x38
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80077aa:	2300      	movs	r3, #0
 80077ac:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80077b2:	2300      	movs	r3, #0
 80077b4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d109      	bne.n	80077d0 <xEventGroupSetBits+0x30>
 80077bc:	f04f 0340 	mov.w	r3, #64	; 0x40
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	613b      	str	r3, [r7, #16]
 80077ce:	e7fe      	b.n	80077ce <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d009      	beq.n	80077ee <xEventGroupSetBits+0x4e>
 80077da:	f04f 0340 	mov.w	r3, #64	; 0x40
 80077de:	f383 8811 	msr	BASEPRI, r3
 80077e2:	f3bf 8f6f 	isb	sy
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	60fb      	str	r3, [r7, #12]
 80077ec:	e7fe      	b.n	80077ec <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80077ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f0:	3304      	adds	r3, #4
 80077f2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	3308      	adds	r3, #8
 80077f8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80077fa:	f001 fc01 	bl	8009000 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80077fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8007804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	431a      	orrs	r2, r3
 800780c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8007810:	e03c      	b.n	800788c <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 8007812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8007818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800781e:	2300      	movs	r3, #0
 8007820:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007828:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007830:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007838:	2b00      	cmp	r3, #0
 800783a:	d108      	bne.n	800784e <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800783c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	4013      	ands	r3, r2
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00b      	beq.n	8007860 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8007848:	2301      	movs	r3, #1
 800784a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800784c:	e008      	b.n	8007860 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800784e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	401a      	ands	r2, r3
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	429a      	cmp	r2, r3
 800785a:	d101      	bne.n	8007860 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800785c:	2301      	movs	r3, #1
 800785e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8007860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007862:	2b00      	cmp	r3, #0
 8007864:	d010      	beq.n	8007888 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d003      	beq.n	8007878 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8007870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	4313      	orrs	r3, r2
 8007876:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8007878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007880:	4619      	mov	r1, r3
 8007882:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007884:	f001 fe38 	bl	80094f8 <xTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800788c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800788e:	6a3b      	ldr	r3, [r7, #32]
 8007890:	429a      	cmp	r2, r3
 8007892:	d1be      	bne.n	8007812 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789a:	43db      	mvns	r3, r3
 800789c:	401a      	ands	r2, r3
 800789e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80078a2:	f001 fbbb 	bl	800901c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80078a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a8:	681b      	ldr	r3, [r3, #0]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3738      	adds	r7, #56	; 0x38
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b086      	sub	sp, #24
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	617b      	str	r3, [r7, #20]
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	3304      	adds	r3, #4
 80078c2:	613b      	str	r3, [r7, #16]

	vTaskSuspendAll();
 80078c4:	f001 fb9c 	bl	8009000 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 80078c8:	e016      	b.n	80078f8 <vEventGroupDelete+0x46>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	68da      	ldr	r2, [r3, #12]
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	3308      	adds	r3, #8
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d109      	bne.n	80078ea <vEventGroupDelete+0x38>
 80078d6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80078da:	f383 8811 	msr	BASEPRI, r3
 80078de:	f3bf 8f6f 	isb	sy
 80078e2:	f3bf 8f4f 	dsb	sy
 80078e6:	60fb      	str	r3, [r7, #12]
 80078e8:	e7fe      	b.n	80078e8 <vEventGroupDelete+0x36>
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80078f2:	4618      	mov	r0, r3
 80078f4:	f001 fe00 	bl	80094f8 <xTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d1e4      	bne.n	80078ca <vEventGroupDelete+0x18>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
 8007900:	6978      	ldr	r0, [r7, #20]
 8007902:	f000 fb8f 	bl	8008024 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
 8007906:	f001 fb89 	bl	800901c <xTaskResumeAll>
}
 800790a:	bf00      	nop
 800790c:	3718      	adds	r7, #24
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007912:	b480      	push	{r7}
 8007914:	b083      	sub	sp, #12
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f103 0208 	add.w	r2, r3, #8
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f04f 32ff 	mov.w	r2, #4294967295
 800792a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f103 0208 	add.w	r2, r3, #8
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f103 0208 	add.w	r2, r3, #8
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007946:	bf00      	nop
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr

08007952 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007952:	b480      	push	{r7}
 8007954:	b083      	sub	sp, #12
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	689a      	ldr	r2, [r3, #8]
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	683a      	ldr	r2, [r7, #0]
 8007990:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	683a      	ldr	r2, [r7, #0]
 8007996:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	1c5a      	adds	r2, r3, #1
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	601a      	str	r2, [r3, #0]
}
 80079a8:	bf00      	nop
 80079aa:	3714      	adds	r7, #20
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079b4:	b480      	push	{r7}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ca:	d103      	bne.n	80079d4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	60fb      	str	r3, [r7, #12]
 80079d2:	e00c      	b.n	80079ee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	3308      	adds	r3, #8
 80079d8:	60fb      	str	r3, [r7, #12]
 80079da:	e002      	b.n	80079e2 <vListInsert+0x2e>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	60fb      	str	r3, [r7, #12]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d9f6      	bls.n	80079dc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	685a      	ldr	r2, [r3, #4]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	683a      	ldr	r2, [r7, #0]
 80079fc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	683a      	ldr	r2, [r7, #0]
 8007a08:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	1c5a      	adds	r2, r3, #1
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	601a      	str	r2, [r3, #0]
}
 8007a1a:	bf00      	nop
 8007a1c:	3714      	adds	r7, #20
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a26:	b480      	push	{r7}
 8007a28:	b085      	sub	sp, #20
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	6892      	ldr	r2, [r2, #8]
 8007a3c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	6852      	ldr	r2, [r2, #4]
 8007a46:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	685a      	ldr	r2, [r3, #4]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d103      	bne.n	8007a5a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	689a      	ldr	r2, [r3, #8]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	1e5a      	subs	r2, r3, #1
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3714      	adds	r7, #20
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
	...

08007a7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	3b04      	subs	r3, #4
 8007a8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	3b04      	subs	r3, #4
 8007a9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	f023 0201 	bic.w	r2, r3, #1
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	3b04      	subs	r3, #4
 8007aaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007aac:	4a0c      	ldr	r2, [pc, #48]	; (8007ae0 <pxPortInitialiseStack+0x64>)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	3b14      	subs	r3, #20
 8007ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	3b04      	subs	r3, #4
 8007ac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f06f 0202 	mvn.w	r2, #2
 8007aca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	3b20      	subs	r3, #32
 8007ad0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3714      	adds	r7, #20
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr
 8007ae0:	08007ae5 	.word	0x08007ae5

08007ae4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007aea:	4b0c      	ldr	r3, [pc, #48]	; (8007b1c <prvTaskExitError+0x38>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af2:	d009      	beq.n	8007b08 <prvTaskExitError+0x24>
 8007af4:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007af8:	f383 8811 	msr	BASEPRI, r3
 8007afc:	f3bf 8f6f 	isb	sy
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	607b      	str	r3, [r7, #4]
 8007b06:	e7fe      	b.n	8007b06 <prvTaskExitError+0x22>
 8007b08:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007b0c:	f383 8811 	msr	BASEPRI, r3
 8007b10:	f3bf 8f6f 	isb	sy
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8007b1a:	e7fe      	b.n	8007b1a <prvTaskExitError+0x36>
 8007b1c:	200001ac 	.word	0x200001ac

08007b20 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b20:	4b07      	ldr	r3, [pc, #28]	; (8007b40 <pxCurrentTCBConst2>)
 8007b22:	6819      	ldr	r1, [r3, #0]
 8007b24:	6808      	ldr	r0, [r1, #0]
 8007b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2a:	f380 8809 	msr	PSP, r0
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f04f 0000 	mov.w	r0, #0
 8007b36:	f380 8811 	msr	BASEPRI, r0
 8007b3a:	4770      	bx	lr
 8007b3c:	f3af 8000 	nop.w

08007b40 <pxCurrentTCBConst2>:
 8007b40:	20004c6c 	.word	0x20004c6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop

08007b48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007b48:	4806      	ldr	r0, [pc, #24]	; (8007b64 <prvPortStartFirstTask+0x1c>)
 8007b4a:	6800      	ldr	r0, [r0, #0]
 8007b4c:	6800      	ldr	r0, [r0, #0]
 8007b4e:	f380 8808 	msr	MSP, r0
 8007b52:	b662      	cpsie	i
 8007b54:	b661      	cpsie	f
 8007b56:	f3bf 8f4f 	dsb	sy
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	df00      	svc	0
 8007b60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b62:	bf00      	nop
 8007b64:	e000ed08 	.word	0xe000ed08

08007b68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007b6e:	4b3b      	ldr	r3, [pc, #236]	; (8007c5c <xPortStartScheduler+0xf4>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a3b      	ldr	r2, [pc, #236]	; (8007c60 <xPortStartScheduler+0xf8>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d109      	bne.n	8007b8c <xPortStartScheduler+0x24>
 8007b78:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007b7c:	f383 8811 	msr	BASEPRI, r3
 8007b80:	f3bf 8f6f 	isb	sy
 8007b84:	f3bf 8f4f 	dsb	sy
 8007b88:	613b      	str	r3, [r7, #16]
 8007b8a:	e7fe      	b.n	8007b8a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007b8c:	4b33      	ldr	r3, [pc, #204]	; (8007c5c <xPortStartScheduler+0xf4>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a34      	ldr	r2, [pc, #208]	; (8007c64 <xPortStartScheduler+0xfc>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d109      	bne.n	8007baa <xPortStartScheduler+0x42>
 8007b96:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007b9a:	f383 8811 	msr	BASEPRI, r3
 8007b9e:	f3bf 8f6f 	isb	sy
 8007ba2:	f3bf 8f4f 	dsb	sy
 8007ba6:	60fb      	str	r3, [r7, #12]
 8007ba8:	e7fe      	b.n	8007ba8 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007baa:	4b2f      	ldr	r3, [pc, #188]	; (8007c68 <xPortStartScheduler+0x100>)
 8007bac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	22ff      	movs	r2, #255	; 0xff
 8007bba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007bc4:	79fb      	ldrb	r3, [r7, #7]
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	4b27      	ldr	r3, [pc, #156]	; (8007c6c <xPortStartScheduler+0x104>)
 8007bd0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007bd2:	4b27      	ldr	r3, [pc, #156]	; (8007c70 <xPortStartScheduler+0x108>)
 8007bd4:	2207      	movs	r2, #7
 8007bd6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bd8:	e009      	b.n	8007bee <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007bda:	4b25      	ldr	r3, [pc, #148]	; (8007c70 <xPortStartScheduler+0x108>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	3b01      	subs	r3, #1
 8007be0:	4a23      	ldr	r2, [pc, #140]	; (8007c70 <xPortStartScheduler+0x108>)
 8007be2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007be4:	79fb      	ldrb	r3, [r7, #7]
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	005b      	lsls	r3, r3, #1
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bee:	79fb      	ldrb	r3, [r7, #7]
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bf6:	2b80      	cmp	r3, #128	; 0x80
 8007bf8:	d0ef      	beq.n	8007bda <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007bfa:	4b1d      	ldr	r3, [pc, #116]	; (8007c70 <xPortStartScheduler+0x108>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	021b      	lsls	r3, r3, #8
 8007c00:	4a1b      	ldr	r2, [pc, #108]	; (8007c70 <xPortStartScheduler+0x108>)
 8007c02:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c04:	4b1a      	ldr	r3, [pc, #104]	; (8007c70 <xPortStartScheduler+0x108>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c0c:	4a18      	ldr	r2, [pc, #96]	; (8007c70 <xPortStartScheduler+0x108>)
 8007c0e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	b2da      	uxtb	r2, r3
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c18:	4a16      	ldr	r2, [pc, #88]	; (8007c74 <xPortStartScheduler+0x10c>)
 8007c1a:	4b16      	ldr	r3, [pc, #88]	; (8007c74 <xPortStartScheduler+0x10c>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c22:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c24:	4a13      	ldr	r2, [pc, #76]	; (8007c74 <xPortStartScheduler+0x10c>)
 8007c26:	4b13      	ldr	r3, [pc, #76]	; (8007c74 <xPortStartScheduler+0x10c>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007c2e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c30:	f000 f8d2 	bl	8007dd8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c34:	4b10      	ldr	r3, [pc, #64]	; (8007c78 <xPortStartScheduler+0x110>)
 8007c36:	2200      	movs	r2, #0
 8007c38:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007c3a:	f000 f8e9 	bl	8007e10 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007c3e:	4a0f      	ldr	r2, [pc, #60]	; (8007c7c <xPortStartScheduler+0x114>)
 8007c40:	4b0e      	ldr	r3, [pc, #56]	; (8007c7c <xPortStartScheduler+0x114>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007c48:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c4a:	f7ff ff7d 	bl	8007b48 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8007c4e:	f7ff ff49 	bl	8007ae4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3718      	adds	r7, #24
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	e000ed00 	.word	0xe000ed00
 8007c60:	410fc271 	.word	0x410fc271
 8007c64:	410fc270 	.word	0x410fc270
 8007c68:	e000e400 	.word	0xe000e400
 8007c6c:	2000104d 	.word	0x2000104d
 8007c70:	20001050 	.word	0x20001050
 8007c74:	e000ed20 	.word	0xe000ed20
 8007c78:	200001ac 	.word	0x200001ac
 8007c7c:	e000ef34 	.word	0xe000ef34

08007c80 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007c8a:	f383 8811 	msr	BASEPRI, r3
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	f3bf 8f4f 	dsb	sy
 8007c96:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c98:	4b0e      	ldr	r3, [pc, #56]	; (8007cd4 <vPortEnterCritical+0x54>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	4a0d      	ldr	r2, [pc, #52]	; (8007cd4 <vPortEnterCritical+0x54>)
 8007ca0:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007ca2:	4b0c      	ldr	r3, [pc, #48]	; (8007cd4 <vPortEnterCritical+0x54>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d10e      	bne.n	8007cc8 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007caa:	4b0b      	ldr	r3, [pc, #44]	; (8007cd8 <vPortEnterCritical+0x58>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d009      	beq.n	8007cc8 <vPortEnterCritical+0x48>
 8007cb4:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007cb8:	f383 8811 	msr	BASEPRI, r3
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	603b      	str	r3, [r7, #0]
 8007cc6:	e7fe      	b.n	8007cc6 <vPortEnterCritical+0x46>
	}
}
 8007cc8:	bf00      	nop
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr
 8007cd4:	200001ac 	.word	0x200001ac
 8007cd8:	e000ed04 	.word	0xe000ed04

08007cdc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007ce2:	4b11      	ldr	r3, [pc, #68]	; (8007d28 <vPortExitCritical+0x4c>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d109      	bne.n	8007cfe <vPortExitCritical+0x22>
 8007cea:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007cee:	f383 8811 	msr	BASEPRI, r3
 8007cf2:	f3bf 8f6f 	isb	sy
 8007cf6:	f3bf 8f4f 	dsb	sy
 8007cfa:	607b      	str	r3, [r7, #4]
 8007cfc:	e7fe      	b.n	8007cfc <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007cfe:	4b0a      	ldr	r3, [pc, #40]	; (8007d28 <vPortExitCritical+0x4c>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	3b01      	subs	r3, #1
 8007d04:	4a08      	ldr	r2, [pc, #32]	; (8007d28 <vPortExitCritical+0x4c>)
 8007d06:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d08:	4b07      	ldr	r3, [pc, #28]	; (8007d28 <vPortExitCritical+0x4c>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d104      	bne.n	8007d1a <vPortExitCritical+0x3e>
 8007d10:	2300      	movs	r3, #0
 8007d12:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d1a:	bf00      	nop
 8007d1c:	370c      	adds	r7, #12
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	200001ac 	.word	0x200001ac
 8007d2c:	00000000 	.word	0x00000000

08007d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d30:	f3ef 8009 	mrs	r0, PSP
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	4b15      	ldr	r3, [pc, #84]	; (8007d90 <pxCurrentTCBConst>)
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	f01e 0f10 	tst.w	lr, #16
 8007d40:	bf08      	it	eq
 8007d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d4a:	6010      	str	r0, [r2, #0]
 8007d4c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8007d50:	f04f 0040 	mov.w	r0, #64	; 0x40
 8007d54:	f380 8811 	msr	BASEPRI, r0
 8007d58:	f3bf 8f4f 	dsb	sy
 8007d5c:	f3bf 8f6f 	isb	sy
 8007d60:	f001 fac4 	bl	80092ec <vTaskSwitchContext>
 8007d64:	f04f 0000 	mov.w	r0, #0
 8007d68:	f380 8811 	msr	BASEPRI, r0
 8007d6c:	bc08      	pop	{r3}
 8007d6e:	6819      	ldr	r1, [r3, #0]
 8007d70:	6808      	ldr	r0, [r1, #0]
 8007d72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d76:	f01e 0f10 	tst.w	lr, #16
 8007d7a:	bf08      	it	eq
 8007d7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d80:	f380 8809 	msr	PSP, r0
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	f3af 8000 	nop.w

08007d90 <pxCurrentTCBConst>:
 8007d90:	20004c6c 	.word	0x20004c6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d94:	bf00      	nop
 8007d96:	bf00      	nop

08007d98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d9e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007da2:	f383 8811 	msr	BASEPRI, r3
 8007da6:	f3bf 8f6f 	isb	sy
 8007daa:	f3bf 8f4f 	dsb	sy
 8007dae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007db0:	f001 f9e0 	bl	8009174 <xTaskIncrementTick>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d003      	beq.n	8007dc2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007dba:	4b06      	ldr	r3, [pc, #24]	; (8007dd4 <xPortSysTickHandler+0x3c>)
 8007dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dc0:	601a      	str	r2, [r3, #0]
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007dcc:	bf00      	nop
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	e000ed04 	.word	0xe000ed04

08007dd8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007dd8:	b480      	push	{r7}
 8007dda:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007ddc:	4a08      	ldr	r2, [pc, #32]	; (8007e00 <vPortSetupTimerInterrupt+0x28>)
 8007dde:	4b09      	ldr	r3, [pc, #36]	; (8007e04 <vPortSetupTimerInterrupt+0x2c>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4909      	ldr	r1, [pc, #36]	; (8007e08 <vPortSetupTimerInterrupt+0x30>)
 8007de4:	fba1 1303 	umull	r1, r3, r1, r3
 8007de8:	099b      	lsrs	r3, r3, #6
 8007dea:	3b01      	subs	r3, #1
 8007dec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007dee:	4b07      	ldr	r3, [pc, #28]	; (8007e0c <vPortSetupTimerInterrupt+0x34>)
 8007df0:	2207      	movs	r2, #7
 8007df2:	601a      	str	r2, [r3, #0]
}
 8007df4:	bf00      	nop
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	e000e014 	.word	0xe000e014
 8007e04:	200001d0 	.word	0x200001d0
 8007e08:	10624dd3 	.word	0x10624dd3
 8007e0c:	e000e010 	.word	0xe000e010

08007e10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007e10:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007e20 <vPortEnableVFP+0x10>
 8007e14:	6801      	ldr	r1, [r0, #0]
 8007e16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007e1a:	6001      	str	r1, [r0, #0]
 8007e1c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007e1e:	bf00      	nop
 8007e20:	e000ed88 	.word	0xe000ed88

08007e24 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8007e2a:	f3ef 8305 	mrs	r3, IPSR
 8007e2e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2b0f      	cmp	r3, #15
 8007e34:	d913      	bls.n	8007e5e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e36:	4a16      	ldr	r2, [pc, #88]	; (8007e90 <vPortValidateInterruptPriority+0x6c>)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e40:	4b14      	ldr	r3, [pc, #80]	; (8007e94 <vPortValidateInterruptPriority+0x70>)
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	7afa      	ldrb	r2, [r7, #11]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d209      	bcs.n	8007e5e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007e4a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007e4e:	f383 8811 	msr	BASEPRI, r3
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	607b      	str	r3, [r7, #4]
 8007e5c:	e7fe      	b.n	8007e5c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e5e:	4b0e      	ldr	r3, [pc, #56]	; (8007e98 <vPortValidateInterruptPriority+0x74>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007e66:	4b0d      	ldr	r3, [pc, #52]	; (8007e9c <vPortValidateInterruptPriority+0x78>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d909      	bls.n	8007e82 <vPortValidateInterruptPriority+0x5e>
 8007e6e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	603b      	str	r3, [r7, #0]
 8007e80:	e7fe      	b.n	8007e80 <vPortValidateInterruptPriority+0x5c>
	}
 8007e82:	bf00      	nop
 8007e84:	3714      	adds	r7, #20
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	e000e3f0 	.word	0xe000e3f0
 8007e94:	2000104d 	.word	0x2000104d
 8007e98:	e000ed0c 	.word	0xe000ed0c
 8007e9c:	20001050 	.word	0x20001050

08007ea0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b08a      	sub	sp, #40	; 0x28
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007eac:	f001 f8a8 	bl	8009000 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007eb0:	4b57      	ldr	r3, [pc, #348]	; (8008010 <pvPortMalloc+0x170>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d101      	bne.n	8007ebc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007eb8:	f000 f90c 	bl	80080d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ebc:	4b55      	ldr	r3, [pc, #340]	; (8008014 <pvPortMalloc+0x174>)
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4013      	ands	r3, r2
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f040 808c 	bne.w	8007fe2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d01c      	beq.n	8007f0a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007ed0:	2208      	movs	r2, #8
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f003 0307 	and.w	r3, r3, #7
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d013      	beq.n	8007f0a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f023 0307 	bic.w	r3, r3, #7
 8007ee8:	3308      	adds	r3, #8
 8007eea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f003 0307 	and.w	r3, r3, #7
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d009      	beq.n	8007f0a <pvPortMalloc+0x6a>
 8007ef6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007efa:	f383 8811 	msr	BASEPRI, r3
 8007efe:	f3bf 8f6f 	isb	sy
 8007f02:	f3bf 8f4f 	dsb	sy
 8007f06:	617b      	str	r3, [r7, #20]
 8007f08:	e7fe      	b.n	8007f08 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d068      	beq.n	8007fe2 <pvPortMalloc+0x142>
 8007f10:	4b41      	ldr	r3, [pc, #260]	; (8008018 <pvPortMalloc+0x178>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d863      	bhi.n	8007fe2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f1a:	4b40      	ldr	r3, [pc, #256]	; (800801c <pvPortMalloc+0x17c>)
 8007f1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f1e:	4b3f      	ldr	r3, [pc, #252]	; (800801c <pvPortMalloc+0x17c>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f24:	e004      	b.n	8007f30 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f32:	685a      	ldr	r2, [r3, #4]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d203      	bcs.n	8007f42 <pvPortMalloc+0xa2>
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1f1      	bne.n	8007f26 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f42:	4b33      	ldr	r3, [pc, #204]	; (8008010 <pvPortMalloc+0x170>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d04a      	beq.n	8007fe2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f4c:	6a3b      	ldr	r3, [r7, #32]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2208      	movs	r2, #8
 8007f52:	4413      	add	r3, r2
 8007f54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	6a3b      	ldr	r3, [r7, #32]
 8007f5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f60:	685a      	ldr	r2, [r3, #4]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	1ad2      	subs	r2, r2, r3
 8007f66:	2308      	movs	r3, #8
 8007f68:	005b      	lsls	r3, r3, #1
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d91e      	bls.n	8007fac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4413      	add	r3, r2
 8007f74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	f003 0307 	and.w	r3, r3, #7
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d009      	beq.n	8007f94 <pvPortMalloc+0xf4>
 8007f80:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	613b      	str	r3, [r7, #16]
 8007f92:	e7fe      	b.n	8007f92 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f96:	685a      	ldr	r2, [r3, #4]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	1ad2      	subs	r2, r2, r3
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007fa6:	69b8      	ldr	r0, [r7, #24]
 8007fa8:	f000 f8f6 	bl	8008198 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007fac:	4b1a      	ldr	r3, [pc, #104]	; (8008018 <pvPortMalloc+0x178>)
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	1ad3      	subs	r3, r2, r3
 8007fb6:	4a18      	ldr	r2, [pc, #96]	; (8008018 <pvPortMalloc+0x178>)
 8007fb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007fba:	4b17      	ldr	r3, [pc, #92]	; (8008018 <pvPortMalloc+0x178>)
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	4b18      	ldr	r3, [pc, #96]	; (8008020 <pvPortMalloc+0x180>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d203      	bcs.n	8007fce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007fc6:	4b14      	ldr	r3, [pc, #80]	; (8008018 <pvPortMalloc+0x178>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a15      	ldr	r2, [pc, #84]	; (8008020 <pvPortMalloc+0x180>)
 8007fcc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd0:	685a      	ldr	r2, [r3, #4]
 8007fd2:	4b10      	ldr	r3, [pc, #64]	; (8008014 <pvPortMalloc+0x174>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	431a      	orrs	r2, r3
 8007fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fde:	2200      	movs	r2, #0
 8007fe0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007fe2:	f001 f81b 	bl	800901c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	f003 0307 	and.w	r3, r3, #7
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d009      	beq.n	8008004 <pvPortMalloc+0x164>
 8007ff0:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	60fb      	str	r3, [r7, #12]
 8008002:	e7fe      	b.n	8008002 <pvPortMalloc+0x162>
	return pvReturn;
 8008004:	69fb      	ldr	r3, [r7, #28]
}
 8008006:	4618      	mov	r0, r3
 8008008:	3728      	adds	r7, #40	; 0x28
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	20004c5c 	.word	0x20004c5c
 8008014:	20004c68 	.word	0x20004c68
 8008018:	20004c60 	.word	0x20004c60
 800801c:	20004c54 	.word	0x20004c54
 8008020:	20004c64 	.word	0x20004c64

08008024 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b086      	sub	sp, #24
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d046      	beq.n	80080c4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008036:	2308      	movs	r3, #8
 8008038:	425b      	negs	r3, r3
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	4413      	add	r3, r2
 800803e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	685a      	ldr	r2, [r3, #4]
 8008048:	4b20      	ldr	r3, [pc, #128]	; (80080cc <vPortFree+0xa8>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4013      	ands	r3, r2
 800804e:	2b00      	cmp	r3, #0
 8008050:	d109      	bne.n	8008066 <vPortFree+0x42>
 8008052:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008056:	f383 8811 	msr	BASEPRI, r3
 800805a:	f3bf 8f6f 	isb	sy
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	60fb      	str	r3, [r7, #12]
 8008064:	e7fe      	b.n	8008064 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d009      	beq.n	8008082 <vPortFree+0x5e>
 800806e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008072:	f383 8811 	msr	BASEPRI, r3
 8008076:	f3bf 8f6f 	isb	sy
 800807a:	f3bf 8f4f 	dsb	sy
 800807e:	60bb      	str	r3, [r7, #8]
 8008080:	e7fe      	b.n	8008080 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	685a      	ldr	r2, [r3, #4]
 8008086:	4b11      	ldr	r3, [pc, #68]	; (80080cc <vPortFree+0xa8>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4013      	ands	r3, r2
 800808c:	2b00      	cmp	r3, #0
 800808e:	d019      	beq.n	80080c4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d115      	bne.n	80080c4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	685a      	ldr	r2, [r3, #4]
 800809c:	4b0b      	ldr	r3, [pc, #44]	; (80080cc <vPortFree+0xa8>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	43db      	mvns	r3, r3
 80080a2:	401a      	ands	r2, r3
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80080a8:	f000 ffaa 	bl	8009000 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	685a      	ldr	r2, [r3, #4]
 80080b0:	4b07      	ldr	r3, [pc, #28]	; (80080d0 <vPortFree+0xac>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4413      	add	r3, r2
 80080b6:	4a06      	ldr	r2, [pc, #24]	; (80080d0 <vPortFree+0xac>)
 80080b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80080ba:	6938      	ldr	r0, [r7, #16]
 80080bc:	f000 f86c 	bl	8008198 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80080c0:	f000 ffac 	bl	800901c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80080c4:	bf00      	nop
 80080c6:	3718      	adds	r7, #24
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	20004c68 	.word	0x20004c68
 80080d0:	20004c60 	.word	0x20004c60

080080d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80080da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80080de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80080e0:	4b27      	ldr	r3, [pc, #156]	; (8008180 <prvHeapInit+0xac>)
 80080e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f003 0307 	and.w	r3, r3, #7
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00c      	beq.n	8008108 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	3307      	adds	r3, #7
 80080f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f023 0307 	bic.w	r3, r3, #7
 80080fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	4a1f      	ldr	r2, [pc, #124]	; (8008180 <prvHeapInit+0xac>)
 8008104:	4413      	add	r3, r2
 8008106:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800810c:	4a1d      	ldr	r2, [pc, #116]	; (8008184 <prvHeapInit+0xb0>)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008112:	4b1c      	ldr	r3, [pc, #112]	; (8008184 <prvHeapInit+0xb0>)
 8008114:	2200      	movs	r2, #0
 8008116:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	4413      	add	r3, r2
 800811e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008120:	2208      	movs	r2, #8
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	1a9b      	subs	r3, r3, r2
 8008126:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f023 0307 	bic.w	r3, r3, #7
 800812e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	4a15      	ldr	r2, [pc, #84]	; (8008188 <prvHeapInit+0xb4>)
 8008134:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008136:	4b14      	ldr	r3, [pc, #80]	; (8008188 <prvHeapInit+0xb4>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2200      	movs	r2, #0
 800813c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800813e:	4b12      	ldr	r3, [pc, #72]	; (8008188 <prvHeapInit+0xb4>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2200      	movs	r2, #0
 8008144:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	1ad2      	subs	r2, r2, r3
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008154:	4b0c      	ldr	r3, [pc, #48]	; (8008188 <prvHeapInit+0xb4>)
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	4a0a      	ldr	r2, [pc, #40]	; (800818c <prvHeapInit+0xb8>)
 8008162:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	4a09      	ldr	r2, [pc, #36]	; (8008190 <prvHeapInit+0xbc>)
 800816a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800816c:	4b09      	ldr	r3, [pc, #36]	; (8008194 <prvHeapInit+0xc0>)
 800816e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008172:	601a      	str	r2, [r3, #0]
}
 8008174:	bf00      	nop
 8008176:	3714      	adds	r7, #20
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr
 8008180:	20001054 	.word	0x20001054
 8008184:	20004c54 	.word	0x20004c54
 8008188:	20004c5c 	.word	0x20004c5c
 800818c:	20004c64 	.word	0x20004c64
 8008190:	20004c60 	.word	0x20004c60
 8008194:	20004c68 	.word	0x20004c68

08008198 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80081a0:	4b28      	ldr	r3, [pc, #160]	; (8008244 <prvInsertBlockIntoFreeList+0xac>)
 80081a2:	60fb      	str	r3, [r7, #12]
 80081a4:	e002      	b.n	80081ac <prvInsertBlockIntoFreeList+0x14>
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	60fb      	str	r3, [r7, #12]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d3f7      	bcc.n	80081a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	441a      	add	r2, r3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d108      	bne.n	80081da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	685a      	ldr	r2, [r3, #4]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	441a      	add	r2, r3
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	441a      	add	r2, r3
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d118      	bne.n	8008220 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	4b15      	ldr	r3, [pc, #84]	; (8008248 <prvInsertBlockIntoFreeList+0xb0>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d00d      	beq.n	8008216 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	685a      	ldr	r2, [r3, #4]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	441a      	add	r2, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	e008      	b.n	8008228 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008216:	4b0c      	ldr	r3, [pc, #48]	; (8008248 <prvInsertBlockIntoFreeList+0xb0>)
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	601a      	str	r2, [r3, #0]
 800821e:	e003      	b.n	8008228 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	429a      	cmp	r2, r3
 800822e:	d002      	beq.n	8008236 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008236:	bf00      	nop
 8008238:	3714      	adds	r7, #20
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	20004c54 	.word	0x20004c54
 8008248:	20004c5c 	.word	0x20004c5c

0800824c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d109      	bne.n	8008274 <xQueueGenericReset+0x28>
 8008260:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008264:	f383 8811 	msr	BASEPRI, r3
 8008268:	f3bf 8f6f 	isb	sy
 800826c:	f3bf 8f4f 	dsb	sy
 8008270:	60bb      	str	r3, [r7, #8]
 8008272:	e7fe      	b.n	8008272 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008274:	f7ff fd04 	bl	8007c80 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008280:	68f9      	ldr	r1, [r7, #12]
 8008282:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008284:	fb01 f303 	mul.w	r3, r1, r3
 8008288:	441a      	add	r2, r3
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082a4:	3b01      	subs	r3, #1
 80082a6:	68f9      	ldr	r1, [r7, #12]
 80082a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80082aa:	fb01 f303 	mul.w	r3, r1, r3
 80082ae:	441a      	add	r2, r3
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	22ff      	movs	r2, #255	; 0xff
 80082b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	22ff      	movs	r2, #255	; 0xff
 80082c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d114      	bne.n	80082f4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d01a      	beq.n	8008308 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	3310      	adds	r3, #16
 80082d6:	4618      	mov	r0, r3
 80082d8:	f001 f8ac 	bl	8009434 <xTaskRemoveFromEventList>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d012      	beq.n	8008308 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80082e2:	4b0d      	ldr	r3, [pc, #52]	; (8008318 <xQueueGenericReset+0xcc>)
 80082e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082e8:	601a      	str	r2, [r3, #0]
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	f3bf 8f6f 	isb	sy
 80082f2:	e009      	b.n	8008308 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	3310      	adds	r3, #16
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7ff fb0a 	bl	8007912 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	3324      	adds	r3, #36	; 0x24
 8008302:	4618      	mov	r0, r3
 8008304:	f7ff fb05 	bl	8007912 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008308:	f7ff fce8 	bl	8007cdc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800830c:	2301      	movs	r3, #1
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	e000ed04 	.word	0xe000ed04

0800831c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800831c:	b580      	push	{r7, lr}
 800831e:	b08a      	sub	sp, #40	; 0x28
 8008320:	af02      	add	r7, sp, #8
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	4613      	mov	r3, r2
 8008328:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d109      	bne.n	8008344 <xQueueGenericCreate+0x28>
 8008330:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	613b      	str	r3, [r7, #16]
 8008342:	e7fe      	b.n	8008342 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d102      	bne.n	8008350 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800834a:	2300      	movs	r3, #0
 800834c:	61fb      	str	r3, [r7, #28]
 800834e:	e004      	b.n	800835a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	fb02 f303 	mul.w	r3, r2, r3
 8008358:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	3348      	adds	r3, #72	; 0x48
 800835e:	4618      	mov	r0, r3
 8008360:	f7ff fd9e 	bl	8007ea0 <pvPortMalloc>
 8008364:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00b      	beq.n	8008384 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	3348      	adds	r3, #72	; 0x48
 8008370:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008372:	79fa      	ldrb	r2, [r7, #7]
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	9300      	str	r3, [sp, #0]
 8008378:	4613      	mov	r3, r2
 800837a:	697a      	ldr	r2, [r7, #20]
 800837c:	68b9      	ldr	r1, [r7, #8]
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f000 f805 	bl	800838e <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8008384:	69bb      	ldr	r3, [r7, #24]
	}
 8008386:	4618      	mov	r0, r3
 8008388:	3720      	adds	r7, #32
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b084      	sub	sp, #16
 8008392:	af00      	add	r7, sp, #0
 8008394:	60f8      	str	r0, [r7, #12]
 8008396:	60b9      	str	r1, [r7, #8]
 8008398:	607a      	str	r2, [r7, #4]
 800839a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d103      	bne.n	80083aa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	69ba      	ldr	r2, [r7, #24]
 80083a6:	601a      	str	r2, [r3, #0]
 80083a8:	e002      	b.n	80083b0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80083bc:	2101      	movs	r1, #1
 80083be:	69b8      	ldr	r0, [r7, #24]
 80083c0:	f7ff ff44 	bl	800824c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80083c4:	bf00      	nop
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b086      	sub	sp, #24
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d109      	bne.n	80083f0 <xQueueCreateCountingSemaphore+0x24>
 80083dc:	f04f 0340 	mov.w	r3, #64	; 0x40
 80083e0:	f383 8811 	msr	BASEPRI, r3
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	613b      	str	r3, [r7, #16]
 80083ee:	e7fe      	b.n	80083ee <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 80083f0:	683a      	ldr	r2, [r7, #0]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d909      	bls.n	800840c <xQueueCreateCountingSemaphore+0x40>
 80083f8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80083fc:	f383 8811 	msr	BASEPRI, r3
 8008400:	f3bf 8f6f 	isb	sy
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	60fb      	str	r3, [r7, #12]
 800840a:	e7fe      	b.n	800840a <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800840c:	2202      	movs	r2, #2
 800840e:	2100      	movs	r1, #0
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f7ff ff83 	bl	800831c <xQueueGenericCreate>
 8008416:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d002      	beq.n	8008424 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	683a      	ldr	r2, [r7, #0]
 8008422:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008424:	697b      	ldr	r3, [r7, #20]
	}
 8008426:	4618      	mov	r0, r3
 8008428:	3718      	adds	r7, #24
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
	...

08008430 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b08e      	sub	sp, #56	; 0x38
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
 800843c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800843e:	2300      	movs	r3, #0
 8008440:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008448:	2b00      	cmp	r3, #0
 800844a:	d109      	bne.n	8008460 <xQueueGenericSend+0x30>
 800844c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	62bb      	str	r3, [r7, #40]	; 0x28
 800845e:	e7fe      	b.n	800845e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d103      	bne.n	800846e <xQueueGenericSend+0x3e>
 8008466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846a:	2b00      	cmp	r3, #0
 800846c:	d101      	bne.n	8008472 <xQueueGenericSend+0x42>
 800846e:	2301      	movs	r3, #1
 8008470:	e000      	b.n	8008474 <xQueueGenericSend+0x44>
 8008472:	2300      	movs	r3, #0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d109      	bne.n	800848c <xQueueGenericSend+0x5c>
 8008478:	f04f 0340 	mov.w	r3, #64	; 0x40
 800847c:	f383 8811 	msr	BASEPRI, r3
 8008480:	f3bf 8f6f 	isb	sy
 8008484:	f3bf 8f4f 	dsb	sy
 8008488:	627b      	str	r3, [r7, #36]	; 0x24
 800848a:	e7fe      	b.n	800848a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	2b02      	cmp	r3, #2
 8008490:	d103      	bne.n	800849a <xQueueGenericSend+0x6a>
 8008492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008496:	2b01      	cmp	r3, #1
 8008498:	d101      	bne.n	800849e <xQueueGenericSend+0x6e>
 800849a:	2301      	movs	r3, #1
 800849c:	e000      	b.n	80084a0 <xQueueGenericSend+0x70>
 800849e:	2300      	movs	r3, #0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d109      	bne.n	80084b8 <xQueueGenericSend+0x88>
 80084a4:	f04f 0340 	mov.w	r3, #64	; 0x40
 80084a8:	f383 8811 	msr	BASEPRI, r3
 80084ac:	f3bf 8f6f 	isb	sy
 80084b0:	f3bf 8f4f 	dsb	sy
 80084b4:	623b      	str	r3, [r7, #32]
 80084b6:	e7fe      	b.n	80084b6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084b8:	f001 f9ec 	bl	8009894 <xTaskGetSchedulerState>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d102      	bne.n	80084c8 <xQueueGenericSend+0x98>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d101      	bne.n	80084cc <xQueueGenericSend+0x9c>
 80084c8:	2301      	movs	r3, #1
 80084ca:	e000      	b.n	80084ce <xQueueGenericSend+0x9e>
 80084cc:	2300      	movs	r3, #0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d109      	bne.n	80084e6 <xQueueGenericSend+0xb6>
 80084d2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80084d6:	f383 8811 	msr	BASEPRI, r3
 80084da:	f3bf 8f6f 	isb	sy
 80084de:	f3bf 8f4f 	dsb	sy
 80084e2:	61fb      	str	r3, [r7, #28]
 80084e4:	e7fe      	b.n	80084e4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80084e6:	f7ff fbcb 	bl	8007c80 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80084ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d302      	bcc.n	80084fc <xQueueGenericSend+0xcc>
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d129      	bne.n	8008550 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	68b9      	ldr	r1, [r7, #8]
 8008500:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008502:	f000 fa6f 	bl	80089e4 <prvCopyDataToQueue>
 8008506:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850c:	2b00      	cmp	r3, #0
 800850e:	d010      	beq.n	8008532 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008512:	3324      	adds	r3, #36	; 0x24
 8008514:	4618      	mov	r0, r3
 8008516:	f000 ff8d 	bl	8009434 <xTaskRemoveFromEventList>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d013      	beq.n	8008548 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008520:	4b3f      	ldr	r3, [pc, #252]	; (8008620 <xQueueGenericSend+0x1f0>)
 8008522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008526:	601a      	str	r2, [r3, #0]
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	f3bf 8f6f 	isb	sy
 8008530:	e00a      	b.n	8008548 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008534:	2b00      	cmp	r3, #0
 8008536:	d007      	beq.n	8008548 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008538:	4b39      	ldr	r3, [pc, #228]	; (8008620 <xQueueGenericSend+0x1f0>)
 800853a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800853e:	601a      	str	r2, [r3, #0]
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008548:	f7ff fbc8 	bl	8007cdc <vPortExitCritical>
				return pdPASS;
 800854c:	2301      	movs	r3, #1
 800854e:	e063      	b.n	8008618 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d103      	bne.n	800855e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008556:	f7ff fbc1 	bl	8007cdc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800855a:	2300      	movs	r3, #0
 800855c:	e05c      	b.n	8008618 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800855e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008560:	2b00      	cmp	r3, #0
 8008562:	d106      	bne.n	8008572 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8008564:	f107 0314 	add.w	r3, r7, #20
 8008568:	4618      	mov	r0, r3
 800856a:	f001 f82b 	bl	80095c4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800856e:	2301      	movs	r3, #1
 8008570:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008572:	f7ff fbb3 	bl	8007cdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008576:	f000 fd43 	bl	8009000 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800857a:	f7ff fb81 	bl	8007c80 <vPortEnterCritical>
 800857e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008580:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008584:	b25b      	sxtb	r3, r3
 8008586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800858a:	d103      	bne.n	8008594 <xQueueGenericSend+0x164>
 800858c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858e:	2200      	movs	r2, #0
 8008590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008596:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800859a:	b25b      	sxtb	r3, r3
 800859c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a0:	d103      	bne.n	80085aa <xQueueGenericSend+0x17a>
 80085a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a4:	2200      	movs	r2, #0
 80085a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085aa:	f7ff fb97 	bl	8007cdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085ae:	1d3a      	adds	r2, r7, #4
 80085b0:	f107 0314 	add.w	r3, r7, #20
 80085b4:	4611      	mov	r1, r2
 80085b6:	4618      	mov	r0, r3
 80085b8:	f001 f828 	bl	800960c <xTaskCheckForTimeOut>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d124      	bne.n	800860c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80085c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085c4:	f000 fb06 	bl	8008bd4 <prvIsQueueFull>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d018      	beq.n	8008600 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80085ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d0:	3310      	adds	r3, #16
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	4611      	mov	r1, r2
 80085d6:	4618      	mov	r0, r3
 80085d8:	f000 ff08 	bl	80093ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80085dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085de:	f000 fa91 	bl	8008b04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80085e2:	f000 fd1b 	bl	800901c <xTaskResumeAll>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f47f af7c 	bne.w	80084e6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80085ee:	4b0c      	ldr	r3, [pc, #48]	; (8008620 <xQueueGenericSend+0x1f0>)
 80085f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085f4:	601a      	str	r2, [r3, #0]
 80085f6:	f3bf 8f4f 	dsb	sy
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	e772      	b.n	80084e6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008600:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008602:	f000 fa7f 	bl	8008b04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008606:	f000 fd09 	bl	800901c <xTaskResumeAll>
 800860a:	e76c      	b.n	80084e6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800860c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800860e:	f000 fa79 	bl	8008b04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008612:	f000 fd03 	bl	800901c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008616:	2300      	movs	r3, #0
		}
	}
}
 8008618:	4618      	mov	r0, r3
 800861a:	3738      	adds	r7, #56	; 0x38
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}
 8008620:	e000ed04 	.word	0xe000ed04

08008624 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b08e      	sub	sp, #56	; 0x38
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
 8008630:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008638:	2b00      	cmp	r3, #0
 800863a:	d109      	bne.n	8008650 <xQueueGenericSendFromISR+0x2c>
 800863c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008640:	f383 8811 	msr	BASEPRI, r3
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	f3bf 8f4f 	dsb	sy
 800864c:	627b      	str	r3, [r7, #36]	; 0x24
 800864e:	e7fe      	b.n	800864e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d103      	bne.n	800865e <xQueueGenericSendFromISR+0x3a>
 8008656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865a:	2b00      	cmp	r3, #0
 800865c:	d101      	bne.n	8008662 <xQueueGenericSendFromISR+0x3e>
 800865e:	2301      	movs	r3, #1
 8008660:	e000      	b.n	8008664 <xQueueGenericSendFromISR+0x40>
 8008662:	2300      	movs	r3, #0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d109      	bne.n	800867c <xQueueGenericSendFromISR+0x58>
 8008668:	f04f 0340 	mov.w	r3, #64	; 0x40
 800866c:	f383 8811 	msr	BASEPRI, r3
 8008670:	f3bf 8f6f 	isb	sy
 8008674:	f3bf 8f4f 	dsb	sy
 8008678:	623b      	str	r3, [r7, #32]
 800867a:	e7fe      	b.n	800867a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	2b02      	cmp	r3, #2
 8008680:	d103      	bne.n	800868a <xQueueGenericSendFromISR+0x66>
 8008682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008686:	2b01      	cmp	r3, #1
 8008688:	d101      	bne.n	800868e <xQueueGenericSendFromISR+0x6a>
 800868a:	2301      	movs	r3, #1
 800868c:	e000      	b.n	8008690 <xQueueGenericSendFromISR+0x6c>
 800868e:	2300      	movs	r3, #0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d109      	bne.n	80086a8 <xQueueGenericSendFromISR+0x84>
 8008694:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008698:	f383 8811 	msr	BASEPRI, r3
 800869c:	f3bf 8f6f 	isb	sy
 80086a0:	f3bf 8f4f 	dsb	sy
 80086a4:	61fb      	str	r3, [r7, #28]
 80086a6:	e7fe      	b.n	80086a6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80086a8:	f7ff fbbc 	bl	8007e24 <vPortValidateInterruptPriority>
	__asm volatile
 80086ac:	f3ef 8211 	mrs	r2, BASEPRI
 80086b0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	61ba      	str	r2, [r7, #24]
 80086c2:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80086c4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80086c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80086c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d302      	bcc.n	80086da <xQueueGenericSendFromISR+0xb6>
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d12c      	bne.n	8008734 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80086da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80086e4:	683a      	ldr	r2, [r7, #0]
 80086e6:	68b9      	ldr	r1, [r7, #8]
 80086e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086ea:	f000 f97b 	bl	80089e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80086ee:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80086f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086f6:	d112      	bne.n	800871e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d016      	beq.n	800872e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008702:	3324      	adds	r3, #36	; 0x24
 8008704:	4618      	mov	r0, r3
 8008706:	f000 fe95 	bl	8009434 <xTaskRemoveFromEventList>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00e      	beq.n	800872e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00b      	beq.n	800872e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2201      	movs	r2, #1
 800871a:	601a      	str	r2, [r3, #0]
 800871c:	e007      	b.n	800872e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800871e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008722:	3301      	adds	r3, #1
 8008724:	b2db      	uxtb	r3, r3
 8008726:	b25a      	sxtb	r2, r3
 8008728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800872e:	2301      	movs	r3, #1
 8008730:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008732:	e001      	b.n	8008738 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008734:	2300      	movs	r3, #0
 8008736:	637b      	str	r3, [r7, #52]	; 0x34
 8008738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800873a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008744:	4618      	mov	r0, r3
 8008746:	3738      	adds	r7, #56	; 0x38
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b08e      	sub	sp, #56	; 0x38
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	607a      	str	r2, [r7, #4]
 8008758:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800875a:	2300      	movs	r3, #0
 800875c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008764:	2b00      	cmp	r3, #0
 8008766:	d109      	bne.n	800877c <xQueueGenericReceive+0x30>
	__asm volatile
 8008768:	f04f 0340 	mov.w	r3, #64	; 0x40
 800876c:	f383 8811 	msr	BASEPRI, r3
 8008770:	f3bf 8f6f 	isb	sy
 8008774:	f3bf 8f4f 	dsb	sy
 8008778:	627b      	str	r3, [r7, #36]	; 0x24
 800877a:	e7fe      	b.n	800877a <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d103      	bne.n	800878a <xQueueGenericReceive+0x3e>
 8008782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008786:	2b00      	cmp	r3, #0
 8008788:	d101      	bne.n	800878e <xQueueGenericReceive+0x42>
 800878a:	2301      	movs	r3, #1
 800878c:	e000      	b.n	8008790 <xQueueGenericReceive+0x44>
 800878e:	2300      	movs	r3, #0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d109      	bne.n	80087a8 <xQueueGenericReceive+0x5c>
 8008794:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008798:	f383 8811 	msr	BASEPRI, r3
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	623b      	str	r3, [r7, #32]
 80087a6:	e7fe      	b.n	80087a6 <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087a8:	f001 f874 	bl	8009894 <xTaskGetSchedulerState>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d102      	bne.n	80087b8 <xQueueGenericReceive+0x6c>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d101      	bne.n	80087bc <xQueueGenericReceive+0x70>
 80087b8:	2301      	movs	r3, #1
 80087ba:	e000      	b.n	80087be <xQueueGenericReceive+0x72>
 80087bc:	2300      	movs	r3, #0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d109      	bne.n	80087d6 <xQueueGenericReceive+0x8a>
 80087c2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80087c6:	f383 8811 	msr	BASEPRI, r3
 80087ca:	f3bf 8f6f 	isb	sy
 80087ce:	f3bf 8f4f 	dsb	sy
 80087d2:	61fb      	str	r3, [r7, #28]
 80087d4:	e7fe      	b.n	80087d4 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80087d6:	f7ff fa53 	bl	8007c80 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087de:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d046      	beq.n	8008874 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80087e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80087ec:	68b9      	ldr	r1, [r7, #8]
 80087ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087f0:	f000 f962 	bl	8008ab8 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d121      	bne.n	800883e <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80087fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fc:	1e5a      	subs	r2, r3, #1
 80087fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008800:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d104      	bne.n	8008814 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800880a:	f001 f95b 	bl	8009ac4 <pvTaskIncrementMutexHeldCount>
 800880e:	4602      	mov	r2, r0
 8008810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008812:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d027      	beq.n	800886c <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800881c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881e:	3310      	adds	r3, #16
 8008820:	4618      	mov	r0, r3
 8008822:	f000 fe07 	bl	8009434 <xTaskRemoveFromEventList>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d01f      	beq.n	800886c <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 800882c:	4b4f      	ldr	r3, [pc, #316]	; (800896c <xQueueGenericReceive+0x220>)
 800882e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008832:	601a      	str	r2, [r3, #0]
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	e016      	b.n	800886c <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800883e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008842:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008848:	2b00      	cmp	r3, #0
 800884a:	d00f      	beq.n	800886c <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800884c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884e:	3324      	adds	r3, #36	; 0x24
 8008850:	4618      	mov	r0, r3
 8008852:	f000 fdef 	bl	8009434 <xTaskRemoveFromEventList>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d007      	beq.n	800886c <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 800885c:	4b43      	ldr	r3, [pc, #268]	; (800896c <xQueueGenericReceive+0x220>)
 800885e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008862:	601a      	str	r2, [r3, #0]
 8008864:	f3bf 8f4f 	dsb	sy
 8008868:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 800886c:	f7ff fa36 	bl	8007cdc <vPortExitCritical>
				return pdPASS;
 8008870:	2301      	movs	r3, #1
 8008872:	e077      	b.n	8008964 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d103      	bne.n	8008882 <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800887a:	f7ff fa2f 	bl	8007cdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800887e:	2300      	movs	r3, #0
 8008880:	e070      	b.n	8008964 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008884:	2b00      	cmp	r3, #0
 8008886:	d106      	bne.n	8008896 <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8008888:	f107 0314 	add.w	r3, r7, #20
 800888c:	4618      	mov	r0, r3
 800888e:	f000 fe99 	bl	80095c4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008892:	2301      	movs	r3, #1
 8008894:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008896:	f7ff fa21 	bl	8007cdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800889a:	f000 fbb1 	bl	8009000 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800889e:	f7ff f9ef 	bl	8007c80 <vPortEnterCritical>
 80088a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088a8:	b25b      	sxtb	r3, r3
 80088aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ae:	d103      	bne.n	80088b8 <xQueueGenericReceive+0x16c>
 80088b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088be:	b25b      	sxtb	r3, r3
 80088c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c4:	d103      	bne.n	80088ce <xQueueGenericReceive+0x182>
 80088c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088ce:	f7ff fa05 	bl	8007cdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088d2:	1d3a      	adds	r2, r7, #4
 80088d4:	f107 0314 	add.w	r3, r7, #20
 80088d8:	4611      	mov	r1, r2
 80088da:	4618      	mov	r0, r3
 80088dc:	f000 fe96 	bl	800960c <xTaskCheckForTimeOut>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d131      	bne.n	800894a <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088e8:	f000 f95e 	bl	8008ba8 <prvIsQueueEmpty>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d025      	beq.n	800893e <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d108      	bne.n	800890c <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 80088fa:	f7ff f9c1 	bl	8007c80 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80088fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	4618      	mov	r0, r3
 8008904:	f000 ffe4 	bl	80098d0 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8008908:	f7ff f9e8 	bl	8007cdc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800890c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890e:	3324      	adds	r3, #36	; 0x24
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	4611      	mov	r1, r2
 8008914:	4618      	mov	r0, r3
 8008916:	f000 fd69 	bl	80093ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800891a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800891c:	f000 f8f2 	bl	8008b04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008920:	f000 fb7c 	bl	800901c <xTaskResumeAll>
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	f47f af55 	bne.w	80087d6 <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 800892c:	4b0f      	ldr	r3, [pc, #60]	; (800896c <xQueueGenericReceive+0x220>)
 800892e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008932:	601a      	str	r2, [r3, #0]
 8008934:	f3bf 8f4f 	dsb	sy
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	e74b      	b.n	80087d6 <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800893e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008940:	f000 f8e0 	bl	8008b04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008944:	f000 fb6a 	bl	800901c <xTaskResumeAll>
 8008948:	e745      	b.n	80087d6 <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800894a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800894c:	f000 f8da 	bl	8008b04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008950:	f000 fb64 	bl	800901c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008956:	f000 f927 	bl	8008ba8 <prvIsQueueEmpty>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	f43f af3a 	beq.w	80087d6 <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008962:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008964:	4618      	mov	r0, r3
 8008966:	3738      	adds	r7, #56	; 0x38
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}
 800896c:	e000ed04 	.word	0xe000ed04

08008970 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d109      	bne.n	8008992 <uxQueueMessagesWaiting+0x22>
 800897e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008982:	f383 8811 	msr	BASEPRI, r3
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	60bb      	str	r3, [r7, #8]
 8008990:	e7fe      	b.n	8008990 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8008992:	f7ff f975 	bl	8007c80 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800899c:	f7ff f99e 	bl	8007cdc <vPortExitCritical>

	return uxReturn;
 80089a0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b084      	sub	sp, #16
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d109      	bne.n	80089d0 <vQueueDelete+0x26>
 80089bc:	f04f 0340 	mov.w	r3, #64	; 0x40
 80089c0:	f383 8811 	msr	BASEPRI, r3
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	60bb      	str	r3, [r7, #8]
 80089ce:	e7fe      	b.n	80089ce <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80089d0:	68f8      	ldr	r0, [r7, #12]
 80089d2:	f000 f93f 	bl	8008c54 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f7ff fb24 	bl	8008024 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80089dc:	bf00      	nop
 80089de:	3710      	adds	r7, #16
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b086      	sub	sp, #24
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80089f0:	2300      	movs	r3, #0
 80089f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d10d      	bne.n	8008a1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d14d      	bne.n	8008aa6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f000 ffd4 	bl	80099bc <xTaskPriorityDisinherit>
 8008a14:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	605a      	str	r2, [r3, #4]
 8008a1c:	e043      	b.n	8008aa6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d119      	bne.n	8008a58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6898      	ldr	r0, [r3, #8]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	68b9      	ldr	r1, [r7, #8]
 8008a30:	f008 f995 	bl	8010d5e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	689a      	ldr	r2, [r3, #8]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a3c:	441a      	add	r2, r3
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	689a      	ldr	r2, [r3, #8]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d32b      	bcc.n	8008aa6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	609a      	str	r2, [r3, #8]
 8008a56:	e026      	b.n	8008aa6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	68d8      	ldr	r0, [r3, #12]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a60:	461a      	mov	r2, r3
 8008a62:	68b9      	ldr	r1, [r7, #8]
 8008a64:	f008 f97b 	bl	8010d5e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	68da      	ldr	r2, [r3, #12]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a70:	425b      	negs	r3, r3
 8008a72:	441a      	add	r2, r3
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	68da      	ldr	r2, [r3, #12]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d207      	bcs.n	8008a94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	685a      	ldr	r2, [r3, #4]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8c:	425b      	negs	r3, r3
 8008a8e:	441a      	add	r2, r3
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	d105      	bne.n	8008aa6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d002      	beq.n	8008aa6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	1c5a      	adds	r2, r3, #1
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008aae:	697b      	ldr	r3, [r7, #20]
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3718      	adds	r7, #24
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d018      	beq.n	8008afc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	68da      	ldr	r2, [r3, #12]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad2:	441a      	add	r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	68da      	ldr	r2, [r3, #12]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d303      	bcc.n	8008aec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	68d9      	ldr	r1, [r3, #12]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af4:	461a      	mov	r2, r3
 8008af6:	6838      	ldr	r0, [r7, #0]
 8008af8:	f008 f931 	bl	8010d5e <memcpy>
	}
}
 8008afc:	bf00      	nop
 8008afe:	3708      	adds	r7, #8
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008b0c:	f7ff f8b8 	bl	8007c80 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b18:	e011      	b.n	8008b3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d012      	beq.n	8008b48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	3324      	adds	r3, #36	; 0x24
 8008b26:	4618      	mov	r0, r3
 8008b28:	f000 fc84 	bl	8009434 <xTaskRemoveFromEventList>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d001      	beq.n	8008b36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008b32:	f000 fdc9 	bl	80096c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008b36:	7bfb      	ldrb	r3, [r7, #15]
 8008b38:	3b01      	subs	r3, #1
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	dce9      	bgt.n	8008b1a <prvUnlockQueue+0x16>
 8008b46:	e000      	b.n	8008b4a <prvUnlockQueue+0x46>
					break;
 8008b48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	22ff      	movs	r2, #255	; 0xff
 8008b4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008b52:	f7ff f8c3 	bl	8007cdc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008b56:	f7ff f893 	bl	8007c80 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b62:	e011      	b.n	8008b88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d012      	beq.n	8008b92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	3310      	adds	r3, #16
 8008b70:	4618      	mov	r0, r3
 8008b72:	f000 fc5f 	bl	8009434 <xTaskRemoveFromEventList>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d001      	beq.n	8008b80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008b7c:	f000 fda4 	bl	80096c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008b80:	7bbb      	ldrb	r3, [r7, #14]
 8008b82:	3b01      	subs	r3, #1
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	dce9      	bgt.n	8008b64 <prvUnlockQueue+0x60>
 8008b90:	e000      	b.n	8008b94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008b92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	22ff      	movs	r2, #255	; 0xff
 8008b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008b9c:	f7ff f89e 	bl	8007cdc <vPortExitCritical>
}
 8008ba0:	bf00      	nop
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008bb0:	f7ff f866 	bl	8007c80 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d102      	bne.n	8008bc2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	60fb      	str	r3, [r7, #12]
 8008bc0:	e001      	b.n	8008bc6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008bc6:	f7ff f889 	bl	8007cdc <vPortExitCritical>

	return xReturn;
 8008bca:	68fb      	ldr	r3, [r7, #12]
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3710      	adds	r7, #16
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008bdc:	f7ff f850 	bl	8007c80 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d102      	bne.n	8008bf2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008bec:	2301      	movs	r3, #1
 8008bee:	60fb      	str	r3, [r7, #12]
 8008bf0:	e001      	b.n	8008bf6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008bf6:	f7ff f871 	bl	8007cdc <vPortExitCritical>

	return xReturn;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c0e:	2300      	movs	r3, #0
 8008c10:	60fb      	str	r3, [r7, #12]
 8008c12:	e014      	b.n	8008c3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008c14:	4a0e      	ldr	r2, [pc, #56]	; (8008c50 <vQueueAddToRegistry+0x4c>)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d10b      	bne.n	8008c38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008c20:	490b      	ldr	r1, [pc, #44]	; (8008c50 <vQueueAddToRegistry+0x4c>)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	683a      	ldr	r2, [r7, #0]
 8008c26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008c2a:	4a09      	ldr	r2, [pc, #36]	; (8008c50 <vQueueAddToRegistry+0x4c>)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	00db      	lsls	r3, r3, #3
 8008c30:	4413      	add	r3, r2
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008c36:	e005      	b.n	8008c44 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	60fb      	str	r3, [r7, #12]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2b07      	cmp	r3, #7
 8008c42:	d9e7      	bls.n	8008c14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008c44:	bf00      	nop
 8008c46:	3714      	adds	r7, #20
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr
 8008c50:	20006950 	.word	0x20006950

08008c54 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	60fb      	str	r3, [r7, #12]
 8008c60:	e016      	b.n	8008c90 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008c62:	4a10      	ldr	r2, [pc, #64]	; (8008ca4 <vQueueUnregisterQueue+0x50>)
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	00db      	lsls	r3, r3, #3
 8008c68:	4413      	add	r3, r2
 8008c6a:	685a      	ldr	r2, [r3, #4]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d10b      	bne.n	8008c8a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008c72:	4a0c      	ldr	r2, [pc, #48]	; (8008ca4 <vQueueUnregisterQueue+0x50>)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2100      	movs	r1, #0
 8008c78:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008c7c:	4a09      	ldr	r2, [pc, #36]	; (8008ca4 <vQueueUnregisterQueue+0x50>)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	00db      	lsls	r3, r3, #3
 8008c82:	4413      	add	r3, r2
 8008c84:	2200      	movs	r2, #0
 8008c86:	605a      	str	r2, [r3, #4]
				break;
 8008c88:	e005      	b.n	8008c96 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	60fb      	str	r3, [r7, #12]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2b07      	cmp	r3, #7
 8008c94:	d9e5      	bls.n	8008c62 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008c96:	bf00      	nop
 8008c98:	3714      	adds	r7, #20
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	20006950 	.word	0x20006950

08008ca8 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b08c      	sub	sp, #48	; 0x30
 8008cac:	af04      	add	r7, sp, #16
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	603b      	str	r3, [r7, #0]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cb8:	88fb      	ldrh	r3, [r7, #6]
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7ff f8ef 	bl	8007ea0 <pvPortMalloc>
 8008cc2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00e      	beq.n	8008ce8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008cca:	2054      	movs	r0, #84	; 0x54
 8008ccc:	f7ff f8e8 	bl	8007ea0 <pvPortMalloc>
 8008cd0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d003      	beq.n	8008ce0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	697a      	ldr	r2, [r7, #20]
 8008cdc:	631a      	str	r2, [r3, #48]	; 0x30
 8008cde:	e005      	b.n	8008cec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008ce0:	6978      	ldr	r0, [r7, #20]
 8008ce2:	f7ff f99f 	bl	8008024 <vPortFree>
 8008ce6:	e001      	b.n	8008cec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d013      	beq.n	8008d1a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008cf2:	88fa      	ldrh	r2, [r7, #6]
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	9303      	str	r3, [sp, #12]
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	9302      	str	r3, [sp, #8]
 8008cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cfe:	9301      	str	r3, [sp, #4]
 8008d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	68b9      	ldr	r1, [r7, #8]
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f000 f80e 	bl	8008d2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d0e:	69f8      	ldr	r0, [r7, #28]
 8008d10:	f000 f892 	bl	8008e38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008d14:	2301      	movs	r3, #1
 8008d16:	61bb      	str	r3, [r7, #24]
 8008d18:	e002      	b.n	8008d20 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008d20:	69bb      	ldr	r3, [r7, #24]
	}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3720      	adds	r7, #32
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b088      	sub	sp, #32
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	60f8      	str	r0, [r7, #12]
 8008d32:	60b9      	str	r1, [r7, #8]
 8008d34:	607a      	str	r2, [r7, #4]
 8008d36:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	461a      	mov	r2, r3
 8008d42:	21a5      	movs	r1, #165	; 0xa5
 8008d44:	f008 f830 	bl	8010da8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d52:	3b01      	subs	r3, #1
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	4413      	add	r3, r2
 8008d58:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	f023 0307 	bic.w	r3, r3, #7
 8008d60:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	f003 0307 	and.w	r3, r3, #7
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d009      	beq.n	8008d80 <prvInitialiseNewTask+0x56>
 8008d6c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008d70:	f383 8811 	msr	BASEPRI, r3
 8008d74:	f3bf 8f6f 	isb	sy
 8008d78:	f3bf 8f4f 	dsb	sy
 8008d7c:	617b      	str	r3, [r7, #20]
 8008d7e:	e7fe      	b.n	8008d7e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d80:	2300      	movs	r3, #0
 8008d82:	61fb      	str	r3, [r7, #28]
 8008d84:	e012      	b.n	8008dac <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d86:	68ba      	ldr	r2, [r7, #8]
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	7819      	ldrb	r1, [r3, #0]
 8008d8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	4413      	add	r3, r2
 8008d94:	3334      	adds	r3, #52	; 0x34
 8008d96:	460a      	mov	r2, r1
 8008d98:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008d9a:	68ba      	ldr	r2, [r7, #8]
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	4413      	add	r3, r2
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d006      	beq.n	8008db4 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	3301      	adds	r3, #1
 8008daa:	61fb      	str	r3, [r7, #28]
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	2b0f      	cmp	r3, #15
 8008db0:	d9e9      	bls.n	8008d86 <prvInitialiseNewTask+0x5c>
 8008db2:	e000      	b.n	8008db6 <prvInitialiseNewTask+0x8c>
		{
			break;
 8008db4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db8:	2200      	movs	r2, #0
 8008dba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc0:	2b06      	cmp	r3, #6
 8008dc2:	d901      	bls.n	8008dc8 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008dc4:	2306      	movs	r3, #6
 8008dc6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dcc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dd2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ddc:	3304      	adds	r3, #4
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7fe fdb7 	bl	8007952 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de6:	3318      	adds	r3, #24
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7fe fdb2 	bl	8007952 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008df2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df6:	f1c3 0207 	rsb	r2, r3, #7
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e06:	2200      	movs	r2, #0
 8008e08:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e12:	683a      	ldr	r2, [r7, #0]
 8008e14:	68f9      	ldr	r1, [r7, #12]
 8008e16:	69b8      	ldr	r0, [r7, #24]
 8008e18:	f7fe fe30 	bl	8007a7c <pxPortInitialiseStack>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e20:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d002      	beq.n	8008e2e <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e2e:	bf00      	nop
 8008e30:	3720      	adds	r7, #32
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
	...

08008e38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e40:	f7fe ff1e 	bl	8007c80 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e44:	4b2a      	ldr	r3, [pc, #168]	; (8008ef0 <prvAddNewTaskToReadyList+0xb8>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	4a29      	ldr	r2, [pc, #164]	; (8008ef0 <prvAddNewTaskToReadyList+0xb8>)
 8008e4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e4e:	4b29      	ldr	r3, [pc, #164]	; (8008ef4 <prvAddNewTaskToReadyList+0xbc>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d109      	bne.n	8008e6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e56:	4a27      	ldr	r2, [pc, #156]	; (8008ef4 <prvAddNewTaskToReadyList+0xbc>)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e5c:	4b24      	ldr	r3, [pc, #144]	; (8008ef0 <prvAddNewTaskToReadyList+0xb8>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d110      	bne.n	8008e86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e64:	f000 fc54 	bl	8009710 <prvInitialiseTaskLists>
 8008e68:	e00d      	b.n	8008e86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e6a:	4b23      	ldr	r3, [pc, #140]	; (8008ef8 <prvAddNewTaskToReadyList+0xc0>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d109      	bne.n	8008e86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e72:	4b20      	ldr	r3, [pc, #128]	; (8008ef4 <prvAddNewTaskToReadyList+0xbc>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d802      	bhi.n	8008e86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008e80:	4a1c      	ldr	r2, [pc, #112]	; (8008ef4 <prvAddNewTaskToReadyList+0xbc>)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008e86:	4b1d      	ldr	r3, [pc, #116]	; (8008efc <prvAddNewTaskToReadyList+0xc4>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	4a1b      	ldr	r2, [pc, #108]	; (8008efc <prvAddNewTaskToReadyList+0xc4>)
 8008e8e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e94:	2201      	movs	r2, #1
 8008e96:	409a      	lsls	r2, r3
 8008e98:	4b19      	ldr	r3, [pc, #100]	; (8008f00 <prvAddNewTaskToReadyList+0xc8>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	4a18      	ldr	r2, [pc, #96]	; (8008f00 <prvAddNewTaskToReadyList+0xc8>)
 8008ea0:	6013      	str	r3, [r2, #0]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	4413      	add	r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	4a15      	ldr	r2, [pc, #84]	; (8008f04 <prvAddNewTaskToReadyList+0xcc>)
 8008eb0:	441a      	add	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	3304      	adds	r3, #4
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	4610      	mov	r0, r2
 8008eba:	f7fe fd57 	bl	800796c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008ebe:	f7fe ff0d 	bl	8007cdc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008ec2:	4b0d      	ldr	r3, [pc, #52]	; (8008ef8 <prvAddNewTaskToReadyList+0xc0>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00e      	beq.n	8008ee8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008eca:	4b0a      	ldr	r3, [pc, #40]	; (8008ef4 <prvAddNewTaskToReadyList+0xbc>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d207      	bcs.n	8008ee8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008ed8:	4b0b      	ldr	r3, [pc, #44]	; (8008f08 <prvAddNewTaskToReadyList+0xd0>)
 8008eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ede:	601a      	str	r2, [r3, #0]
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ee8:	bf00      	nop
 8008eea:	3708      	adds	r7, #8
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	20004d6c 	.word	0x20004d6c
 8008ef4:	20004c6c 	.word	0x20004c6c
 8008ef8:	20004d78 	.word	0x20004d78
 8008efc:	20004d88 	.word	0x20004d88
 8008f00:	20004d74 	.word	0x20004d74
 8008f04:	20004c70 	.word	0x20004c70
 8008f08:	e000ed04 	.word	0xe000ed04

08008f0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008f14:	2300      	movs	r3, #0
 8008f16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d016      	beq.n	8008f4c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008f1e:	4b13      	ldr	r3, [pc, #76]	; (8008f6c <vTaskDelay+0x60>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d009      	beq.n	8008f3a <vTaskDelay+0x2e>
 8008f26:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008f2a:	f383 8811 	msr	BASEPRI, r3
 8008f2e:	f3bf 8f6f 	isb	sy
 8008f32:	f3bf 8f4f 	dsb	sy
 8008f36:	60bb      	str	r3, [r7, #8]
 8008f38:	e7fe      	b.n	8008f38 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008f3a:	f000 f861 	bl	8009000 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f3e:	2100      	movs	r1, #0
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 feab 	bl	8009c9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008f46:	f000 f869 	bl	800901c <xTaskResumeAll>
 8008f4a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d107      	bne.n	8008f62 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008f52:	4b07      	ldr	r3, [pc, #28]	; (8008f70 <vTaskDelay+0x64>)
 8008f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f58:	601a      	str	r2, [r3, #0]
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f62:	bf00      	nop
 8008f64:	3710      	adds	r7, #16
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	20004d94 	.word	0x20004d94
 8008f70:	e000ed04 	.word	0xe000ed04

08008f74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b086      	sub	sp, #24
 8008f78:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8008f7a:	4b1b      	ldr	r3, [pc, #108]	; (8008fe8 <vTaskStartScheduler+0x74>)
 8008f7c:	9301      	str	r3, [sp, #4]
 8008f7e:	2300      	movs	r3, #0
 8008f80:	9300      	str	r3, [sp, #0]
 8008f82:	2300      	movs	r3, #0
 8008f84:	2280      	movs	r2, #128	; 0x80
 8008f86:	4919      	ldr	r1, [pc, #100]	; (8008fec <vTaskStartScheduler+0x78>)
 8008f88:	4819      	ldr	r0, [pc, #100]	; (8008ff0 <vTaskStartScheduler+0x7c>)
 8008f8a:	f7ff fe8d 	bl	8008ca8 <xTaskCreate>
 8008f8e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d115      	bne.n	8008fc2 <vTaskStartScheduler+0x4e>
 8008f96:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008f9a:	f383 8811 	msr	BASEPRI, r3
 8008f9e:	f3bf 8f6f 	isb	sy
 8008fa2:	f3bf 8f4f 	dsb	sy
 8008fa6:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008fa8:	4b12      	ldr	r3, [pc, #72]	; (8008ff4 <vTaskStartScheduler+0x80>)
 8008faa:	f04f 32ff 	mov.w	r2, #4294967295
 8008fae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008fb0:	4b11      	ldr	r3, [pc, #68]	; (8008ff8 <vTaskStartScheduler+0x84>)
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008fb6:	4b11      	ldr	r3, [pc, #68]	; (8008ffc <vTaskStartScheduler+0x88>)
 8008fb8:	2200      	movs	r2, #0
 8008fba:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008fbc:	f7fe fdd4 	bl	8007b68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008fc0:	e00d      	b.n	8008fde <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc8:	d109      	bne.n	8008fde <vTaskStartScheduler+0x6a>
 8008fca:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008fce:	f383 8811 	msr	BASEPRI, r3
 8008fd2:	f3bf 8f6f 	isb	sy
 8008fd6:	f3bf 8f4f 	dsb	sy
 8008fda:	607b      	str	r3, [r7, #4]
 8008fdc:	e7fe      	b.n	8008fdc <vTaskStartScheduler+0x68>
}
 8008fde:	bf00      	nop
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	20004d90 	.word	0x20004d90
 8008fec:	08011118 	.word	0x08011118
 8008ff0:	080096e1 	.word	0x080096e1
 8008ff4:	20004d8c 	.word	0x20004d8c
 8008ff8:	20004d78 	.word	0x20004d78
 8008ffc:	20004d70 	.word	0x20004d70

08009000 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009000:	b480      	push	{r7}
 8009002:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009004:	4b04      	ldr	r3, [pc, #16]	; (8009018 <vTaskSuspendAll+0x18>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	3301      	adds	r3, #1
 800900a:	4a03      	ldr	r2, [pc, #12]	; (8009018 <vTaskSuspendAll+0x18>)
 800900c:	6013      	str	r3, [r2, #0]
}
 800900e:	bf00      	nop
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr
 8009018:	20004d94 	.word	0x20004d94

0800901c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009022:	2300      	movs	r3, #0
 8009024:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009026:	2300      	movs	r3, #0
 8009028:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800902a:	4b41      	ldr	r3, [pc, #260]	; (8009130 <xTaskResumeAll+0x114>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d109      	bne.n	8009046 <xTaskResumeAll+0x2a>
 8009032:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009036:	f383 8811 	msr	BASEPRI, r3
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	f3bf 8f4f 	dsb	sy
 8009042:	603b      	str	r3, [r7, #0]
 8009044:	e7fe      	b.n	8009044 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009046:	f7fe fe1b 	bl	8007c80 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800904a:	4b39      	ldr	r3, [pc, #228]	; (8009130 <xTaskResumeAll+0x114>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	3b01      	subs	r3, #1
 8009050:	4a37      	ldr	r2, [pc, #220]	; (8009130 <xTaskResumeAll+0x114>)
 8009052:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009054:	4b36      	ldr	r3, [pc, #216]	; (8009130 <xTaskResumeAll+0x114>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d161      	bne.n	8009120 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800905c:	4b35      	ldr	r3, [pc, #212]	; (8009134 <xTaskResumeAll+0x118>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d05d      	beq.n	8009120 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009064:	e02e      	b.n	80090c4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009066:	4b34      	ldr	r3, [pc, #208]	; (8009138 <xTaskResumeAll+0x11c>)
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	3318      	adds	r3, #24
 8009072:	4618      	mov	r0, r3
 8009074:	f7fe fcd7 	bl	8007a26 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	3304      	adds	r3, #4
 800907c:	4618      	mov	r0, r3
 800907e:	f7fe fcd2 	bl	8007a26 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009086:	2201      	movs	r2, #1
 8009088:	409a      	lsls	r2, r3
 800908a:	4b2c      	ldr	r3, [pc, #176]	; (800913c <xTaskResumeAll+0x120>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4313      	orrs	r3, r2
 8009090:	4a2a      	ldr	r2, [pc, #168]	; (800913c <xTaskResumeAll+0x120>)
 8009092:	6013      	str	r3, [r2, #0]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009098:	4613      	mov	r3, r2
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	4413      	add	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	4a27      	ldr	r2, [pc, #156]	; (8009140 <xTaskResumeAll+0x124>)
 80090a2:	441a      	add	r2, r3
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	3304      	adds	r3, #4
 80090a8:	4619      	mov	r1, r3
 80090aa:	4610      	mov	r0, r2
 80090ac:	f7fe fc5e 	bl	800796c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b4:	4b23      	ldr	r3, [pc, #140]	; (8009144 <xTaskResumeAll+0x128>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d302      	bcc.n	80090c4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80090be:	4b22      	ldr	r3, [pc, #136]	; (8009148 <xTaskResumeAll+0x12c>)
 80090c0:	2201      	movs	r2, #1
 80090c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090c4:	4b1c      	ldr	r3, [pc, #112]	; (8009138 <xTaskResumeAll+0x11c>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d1cc      	bne.n	8009066 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d001      	beq.n	80090d6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80090d2:	f000 fba9 	bl	8009828 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80090d6:	4b1d      	ldr	r3, [pc, #116]	; (800914c <xTaskResumeAll+0x130>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d010      	beq.n	8009104 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80090e2:	f000 f847 	bl	8009174 <xTaskIncrementTick>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d002      	beq.n	80090f2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80090ec:	4b16      	ldr	r3, [pc, #88]	; (8009148 <xTaskResumeAll+0x12c>)
 80090ee:	2201      	movs	r2, #1
 80090f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	3b01      	subs	r3, #1
 80090f6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1f1      	bne.n	80090e2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80090fe:	4b13      	ldr	r3, [pc, #76]	; (800914c <xTaskResumeAll+0x130>)
 8009100:	2200      	movs	r2, #0
 8009102:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009104:	4b10      	ldr	r3, [pc, #64]	; (8009148 <xTaskResumeAll+0x12c>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d009      	beq.n	8009120 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800910c:	2301      	movs	r3, #1
 800910e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009110:	4b0f      	ldr	r3, [pc, #60]	; (8009150 <xTaskResumeAll+0x134>)
 8009112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009116:	601a      	str	r2, [r3, #0]
 8009118:	f3bf 8f4f 	dsb	sy
 800911c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009120:	f7fe fddc 	bl	8007cdc <vPortExitCritical>

	return xAlreadyYielded;
 8009124:	68bb      	ldr	r3, [r7, #8]
}
 8009126:	4618      	mov	r0, r3
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	20004d94 	.word	0x20004d94
 8009134:	20004d6c 	.word	0x20004d6c
 8009138:	20004d2c 	.word	0x20004d2c
 800913c:	20004d74 	.word	0x20004d74
 8009140:	20004c70 	.word	0x20004c70
 8009144:	20004c6c 	.word	0x20004c6c
 8009148:	20004d80 	.word	0x20004d80
 800914c:	20004d7c 	.word	0x20004d7c
 8009150:	e000ed04 	.word	0xe000ed04

08009154 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800915a:	4b05      	ldr	r3, [pc, #20]	; (8009170 <xTaskGetTickCount+0x1c>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009160:	687b      	ldr	r3, [r7, #4]
}
 8009162:	4618      	mov	r0, r3
 8009164:	370c      	adds	r7, #12
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	20004d70 	.word	0x20004d70

08009174 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b086      	sub	sp, #24
 8009178:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800917a:	2300      	movs	r3, #0
 800917c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800917e:	4b50      	ldr	r3, [pc, #320]	; (80092c0 <xTaskIncrementTick+0x14c>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	f040 808c 	bne.w	80092a0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8009188:	4b4e      	ldr	r3, [pc, #312]	; (80092c4 <xTaskIncrementTick+0x150>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	3301      	adds	r3, #1
 800918e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009190:	4a4c      	ldr	r2, [pc, #304]	; (80092c4 <xTaskIncrementTick+0x150>)
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d11f      	bne.n	80091dc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800919c:	4b4a      	ldr	r3, [pc, #296]	; (80092c8 <xTaskIncrementTick+0x154>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d009      	beq.n	80091ba <xTaskIncrementTick+0x46>
 80091a6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80091aa:	f383 8811 	msr	BASEPRI, r3
 80091ae:	f3bf 8f6f 	isb	sy
 80091b2:	f3bf 8f4f 	dsb	sy
 80091b6:	603b      	str	r3, [r7, #0]
 80091b8:	e7fe      	b.n	80091b8 <xTaskIncrementTick+0x44>
 80091ba:	4b43      	ldr	r3, [pc, #268]	; (80092c8 <xTaskIncrementTick+0x154>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	60fb      	str	r3, [r7, #12]
 80091c0:	4b42      	ldr	r3, [pc, #264]	; (80092cc <xTaskIncrementTick+0x158>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a40      	ldr	r2, [pc, #256]	; (80092c8 <xTaskIncrementTick+0x154>)
 80091c6:	6013      	str	r3, [r2, #0]
 80091c8:	4a40      	ldr	r2, [pc, #256]	; (80092cc <xTaskIncrementTick+0x158>)
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	6013      	str	r3, [r2, #0]
 80091ce:	4b40      	ldr	r3, [pc, #256]	; (80092d0 <xTaskIncrementTick+0x15c>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	3301      	adds	r3, #1
 80091d4:	4a3e      	ldr	r2, [pc, #248]	; (80092d0 <xTaskIncrementTick+0x15c>)
 80091d6:	6013      	str	r3, [r2, #0]
 80091d8:	f000 fb26 	bl	8009828 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80091dc:	4b3d      	ldr	r3, [pc, #244]	; (80092d4 <xTaskIncrementTick+0x160>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	693a      	ldr	r2, [r7, #16]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d34d      	bcc.n	8009282 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091e6:	4b38      	ldr	r3, [pc, #224]	; (80092c8 <xTaskIncrementTick+0x154>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d101      	bne.n	80091f4 <xTaskIncrementTick+0x80>
 80091f0:	2301      	movs	r3, #1
 80091f2:	e000      	b.n	80091f6 <xTaskIncrementTick+0x82>
 80091f4:	2300      	movs	r3, #0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d004      	beq.n	8009204 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091fa:	4b36      	ldr	r3, [pc, #216]	; (80092d4 <xTaskIncrementTick+0x160>)
 80091fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009200:	601a      	str	r2, [r3, #0]
					break;
 8009202:	e03e      	b.n	8009282 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009204:	4b30      	ldr	r3, [pc, #192]	; (80092c8 <xTaskIncrementTick+0x154>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009214:	693a      	ldr	r2, [r7, #16]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	429a      	cmp	r2, r3
 800921a:	d203      	bcs.n	8009224 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800921c:	4a2d      	ldr	r2, [pc, #180]	; (80092d4 <xTaskIncrementTick+0x160>)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6013      	str	r3, [r2, #0]
						break;
 8009222:	e02e      	b.n	8009282 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	3304      	adds	r3, #4
 8009228:	4618      	mov	r0, r3
 800922a:	f7fe fbfc 	bl	8007a26 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009232:	2b00      	cmp	r3, #0
 8009234:	d004      	beq.n	8009240 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	3318      	adds	r3, #24
 800923a:	4618      	mov	r0, r3
 800923c:	f7fe fbf3 	bl	8007a26 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009244:	2201      	movs	r2, #1
 8009246:	409a      	lsls	r2, r3
 8009248:	4b23      	ldr	r3, [pc, #140]	; (80092d8 <xTaskIncrementTick+0x164>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4313      	orrs	r3, r2
 800924e:	4a22      	ldr	r2, [pc, #136]	; (80092d8 <xTaskIncrementTick+0x164>)
 8009250:	6013      	str	r3, [r2, #0]
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009256:	4613      	mov	r3, r2
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	4413      	add	r3, r2
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	4a1f      	ldr	r2, [pc, #124]	; (80092dc <xTaskIncrementTick+0x168>)
 8009260:	441a      	add	r2, r3
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	3304      	adds	r3, #4
 8009266:	4619      	mov	r1, r3
 8009268:	4610      	mov	r0, r2
 800926a:	f7fe fb7f 	bl	800796c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009272:	4b1b      	ldr	r3, [pc, #108]	; (80092e0 <xTaskIncrementTick+0x16c>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009278:	429a      	cmp	r2, r3
 800927a:	d3b4      	bcc.n	80091e6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800927c:	2301      	movs	r3, #1
 800927e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009280:	e7b1      	b.n	80091e6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009282:	4b17      	ldr	r3, [pc, #92]	; (80092e0 <xTaskIncrementTick+0x16c>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009288:	4914      	ldr	r1, [pc, #80]	; (80092dc <xTaskIncrementTick+0x168>)
 800928a:	4613      	mov	r3, r2
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	4413      	add	r3, r2
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	440b      	add	r3, r1
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2b01      	cmp	r3, #1
 8009298:	d907      	bls.n	80092aa <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800929a:	2301      	movs	r3, #1
 800929c:	617b      	str	r3, [r7, #20]
 800929e:	e004      	b.n	80092aa <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80092a0:	4b10      	ldr	r3, [pc, #64]	; (80092e4 <xTaskIncrementTick+0x170>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	3301      	adds	r3, #1
 80092a6:	4a0f      	ldr	r2, [pc, #60]	; (80092e4 <xTaskIncrementTick+0x170>)
 80092a8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80092aa:	4b0f      	ldr	r3, [pc, #60]	; (80092e8 <xTaskIncrementTick+0x174>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d001      	beq.n	80092b6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80092b2:	2301      	movs	r3, #1
 80092b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80092b6:	697b      	ldr	r3, [r7, #20]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3718      	adds	r7, #24
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	20004d94 	.word	0x20004d94
 80092c4:	20004d70 	.word	0x20004d70
 80092c8:	20004d24 	.word	0x20004d24
 80092cc:	20004d28 	.word	0x20004d28
 80092d0:	20004d84 	.word	0x20004d84
 80092d4:	20004d8c 	.word	0x20004d8c
 80092d8:	20004d74 	.word	0x20004d74
 80092dc:	20004c70 	.word	0x20004c70
 80092e0:	20004c6c 	.word	0x20004c6c
 80092e4:	20004d7c 	.word	0x20004d7c
 80092e8:	20004d80 	.word	0x20004d80

080092ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b088      	sub	sp, #32
 80092f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80092f2:	4b39      	ldr	r3, [pc, #228]	; (80093d8 <vTaskSwitchContext+0xec>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d003      	beq.n	8009302 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80092fa:	4b38      	ldr	r3, [pc, #224]	; (80093dc <vTaskSwitchContext+0xf0>)
 80092fc:	2201      	movs	r2, #1
 80092fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009300:	e065      	b.n	80093ce <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8009302:	4b36      	ldr	r3, [pc, #216]	; (80093dc <vTaskSwitchContext+0xf0>)
 8009304:	2200      	movs	r2, #0
 8009306:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009308:	4b35      	ldr	r3, [pc, #212]	; (80093e0 <vTaskSwitchContext+0xf4>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800930e:	61fb      	str	r3, [r7, #28]
 8009310:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8009314:	61bb      	str	r3, [r7, #24]
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	429a      	cmp	r2, r3
 800931e:	d111      	bne.n	8009344 <vTaskSwitchContext+0x58>
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	3304      	adds	r3, #4
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	429a      	cmp	r2, r3
 800932a:	d10b      	bne.n	8009344 <vTaskSwitchContext+0x58>
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	3308      	adds	r3, #8
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	429a      	cmp	r2, r3
 8009336:	d105      	bne.n	8009344 <vTaskSwitchContext+0x58>
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	330c      	adds	r3, #12
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	429a      	cmp	r2, r3
 8009342:	d008      	beq.n	8009356 <vTaskSwitchContext+0x6a>
 8009344:	4b26      	ldr	r3, [pc, #152]	; (80093e0 <vTaskSwitchContext+0xf4>)
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	4b25      	ldr	r3, [pc, #148]	; (80093e0 <vTaskSwitchContext+0xf4>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	3334      	adds	r3, #52	; 0x34
 800934e:	4619      	mov	r1, r3
 8009350:	4610      	mov	r0, r2
 8009352:	f007 fb53 	bl	80109fc <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009356:	4b23      	ldr	r3, [pc, #140]	; (80093e4 <vTaskSwitchContext+0xf8>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	fab3 f383 	clz	r3, r3
 8009362:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009364:	7afb      	ldrb	r3, [r7, #11]
 8009366:	f1c3 031f 	rsb	r3, r3, #31
 800936a:	617b      	str	r3, [r7, #20]
 800936c:	491e      	ldr	r1, [pc, #120]	; (80093e8 <vTaskSwitchContext+0xfc>)
 800936e:	697a      	ldr	r2, [r7, #20]
 8009370:	4613      	mov	r3, r2
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	4413      	add	r3, r2
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	440b      	add	r3, r1
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d109      	bne.n	8009394 <vTaskSwitchContext+0xa8>
	__asm volatile
 8009380:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009384:	f383 8811 	msr	BASEPRI, r3
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	607b      	str	r3, [r7, #4]
 8009392:	e7fe      	b.n	8009392 <vTaskSwitchContext+0xa6>
 8009394:	697a      	ldr	r2, [r7, #20]
 8009396:	4613      	mov	r3, r2
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	4413      	add	r3, r2
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	4a12      	ldr	r2, [pc, #72]	; (80093e8 <vTaskSwitchContext+0xfc>)
 80093a0:	4413      	add	r3, r2
 80093a2:	613b      	str	r3, [r7, #16]
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	685a      	ldr	r2, [r3, #4]
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	605a      	str	r2, [r3, #4]
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	685a      	ldr	r2, [r3, #4]
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	3308      	adds	r3, #8
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d104      	bne.n	80093c4 <vTaskSwitchContext+0xd8>
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	685a      	ldr	r2, [r3, #4]
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	605a      	str	r2, [r3, #4]
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	4a05      	ldr	r2, [pc, #20]	; (80093e0 <vTaskSwitchContext+0xf4>)
 80093cc:	6013      	str	r3, [r2, #0]
}
 80093ce:	bf00      	nop
 80093d0:	3720      	adds	r7, #32
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	20004d94 	.word	0x20004d94
 80093dc:	20004d80 	.word	0x20004d80
 80093e0:	20004c6c 	.word	0x20004c6c
 80093e4:	20004d74 	.word	0x20004d74
 80093e8:	20004c70 	.word	0x20004c70

080093ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d109      	bne.n	8009410 <vTaskPlaceOnEventList+0x24>
 80093fc:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009400:	f383 8811 	msr	BASEPRI, r3
 8009404:	f3bf 8f6f 	isb	sy
 8009408:	f3bf 8f4f 	dsb	sy
 800940c:	60fb      	str	r3, [r7, #12]
 800940e:	e7fe      	b.n	800940e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009410:	4b07      	ldr	r3, [pc, #28]	; (8009430 <vTaskPlaceOnEventList+0x44>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	3318      	adds	r3, #24
 8009416:	4619      	mov	r1, r3
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f7fe facb 	bl	80079b4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800941e:	2101      	movs	r1, #1
 8009420:	6838      	ldr	r0, [r7, #0]
 8009422:	f000 fc3b 	bl	8009c9c <prvAddCurrentTaskToDelayedList>
}
 8009426:	bf00      	nop
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	20004c6c 	.word	0x20004c6c

08009434 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b086      	sub	sp, #24
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d109      	bne.n	800945e <xTaskRemoveFromEventList+0x2a>
 800944a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800944e:	f383 8811 	msr	BASEPRI, r3
 8009452:	f3bf 8f6f 	isb	sy
 8009456:	f3bf 8f4f 	dsb	sy
 800945a:	60fb      	str	r3, [r7, #12]
 800945c:	e7fe      	b.n	800945c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	3318      	adds	r3, #24
 8009462:	4618      	mov	r0, r3
 8009464:	f7fe fadf 	bl	8007a26 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009468:	4b1d      	ldr	r3, [pc, #116]	; (80094e0 <xTaskRemoveFromEventList+0xac>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d11c      	bne.n	80094aa <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	3304      	adds	r3, #4
 8009474:	4618      	mov	r0, r3
 8009476:	f7fe fad6 	bl	8007a26 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800947e:	2201      	movs	r2, #1
 8009480:	409a      	lsls	r2, r3
 8009482:	4b18      	ldr	r3, [pc, #96]	; (80094e4 <xTaskRemoveFromEventList+0xb0>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4313      	orrs	r3, r2
 8009488:	4a16      	ldr	r2, [pc, #88]	; (80094e4 <xTaskRemoveFromEventList+0xb0>)
 800948a:	6013      	str	r3, [r2, #0]
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009490:	4613      	mov	r3, r2
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	4413      	add	r3, r2
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	4a13      	ldr	r2, [pc, #76]	; (80094e8 <xTaskRemoveFromEventList+0xb4>)
 800949a:	441a      	add	r2, r3
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	3304      	adds	r3, #4
 80094a0:	4619      	mov	r1, r3
 80094a2:	4610      	mov	r0, r2
 80094a4:	f7fe fa62 	bl	800796c <vListInsertEnd>
 80094a8:	e005      	b.n	80094b6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	3318      	adds	r3, #24
 80094ae:	4619      	mov	r1, r3
 80094b0:	480e      	ldr	r0, [pc, #56]	; (80094ec <xTaskRemoveFromEventList+0xb8>)
 80094b2:	f7fe fa5b 	bl	800796c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ba:	4b0d      	ldr	r3, [pc, #52]	; (80094f0 <xTaskRemoveFromEventList+0xbc>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d905      	bls.n	80094d0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80094c4:	2301      	movs	r3, #1
 80094c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80094c8:	4b0a      	ldr	r3, [pc, #40]	; (80094f4 <xTaskRemoveFromEventList+0xc0>)
 80094ca:	2201      	movs	r2, #1
 80094cc:	601a      	str	r2, [r3, #0]
 80094ce:	e001      	b.n	80094d4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80094d0:	2300      	movs	r3, #0
 80094d2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80094d4:	697b      	ldr	r3, [r7, #20]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3718      	adds	r7, #24
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	20004d94 	.word	0x20004d94
 80094e4:	20004d74 	.word	0x20004d74
 80094e8:	20004c70 	.word	0x20004c70
 80094ec:	20004d2c 	.word	0x20004d2c
 80094f0:	20004c6c 	.word	0x20004c6c
 80094f4:	20004d80 	.word	0x20004d80

080094f8 <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b086      	sub	sp, #24
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;
BaseType_t xReturn;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8009502:	4b2b      	ldr	r3, [pc, #172]	; (80095b0 <xTaskRemoveFromUnorderedEventList+0xb8>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d109      	bne.n	800951e <xTaskRemoveFromUnorderedEventList+0x26>
 800950a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800950e:	f383 8811 	msr	BASEPRI, r3
 8009512:	f3bf 8f6f 	isb	sy
 8009516:	f3bf 8f4f 	dsb	sy
 800951a:	60fb      	str	r3, [r7, #12]
 800951c:	e7fe      	b.n	800951c <xTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d109      	bne.n	8009548 <xTaskRemoveFromUnorderedEventList+0x50>
 8009534:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009538:	f383 8811 	msr	BASEPRI, r3
 800953c:	f3bf 8f6f 	isb	sy
 8009540:	f3bf 8f4f 	dsb	sy
 8009544:	60bb      	str	r3, [r7, #8]
 8009546:	e7fe      	b.n	8009546 <xTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f7fe fa6c 	bl	8007a26 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	3304      	adds	r3, #4
 8009552:	4618      	mov	r0, r3
 8009554:	f7fe fa67 	bl	8007a26 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800955c:	2201      	movs	r2, #1
 800955e:	409a      	lsls	r2, r3
 8009560:	4b14      	ldr	r3, [pc, #80]	; (80095b4 <xTaskRemoveFromUnorderedEventList+0xbc>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4313      	orrs	r3, r2
 8009566:	4a13      	ldr	r2, [pc, #76]	; (80095b4 <xTaskRemoveFromUnorderedEventList+0xbc>)
 8009568:	6013      	str	r3, [r2, #0]
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800956e:	4613      	mov	r3, r2
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	4413      	add	r3, r2
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	4a10      	ldr	r2, [pc, #64]	; (80095b8 <xTaskRemoveFromUnorderedEventList+0xc0>)
 8009578:	441a      	add	r2, r3
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	3304      	adds	r3, #4
 800957e:	4619      	mov	r1, r3
 8009580:	4610      	mov	r0, r2
 8009582:	f7fe f9f3 	bl	800796c <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800958a:	4b0c      	ldr	r3, [pc, #48]	; (80095bc <xTaskRemoveFromUnorderedEventList+0xc4>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009590:	429a      	cmp	r2, r3
 8009592:	d905      	bls.n	80095a0 <xTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8009594:	2301      	movs	r3, #1
 8009596:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009598:	4b09      	ldr	r3, [pc, #36]	; (80095c0 <xTaskRemoveFromUnorderedEventList+0xc8>)
 800959a:	2201      	movs	r2, #1
 800959c:	601a      	str	r2, [r3, #0]
 800959e:	e001      	b.n	80095a4 <xTaskRemoveFromUnorderedEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 80095a0:	2300      	movs	r3, #0
 80095a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80095a4:	697b      	ldr	r3, [r7, #20]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3718      	adds	r7, #24
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	20004d94 	.word	0x20004d94
 80095b4:	20004d74 	.word	0x20004d74
 80095b8:	20004c70 	.word	0x20004c70
 80095bc:	20004c6c 	.word	0x20004c6c
 80095c0:	20004d80 	.word	0x20004d80

080095c4 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80095c4:	b480      	push	{r7}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d109      	bne.n	80095e6 <vTaskSetTimeOutState+0x22>
 80095d2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80095d6:	f383 8811 	msr	BASEPRI, r3
 80095da:	f3bf 8f6f 	isb	sy
 80095de:	f3bf 8f4f 	dsb	sy
 80095e2:	60fb      	str	r3, [r7, #12]
 80095e4:	e7fe      	b.n	80095e4 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80095e6:	4b07      	ldr	r3, [pc, #28]	; (8009604 <vTaskSetTimeOutState+0x40>)
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80095ee:	4b06      	ldr	r3, [pc, #24]	; (8009608 <vTaskSetTimeOutState+0x44>)
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	605a      	str	r2, [r3, #4]
}
 80095f6:	bf00      	nop
 80095f8:	3714      	adds	r7, #20
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	20004d84 	.word	0x20004d84
 8009608:	20004d70 	.word	0x20004d70

0800960c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b086      	sub	sp, #24
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d109      	bne.n	8009630 <xTaskCheckForTimeOut+0x24>
 800961c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009620:	f383 8811 	msr	BASEPRI, r3
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	60fb      	str	r3, [r7, #12]
 800962e:	e7fe      	b.n	800962e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d109      	bne.n	800964a <xTaskCheckForTimeOut+0x3e>
 8009636:	f04f 0340 	mov.w	r3, #64	; 0x40
 800963a:	f383 8811 	msr	BASEPRI, r3
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f3bf 8f4f 	dsb	sy
 8009646:	60bb      	str	r3, [r7, #8]
 8009648:	e7fe      	b.n	8009648 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800964a:	f7fe fb19 	bl	8007c80 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800964e:	4b1c      	ldr	r3, [pc, #112]	; (80096c0 <xTaskCheckForTimeOut+0xb4>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800965c:	d102      	bne.n	8009664 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800965e:	2300      	movs	r3, #0
 8009660:	617b      	str	r3, [r7, #20]
 8009662:	e026      	b.n	80096b2 <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	4b16      	ldr	r3, [pc, #88]	; (80096c4 <xTaskCheckForTimeOut+0xb8>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	429a      	cmp	r2, r3
 800966e:	d007      	beq.n	8009680 <xTaskCheckForTimeOut+0x74>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	685a      	ldr	r2, [r3, #4]
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	429a      	cmp	r2, r3
 8009678:	d802      	bhi.n	8009680 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800967a:	2301      	movs	r3, #1
 800967c:	617b      	str	r3, [r7, #20]
 800967e:	e018      	b.n	80096b2 <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	693a      	ldr	r2, [r7, #16]
 8009686:	1ad2      	subs	r2, r2, r3
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	429a      	cmp	r2, r3
 800968e:	d20e      	bcs.n	80096ae <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	681a      	ldr	r2, [r3, #0]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6859      	ldr	r1, [r3, #4]
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	1acb      	subs	r3, r1, r3
 800969c:	441a      	add	r2, r3
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f7ff ff8e 	bl	80095c4 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80096a8:	2300      	movs	r3, #0
 80096aa:	617b      	str	r3, [r7, #20]
 80096ac:	e001      	b.n	80096b2 <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 80096ae:	2301      	movs	r3, #1
 80096b0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80096b2:	f7fe fb13 	bl	8007cdc <vPortExitCritical>

	return xReturn;
 80096b6:	697b      	ldr	r3, [r7, #20]
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3718      	adds	r7, #24
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	20004d70 	.word	0x20004d70
 80096c4:	20004d84 	.word	0x20004d84

080096c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80096c8:	b480      	push	{r7}
 80096ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80096cc:	4b03      	ldr	r3, [pc, #12]	; (80096dc <vTaskMissedYield+0x14>)
 80096ce:	2201      	movs	r2, #1
 80096d0:	601a      	str	r2, [r3, #0]
}
 80096d2:	bf00      	nop
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr
 80096dc:	20004d80 	.word	0x20004d80

080096e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80096e8:	f000 f852 	bl	8009790 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80096ec:	4b06      	ldr	r3, [pc, #24]	; (8009708 <prvIdleTask+0x28>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d9f9      	bls.n	80096e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80096f4:	4b05      	ldr	r3, [pc, #20]	; (800970c <prvIdleTask+0x2c>)
 80096f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096fa:	601a      	str	r2, [r3, #0]
 80096fc:	f3bf 8f4f 	dsb	sy
 8009700:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009704:	e7f0      	b.n	80096e8 <prvIdleTask+0x8>
 8009706:	bf00      	nop
 8009708:	20004c70 	.word	0x20004c70
 800970c:	e000ed04 	.word	0xe000ed04

08009710 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009716:	2300      	movs	r3, #0
 8009718:	607b      	str	r3, [r7, #4]
 800971a:	e00c      	b.n	8009736 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	4613      	mov	r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4413      	add	r3, r2
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	4a12      	ldr	r2, [pc, #72]	; (8009770 <prvInitialiseTaskLists+0x60>)
 8009728:	4413      	add	r3, r2
 800972a:	4618      	mov	r0, r3
 800972c:	f7fe f8f1 	bl	8007912 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	3301      	adds	r3, #1
 8009734:	607b      	str	r3, [r7, #4]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2b06      	cmp	r3, #6
 800973a:	d9ef      	bls.n	800971c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800973c:	480d      	ldr	r0, [pc, #52]	; (8009774 <prvInitialiseTaskLists+0x64>)
 800973e:	f7fe f8e8 	bl	8007912 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009742:	480d      	ldr	r0, [pc, #52]	; (8009778 <prvInitialiseTaskLists+0x68>)
 8009744:	f7fe f8e5 	bl	8007912 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009748:	480c      	ldr	r0, [pc, #48]	; (800977c <prvInitialiseTaskLists+0x6c>)
 800974a:	f7fe f8e2 	bl	8007912 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800974e:	480c      	ldr	r0, [pc, #48]	; (8009780 <prvInitialiseTaskLists+0x70>)
 8009750:	f7fe f8df 	bl	8007912 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009754:	480b      	ldr	r0, [pc, #44]	; (8009784 <prvInitialiseTaskLists+0x74>)
 8009756:	f7fe f8dc 	bl	8007912 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800975a:	4b0b      	ldr	r3, [pc, #44]	; (8009788 <prvInitialiseTaskLists+0x78>)
 800975c:	4a05      	ldr	r2, [pc, #20]	; (8009774 <prvInitialiseTaskLists+0x64>)
 800975e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009760:	4b0a      	ldr	r3, [pc, #40]	; (800978c <prvInitialiseTaskLists+0x7c>)
 8009762:	4a05      	ldr	r2, [pc, #20]	; (8009778 <prvInitialiseTaskLists+0x68>)
 8009764:	601a      	str	r2, [r3, #0]
}
 8009766:	bf00      	nop
 8009768:	3708      	adds	r7, #8
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	20004c70 	.word	0x20004c70
 8009774:	20004cfc 	.word	0x20004cfc
 8009778:	20004d10 	.word	0x20004d10
 800977c:	20004d2c 	.word	0x20004d2c
 8009780:	20004d40 	.word	0x20004d40
 8009784:	20004d58 	.word	0x20004d58
 8009788:	20004d24 	.word	0x20004d24
 800978c:	20004d28 	.word	0x20004d28

08009790 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009796:	e028      	b.n	80097ea <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8009798:	f7ff fc32 	bl	8009000 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800979c:	4b17      	ldr	r3, [pc, #92]	; (80097fc <prvCheckTasksWaitingTermination+0x6c>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	bf0c      	ite	eq
 80097a4:	2301      	moveq	r3, #1
 80097a6:	2300      	movne	r3, #0
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 80097ac:	f7ff fc36 	bl	800901c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d119      	bne.n	80097ea <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80097b6:	f7fe fa63 	bl	8007c80 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80097ba:	4b10      	ldr	r3, [pc, #64]	; (80097fc <prvCheckTasksWaitingTermination+0x6c>)
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	3304      	adds	r3, #4
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7fe f92d 	bl	8007a26 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80097cc:	4b0c      	ldr	r3, [pc, #48]	; (8009800 <prvCheckTasksWaitingTermination+0x70>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	3b01      	subs	r3, #1
 80097d2:	4a0b      	ldr	r2, [pc, #44]	; (8009800 <prvCheckTasksWaitingTermination+0x70>)
 80097d4:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80097d6:	4b0b      	ldr	r3, [pc, #44]	; (8009804 <prvCheckTasksWaitingTermination+0x74>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	3b01      	subs	r3, #1
 80097dc:	4a09      	ldr	r2, [pc, #36]	; (8009804 <prvCheckTasksWaitingTermination+0x74>)
 80097de:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 80097e0:	f7fe fa7c 	bl	8007cdc <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80097e4:	6838      	ldr	r0, [r7, #0]
 80097e6:	f000 f80f 	bl	8009808 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097ea:	4b06      	ldr	r3, [pc, #24]	; (8009804 <prvCheckTasksWaitingTermination+0x74>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d1d2      	bne.n	8009798 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80097f2:	bf00      	nop
 80097f4:	3708      	adds	r7, #8
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	20004d40 	.word	0x20004d40
 8009800:	20004d6c 	.word	0x20004d6c
 8009804:	20004d54 	.word	0x20004d54

08009808 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009814:	4618      	mov	r0, r3
 8009816:	f7fe fc05 	bl	8008024 <vPortFree>
			vPortFree( pxTCB );
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f7fe fc02 	bl	8008024 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009820:	bf00      	nop
 8009822:	3708      	adds	r7, #8
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800982e:	4b0f      	ldr	r3, [pc, #60]	; (800986c <prvResetNextTaskUnblockTime+0x44>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d101      	bne.n	800983c <prvResetNextTaskUnblockTime+0x14>
 8009838:	2301      	movs	r3, #1
 800983a:	e000      	b.n	800983e <prvResetNextTaskUnblockTime+0x16>
 800983c:	2300      	movs	r3, #0
 800983e:	2b00      	cmp	r3, #0
 8009840:	d004      	beq.n	800984c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009842:	4b0b      	ldr	r3, [pc, #44]	; (8009870 <prvResetNextTaskUnblockTime+0x48>)
 8009844:	f04f 32ff 	mov.w	r2, #4294967295
 8009848:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800984a:	e008      	b.n	800985e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800984c:	4b07      	ldr	r3, [pc, #28]	; (800986c <prvResetNextTaskUnblockTime+0x44>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	68db      	ldr	r3, [r3, #12]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	4a05      	ldr	r2, [pc, #20]	; (8009870 <prvResetNextTaskUnblockTime+0x48>)
 800985c:	6013      	str	r3, [r2, #0]
}
 800985e:	bf00      	nop
 8009860:	370c      	adds	r7, #12
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	20004d24 	.word	0x20004d24
 8009870:	20004d8c 	.word	0x20004d8c

08009874 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800987a:	4b05      	ldr	r3, [pc, #20]	; (8009890 <xTaskGetCurrentTaskHandle+0x1c>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009880:	687b      	ldr	r3, [r7, #4]
	}
 8009882:	4618      	mov	r0, r3
 8009884:	370c      	adds	r7, #12
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	20004c6c 	.word	0x20004c6c

08009894 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800989a:	4b0b      	ldr	r3, [pc, #44]	; (80098c8 <xTaskGetSchedulerState+0x34>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d102      	bne.n	80098a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80098a2:	2301      	movs	r3, #1
 80098a4:	607b      	str	r3, [r7, #4]
 80098a6:	e008      	b.n	80098ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098a8:	4b08      	ldr	r3, [pc, #32]	; (80098cc <xTaskGetSchedulerState+0x38>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d102      	bne.n	80098b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80098b0:	2302      	movs	r3, #2
 80098b2:	607b      	str	r3, [r7, #4]
 80098b4:	e001      	b.n	80098ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80098b6:	2300      	movs	r3, #0
 80098b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80098ba:	687b      	ldr	r3, [r7, #4]
	}
 80098bc:	4618      	mov	r0, r3
 80098be:	370c      	adds	r7, #12
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr
 80098c8:	20004d78 	.word	0x20004d78
 80098cc:	20004d94 	.word	0x20004d94

080098d0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d062      	beq.n	80099a8 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098e6:	4b32      	ldr	r3, [pc, #200]	; (80099b0 <vTaskPriorityInherit+0xe0>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d25b      	bcs.n	80099a8 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	699b      	ldr	r3, [r3, #24]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	db06      	blt.n	8009906 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098f8:	4b2d      	ldr	r3, [pc, #180]	; (80099b0 <vTaskPriorityInherit+0xe0>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098fe:	f1c3 0207 	rsb	r2, r3, #7
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	6959      	ldr	r1, [r3, #20]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800990e:	4613      	mov	r3, r2
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	4413      	add	r3, r2
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	4a27      	ldr	r2, [pc, #156]	; (80099b4 <vTaskPriorityInherit+0xe4>)
 8009918:	4413      	add	r3, r2
 800991a:	4299      	cmp	r1, r3
 800991c:	d101      	bne.n	8009922 <vTaskPriorityInherit+0x52>
 800991e:	2301      	movs	r3, #1
 8009920:	e000      	b.n	8009924 <vTaskPriorityInherit+0x54>
 8009922:	2300      	movs	r3, #0
 8009924:	2b00      	cmp	r3, #0
 8009926:	d03a      	beq.n	800999e <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	3304      	adds	r3, #4
 800992c:	4618      	mov	r0, r3
 800992e:	f7fe f87a 	bl	8007a26 <uxListRemove>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d115      	bne.n	8009964 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800993c:	491d      	ldr	r1, [pc, #116]	; (80099b4 <vTaskPriorityInherit+0xe4>)
 800993e:	4613      	mov	r3, r2
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	4413      	add	r3, r2
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	440b      	add	r3, r1
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d10a      	bne.n	8009964 <vTaskPriorityInherit+0x94>
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009952:	2201      	movs	r2, #1
 8009954:	fa02 f303 	lsl.w	r3, r2, r3
 8009958:	43da      	mvns	r2, r3
 800995a:	4b17      	ldr	r3, [pc, #92]	; (80099b8 <vTaskPriorityInherit+0xe8>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4013      	ands	r3, r2
 8009960:	4a15      	ldr	r2, [pc, #84]	; (80099b8 <vTaskPriorityInherit+0xe8>)
 8009962:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009964:	4b12      	ldr	r3, [pc, #72]	; (80099b0 <vTaskPriorityInherit+0xe0>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009972:	2201      	movs	r2, #1
 8009974:	409a      	lsls	r2, r3
 8009976:	4b10      	ldr	r3, [pc, #64]	; (80099b8 <vTaskPriorityInherit+0xe8>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4313      	orrs	r3, r2
 800997c:	4a0e      	ldr	r2, [pc, #56]	; (80099b8 <vTaskPriorityInherit+0xe8>)
 800997e:	6013      	str	r3, [r2, #0]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009984:	4613      	mov	r3, r2
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	4413      	add	r3, r2
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	4a09      	ldr	r2, [pc, #36]	; (80099b4 <vTaskPriorityInherit+0xe4>)
 800998e:	441a      	add	r2, r3
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	3304      	adds	r3, #4
 8009994:	4619      	mov	r1, r3
 8009996:	4610      	mov	r0, r2
 8009998:	f7fd ffe8 	bl	800796c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800999c:	e004      	b.n	80099a8 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800999e:	4b04      	ldr	r3, [pc, #16]	; (80099b0 <vTaskPriorityInherit+0xe0>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 80099a8:	bf00      	nop
 80099aa:	3710      	adds	r7, #16
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	20004c6c 	.word	0x20004c6c
 80099b4:	20004c70 	.word	0x20004c70
 80099b8:	20004d74 	.word	0x20004d74

080099bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b086      	sub	sp, #24
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80099c8:	2300      	movs	r3, #0
 80099ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d06c      	beq.n	8009aac <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80099d2:	4b39      	ldr	r3, [pc, #228]	; (8009ab8 <xTaskPriorityDisinherit+0xfc>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	693a      	ldr	r2, [r7, #16]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d009      	beq.n	80099f0 <xTaskPriorityDisinherit+0x34>
 80099dc:	f04f 0340 	mov.w	r3, #64	; 0x40
 80099e0:	f383 8811 	msr	BASEPRI, r3
 80099e4:	f3bf 8f6f 	isb	sy
 80099e8:	f3bf 8f4f 	dsb	sy
 80099ec:	60fb      	str	r3, [r7, #12]
 80099ee:	e7fe      	b.n	80099ee <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d109      	bne.n	8009a0c <xTaskPriorityDisinherit+0x50>
 80099f8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80099fc:	f383 8811 	msr	BASEPRI, r3
 8009a00:	f3bf 8f6f 	isb	sy
 8009a04:	f3bf 8f4f 	dsb	sy
 8009a08:	60bb      	str	r3, [r7, #8]
 8009a0a:	e7fe      	b.n	8009a0a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a10:	1e5a      	subs	r2, r3, #1
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d044      	beq.n	8009aac <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d140      	bne.n	8009aac <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	3304      	adds	r3, #4
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7fd fff9 	bl	8007a26 <uxListRemove>
 8009a34:	4603      	mov	r3, r0
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d115      	bne.n	8009a66 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a3e:	491f      	ldr	r1, [pc, #124]	; (8009abc <xTaskPriorityDisinherit+0x100>)
 8009a40:	4613      	mov	r3, r2
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	4413      	add	r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	440b      	add	r3, r1
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d10a      	bne.n	8009a66 <xTaskPriorityDisinherit+0xaa>
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a54:	2201      	movs	r2, #1
 8009a56:	fa02 f303 	lsl.w	r3, r2, r3
 8009a5a:	43da      	mvns	r2, r3
 8009a5c:	4b18      	ldr	r3, [pc, #96]	; (8009ac0 <xTaskPriorityDisinherit+0x104>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4013      	ands	r3, r2
 8009a62:	4a17      	ldr	r2, [pc, #92]	; (8009ac0 <xTaskPriorityDisinherit+0x104>)
 8009a64:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a72:	f1c3 0207 	rsb	r2, r3, #7
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a7e:	2201      	movs	r2, #1
 8009a80:	409a      	lsls	r2, r3
 8009a82:	4b0f      	ldr	r3, [pc, #60]	; (8009ac0 <xTaskPriorityDisinherit+0x104>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4313      	orrs	r3, r2
 8009a88:	4a0d      	ldr	r2, [pc, #52]	; (8009ac0 <xTaskPriorityDisinherit+0x104>)
 8009a8a:	6013      	str	r3, [r2, #0]
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a90:	4613      	mov	r3, r2
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	4413      	add	r3, r2
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	4a08      	ldr	r2, [pc, #32]	; (8009abc <xTaskPriorityDisinherit+0x100>)
 8009a9a:	441a      	add	r2, r3
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	4610      	mov	r0, r2
 8009aa4:	f7fd ff62 	bl	800796c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009aac:	697b      	ldr	r3, [r7, #20]
	}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3718      	adds	r7, #24
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	20004c6c 	.word	0x20004c6c
 8009abc:	20004c70 	.word	0x20004c70
 8009ac0:	20004d74 	.word	0x20004d74

08009ac4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009ac4:	b480      	push	{r7}
 8009ac6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009ac8:	4b07      	ldr	r3, [pc, #28]	; (8009ae8 <pvTaskIncrementMutexHeldCount+0x24>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d004      	beq.n	8009ada <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009ad0:	4b05      	ldr	r3, [pc, #20]	; (8009ae8 <pvTaskIncrementMutexHeldCount+0x24>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ad6:	3201      	adds	r2, #1
 8009ad8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009ada:	4b03      	ldr	r3, [pc, #12]	; (8009ae8 <pvTaskIncrementMutexHeldCount+0x24>)
 8009adc:	681b      	ldr	r3, [r3, #0]
	}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr
 8009ae8:	20004c6c 	.word	0x20004c6c

08009aec <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8009af6:	f7fe f8c3 	bl	8007c80 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8009afa:	4b1e      	ldr	r3, [pc, #120]	; (8009b74 <ulTaskNotifyTake+0x88>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d113      	bne.n	8009b2c <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009b04:	4b1b      	ldr	r3, [pc, #108]	; (8009b74 <ulTaskNotifyTake+0x88>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2201      	movs	r2, #1
 8009b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d00b      	beq.n	8009b2c <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b14:	2101      	movs	r1, #1
 8009b16:	6838      	ldr	r0, [r7, #0]
 8009b18:	f000 f8c0 	bl	8009c9c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009b1c:	4b16      	ldr	r3, [pc, #88]	; (8009b78 <ulTaskNotifyTake+0x8c>)
 8009b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b22:	601a      	str	r2, [r3, #0]
 8009b24:	f3bf 8f4f 	dsb	sy
 8009b28:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009b2c:	f7fe f8d6 	bl	8007cdc <vPortExitCritical>

		taskENTER_CRITICAL();
 8009b30:	f7fe f8a6 	bl	8007c80 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8009b34:	4b0f      	ldr	r3, [pc, #60]	; (8009b74 <ulTaskNotifyTake+0x88>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b3a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00c      	beq.n	8009b5c <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d004      	beq.n	8009b52 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8009b48:	4b0a      	ldr	r3, [pc, #40]	; (8009b74 <ulTaskNotifyTake+0x88>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	64da      	str	r2, [r3, #76]	; 0x4c
 8009b50:	e004      	b.n	8009b5c <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
 8009b52:	4b08      	ldr	r3, [pc, #32]	; (8009b74 <ulTaskNotifyTake+0x88>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68fa      	ldr	r2, [r7, #12]
 8009b58:	3a01      	subs	r2, #1
 8009b5a:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b5c:	4b05      	ldr	r3, [pc, #20]	; (8009b74 <ulTaskNotifyTake+0x88>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8009b66:	f7fe f8b9 	bl	8007cdc <vPortExitCritical>

		return ulReturn;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
	}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3710      	adds	r7, #16
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}
 8009b74:	20004c6c 	.word	0x20004c6c
 8009b78:	e000ed04 	.word	0xe000ed04

08009b7c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b08a      	sub	sp, #40	; 0x28
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d109      	bne.n	8009ba0 <vTaskNotifyGiveFromISR+0x24>
 8009b8c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009b90:	f383 8811 	msr	BASEPRI, r3
 8009b94:	f3bf 8f6f 	isb	sy
 8009b98:	f3bf 8f4f 	dsb	sy
 8009b9c:	61bb      	str	r3, [r7, #24]
 8009b9e:	e7fe      	b.n	8009b9e <vTaskNotifyGiveFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ba0:	f7fe f940 	bl	8007e24 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 8009ba8:	f3ef 8211 	mrs	r2, BASEPRI
 8009bac:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009bb0:	f383 8811 	msr	BASEPRI, r3
 8009bb4:	f3bf 8f6f 	isb	sy
 8009bb8:	f3bf 8f4f 	dsb	sy
 8009bbc:	617a      	str	r2, [r7, #20]
 8009bbe:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009bc0:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009bc2:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009bca:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bce:	2202      	movs	r2, #2
 8009bd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8009bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bd8:	1c5a      	adds	r2, r3, #1
 8009bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bdc:	64da      	str	r2, [r3, #76]	; 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009bde:	7ffb      	ldrb	r3, [r7, #31]
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d145      	bne.n	8009c70 <vTaskNotifyGiveFromISR+0xf4>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d009      	beq.n	8009c00 <vTaskNotifyGiveFromISR+0x84>
	__asm volatile
 8009bec:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009bf0:	f383 8811 	msr	BASEPRI, r3
 8009bf4:	f3bf 8f6f 	isb	sy
 8009bf8:	f3bf 8f4f 	dsb	sy
 8009bfc:	60fb      	str	r3, [r7, #12]
 8009bfe:	e7fe      	b.n	8009bfe <vTaskNotifyGiveFromISR+0x82>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c00:	4b20      	ldr	r3, [pc, #128]	; (8009c84 <vTaskNotifyGiveFromISR+0x108>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d11c      	bne.n	8009c42 <vTaskNotifyGiveFromISR+0xc6>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0a:	3304      	adds	r3, #4
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f7fd ff0a 	bl	8007a26 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c16:	2201      	movs	r2, #1
 8009c18:	409a      	lsls	r2, r3
 8009c1a:	4b1b      	ldr	r3, [pc, #108]	; (8009c88 <vTaskNotifyGiveFromISR+0x10c>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	4a19      	ldr	r2, [pc, #100]	; (8009c88 <vTaskNotifyGiveFromISR+0x10c>)
 8009c22:	6013      	str	r3, [r2, #0]
 8009c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c28:	4613      	mov	r3, r2
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	4413      	add	r3, r2
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	4a16      	ldr	r2, [pc, #88]	; (8009c8c <vTaskNotifyGiveFromISR+0x110>)
 8009c32:	441a      	add	r2, r3
 8009c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c36:	3304      	adds	r3, #4
 8009c38:	4619      	mov	r1, r3
 8009c3a:	4610      	mov	r0, r2
 8009c3c:	f7fd fe96 	bl	800796c <vListInsertEnd>
 8009c40:	e005      	b.n	8009c4e <vTaskNotifyGiveFromISR+0xd2>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c44:	3318      	adds	r3, #24
 8009c46:	4619      	mov	r1, r3
 8009c48:	4811      	ldr	r0, [pc, #68]	; (8009c90 <vTaskNotifyGiveFromISR+0x114>)
 8009c4a:	f7fd fe8f 	bl	800796c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c52:	4b10      	ldr	r3, [pc, #64]	; (8009c94 <vTaskNotifyGiveFromISR+0x118>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d909      	bls.n	8009c70 <vTaskNotifyGiveFromISR+0xf4>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d003      	beq.n	8009c6a <vTaskNotifyGiveFromISR+0xee>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	2201      	movs	r2, #1
 8009c66:	601a      	str	r2, [r3, #0]
 8009c68:	e002      	b.n	8009c70 <vTaskNotifyGiveFromISR+0xf4>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8009c6a:	4b0b      	ldr	r3, [pc, #44]	; (8009c98 <vTaskNotifyGiveFromISR+0x11c>)
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	601a      	str	r2, [r3, #0]
 8009c70:	6a3b      	ldr	r3, [r7, #32]
 8009c72:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8009c7a:	bf00      	nop
 8009c7c:	3728      	adds	r7, #40	; 0x28
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	20004d94 	.word	0x20004d94
 8009c88:	20004d74 	.word	0x20004d74
 8009c8c:	20004c70 	.word	0x20004c70
 8009c90:	20004d2c 	.word	0x20004d2c
 8009c94:	20004c6c 	.word	0x20004c6c
 8009c98:	20004d80 	.word	0x20004d80

08009c9c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009ca6:	4b29      	ldr	r3, [pc, #164]	; (8009d4c <prvAddCurrentTaskToDelayedList+0xb0>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cac:	4b28      	ldr	r3, [pc, #160]	; (8009d50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	3304      	adds	r3, #4
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7fd feb7 	bl	8007a26 <uxListRemove>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d10b      	bne.n	8009cd6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009cbe:	4b24      	ldr	r3, [pc, #144]	; (8009d50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8009cca:	43da      	mvns	r2, r3
 8009ccc:	4b21      	ldr	r3, [pc, #132]	; (8009d54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4013      	ands	r3, r2
 8009cd2:	4a20      	ldr	r2, [pc, #128]	; (8009d54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009cd4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cdc:	d10a      	bne.n	8009cf4 <prvAddCurrentTaskToDelayedList+0x58>
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d007      	beq.n	8009cf4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ce4:	4b1a      	ldr	r3, [pc, #104]	; (8009d50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	3304      	adds	r3, #4
 8009cea:	4619      	mov	r1, r3
 8009cec:	481a      	ldr	r0, [pc, #104]	; (8009d58 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009cee:	f7fd fe3d 	bl	800796c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009cf2:	e026      	b.n	8009d42 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009cf4:	68fa      	ldr	r2, [r7, #12]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009cfc:	4b14      	ldr	r3, [pc, #80]	; (8009d50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	68ba      	ldr	r2, [r7, #8]
 8009d02:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009d04:	68ba      	ldr	r2, [r7, #8]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d209      	bcs.n	8009d20 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d0c:	4b13      	ldr	r3, [pc, #76]	; (8009d5c <prvAddCurrentTaskToDelayedList+0xc0>)
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	4b0f      	ldr	r3, [pc, #60]	; (8009d50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	3304      	adds	r3, #4
 8009d16:	4619      	mov	r1, r3
 8009d18:	4610      	mov	r0, r2
 8009d1a:	f7fd fe4b 	bl	80079b4 <vListInsert>
}
 8009d1e:	e010      	b.n	8009d42 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d20:	4b0f      	ldr	r3, [pc, #60]	; (8009d60 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	4b0a      	ldr	r3, [pc, #40]	; (8009d50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	3304      	adds	r3, #4
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	4610      	mov	r0, r2
 8009d2e:	f7fd fe41 	bl	80079b4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009d32:	4b0c      	ldr	r3, [pc, #48]	; (8009d64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	68ba      	ldr	r2, [r7, #8]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d202      	bcs.n	8009d42 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009d3c:	4a09      	ldr	r2, [pc, #36]	; (8009d64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	6013      	str	r3, [r2, #0]
}
 8009d42:	bf00      	nop
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	20004d70 	.word	0x20004d70
 8009d50:	20004c6c 	.word	0x20004c6c
 8009d54:	20004d74 	.word	0x20004d74
 8009d58:	20004d58 	.word	0x20004d58
 8009d5c:	20004d28 	.word	0x20004d28
 8009d60:	20004d24 	.word	0x20004d24
 8009d64:	20004d8c 	.word	0x20004d8c

08009d68 <eARPProcessPacket>:
};

/*-----------------------------------------------------------*/

eFrameProcessingResult_t eARPProcessPacket( ARPPacket_t * const pxARPFrame )
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b086      	sub	sp, #24
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8009d70:	2300      	movs	r3, #0
 8009d72:	75fb      	strb	r3, [r7, #23]
ARPHeader_t *pxARPHeader;
uint32_t ulTargetProtocolAddress, ulSenderProtocolAddress;

	pxARPHeader = &( pxARPFrame->xARPHeader );
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	330e      	adds	r3, #14
 8009d78:	613b      	str	r3, [r7, #16]

	/* The field ulSenderProtocolAddress is badly aligned, copy byte-by-byte. */
	memcpy( ( void *)&( ulSenderProtocolAddress ), ( void * )pxARPHeader->ucSenderProtocolAddress, sizeof( ulSenderProtocolAddress ) );
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	330e      	adds	r3, #14
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	60bb      	str	r3, [r7, #8]
	/* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
	ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	699b      	ldr	r3, [r3, #24]
 8009d86:	60fb      	str	r3, [r7, #12]

	traceARP_PACKET_RECEIVED();

	/* Don't do anything if the local IP address is zero because
	that means a DHCP request has not completed. */
	if( *ipLOCAL_IP_ADDRESS_POINTER != 0UL )
 8009d88:	4b32      	ldr	r3, [pc, #200]	; (8009e54 <eARPProcessPacket+0xec>)
 8009d8a:	695b      	ldr	r3, [r3, #20]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d05c      	beq.n	8009e4a <eARPProcessPacket+0xe2>
	{
		switch( pxARPHeader->usOperation )
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	88db      	ldrh	r3, [r3, #6]
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d9a:	d003      	beq.n	8009da4 <eARPProcessPacket+0x3c>
 8009d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009da0:	d04a      	beq.n	8009e38 <eARPProcessPacket+0xd0>
				#endif /* ipconfigARP_USE_CLASH_DETECTION */
				break;

			default :
				/* Invalid. */
				break;
 8009da2:	e052      	b.n	8009e4a <eARPProcessPacket+0xe2>
				if( ulTargetProtocolAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 8009da4:	4b2b      	ldr	r3, [pc, #172]	; (8009e54 <eARPProcessPacket+0xec>)
 8009da6:	695a      	ldr	r2, [r3, #20]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d14c      	bne.n	8009e48 <eARPProcessPacket+0xe0>
					vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	3308      	adds	r3, #8
 8009db2:	68ba      	ldr	r2, [r7, #8]
 8009db4:	4611      	mov	r1, r2
 8009db6:	4618      	mov	r0, r3
 8009db8:	f000 f850 	bl	8009e5c <vARPRefreshCacheEntry>
					pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	719a      	strb	r2, [r3, #6]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f042 0202 	orr.w	r2, r2, #2
 8009dc8:	71da      	strb	r2, [r3, #7]
					if( ulTargetProtocolAddress == ulSenderProtocolAddress )
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d117      	bne.n	8009e02 <eARPProcessPacket+0x9a>
						memcpy( pxARPFrame->xEthernetHeader.xSourceAddress.ucBytes, xBroadcastMACAddress.ucBytes, sizeof( xBroadcastMACAddress ) );
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	3306      	adds	r3, #6
 8009dd6:	4a20      	ldr	r2, [pc, #128]	; (8009e58 <eARPProcessPacket+0xf0>)
 8009dd8:	6811      	ldr	r1, [r2, #0]
 8009dda:	6019      	str	r1, [r3, #0]
 8009ddc:	8892      	ldrh	r2, [r2, #4]
 8009dde:	809a      	strh	r2, [r3, #4]
						memset( pxARPHeader->xTargetHardwareAddress.ucBytes, '\0', sizeof( MACAddress_t ) );
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	3312      	adds	r3, #18
 8009de4:	2206      	movs	r2, #6
 8009de6:	2100      	movs	r1, #0
 8009de8:	4618      	mov	r0, r3
 8009dea:	f006 ffdd 	bl	8010da8 <memset>
						pxARPHeader->ulTargetProtocolAddress = 0UL;
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	2200      	movs	r2, #0
 8009df2:	761a      	strb	r2, [r3, #24]
 8009df4:	2200      	movs	r2, #0
 8009df6:	765a      	strb	r2, [r3, #25]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	769a      	strb	r2, [r3, #26]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	76da      	strb	r2, [r3, #27]
 8009e00:	e00b      	b.n	8009e1a <eARPProcessPacket+0xb2>
						memcpy( pxARPHeader->xTargetHardwareAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBytes, sizeof( MACAddress_t ) );
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	f103 0012 	add.w	r0, r3, #18
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	3308      	adds	r3, #8
 8009e0c:	2206      	movs	r2, #6
 8009e0e:	4619      	mov	r1, r3
 8009e10:	f006 ffa5 	bl	8010d5e <memcpy>
						pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 8009e14:	68ba      	ldr	r2, [r7, #8]
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	619a      	str	r2, [r3, #24]
					memcpy( pxARPHeader->xSenderHardwareAddress.ucBytes, ( void * ) ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) );
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	3308      	adds	r3, #8
 8009e1e:	2206      	movs	r2, #6
 8009e20:	490c      	ldr	r1, [pc, #48]	; (8009e54 <eARPProcessPacket+0xec>)
 8009e22:	4618      	mov	r0, r3
 8009e24:	f006 ff9b 	bl	8010d5e <memcpy>
					memcpy( ( void* )pxARPHeader->ucSenderProtocolAddress, ( void* )ipLOCAL_IP_ADDRESS_POINTER, sizeof( pxARPHeader->ucSenderProtocolAddress ) );
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	330e      	adds	r3, #14
 8009e2c:	4a09      	ldr	r2, [pc, #36]	; (8009e54 <eARPProcessPacket+0xec>)
 8009e2e:	6952      	ldr	r2, [r2, #20]
 8009e30:	601a      	str	r2, [r3, #0]
					eReturn = eReturnEthernetFrame;
 8009e32:	2302      	movs	r3, #2
 8009e34:	75fb      	strb	r3, [r7, #23]
				break;
 8009e36:	e007      	b.n	8009e48 <eARPProcessPacket+0xe0>
				vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	3308      	adds	r3, #8
 8009e3c:	68ba      	ldr	r2, [r7, #8]
 8009e3e:	4611      	mov	r1, r2
 8009e40:	4618      	mov	r0, r3
 8009e42:	f000 f80b 	bl	8009e5c <vARPRefreshCacheEntry>
				break;
 8009e46:	e000      	b.n	8009e4a <eARPProcessPacket+0xe2>
				break;
 8009e48:	bf00      	nop
		}
	}

	return eReturn;
 8009e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3718      	adds	r7, #24
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	200001b0 	.word	0x200001b0
 8009e58:	08011244 	.word	0x08011244

08009e5c <vARPRefreshCacheEntry>:

#endif	/* ipconfigUSE_ARP_REMOVE_ENTRY != 0 */
/*-----------------------------------------------------------*/

void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress, const uint32_t ulIPAddress )
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b088      	sub	sp, #32
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
BaseType_t x = 0;
 8009e66:	2300      	movs	r3, #0
 8009e68:	61fb      	str	r3, [r7, #28]
BaseType_t xIpEntry = -1;
 8009e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e6e:	61bb      	str	r3, [r7, #24]
BaseType_t xMacEntry = -1;
 8009e70:	f04f 33ff 	mov.w	r3, #4294967295
 8009e74:	617b      	str	r3, [r7, #20]
BaseType_t xUseEntry = 0;
 8009e76:	2300      	movs	r3, #0
 8009e78:	613b      	str	r3, [r7, #16]
uint8_t ucMinAgeFound = 0U;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	73fb      	strb	r3, [r7, #15]

	#if( ipconfigARP_STORES_REMOTE_ADDRESSES == 0 )
		/* Only process the IP address if it is on the local network.
		Unless: when '*ipLOCAL_IP_ADDRESS_POINTER' equals zero, the IP-address
		and netmask are still unknown. */
		if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 8009e7e:	4b71      	ldr	r3, [pc, #452]	; (800a044 <vARPRefreshCacheEntry+0x1e8>)
 8009e80:	695a      	ldr	r2, [r3, #20]
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	405a      	eors	r2, r3
 8009e86:	4b70      	ldr	r3, [pc, #448]	; (800a048 <vARPRefreshCacheEntry+0x1ec>)
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	4013      	ands	r3, r2
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d004      	beq.n	8009e9a <vARPRefreshCacheEntry+0x3e>
			( *ipLOCAL_IP_ADDRESS_POINTER == 0ul ) )
 8009e90:	4b6c      	ldr	r3, [pc, #432]	; (800a044 <vARPRefreshCacheEntry+0x1e8>)
 8009e92:	695b      	ldr	r3, [r3, #20]
		if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	f040 80d2 	bne.w	800a03e <vARPRefreshCacheEntry+0x1e2>
		zero the the gateway address is the only option. */
		if( pdTRUE )
	#endif
	{
		/* Start with the maximum possible number. */
		ucMinAgeFound--;
 8009e9a:	7bfb      	ldrb	r3, [r7, #15]
 8009e9c:	3b01      	subs	r3, #1
 8009e9e:	73fb      	strb	r3, [r7, #15]

		/* For each entry in the ARP cache table. */
		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	61fb      	str	r3, [r7, #28]
 8009ea4:	e069      	b.n	8009f7a <vARPRefreshCacheEntry+0x11e>
		{
			/* Does this line in the cache table hold an entry for the IP
			address	being queried? */
			if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8009ea6:	4969      	ldr	r1, [pc, #420]	; (800a04c <vARPRefreshCacheEntry+0x1f0>)
 8009ea8:	69fa      	ldr	r2, [r7, #28]
 8009eaa:	4613      	mov	r3, r2
 8009eac:	005b      	lsls	r3, r3, #1
 8009eae:	4413      	add	r3, r2
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	440b      	add	r3, r1
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d12d      	bne.n	8009f18 <vARPRefreshCacheEntry+0xbc>
			{
				if( pxMACAddress == NULL )
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d102      	bne.n	8009ec8 <vARPRefreshCacheEntry+0x6c>
				{
					/* In case the parameter pxMACAddress is NULL, an entry will be reserved to
					indicate that there is an outstanding ARP request, This entry will have
					"ucValid == pdFALSE". */
					xIpEntry = x;
 8009ec2:	69fb      	ldr	r3, [r7, #28]
 8009ec4:	61bb      	str	r3, [r7, #24]
					break;
 8009ec6:	e05b      	b.n	8009f80 <vARPRefreshCacheEntry+0x124>
				}

				/* See if the MAC-address also matches. */
				if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 8009ec8:	69fa      	ldr	r2, [r7, #28]
 8009eca:	4613      	mov	r3, r2
 8009ecc:	005b      	lsls	r3, r3, #1
 8009ece:	4413      	add	r3, r2
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	4a5e      	ldr	r2, [pc, #376]	; (800a04c <vARPRefreshCacheEntry+0x1f0>)
 8009ed4:	4413      	add	r3, r2
 8009ed6:	3304      	adds	r3, #4
 8009ed8:	6879      	ldr	r1, [r7, #4]
 8009eda:	2206      	movs	r2, #6
 8009edc:	4618      	mov	r0, r3
 8009ede:	f006 ff2f 	bl	8010d40 <memcmp>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d114      	bne.n	8009f12 <vARPRefreshCacheEntry+0xb6>
				{
					/* This function will be called for each received packet
					As this is by far the most common path the coding standard
					is relaxed in this case and a return is permitted as an
					optimisation. */
					xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8009ee8:	4958      	ldr	r1, [pc, #352]	; (800a04c <vARPRefreshCacheEntry+0x1f0>)
 8009eea:	69fa      	ldr	r2, [r7, #28]
 8009eec:	4613      	mov	r3, r2
 8009eee:	005b      	lsls	r3, r3, #1
 8009ef0:	4413      	add	r3, r2
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	440b      	add	r3, r1
 8009ef6:	330a      	adds	r3, #10
 8009ef8:	2296      	movs	r2, #150	; 0x96
 8009efa:	701a      	strb	r2, [r3, #0]
					xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 8009efc:	4953      	ldr	r1, [pc, #332]	; (800a04c <vARPRefreshCacheEntry+0x1f0>)
 8009efe:	69fa      	ldr	r2, [r7, #28]
 8009f00:	4613      	mov	r3, r2
 8009f02:	005b      	lsls	r3, r3, #1
 8009f04:	4413      	add	r3, r2
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	440b      	add	r3, r1
 8009f0a:	330b      	adds	r3, #11
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	701a      	strb	r2, [r3, #0]
					return;
 8009f10:	e095      	b.n	800a03e <vARPRefreshCacheEntry+0x1e2>
				/* Found an entry containing ulIPAddress, but the MAC address
				doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
				for an ARP reply.  Still want to see if there is match with the
				given MAC address.ucBytes.  If found, either of the two entries
				must be cleared. */
				xIpEntry = x;
 8009f12:	69fb      	ldr	r3, [r7, #28]
 8009f14:	61bb      	str	r3, [r7, #24]
 8009f16:	e02d      	b.n	8009f74 <vARPRefreshCacheEntry+0x118>
			}
			else if( ( pxMACAddress != NULL ) && ( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 ) )
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d012      	beq.n	8009f44 <vARPRefreshCacheEntry+0xe8>
 8009f1e:	69fa      	ldr	r2, [r7, #28]
 8009f20:	4613      	mov	r3, r2
 8009f22:	005b      	lsls	r3, r3, #1
 8009f24:	4413      	add	r3, r2
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	4a48      	ldr	r2, [pc, #288]	; (800a04c <vARPRefreshCacheEntry+0x1f0>)
 8009f2a:	4413      	add	r3, r2
 8009f2c:	3304      	adds	r3, #4
 8009f2e:	6879      	ldr	r1, [r7, #4]
 8009f30:	2206      	movs	r2, #6
 8009f32:	4618      	mov	r0, r3
 8009f34:	f006 ff04 	bl	8010d40 <memcmp>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d102      	bne.n	8009f44 <vARPRefreshCacheEntry+0xe8>
				if( bIsLocal[ 0 ] == bIsLocal[ 1 ] )
				{
					xMacEntry = x;
				}
	#else
				xMacEntry = x;
 8009f3e:	69fb      	ldr	r3, [r7, #28]
 8009f40:	617b      	str	r3, [r7, #20]
 8009f42:	e017      	b.n	8009f74 <vARPRefreshCacheEntry+0x118>
	#endif
			}
			/* _HT_
			Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
			else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 8009f44:	4941      	ldr	r1, [pc, #260]	; (800a04c <vARPRefreshCacheEntry+0x1f0>)
 8009f46:	69fa      	ldr	r2, [r7, #28]
 8009f48:	4613      	mov	r3, r2
 8009f4a:	005b      	lsls	r3, r3, #1
 8009f4c:	4413      	add	r3, r2
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	440b      	add	r3, r1
 8009f52:	330a      	adds	r3, #10
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	7bfa      	ldrb	r2, [r7, #15]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d90b      	bls.n	8009f74 <vARPRefreshCacheEntry+0x118>
			{
				/* As the table is traversed, remember the table row that
				contains the oldest entry (the lowest age count, as ages are
				decremented to zero) so the row can be re-used if this function
				needs to add an entry that does not already exist. */
				ucMinAgeFound = xARPCache[ x ].ucAge;
 8009f5c:	493b      	ldr	r1, [pc, #236]	; (800a04c <vARPRefreshCacheEntry+0x1f0>)
 8009f5e:	69fa      	ldr	r2, [r7, #28]
 8009f60:	4613      	mov	r3, r2
 8009f62:	005b      	lsls	r3, r3, #1
 8009f64:	4413      	add	r3, r2
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	440b      	add	r3, r1
 8009f6a:	330a      	adds	r3, #10
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	73fb      	strb	r3, [r7, #15]
				xUseEntry = x;
 8009f70:	69fb      	ldr	r3, [r7, #28]
 8009f72:	613b      	str	r3, [r7, #16]
		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8009f74:	69fb      	ldr	r3, [r7, #28]
 8009f76:	3301      	adds	r3, #1
 8009f78:	61fb      	str	r3, [r7, #28]
 8009f7a:	69fb      	ldr	r3, [r7, #28]
 8009f7c:	2b05      	cmp	r3, #5
 8009f7e:	dd92      	ble.n	8009ea6 <vARPRefreshCacheEntry+0x4a>
			}
		}

		if( xMacEntry >= 0 )
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	db11      	blt.n	8009faa <vARPRefreshCacheEntry+0x14e>
		{
			xUseEntry = xMacEntry;
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	613b      	str	r3, [r7, #16]

			if( xIpEntry >= 0 )
 8009f8a:	69bb      	ldr	r3, [r7, #24]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	db11      	blt.n	8009fb4 <vARPRefreshCacheEntry+0x158>
			{
				/* Both the MAC address as well as the IP address were found in
				different locations: clear the entry which matches the
				IP-address */
				memset( &xARPCache[ xIpEntry ], '\0', sizeof( xARPCache[ xIpEntry ] ) );
 8009f90:	69ba      	ldr	r2, [r7, #24]
 8009f92:	4613      	mov	r3, r2
 8009f94:	005b      	lsls	r3, r3, #1
 8009f96:	4413      	add	r3, r2
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	4a2c      	ldr	r2, [pc, #176]	; (800a04c <vARPRefreshCacheEntry+0x1f0>)
 8009f9c:	4413      	add	r3, r2
 8009f9e:	220c      	movs	r2, #12
 8009fa0:	2100      	movs	r1, #0
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f006 ff00 	bl	8010da8 <memset>
 8009fa8:	e004      	b.n	8009fb4 <vARPRefreshCacheEntry+0x158>
			}
		}
		else if( xIpEntry >= 0 )
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	db01      	blt.n	8009fb4 <vARPRefreshCacheEntry+0x158>
		{
			/* An entry containing the IP-address was found, but it had a different MAC address */
			xUseEntry = xIpEntry;
 8009fb0:	69bb      	ldr	r3, [r7, #24]
 8009fb2:	613b      	str	r3, [r7, #16]
		}

		/* If the entry was not found, we use the oldest entry and set the IPaddress */
		xARPCache[ xUseEntry ].ulIPAddress = ulIPAddress;
 8009fb4:	4925      	ldr	r1, [pc, #148]	; (800a04c <vARPRefreshCacheEntry+0x1f0>)
 8009fb6:	693a      	ldr	r2, [r7, #16]
 8009fb8:	4613      	mov	r3, r2
 8009fba:	005b      	lsls	r3, r3, #1
 8009fbc:	4413      	add	r3, r2
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	440b      	add	r3, r1
 8009fc2:	683a      	ldr	r2, [r7, #0]
 8009fc4:	601a      	str	r2, [r3, #0]

		if( pxMACAddress != NULL )
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d021      	beq.n	800a010 <vARPRefreshCacheEntry+0x1b4>
		{
			memcpy( xARPCache[ xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 8009fcc:	693a      	ldr	r2, [r7, #16]
 8009fce:	4613      	mov	r3, r2
 8009fd0:	005b      	lsls	r3, r3, #1
 8009fd2:	4413      	add	r3, r2
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	4a1d      	ldr	r2, [pc, #116]	; (800a04c <vARPRefreshCacheEntry+0x1f0>)
 8009fd8:	4413      	add	r3, r2
 8009fda:	3304      	adds	r3, #4
 8009fdc:	6879      	ldr	r1, [r7, #4]
 8009fde:	2206      	movs	r2, #6
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f006 febc 	bl	8010d5e <memcpy>

			iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, (*pxMACAddress) );
			/* And this entry does not need immediate attention */
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8009fe6:	4919      	ldr	r1, [pc, #100]	; (800a04c <vARPRefreshCacheEntry+0x1f0>)
 8009fe8:	693a      	ldr	r2, [r7, #16]
 8009fea:	4613      	mov	r3, r2
 8009fec:	005b      	lsls	r3, r3, #1
 8009fee:	4413      	add	r3, r2
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	440b      	add	r3, r1
 8009ff4:	330a      	adds	r3, #10
 8009ff6:	2296      	movs	r2, #150	; 0x96
 8009ff8:	701a      	strb	r2, [r3, #0]
			xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 8009ffa:	4914      	ldr	r1, [pc, #80]	; (800a04c <vARPRefreshCacheEntry+0x1f0>)
 8009ffc:	693a      	ldr	r2, [r7, #16]
 8009ffe:	4613      	mov	r3, r2
 800a000:	005b      	lsls	r3, r3, #1
 800a002:	4413      	add	r3, r2
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	440b      	add	r3, r1
 800a008:	330b      	adds	r3, #11
 800a00a:	2201      	movs	r2, #1
 800a00c:	701a      	strb	r2, [r3, #0]
 800a00e:	e016      	b.n	800a03e <vARPRefreshCacheEntry+0x1e2>
		}
		else if( xIpEntry < 0 )
 800a010:	69bb      	ldr	r3, [r7, #24]
 800a012:	2b00      	cmp	r3, #0
 800a014:	da13      	bge.n	800a03e <vARPRefreshCacheEntry+0x1e2>
		{
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 800a016:	490d      	ldr	r1, [pc, #52]	; (800a04c <vARPRefreshCacheEntry+0x1f0>)
 800a018:	693a      	ldr	r2, [r7, #16]
 800a01a:	4613      	mov	r3, r2
 800a01c:	005b      	lsls	r3, r3, #1
 800a01e:	4413      	add	r3, r2
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	440b      	add	r3, r1
 800a024:	330a      	adds	r3, #10
 800a026:	2205      	movs	r2, #5
 800a028:	701a      	strb	r2, [r3, #0]
			xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 800a02a:	4908      	ldr	r1, [pc, #32]	; (800a04c <vARPRefreshCacheEntry+0x1f0>)
 800a02c:	693a      	ldr	r2, [r7, #16]
 800a02e:	4613      	mov	r3, r2
 800a030:	005b      	lsls	r3, r3, #1
 800a032:	4413      	add	r3, r2
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	440b      	add	r3, r1
 800a038:	330b      	adds	r3, #11
 800a03a:	2200      	movs	r2, #0
 800a03c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800a03e:	3720      	adds	r7, #32
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}
 800a044:	200001b0 	.word	0x200001b0
 800a048:	20004e60 	.word	0x20004e60
 800a04c:	20004d98 	.word	0x20004d98

0800a050 <eARPGetCacheEntry>:
#endif /* ipconfigUSE_ARP_REVERSED_LOOKUP */

/*-----------------------------------------------------------*/

eARPLookupResult_t eARPGetCacheEntry( uint32_t *pulIPAddress, MACAddress_t * const pxMACAddress )
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
eARPLookupResult_t eReturn;
uint32_t ulAddressToLookup;

#if( ipconfigUSE_LLMNR == 1 )
	if( *pulIPAddress == ipLLMNR_IP_ADDR )	/* Is in network byte order. */
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a2e      	ldr	r2, [pc, #184]	; (800a118 <eARPGetCacheEntry+0xc8>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d108      	bne.n	800a076 <eARPGetCacheEntry+0x26>
	{
		/* The LLMNR IP-address has a fixed virtual MAC address. */
		memcpy( pxMACAddress->ucBytes, xLLMNR_MacAdress.ucBytes, sizeof( MACAddress_t ) );
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	4a2d      	ldr	r2, [pc, #180]	; (800a11c <eARPGetCacheEntry+0xcc>)
 800a068:	6811      	ldr	r1, [r2, #0]
 800a06a:	6019      	str	r1, [r3, #0]
 800a06c:	8892      	ldrh	r2, [r2, #4]
 800a06e:	809a      	strh	r2, [r3, #4]
		eReturn = eARPCacheHit;
 800a070:	2301      	movs	r3, #1
 800a072:	73fb      	strb	r3, [r7, #15]
 800a074:	e04a      	b.n	800a10c <eARPGetCacheEntry+0xbc>
	}
	else
#endif
	if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||	/* Is it the general broadcast address 255.255.255.255? */
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a07e:	d005      	beq.n	800a08c <eARPGetCacheEntry+0x3c>
		( *pulIPAddress == xNetworkAddressing.ulBroadcastAddress ) )/* Or a local broadcast address, eg 192.168.1.255? */
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	4b26      	ldr	r3, [pc, #152]	; (800a120 <eARPGetCacheEntry+0xd0>)
 800a086:	691b      	ldr	r3, [r3, #16]
	if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||	/* Is it the general broadcast address 255.255.255.255? */
 800a088:	429a      	cmp	r2, r3
 800a08a:	d108      	bne.n	800a09e <eARPGetCacheEntry+0x4e>
	{
		/* This is a broadcast so uses the broadcast MAC address. */
		memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	4a25      	ldr	r2, [pc, #148]	; (800a124 <eARPGetCacheEntry+0xd4>)
 800a090:	6811      	ldr	r1, [r2, #0]
 800a092:	6019      	str	r1, [r3, #0]
 800a094:	8892      	ldrh	r2, [r2, #4]
 800a096:	809a      	strh	r2, [r3, #4]
		eReturn = eARPCacheHit;
 800a098:	2301      	movs	r3, #1
 800a09a:	73fb      	strb	r3, [r7, #15]
 800a09c:	e036      	b.n	800a10c <eARPGetCacheEntry+0xbc>
	}
	else if( *ipLOCAL_IP_ADDRESS_POINTER == 0UL )
 800a09e:	4b22      	ldr	r3, [pc, #136]	; (800a128 <eARPGetCacheEntry+0xd8>)
 800a0a0:	695b      	ldr	r3, [r3, #20]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d102      	bne.n	800a0ac <eARPGetCacheEntry+0x5c>
	{
		/* The IP address has not yet been assigned, so there is nothing that
		can be done. */
		eReturn = eCantSendPacket;
 800a0a6:	2302      	movs	r3, #2
 800a0a8:	73fb      	strb	r3, [r7, #15]
 800a0aa:	e02f      	b.n	800a10c <eARPGetCacheEntry+0xbc>
	}
	else
	{
		eReturn = eARPCacheMiss;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	73fb      	strb	r3, [r7, #15]

		if( ( *pulIPAddress & xNetworkAddressing.ulNetMask ) != ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) )
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	4b1c      	ldr	r3, [pc, #112]	; (800a128 <eARPGetCacheEntry+0xd8>)
 800a0b6:	695b      	ldr	r3, [r3, #20]
 800a0b8:	405a      	eors	r2, r3
 800a0ba:	4b19      	ldr	r3, [pc, #100]	; (800a120 <eARPGetCacheEntry+0xd0>)
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	4013      	ands	r3, r2
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d00b      	beq.n	800a0dc <eARPGetCacheEntry+0x8c>
			else
#endif
			{
				/* The IP address is off the local network, so look up the
				hardware address of the router, if any. */
				if( xNetworkAddressing.ulGatewayAddress != ( uint32_t )0u )
 800a0c4:	4b16      	ldr	r3, [pc, #88]	; (800a120 <eARPGetCacheEntry+0xd0>)
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d003      	beq.n	800a0d4 <eARPGetCacheEntry+0x84>
				{
					ulAddressToLookup = xNetworkAddressing.ulGatewayAddress;
 800a0cc:	4b14      	ldr	r3, [pc, #80]	; (800a120 <eARPGetCacheEntry+0xd0>)
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	60bb      	str	r3, [r7, #8]
 800a0d2:	e006      	b.n	800a0e2 <eARPGetCacheEntry+0x92>
				}
				else
				{
					ulAddressToLookup = *pulIPAddress;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	60bb      	str	r3, [r7, #8]
 800a0da:	e002      	b.n	800a0e2 <eARPGetCacheEntry+0x92>
		}
		else
		{
			/* The IP address is on the local network, so lookup the requested
			IP address directly. */
			ulAddressToLookup = *pulIPAddress;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	60bb      	str	r3, [r7, #8]
		}

		if( eReturn == eARPCacheMiss )
 800a0e2:	7bfb      	ldrb	r3, [r7, #15]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d111      	bne.n	800a10c <eARPGetCacheEntry+0xbc>
		{
			if( ulAddressToLookup == 0UL )
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d102      	bne.n	800a0f4 <eARPGetCacheEntry+0xa4>
			{
				/* The address is not on the local network, and there is not a
				router. */
				eReturn = eCantSendPacket;
 800a0ee:	2302      	movs	r3, #2
 800a0f0:	73fb      	strb	r3, [r7, #15]
 800a0f2:	e00b      	b.n	800a10c <eARPGetCacheEntry+0xbc>
			}
			else
			{
				eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress );
 800a0f4:	6839      	ldr	r1, [r7, #0]
 800a0f6:	68b8      	ldr	r0, [r7, #8]
 800a0f8:	f000 f818 	bl	800a12c <prvCacheLookup>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	73fb      	strb	r3, [r7, #15]

				if( eReturn == eARPCacheMiss )
 800a100:	7bfb      	ldrb	r3, [r7, #15]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d102      	bne.n	800a10c <eARPGetCacheEntry+0xbc>
				{
					/* It might be that the ARP has to go to the gateway. */
					*pulIPAddress = ulAddressToLookup;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	68ba      	ldr	r2, [r7, #8]
 800a10a:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}

	return eReturn;
 800a10c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	fc0000e0 	.word	0xfc0000e0
 800a11c:	0801123c 	.word	0x0801123c
 800a120:	20004e60 	.word	0x20004e60
 800a124:	08011244 	.word	0x08011244
 800a128:	200001b0 	.word	0x200001b0

0800a12c <prvCacheLookup>:

/*-----------------------------------------------------------*/

static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup, MACAddress_t * const pxMACAddress )
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	6039      	str	r1, [r7, #0]
BaseType_t x;
eARPLookupResult_t eReturn = eARPCacheMiss;
 800a136:	2300      	movs	r3, #0
 800a138:	72fb      	strb	r3, [r7, #11]

	/* Loop through each entry in the ARP cache. */
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800a13a:	2300      	movs	r3, #0
 800a13c:	60fb      	str	r3, [r7, #12]
 800a13e:	e02b      	b.n	800a198 <prvCacheLookup+0x6c>
	{
		/* Does this row in the ARP cache table hold an entry for the IP address
		being queried? */
		if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 800a140:	4919      	ldr	r1, [pc, #100]	; (800a1a8 <prvCacheLookup+0x7c>)
 800a142:	68fa      	ldr	r2, [r7, #12]
 800a144:	4613      	mov	r3, r2
 800a146:	005b      	lsls	r3, r3, #1
 800a148:	4413      	add	r3, r2
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	440b      	add	r3, r1
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	429a      	cmp	r2, r3
 800a154:	d11d      	bne.n	800a192 <prvCacheLookup+0x66>
		{
			/* A matching valid entry was found. */
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800a156:	4914      	ldr	r1, [pc, #80]	; (800a1a8 <prvCacheLookup+0x7c>)
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	4613      	mov	r3, r2
 800a15c:	005b      	lsls	r3, r3, #1
 800a15e:	4413      	add	r3, r2
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	440b      	add	r3, r1
 800a164:	330b      	adds	r3, #11
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d102      	bne.n	800a172 <prvCacheLookup+0x46>
			{
				/* This entry is waiting an ARP reply, so is not valid. */
				eReturn = eCantSendPacket;
 800a16c:	2302      	movs	r3, #2
 800a16e:	72fb      	strb	r3, [r7, #11]
			{
				/* A valid entry was found. */
				memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
				eReturn = eARPCacheHit;
			}
			break;
 800a170:	e015      	b.n	800a19e <prvCacheLookup+0x72>
				memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800a172:	6838      	ldr	r0, [r7, #0]
 800a174:	68fa      	ldr	r2, [r7, #12]
 800a176:	4613      	mov	r3, r2
 800a178:	005b      	lsls	r3, r3, #1
 800a17a:	4413      	add	r3, r2
 800a17c:	009b      	lsls	r3, r3, #2
 800a17e:	4a0a      	ldr	r2, [pc, #40]	; (800a1a8 <prvCacheLookup+0x7c>)
 800a180:	4413      	add	r3, r2
 800a182:	3304      	adds	r3, #4
 800a184:	2206      	movs	r2, #6
 800a186:	4619      	mov	r1, r3
 800a188:	f006 fde9 	bl	8010d5e <memcpy>
				eReturn = eARPCacheHit;
 800a18c:	2301      	movs	r3, #1
 800a18e:	72fb      	strb	r3, [r7, #11]
			break;
 800a190:	e005      	b.n	800a19e <prvCacheLookup+0x72>
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	3301      	adds	r3, #1
 800a196:	60fb      	str	r3, [r7, #12]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2b05      	cmp	r3, #5
 800a19c:	ddd0      	ble.n	800a140 <prvCacheLookup+0x14>
		}
	}

	return eReturn;
 800a19e:	7afb      	ldrb	r3, [r7, #11]
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3710      	adds	r7, #16
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	20004d98 	.word	0x20004d98

0800a1ac <vARPAgeCache>:
/*-----------------------------------------------------------*/

void vARPAgeCache( void )
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
BaseType_t x;
TickType_t xTimeNow;

	/* Loop through each entry in the ARP cache. */
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	607b      	str	r3, [r7, #4]
 800a1b6:	e063      	b.n	800a280 <vARPAgeCache+0xd4>
	{
		/* If the entry is valid (its age is greater than zero). */
		if( xARPCache[ x ].ucAge > 0U )
 800a1b8:	4940      	ldr	r1, [pc, #256]	; (800a2bc <vARPAgeCache+0x110>)
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	4613      	mov	r3, r2
 800a1be:	005b      	lsls	r3, r3, #1
 800a1c0:	4413      	add	r3, r2
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	440b      	add	r3, r1
 800a1c6:	330a      	adds	r3, #10
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d055      	beq.n	800a27a <vARPAgeCache+0xce>
		{
			/* Decrement the age value of the entry in this ARP cache table row.
			When the age reaches zero it is no longer considered valid. */
			( xARPCache[ x ].ucAge )--;
 800a1ce:	493b      	ldr	r1, [pc, #236]	; (800a2bc <vARPAgeCache+0x110>)
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	4613      	mov	r3, r2
 800a1d4:	005b      	lsls	r3, r3, #1
 800a1d6:	4413      	add	r3, r2
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	440b      	add	r3, r1
 800a1dc:	330a      	adds	r3, #10
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	3b01      	subs	r3, #1
 800a1e2:	b2d8      	uxtb	r0, r3
 800a1e4:	4935      	ldr	r1, [pc, #212]	; (800a2bc <vARPAgeCache+0x110>)
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	005b      	lsls	r3, r3, #1
 800a1ec:	4413      	add	r3, r2
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	440b      	add	r3, r1
 800a1f2:	330a      	adds	r3, #10
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	701a      	strb	r2, [r3, #0]

			/* If the entry is not yet valid, then it is waiting an ARP
			reply, and the ARP request should be retransmitted. */
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800a1f8:	4930      	ldr	r1, [pc, #192]	; (800a2bc <vARPAgeCache+0x110>)
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	4613      	mov	r3, r2
 800a1fe:	005b      	lsls	r3, r3, #1
 800a200:	4413      	add	r3, r2
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	440b      	add	r3, r1
 800a206:	330b      	adds	r3, #11
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d10b      	bne.n	800a226 <vARPAgeCache+0x7a>
			{
				FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 800a20e:	492b      	ldr	r1, [pc, #172]	; (800a2bc <vARPAgeCache+0x110>)
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	4613      	mov	r3, r2
 800a214:	005b      	lsls	r3, r3, #1
 800a216:	4413      	add	r3, r2
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	440b      	add	r3, r1
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4618      	mov	r0, r3
 800a220:	f000 f852 	bl	800a2c8 <FreeRTOS_OutputARPRequest>
 800a224:	e015      	b.n	800a252 <vARPAgeCache+0xa6>
			}
			else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 800a226:	4925      	ldr	r1, [pc, #148]	; (800a2bc <vARPAgeCache+0x110>)
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	4613      	mov	r3, r2
 800a22c:	005b      	lsls	r3, r3, #1
 800a22e:	4413      	add	r3, r2
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	440b      	add	r3, r1
 800a234:	330a      	adds	r3, #10
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	2b03      	cmp	r3, #3
 800a23a:	d80a      	bhi.n	800a252 <vARPAgeCache+0xa6>
			{
				/* This entry will get removed soon.  See if the MAC address is
				still valid to prevent this happening. */
				iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
				FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 800a23c:	491f      	ldr	r1, [pc, #124]	; (800a2bc <vARPAgeCache+0x110>)
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	4613      	mov	r3, r2
 800a242:	005b      	lsls	r3, r3, #1
 800a244:	4413      	add	r3, r2
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	440b      	add	r3, r1
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4618      	mov	r0, r3
 800a24e:	f000 f83b 	bl	800a2c8 <FreeRTOS_OutputARPRequest>
			else
			{
				/* The age has just ticked down, with nothing to do. */
			}

			if( xARPCache[ x ].ucAge == 0u )
 800a252:	491a      	ldr	r1, [pc, #104]	; (800a2bc <vARPAgeCache+0x110>)
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	4613      	mov	r3, r2
 800a258:	005b      	lsls	r3, r3, #1
 800a25a:	4413      	add	r3, r2
 800a25c:	009b      	lsls	r3, r3, #2
 800a25e:	440b      	add	r3, r1
 800a260:	330a      	adds	r3, #10
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d108      	bne.n	800a27a <vARPAgeCache+0xce>
			{
				/* The entry is no longer valid.  Wipe it out. */
				iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
				xARPCache[ x ].ulIPAddress = 0UL;
 800a268:	4914      	ldr	r1, [pc, #80]	; (800a2bc <vARPAgeCache+0x110>)
 800a26a:	687a      	ldr	r2, [r7, #4]
 800a26c:	4613      	mov	r3, r2
 800a26e:	005b      	lsls	r3, r3, #1
 800a270:	4413      	add	r3, r2
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	440b      	add	r3, r1
 800a276:	2200      	movs	r2, #0
 800a278:	601a      	str	r2, [r3, #0]
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	3301      	adds	r3, #1
 800a27e:	607b      	str	r3, [r7, #4]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2b05      	cmp	r3, #5
 800a284:	dd98      	ble.n	800a1b8 <vARPAgeCache+0xc>
			}
		}
	}

	xTimeNow = xTaskGetTickCount ();
 800a286:	f7fe ff65 	bl	8009154 <xTaskGetTickCount>
 800a28a:	6038      	str	r0, [r7, #0]

	if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 800a28c:	4b0c      	ldr	r3, [pc, #48]	; (800a2c0 <vARPAgeCache+0x114>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d007      	beq.n	800a2a4 <vARPAgeCache+0xf8>
 800a294:	4b0a      	ldr	r3, [pc, #40]	; (800a2c0 <vARPAgeCache+0x114>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	683a      	ldr	r2, [r7, #0]
 800a29a:	1ad3      	subs	r3, r2, r3
 800a29c:	f644 6220 	movw	r2, #20000	; 0x4e20
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d907      	bls.n	800a2b4 <vARPAgeCache+0x108>
	{
		FreeRTOS_OutputARPRequest( *ipLOCAL_IP_ADDRESS_POINTER );
 800a2a4:	4b07      	ldr	r3, [pc, #28]	; (800a2c4 <vARPAgeCache+0x118>)
 800a2a6:	695b      	ldr	r3, [r3, #20]
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f000 f80d 	bl	800a2c8 <FreeRTOS_OutputARPRequest>
		xLastGratuitousARPTime = xTimeNow;
 800a2ae:	4a04      	ldr	r2, [pc, #16]	; (800a2c0 <vARPAgeCache+0x114>)
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	6013      	str	r3, [r2, #0]
	}
}
 800a2b4:	bf00      	nop
 800a2b6:	3708      	adds	r7, #8
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	20004d98 	.word	0x20004d98
 800a2c0:	20004de0 	.word	0x20004de0
 800a2c4:	200001b0 	.word	0x200001b0

0800a2c8 <FreeRTOS_OutputARPRequest>:
	xSendEventToIPTask( eARPTimerEvent );
}

/*-----------------------------------------------------------*/
void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
NetworkBufferDescriptor_t *pxNetworkBuffer;

	/* This is called from the context of the IP event task, so a block time
	must not be used. */
	pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0 );
 800a2d0:	2100      	movs	r1, #0
 800a2d2:	202a      	movs	r0, #42	; 0x2a
 800a2d4:	f006 f9b6 	bl	8010644 <pxGetNetworkBufferWithDescriptor>
 800a2d8:	60f8      	str	r0, [r7, #12]

	if( pxNetworkBuffer != NULL )
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d009      	beq.n	800a2f4 <FreeRTOS_OutputARPRequest+0x2c>
	{
		pxNetworkBuffer->ulIPAddress = ulIPAddress;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	615a      	str	r2, [r3, #20]
		vARPGenerateRequestPacket( pxNetworkBuffer );
 800a2e6:	68f8      	ldr	r0, [r7, #12]
 800a2e8:	f000 f808 	bl	800a2fc <vARPGenerateRequestPacket>
				pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
			}
		}
		#endif

		xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 800a2ec:	2101      	movs	r1, #1
 800a2ee:	68f8      	ldr	r0, [r7, #12]
 800a2f0:	f7fa ff24 	bl	800513c <xNetworkInterfaceOutput>
	}
}
 800a2f4:	bf00      	nop
 800a2f6:	3710      	adds	r7, #16
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <vARPGenerateRequestPacket>:

void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800a2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2fe:	b085      	sub	sp, #20
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
ARPPacket_t *pxARPPacket;

	pxARPPacket = ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	699b      	ldr	r3, [r3, #24]
 800a308:	60fb      	str	r3, [r7, #12]
		xARPHeader.ucHardwareAddressLength;
		xARPHeader.ucProtocolAddressLength;
		xARPHeader.usOperation;
		xARPHeader.xTargetHardwareAddress;
	*/
	memcpy( ( void * ) pxARPPacket, ( void * ) xDefaultPartARPPacketHeader, sizeof( xDefaultPartARPPacketHeader ) );
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	4a1a      	ldr	r2, [pc, #104]	; (800a378 <vARPGenerateRequestPacket+0x7c>)
 800a30e:	4614      	mov	r4, r2
 800a310:	469e      	mov	lr, r3
 800a312:	f104 0c20 	add.w	ip, r4, #32
 800a316:	4675      	mov	r5, lr
 800a318:	4626      	mov	r6, r4
 800a31a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a31c:	6028      	str	r0, [r5, #0]
 800a31e:	6069      	str	r1, [r5, #4]
 800a320:	60aa      	str	r2, [r5, #8]
 800a322:	60eb      	str	r3, [r5, #12]
 800a324:	3410      	adds	r4, #16
 800a326:	f10e 0e10 	add.w	lr, lr, #16
 800a32a:	4564      	cmp	r4, ip
 800a32c:	d1f3      	bne.n	800a316 <vARPGenerateRequestPacket+0x1a>
 800a32e:	4673      	mov	r3, lr
 800a330:	4622      	mov	r2, r4
 800a332:	6810      	ldr	r0, [r2, #0]
 800a334:	6018      	str	r0, [r3, #0]
 800a336:	8892      	ldrh	r2, [r2, #4]
 800a338:	809a      	strh	r2, [r3, #4]
	memcpy( ( void * ) pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	3306      	adds	r3, #6
 800a33e:	2206      	movs	r2, #6
 800a340:	490e      	ldr	r1, [pc, #56]	; (800a37c <vARPGenerateRequestPacket+0x80>)
 800a342:	4618      	mov	r0, r3
 800a344:	f006 fd0b 	bl	8010d5e <memcpy>
	memcpy( ( void * ) pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes, ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	3316      	adds	r3, #22
 800a34c:	2206      	movs	r2, #6
 800a34e:	490b      	ldr	r1, [pc, #44]	; (800a37c <vARPGenerateRequestPacket+0x80>)
 800a350:	4618      	mov	r0, r3
 800a352:	f006 fd04 	bl	8010d5e <memcpy>

	memcpy( ( void* )pxARPPacket->xARPHeader.ucSenderProtocolAddress, ( void* )ipLOCAL_IP_ADDRESS_POINTER, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	331c      	adds	r3, #28
 800a35a:	4a08      	ldr	r2, [pc, #32]	; (800a37c <vARPGenerateRequestPacket+0x80>)
 800a35c:	6952      	ldr	r2, [r2, #20]
 800a35e:	601a      	str	r2, [r3, #0]
	pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->ulIPAddress;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	695a      	ldr	r2, [r3, #20]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26

	pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	222a      	movs	r2, #42	; 0x2a
 800a36e:	61da      	str	r2, [r3, #28]

	iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->ulIPAddress );
}
 800a370:	bf00      	nop
 800a372:	3714      	adds	r7, #20
 800a374:	46bd      	mov	sp, r7
 800a376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a378:	08011214 	.word	0x08011214
 800a37c:	200001b0 	.word	0x200001b0

0800a380 <usChar2u16>:
			( ( ( uint32_t )apChr[3] ) );
}

static portINLINE uint16_t usChar2u16 (const uint8_t *apChr);
static portINLINE uint16_t usChar2u16 (const uint8_t *apChr)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
	return ( uint16_t )
			( ( ( ( uint32_t )apChr[0] ) << 8) |
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	021b      	lsls	r3, r3, #8
 800a390:	b29a      	uxth	r2, r3
			  ( ( ( uint32_t )apChr[1] ) ) );
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	3301      	adds	r3, #1
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	b29b      	uxth	r3, r3
	return ( uint16_t )
 800a39a:	4313      	orrs	r3, r2
 800a39c:	b29b      	uxth	r3, r3
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	370c      	adds	r7, #12
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr

0800a3aa <prvReadNameField>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_DNS_CACHE == 1 )

	static uint8_t *prvReadNameField( uint8_t *pucByte, size_t xSourceLen, char *pcName, size_t xDestLen )
	{
 800a3aa:	b480      	push	{r7}
 800a3ac:	b087      	sub	sp, #28
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	60f8      	str	r0, [r7, #12]
 800a3b2:	60b9      	str	r1, [r7, #8]
 800a3b4:	607a      	str	r2, [r7, #4]
 800a3b6:	603b      	str	r3, [r7, #0]
	size_t xNameLen = 0;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	617b      	str	r3, [r7, #20]
    BaseType_t xCount;

        if( 0 == xSourceLen )
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d101      	bne.n	800a3c6 <prvReadNameField+0x1c>
        {
            return NULL;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	e068      	b.n	800a498 <prvReadNameField+0xee>
        }

		/* Determine if the name is the fully coded name, or an offset to the name
		elsewhere in the message. */
		if( ( *pucByte & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a3ce:	2bc0      	cmp	r3, #192	; 0xc0
 800a3d0:	d140      	bne.n	800a454 <prvReadNameField+0xaa>
		{
			/* Jump over the two byte offset. */
            if( xSourceLen > sizeof( uint16_t ) )
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	2b02      	cmp	r3, #2
 800a3d6:	d903      	bls.n	800a3e0 <prvReadNameField+0x36>
            {
                pucByte += sizeof( uint16_t );
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	3302      	adds	r3, #2
 800a3dc:	60fb      	str	r3, [r7, #12]
 800a3de:	e05a      	b.n	800a496 <prvReadNameField+0xec>
            }
            else
            {
                pucByte = NULL;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	60fb      	str	r3, [r7, #12]
 800a3e4:	e057      	b.n	800a496 <prvReadNameField+0xec>
			/* pucByte points to the full name. Walk over the string. */
			while( NULL != pucByte && *pucByte != 0x00 && xSourceLen > 1 )
			{
                /* If this is not the first time through the loop, then add a 
                separator in the output. */
                if( xNameLen > 0 && xNameLen < xDestLen - 1 )
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d00b      	beq.n	800a404 <prvReadNameField+0x5a>
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	1e5a      	subs	r2, r3, #1
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d906      	bls.n	800a404 <prvReadNameField+0x5a>
                {
                    pcName[ xNameLen++ ] = '.';
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	1c5a      	adds	r2, r3, #1
 800a3fa:	617a      	str	r2, [r7, #20]
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	4413      	add	r3, r2
 800a400:	222e      	movs	r2, #46	; 0x2e
 800a402:	701a      	strb	r2, [r3, #0]
                }

                /* Process the first/next sub-string. */
				for( xCount = *(pucByte++), xSourceLen--;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	1c5a      	adds	r2, r3, #1
 800a408:	60fa      	str	r2, [r7, #12]
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	613b      	str	r3, [r7, #16]
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	3b01      	subs	r3, #1
 800a412:	60bb      	str	r3, [r7, #8]
 800a414:	e016      	b.n	800a444 <prvReadNameField+0x9a>
                     xCount-- && xSourceLen > 1; 
                     pucByte++, xSourceLen-- )
				{
                    if( xNameLen < xDestLen - 1 )
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	1e5a      	subs	r2, r3, #1
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	429a      	cmp	r2, r3
 800a41e:	d908      	bls.n	800a432 <prvReadNameField+0x88>
                    {
                        pcName[ xNameLen++ ] = *( ( char * )pucByte );
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	1c5a      	adds	r2, r3, #1
 800a424:	617a      	str	r2, [r7, #20]
 800a426:	687a      	ldr	r2, [r7, #4]
 800a428:	4413      	add	r3, r2
 800a42a:	68fa      	ldr	r2, [r7, #12]
 800a42c:	7812      	ldrb	r2, [r2, #0]
 800a42e:	701a      	strb	r2, [r3, #0]
 800a430:	e002      	b.n	800a438 <prvReadNameField+0x8e>
                    }
                    else
                    {
                        /* DNS name is too big for the provided buffer. */
                        pucByte = NULL;
 800a432:	2300      	movs	r3, #0
 800a434:	60fb      	str	r3, [r7, #12]
                        break;
 800a436:	e00d      	b.n	800a454 <prvReadNameField+0xaa>
                     pucByte++, xSourceLen-- )
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	3301      	adds	r3, #1
 800a43c:	60fb      	str	r3, [r7, #12]
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	3b01      	subs	r3, #1
 800a442:	60bb      	str	r3, [r7, #8]
                     xCount-- && xSourceLen > 1; 
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	1e5a      	subs	r2, r3, #1
 800a448:	613a      	str	r2, [r7, #16]
				for( xCount = *(pucByte++), xSourceLen--;
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d002      	beq.n	800a454 <prvReadNameField+0xaa>
                     xCount-- && xSourceLen > 1; 
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	2b01      	cmp	r3, #1
 800a452:	d8e0      	bhi.n	800a416 <prvReadNameField+0x6c>
			while( NULL != pucByte && *pucByte != 0x00 && xSourceLen > 1 )
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d006      	beq.n	800a468 <prvReadNameField+0xbe>
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d002      	beq.n	800a468 <prvReadNameField+0xbe>
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	2b01      	cmp	r3, #1
 800a466:	d8be      	bhi.n	800a3e6 <prvReadNameField+0x3c>
                    }
				}
			}

            /* Confirm that a fully formed name was found. */
            if( NULL != pucByte )
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d013      	beq.n	800a496 <prvReadNameField+0xec>
            {
                if( 0x00 == *pucByte )
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d10d      	bne.n	800a492 <prvReadNameField+0xe8>
                {
                    pucByte++;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	3301      	adds	r3, #1
 800a47a:	60fb      	str	r3, [r7, #12]
                    xSourceLen--;
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	3b01      	subs	r3, #1
 800a480:	60bb      	str	r3, [r7, #8]
                    pcName[ xNameLen++ ] = '\0';
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	1c5a      	adds	r2, r3, #1
 800a486:	617a      	str	r2, [r7, #20]
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	4413      	add	r3, r2
 800a48c:	2200      	movs	r2, #0
 800a48e:	701a      	strb	r2, [r3, #0]
 800a490:	e001      	b.n	800a496 <prvReadNameField+0xec>
                }
                else
                {
                    pucByte = NULL;
 800a492:	2300      	movs	r3, #0
 800a494:	60fb      	str	r3, [r7, #12]
                }
            }
		}

		return pucByte;
 800a496:	68fb      	ldr	r3, [r7, #12]
	}
 800a498:	4618      	mov	r0, r3
 800a49a:	371c      	adds	r7, #28
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <prvSkipNameField>:
#endif	/* ipconfigUSE_DNS_CACHE == 1 */
/*-----------------------------------------------------------*/

static uint8_t *prvSkipNameField( uint8_t *pucByte, size_t xSourceLen )
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b085      	sub	sp, #20
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
    size_t xChunkLength;

    if( 0 == xSourceLen )
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d101      	bne.n	800a4b8 <prvSkipNameField+0x14>
    {
        return NULL;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	e038      	b.n	800a52a <prvSkipNameField+0x86>
    }

    /* Determine if the name is the fully coded name, or an offset to the name
	elsewhere in the message. */
	if( ( *pucByte & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a4c0:	2bc0      	cmp	r3, #192	; 0xc0
 800a4c2:	d11d      	bne.n	800a500 <prvSkipNameField+0x5c>
	{
		/* Jump over the two byte offset. */
        if( xSourceLen > sizeof( uint16_t ) )
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	2b02      	cmp	r3, #2
 800a4c8:	d903      	bls.n	800a4d2 <prvSkipNameField+0x2e>
        {
            pucByte += sizeof( uint16_t );
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	3302      	adds	r3, #2
 800a4ce:	607b      	str	r3, [r7, #4]
 800a4d0:	e02a      	b.n	800a528 <prvSkipNameField+0x84>
        }
        else
        {
            pucByte = NULL;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	607b      	str	r3, [r7, #4]
 800a4d6:	e027      	b.n	800a528 <prvSkipNameField+0x84>
	else
	{
		/* pucByte points to the full name. Walk over the string. */
		while( *pucByte != 0x00 && xSourceLen > 1 )
		{
            xChunkLength = *pucByte + 1;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	3301      	adds	r3, #1
 800a4de:	60fb      	str	r3, [r7, #12]

            if( xSourceLen > xChunkLength )
 800a4e0:	683a      	ldr	r2, [r7, #0]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d908      	bls.n	800a4fa <prvSkipNameField+0x56>
            {
                xSourceLen -= xChunkLength;
 800a4e8:	683a      	ldr	r2, [r7, #0]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	1ad3      	subs	r3, r2, r3
 800a4ee:	603b      	str	r3, [r7, #0]
                pucByte += xChunkLength;
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	607b      	str	r3, [r7, #4]
 800a4f8:	e002      	b.n	800a500 <prvSkipNameField+0x5c>
            }
            else
            {
                pucByte = NULL;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	607b      	str	r3, [r7, #4]
                break;
 800a4fe:	e006      	b.n	800a50e <prvSkipNameField+0x6a>
		while( *pucByte != 0x00 && xSourceLen > 1 )
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d002      	beq.n	800a50e <prvSkipNameField+0x6a>
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d8e4      	bhi.n	800a4d8 <prvSkipNameField+0x34>
            }
		}

        /* Confirm that a fully formed name was found. */
        if( NULL != pucByte )
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d009      	beq.n	800a528 <prvSkipNameField+0x84>
        {
            if( 0x00 == *pucByte )
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d103      	bne.n	800a524 <prvSkipNameField+0x80>
            {
                pucByte++;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	3301      	adds	r3, #1
 800a520:	607b      	str	r3, [r7, #4]
 800a522:	e001      	b.n	800a528 <prvSkipNameField+0x84>
            }
            else
            {
                pucByte = NULL;
 800a524:	2300      	movs	r3, #0
 800a526:	607b      	str	r3, [r7, #4]
            }
        }
	}

	return pucByte;
 800a528:	687b      	ldr	r3, [r7, #4]
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3714      	adds	r7, #20
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr

0800a536 <ulDNSHandlePacket>:
/*-----------------------------------------------------------*/

uint32_t ulDNSHandlePacket( NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b086      	sub	sp, #24
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
uint8_t *pucUDPPayloadBuffer;
size_t xPlayloadBufferLength;
DNSMessage_t *pxDNSMessageHeader;

	xPlayloadBufferLength = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	69db      	ldr	r3, [r3, #28]
 800a542:	3b2a      	subs	r3, #42	; 0x2a
 800a544:	617b      	str	r3, [r7, #20]
	if ( xPlayloadBufferLength < sizeof( DNSMessage_t ) )
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	2b0b      	cmp	r3, #11
 800a54a:	d801      	bhi.n	800a550 <ulDNSHandlePacket+0x1a>
	{
		return pdFAIL;
 800a54c:	2300      	movs	r3, #0
 800a54e:	e012      	b.n	800a576 <ulDNSHandlePacket+0x40>
	}

	pucUDPPayloadBuffer = pxNetworkBuffer->pucEthernetBuffer + sizeof( UDPPacket_t );
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	699b      	ldr	r3, [r3, #24]
 800a554:	332a      	adds	r3, #42	; 0x2a
 800a556:	613b      	str	r3, [r7, #16]
	pxDNSMessageHeader = ( DNSMessage_t * ) pucUDPPayloadBuffer;
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	60fb      	str	r3, [r7, #12]

    if( pxNetworkBuffer->xDataLength > sizeof( UDPPacket_t ) )
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	69db      	ldr	r3, [r3, #28]
 800a560:	2b2a      	cmp	r3, #42	; 0x2a
 800a562:	d907      	bls.n	800a574 <ulDNSHandlePacket+0x3e>
    {
        prvParseDNSReply( pucUDPPayloadBuffer, 
            xPlayloadBufferLength,
            ( uint32_t )pxDNSMessageHeader->usIdentifier );
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	881b      	ldrh	r3, [r3, #0]
 800a568:	b29b      	uxth	r3, r3
        prvParseDNSReply( pucUDPPayloadBuffer, 
 800a56a:	461a      	mov	r2, r3
 800a56c:	6979      	ldr	r1, [r7, #20]
 800a56e:	6938      	ldr	r0, [r7, #16]
 800a570:	f000 f806 	bl	800a580 <prvParseDNSReply>
    }

	/* The packet was not consumed. */
	return pdFAIL;
 800a574:	2300      	movs	r3, #0
}
 800a576:	4618      	mov	r0, r3
 800a578:	3718      	adds	r7, #24
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
	...

0800a580 <prvParseDNSReply>:

#endif /* ipconfigUSE_NBNS */
/*-----------------------------------------------------------*/

static uint32_t prvParseDNSReply( uint8_t *pucUDPPayloadBuffer, size_t xBufferLength, TickType_t xIdentifier )
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b09a      	sub	sp, #104	; 0x68
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	607a      	str	r2, [r7, #4]
DNSMessage_t *pxDNSMessageHeader;
DNSAnswerRecord_t *pxDNSAnswerRecord;
uint32_t ulIPAddress = 0UL;
 800a58c:	2300      	movs	r3, #0
 800a58e:	627b      	str	r3, [r7, #36]	; 0x24
#if( ipconfigUSE_LLMNR == 1 )
	char *pcRequestedName = NULL;
 800a590:	2300      	movs	r3, #0
 800a592:	663b      	str	r3, [r7, #96]	; 0x60
#endif
uint8_t *pucByte;
size_t xSourceBytesRemaining;
uint16_t x, usDataLength, usQuestions;
#if( ipconfigUSE_LLMNR == 1 )
	uint16_t usType = 0, usClass = 0;
 800a594:	2300      	movs	r3, #0
 800a596:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800a59a:	2300      	movs	r3, #0
 800a59c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
#endif
#if( ipconfigUSE_DNS_CACHE == 1 )
	char pcName[ ipconfigDNS_CACHE_NAME_LENGTH ] = ""; 
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	617b      	str	r3, [r7, #20]
 800a5a4:	f107 0318 	add.w	r3, r7, #24
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	601a      	str	r2, [r3, #0]
 800a5ac:	605a      	str	r2, [r3, #4]
 800a5ae:	609a      	str	r2, [r3, #8]
#endif

    /* Ensure that the buffer is of at least minimal DNS message length. */
    if( xBufferLength < sizeof( DNSMessage_t ) )
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	2b0b      	cmp	r3, #11
 800a5b4:	d801      	bhi.n	800a5ba <prvParseDNSReply+0x3a>
    {
        return dnsPARSE_ERROR;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	e212      	b.n	800a9e0 <prvParseDNSReply+0x460>
    }
    else
    {
        xSourceBytesRemaining = xBufferLength;
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Parse the DNS message header. */
	pxDNSMessageHeader = ( DNSMessage_t * ) pucUDPPayloadBuffer;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	667b      	str	r3, [r7, #100]	; 0x64

	if( pxDNSMessageHeader->usIdentifier == ( uint16_t ) xIdentifier )
 800a5c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5c4:	881b      	ldrh	r3, [r3, #0]
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	f040 8206 	bne.w	800a9de <prvParseDNSReply+0x45e>
	{
		/* Start at the first byte after the header. */
		pucByte = pucUDPPayloadBuffer + sizeof( DNSMessage_t );
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	330c      	adds	r3, #12
 800a5d6:	65fb      	str	r3, [r7, #92]	; 0x5c
        xSourceBytesRemaining -= sizeof( DNSMessage_t );
 800a5d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a5da:	3b0c      	subs	r3, #12
 800a5dc:	65bb      	str	r3, [r7, #88]	; 0x58

		/* Skip any question records. */
		usQuestions = FreeRTOS_ntohs( pxDNSMessageHeader->usQuestions );
 800a5de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5e0:	889b      	ldrh	r3, [r3, #4]
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	021b      	lsls	r3, r3, #8
 800a5e6:	b21a      	sxth	r2, r3
 800a5e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5ea:	889b      	ldrh	r3, [r3, #4]
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	0a1b      	lsrs	r3, r3, #8
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	b21b      	sxth	r3, r3
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	b21b      	sxth	r3, r3
 800a5f8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		for( x = 0; x < usQuestions; x++ )
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a602:	e04e      	b.n	800a6a2 <prvParseDNSReply+0x122>
		{
			#if( ipconfigUSE_LLMNR == 1 )
			{
				if( x == 0 )
 800a604:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d101      	bne.n	800a610 <prvParseDNSReply+0x90>
				{
					pcRequestedName = ( char * ) pucByte;
 800a60c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a60e:	663b      	str	r3, [r7, #96]	; 0x60
				}
			}
			#endif

#if( ipconfigUSE_DNS_CACHE == 1 )
			if( x == 0 )
 800a610:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a614:	2b00      	cmp	r3, #0
 800a616:	d114      	bne.n	800a642 <prvParseDNSReply+0xc2>
			{
				pucByte = prvReadNameField( pucByte, 
 800a618:	f107 0214 	add.w	r2, r7, #20
 800a61c:	2310      	movs	r3, #16
 800a61e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a620:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a622:	f7ff fec2 	bl	800a3aa <prvReadNameField>
 800a626:	65f8      	str	r0, [r7, #92]	; 0x5c
                                            xSourceBytesRemaining,
                                            pcName, 
                                            sizeof( pcName ) );
                
                /* Check for a malformed response. */
                if( NULL == pucByte )
 800a628:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d101      	bne.n	800a632 <prvParseDNSReply+0xb2>
                {
                    return dnsPARSE_ERROR;
 800a62e:	2300      	movs	r3, #0
 800a630:	e1d6      	b.n	800a9e0 <prvParseDNSReply+0x460>
                }
                else
                {
                    xSourceBytesRemaining = ( pucUDPPayloadBuffer + xBufferLength ) - pucByte;
 800a632:	68fa      	ldr	r2, [r7, #12]
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	4413      	add	r3, r2
 800a638:	461a      	mov	r2, r3
 800a63a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a63c:	1ad3      	subs	r3, r2, r3
 800a63e:	65bb      	str	r3, [r7, #88]	; 0x58
 800a640:	e010      	b.n	800a664 <prvParseDNSReply+0xe4>
			}
			else
#endif /* ipconfigUSE_DNS_CACHE */
			{
				/* Skip the variable length pcName field. */
				pucByte = prvSkipNameField( pucByte, 
 800a642:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a644:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a646:	f7ff ff2d 	bl	800a4a4 <prvSkipNameField>
 800a64a:	65f8      	str	r0, [r7, #92]	; 0x5c
                                            xSourceBytesRemaining );
            
                /* Check for a malformed response. */
                if( NULL == pucByte )
 800a64c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d101      	bne.n	800a656 <prvParseDNSReply+0xd6>
                {
                    return dnsPARSE_ERROR;
 800a652:	2300      	movs	r3, #0
 800a654:	e1c4      	b.n	800a9e0 <prvParseDNSReply+0x460>
                }
                else
                {
                    xSourceBytesRemaining = pucUDPPayloadBuffer + xBufferLength - pucByte;
 800a656:	68fa      	ldr	r2, [r7, #12]
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	4413      	add	r3, r2
 800a65c:	461a      	mov	r2, r3
 800a65e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a660:	1ad3      	subs	r3, r2, r3
 800a662:	65bb      	str	r3, [r7, #88]	; 0x58
                }
            }

            /* Check the remaining buffer size. */
            if( xSourceBytesRemaining >= sizeof( uint32_t ) )
 800a664:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a666:	2b03      	cmp	r3, #3
 800a668:	d914      	bls.n	800a694 <prvParseDNSReply+0x114>
            {
                #if( ipconfigUSE_LLMNR == 1 )
                {
                    /* usChar2u16 returns value in host endianness */
                    usType = usChar2u16( pucByte );
 800a66a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a66c:	f7ff fe88 	bl	800a380 <usChar2u16>
 800a670:	4603      	mov	r3, r0
 800a672:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                    usClass = usChar2u16( pucByte + 2 );
 800a676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a678:	3302      	adds	r3, #2
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7ff fe80 	bl	800a380 <usChar2u16>
 800a680:	4603      	mov	r3, r0
 800a682:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                }
                #endif /* ipconfigUSE_LLMNR */

                /* Skip the type and class fields. */
                pucByte += sizeof( uint32_t );
 800a686:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a688:	3304      	adds	r3, #4
 800a68a:	65fb      	str	r3, [r7, #92]	; 0x5c
                xSourceBytesRemaining -= sizeof( uint32_t );
 800a68c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a68e:	3b04      	subs	r3, #4
 800a690:	65bb      	str	r3, [r7, #88]	; 0x58
 800a692:	e001      	b.n	800a698 <prvParseDNSReply+0x118>
            }
            else
            {
                /* Malformed response. */
                return dnsPARSE_ERROR;
 800a694:	2300      	movs	r3, #0
 800a696:	e1a3      	b.n	800a9e0 <prvParseDNSReply+0x460>
		for( x = 0; x < usQuestions; x++ )
 800a698:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a69c:	3301      	adds	r3, #1
 800a69e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a6a2:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800a6a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d3aa      	bcc.n	800a604 <prvParseDNSReply+0x84>
            }
		}

		/* Search through the answer records. */
		pxDNSMessageHeader->usAnswers = FreeRTOS_ntohs( pxDNSMessageHeader->usAnswers );
 800a6ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6b0:	88db      	ldrh	r3, [r3, #6]
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	021b      	lsls	r3, r3, #8
 800a6b6:	b21a      	sxth	r2, r3
 800a6b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6ba:	88db      	ldrh	r3, [r3, #6]
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	0a1b      	lsrs	r3, r3, #8
 800a6c0:	b29b      	uxth	r3, r3
 800a6c2:	b21b      	sxth	r3, r3
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	b21b      	sxth	r3, r3
 800a6c8:	b29a      	uxth	r2, r3
 800a6ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6cc:	80da      	strh	r2, [r3, #6]

		if( ( pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 800a6ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6d0:	885b      	ldrh	r3, [r3, #2]
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	f403 6378 	and.w	r3, r3, #3968	; 0xf80
 800a6d8:	2b80      	cmp	r3, #128	; 0x80
 800a6da:	d177      	bne.n	800a7cc <prvParseDNSReply+0x24c>
		{
			for( x = 0; x < pxDNSMessageHeader->usAnswers; x++ )
 800a6dc:	2300      	movs	r3, #0
 800a6de:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a6e2:	e06b      	b.n	800a7bc <prvParseDNSReply+0x23c>
			{
				pucByte = prvSkipNameField( pucByte,
 800a6e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a6e6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a6e8:	f7ff fedc 	bl	800a4a4 <prvSkipNameField>
 800a6ec:	65f8      	str	r0, [r7, #92]	; 0x5c
                                            xSourceBytesRemaining );

                /* Check for a malformed response. */
                if( NULL == pucByte )
 800a6ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d101      	bne.n	800a6f8 <prvParseDNSReply+0x178>
                {
                    return dnsPARSE_ERROR;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	e173      	b.n	800a9e0 <prvParseDNSReply+0x460>
                }
                else
                {
                    xSourceBytesRemaining = pucUDPPayloadBuffer + xBufferLength - pucByte;
 800a6f8:	68fa      	ldr	r2, [r7, #12]
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	461a      	mov	r2, r3
 800a700:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a702:	1ad3      	subs	r3, r2, r3
 800a704:	65bb      	str	r3, [r7, #88]	; 0x58
                }

				/* Is there enough data for an IPv4 A record answer and, if so, 
                is this an A record? */
				if( xSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) + sizeof( uint32_t ) && 
 800a706:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a708:	2b0d      	cmp	r3, #13
 800a70a:	d92a      	bls.n	800a762 <prvParseDNSReply+0x1e2>
                    usChar2u16( pucByte ) == dnsTYPE_A_HOST )
 800a70c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a70e:	f7ff fe37 	bl	800a380 <usChar2u16>
 800a712:	4603      	mov	r3, r0
				if( xSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) + sizeof( uint32_t ) && 
 800a714:	2b01      	cmp	r3, #1
 800a716:	d124      	bne.n	800a762 <prvParseDNSReply+0x1e2>
				{
					/* This is the required record type and is of sufficient size. */
                    pxDNSAnswerRecord = ( DNSAnswerRecord_t * )pucByte;
 800a718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a71a:	643b      	str	r3, [r7, #64]	; 0x40

					/* Sanity check the data length of an IPv4 answer. */
					if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) == sizeof( uint32_t ) )
 800a71c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a71e:	891b      	ldrh	r3, [r3, #8]
 800a720:	b29b      	uxth	r3, r3
 800a722:	021b      	lsls	r3, r3, #8
 800a724:	b21a      	sxth	r2, r3
 800a726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a728:	891b      	ldrh	r3, [r3, #8]
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	0a1b      	lsrs	r3, r3, #8
 800a72e:	b29b      	uxth	r3, r3
 800a730:	b21b      	sxth	r3, r3
 800a732:	4313      	orrs	r3, r2
 800a734:	b21b      	sxth	r3, r3
 800a736:	2b04      	cmp	r3, #4
 800a738:	d10c      	bne.n	800a754 <prvParseDNSReply+0x1d4>
					{
						/* Copy the IP address out of the record. */
						memcpy( &ulIPAddress, 
                                pucByte + sizeof( DNSAnswerRecord_t ),
 800a73a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a73c:	330a      	adds	r3, #10
						memcpy( &ulIPAddress, 
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	627b      	str	r3, [r7, #36]	; 0x24
                                sizeof( uint32_t ) );

						#if( ipconfigUSE_DNS_CACHE == 1 )
						{
							prvProcessDNSCache( pcName, &ulIPAddress, pxDNSAnswerRecord->ulTTL, pdFALSE );
 800a742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a744:	685a      	ldr	r2, [r3, #4]
 800a746:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800a74a:	f107 0014 	add.w	r0, r7, #20
 800a74e:	2300      	movs	r3, #0
 800a750:	f000 f9e0 	bl	800ab14 <prvProcessDNSCache>
							vDNSDoCallback( ( TickType_t ) pxDNSMessageHeader->usIdentifier, pcName, ulIPAddress );
						}
						#endif	/* ipconfigDNS_USE_CALLBACKS != 0 */
					}

                    pucByte += sizeof( DNSAnswerRecord_t ) + sizeof( uint32_t );
 800a754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a756:	330e      	adds	r3, #14
 800a758:	65fb      	str	r3, [r7, #92]	; 0x5c
                    xSourceBytesRemaining -= ( sizeof( DNSAnswerRecord_t ) + sizeof( uint32_t ) );
 800a75a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a75c:	3b0e      	subs	r3, #14
 800a75e:	65bb      	str	r3, [r7, #88]	; 0x58
					break;
 800a760:	e13d      	b.n	800a9de <prvParseDNSReply+0x45e>
				}
				else if( xSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) )
 800a762:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a764:	2b09      	cmp	r3, #9
 800a766:	d924      	bls.n	800a7b2 <prvParseDNSReply+0x232>
				{
                    /* It's not an A record, so skip it. Get the header location 
                    and then jump over the header. */
                    pxDNSAnswerRecord = ( DNSAnswerRecord_t * )pucByte;
 800a768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a76a:	643b      	str	r3, [r7, #64]	; 0x40
                    pucByte += sizeof( DNSAnswerRecord_t );
 800a76c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a76e:	330a      	adds	r3, #10
 800a770:	65fb      	str	r3, [r7, #92]	; 0x5c
                    xSourceBytesRemaining -= sizeof( DNSAnswerRecord_t );
 800a772:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a774:	3b0a      	subs	r3, #10
 800a776:	65bb      	str	r3, [r7, #88]	; 0x58
                    
					/* Determine the length of the answer data from the header. */
					usDataLength = FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength );
 800a778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a77a:	891b      	ldrh	r3, [r3, #8]
 800a77c:	b29b      	uxth	r3, r3
 800a77e:	021b      	lsls	r3, r3, #8
 800a780:	b21a      	sxth	r2, r3
 800a782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a784:	891b      	ldrh	r3, [r3, #8]
 800a786:	b29b      	uxth	r3, r3
 800a788:	0a1b      	lsrs	r3, r3, #8
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	b21b      	sxth	r3, r3
 800a78e:	4313      	orrs	r3, r2
 800a790:	b21b      	sxth	r3, r3
 800a792:	87fb      	strh	r3, [r7, #62]	; 0x3e

					/* Jump over the answer. */
                    if( xSourceBytesRemaining >= usDataLength )
 800a794:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800a796:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a798:	429a      	cmp	r2, r3
 800a79a:	d808      	bhi.n	800a7ae <prvParseDNSReply+0x22e>
                    {
                        pucByte += usDataLength;
 800a79c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a79e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a7a0:	4413      	add	r3, r2
 800a7a2:	65fb      	str	r3, [r7, #92]	; 0x5c
                        xSourceBytesRemaining -= usDataLength;
 800a7a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a7a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a7a8:	1ad3      	subs	r3, r2, r3
 800a7aa:	65bb      	str	r3, [r7, #88]	; 0x58
 800a7ac:	e001      	b.n	800a7b2 <prvParseDNSReply+0x232>
                    }
                    else
                    {
                        /* Malformed response. */
                        return dnsPARSE_ERROR;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	e116      	b.n	800a9e0 <prvParseDNSReply+0x460>
			for( x = 0; x < pxDNSMessageHeader->usAnswers; x++ )
 800a7b2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a7bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7be:	88db      	ldrh	r3, [r3, #6]
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d38c      	bcc.n	800a6e4 <prvParseDNSReply+0x164>
 800a7ca:	e108      	b.n	800a9de <prvParseDNSReply+0x45e>
                    }
				}
			}
		}
#if( ipconfigUSE_LLMNR == 1 )
		else if( usQuestions && ( usType == dnsTYPE_A_HOST ) && ( usClass == dnsCLASS_IN ) )
 800a7cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f000 8104 	beq.w	800a9de <prvParseDNSReply+0x45e>
 800a7d6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	f040 80ff 	bne.w	800a9de <prvParseDNSReply+0x45e>
 800a7e0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	f040 80fa 	bne.w	800a9de <prvParseDNSReply+0x45e>
		{
			/* If this is not a reply to our DNS request, it might an LLMNR
			request. */
			if( xApplicationDNSQueryHook ( ( pcRequestedName + 1 ) ) )
 800a7ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f006 f8e0 	bl	80109b4 <xApplicationDNSQueryHook>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	f000 80f1 	beq.w	800a9de <prvParseDNSReply+0x45e>
			{
			int16_t usLength;
			NetworkBufferDescriptor_t *pxNewBuffer = NULL;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	64fb      	str	r3, [r7, #76]	; 0x4c
			NetworkBufferDescriptor_t *pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 800a800:	68f8      	ldr	r0, [r7, #12]
 800a802:	f000 fc92 	bl	800b12a <pxUDPPayloadBuffer_to_NetworkBuffer>
 800a806:	64b8      	str	r0, [r7, #72]	; 0x48
			LLMNRAnswer_t *pxAnswer;

				if( ( xBufferAllocFixedSize == pdFALSE ) && ( pxNetworkBuffer != NULL ) )
 800a808:	4b77      	ldr	r3, [pc, #476]	; (800a9e8 <prvParseDNSReply+0x468>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d12d      	bne.n	800a86c <prvParseDNSReply+0x2ec>
 800a810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a812:	2b00      	cmp	r3, #0
 800a814:	d02a      	beq.n	800a86c <prvParseDNSReply+0x2ec>
				{
				BaseType_t xDataLength = xBufferLength + sizeof( UDPHeader_t ) +
					sizeof( EthernetHeader_t ) + sizeof( IPHeader_t );
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	332a      	adds	r3, #42	; 0x2a
				BaseType_t xDataLength = xBufferLength + sizeof( UDPHeader_t ) +
 800a81a:	63bb      	str	r3, [r7, #56]	; 0x38

					/* The field xDataLength was set to the length of the UDP payload.
					The answer (reply) will be longer than the request, so the packet
					must be duplicaed into a bigger buffer */
					pxNetworkBuffer->xDataLength = xDataLength;
 800a81c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a81e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a820:	61da      	str	r2, [r3, #28]
					pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, xDataLength + 16 );
 800a822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a824:	3310      	adds	r3, #16
 800a826:	4619      	mov	r1, r3
 800a828:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a82a:	f000 fc53 	bl	800b0d4 <pxDuplicateNetworkBufferWithDescriptor>
 800a82e:	64f8      	str	r0, [r7, #76]	; 0x4c
					if( pxNewBuffer != NULL )
 800a830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a832:	2b00      	cmp	r3, #0
 800a834:	d018      	beq.n	800a868 <prvParseDNSReply+0x2e8>
					{
					BaseType_t xOffset1, xOffset2;

						xOffset1 = ( BaseType_t ) ( pucByte - pucUDPPayloadBuffer );
 800a836:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	1ad3      	subs	r3, r2, r3
 800a83c:	637b      	str	r3, [r7, #52]	; 0x34
						xOffset2 = ( BaseType_t ) ( ( ( uint8_t * ) pcRequestedName ) - pucUDPPayloadBuffer );
 800a83e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	1ad3      	subs	r3, r2, r3
 800a844:	633b      	str	r3, [r7, #48]	; 0x30

						pxNetworkBuffer = pxNewBuffer;
 800a846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a848:	64bb      	str	r3, [r7, #72]	; 0x48
						pucUDPPayloadBuffer = pxNetworkBuffer->pucEthernetBuffer + ipUDP_PAYLOAD_OFFSET_IPv4;
 800a84a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a84c:	699b      	ldr	r3, [r3, #24]
 800a84e:	332a      	adds	r3, #42	; 0x2a
 800a850:	60fb      	str	r3, [r7, #12]

						pucByte = pucUDPPayloadBuffer + xOffset1;
 800a852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a854:	68fa      	ldr	r2, [r7, #12]
 800a856:	4413      	add	r3, r2
 800a858:	65fb      	str	r3, [r7, #92]	; 0x5c
						pcRequestedName = ( char * ) ( pucUDPPayloadBuffer + xOffset2 );
 800a85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85c:	68fa      	ldr	r2, [r7, #12]
 800a85e:	4413      	add	r3, r2
 800a860:	663b      	str	r3, [r7, #96]	; 0x60
						pxDNSMessageHeader = ( DNSMessage_t * ) pucUDPPayloadBuffer;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	667b      	str	r3, [r7, #100]	; 0x64
 800a866:	e001      	b.n	800a86c <prvParseDNSReply+0x2ec>

					}
					else
					{
						/* Just to indicate that the message may not be answered. */
						pxNetworkBuffer = NULL;
 800a868:	2300      	movs	r3, #0
 800a86a:	64bb      	str	r3, [r7, #72]	; 0x48
					}
				}
				if( pxNetworkBuffer != NULL )
 800a86c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a86e:	2b00      	cmp	r3, #0
 800a870:	f000 80b5 	beq.w	800a9de <prvParseDNSReply+0x45e>
				{
					pxAnswer = (LLMNRAnswer_t *)pucByte;
 800a874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a876:	62fb      	str	r3, [r7, #44]	; 0x2c

					/* We leave 'usIdentifier' and 'usQuestions' untouched */
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_REPONSE );	/* Set the response flag */
 800a878:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a87a:	3302      	adds	r3, #2
 800a87c:	2280      	movs	r2, #128	; 0x80
 800a87e:	701a      	strb	r2, [r3, #0]
 800a880:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a882:	3303      	adds	r3, #3
 800a884:	2200      	movs	r2, #0
 800a886:	701a      	strb	r2, [r3, #0]
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );	/* Provide a single answer */
 800a888:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a88a:	3306      	adds	r3, #6
 800a88c:	2200      	movs	r2, #0
 800a88e:	701a      	strb	r2, [r3, #0]
 800a890:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a892:	3307      	adds	r3, #7
 800a894:	2201      	movs	r2, #1
 800a896:	701a      	strb	r2, [r3, #0]
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAuthorityRRs, 0 );	/* No authority */
 800a898:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a89a:	3308      	adds	r3, #8
 800a89c:	2200      	movs	r2, #0
 800a89e:	701a      	strb	r2, [r3, #0]
 800a8a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8a2:	3309      	adds	r3, #9
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	701a      	strb	r2, [r3, #0]
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );	/* No additional info */
 800a8a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8aa:	330a      	adds	r3, #10
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	701a      	strb	r2, [r3, #0]
 800a8b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8b2:	330b      	adds	r3, #11
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	701a      	strb	r2, [r3, #0]

					pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 800a8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ba:	22c0      	movs	r2, #192	; 0xc0
 800a8bc:	701a      	strb	r2, [r3, #0]
					pxAnswer->ucNameOffset = ( uint8_t )( pcRequestedName - ( char * ) pucUDPPayloadBuffer );
 800a8be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	1ad3      	subs	r3, r2, r3
 800a8c4:	b2da      	uxtb	r2, r3
 800a8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c8:	705a      	strb	r2, [r3, #1]

					vSetField16( pxAnswer, LLMNRAnswer_t, usType, dnsTYPE_A_HOST );	/* Type A: host */
 800a8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8cc:	3302      	adds	r3, #2
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	701a      	strb	r2, [r3, #0]
 800a8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d4:	3303      	adds	r3, #3
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	701a      	strb	r2, [r3, #0]
					vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN );	/* 1: Class IN */
 800a8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8dc:	3304      	adds	r3, #4
 800a8de:	2200      	movs	r2, #0
 800a8e0:	701a      	strb	r2, [r3, #0]
 800a8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e4:	3305      	adds	r3, #5
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	701a      	strb	r2, [r3, #0]
					vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 800a8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ec:	3306      	adds	r3, #6
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	701a      	strb	r2, [r3, #0]
 800a8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f4:	3307      	adds	r3, #7
 800a8f6:	2204      	movs	r2, #4
 800a8f8:	701a      	strb	r2, [r3, #0]
 800a8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8fc:	3308      	adds	r3, #8
 800a8fe:	2293      	movs	r2, #147	; 0x93
 800a900:	701a      	strb	r2, [r3, #0]
 800a902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a904:	3309      	adds	r3, #9
 800a906:	22e0      	movs	r2, #224	; 0xe0
 800a908:	701a      	strb	r2, [r3, #0]
					vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, 4 );
 800a90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a90c:	330a      	adds	r3, #10
 800a90e:	2200      	movs	r2, #0
 800a910:	701a      	strb	r2, [r3, #0]
 800a912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a914:	330b      	adds	r3, #11
 800a916:	2204      	movs	r2, #4
 800a918:	701a      	strb	r2, [r3, #0]
					vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( *ipLOCAL_IP_ADDRESS_POINTER ) );
 800a91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a91c:	330c      	adds	r3, #12
 800a91e:	4a33      	ldr	r2, [pc, #204]	; (800a9ec <prvParseDNSReply+0x46c>)
 800a920:	6952      	ldr	r2, [r2, #20]
 800a922:	0611      	lsls	r1, r2, #24
 800a924:	4a31      	ldr	r2, [pc, #196]	; (800a9ec <prvParseDNSReply+0x46c>)
 800a926:	6952      	ldr	r2, [r2, #20]
 800a928:	0212      	lsls	r2, r2, #8
 800a92a:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800a92e:	4311      	orrs	r1, r2
 800a930:	4a2e      	ldr	r2, [pc, #184]	; (800a9ec <prvParseDNSReply+0x46c>)
 800a932:	6952      	ldr	r2, [r2, #20]
 800a934:	0a12      	lsrs	r2, r2, #8
 800a936:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800a93a:	4311      	orrs	r1, r2
 800a93c:	4a2b      	ldr	r2, [pc, #172]	; (800a9ec <prvParseDNSReply+0x46c>)
 800a93e:	6952      	ldr	r2, [r2, #20]
 800a940:	0e12      	lsrs	r2, r2, #24
 800a942:	430a      	orrs	r2, r1
 800a944:	0e12      	lsrs	r2, r2, #24
 800a946:	b2d2      	uxtb	r2, r2
 800a948:	701a      	strb	r2, [r3, #0]
 800a94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94c:	330d      	adds	r3, #13
 800a94e:	4a27      	ldr	r2, [pc, #156]	; (800a9ec <prvParseDNSReply+0x46c>)
 800a950:	6952      	ldr	r2, [r2, #20]
 800a952:	0611      	lsls	r1, r2, #24
 800a954:	4a25      	ldr	r2, [pc, #148]	; (800a9ec <prvParseDNSReply+0x46c>)
 800a956:	6952      	ldr	r2, [r2, #20]
 800a958:	0212      	lsls	r2, r2, #8
 800a95a:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800a95e:	4311      	orrs	r1, r2
 800a960:	4a22      	ldr	r2, [pc, #136]	; (800a9ec <prvParseDNSReply+0x46c>)
 800a962:	6952      	ldr	r2, [r2, #20]
 800a964:	0a12      	lsrs	r2, r2, #8
 800a966:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800a96a:	4311      	orrs	r1, r2
 800a96c:	4a1f      	ldr	r2, [pc, #124]	; (800a9ec <prvParseDNSReply+0x46c>)
 800a96e:	6952      	ldr	r2, [r2, #20]
 800a970:	0e12      	lsrs	r2, r2, #24
 800a972:	430a      	orrs	r2, r1
 800a974:	0c12      	lsrs	r2, r2, #16
 800a976:	b2d2      	uxtb	r2, r2
 800a978:	701a      	strb	r2, [r3, #0]
 800a97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a97c:	330e      	adds	r3, #14
 800a97e:	4a1b      	ldr	r2, [pc, #108]	; (800a9ec <prvParseDNSReply+0x46c>)
 800a980:	6952      	ldr	r2, [r2, #20]
 800a982:	0611      	lsls	r1, r2, #24
 800a984:	4a19      	ldr	r2, [pc, #100]	; (800a9ec <prvParseDNSReply+0x46c>)
 800a986:	6952      	ldr	r2, [r2, #20]
 800a988:	0212      	lsls	r2, r2, #8
 800a98a:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800a98e:	4311      	orrs	r1, r2
 800a990:	4a16      	ldr	r2, [pc, #88]	; (800a9ec <prvParseDNSReply+0x46c>)
 800a992:	6952      	ldr	r2, [r2, #20]
 800a994:	0a12      	lsrs	r2, r2, #8
 800a996:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800a99a:	4311      	orrs	r1, r2
 800a99c:	4a13      	ldr	r2, [pc, #76]	; (800a9ec <prvParseDNSReply+0x46c>)
 800a99e:	6952      	ldr	r2, [r2, #20]
 800a9a0:	0e12      	lsrs	r2, r2, #24
 800a9a2:	430a      	orrs	r2, r1
 800a9a4:	0a12      	lsrs	r2, r2, #8
 800a9a6:	b2d2      	uxtb	r2, r2
 800a9a8:	701a      	strb	r2, [r3, #0]
 800a9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ac:	330f      	adds	r3, #15
 800a9ae:	4a0f      	ldr	r2, [pc, #60]	; (800a9ec <prvParseDNSReply+0x46c>)
 800a9b0:	6952      	ldr	r2, [r2, #20]
 800a9b2:	0e12      	lsrs	r2, r2, #24
 800a9b4:	b2d2      	uxtb	r2, r2
 800a9b6:	701a      	strb	r2, [r3, #0]

					usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( pucByte - pucUDPPayloadBuffer ) );
 800a9b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	1ad3      	subs	r3, r2, r3
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	3310      	adds	r3, #16
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	857b      	strh	r3, [r7, #42]	; 0x2a

					prvReplyDNSMessage( pxNetworkBuffer, usLength );
 800a9c6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a9ce:	f000 f80f 	bl	800a9f0 <prvReplyDNSMessage>

					if( pxNewBuffer != NULL )
 800a9d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d002      	beq.n	800a9de <prvParseDNSReply+0x45e>
					{
						vReleaseNetworkBufferAndDescriptor( pxNewBuffer );
 800a9d8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a9da:	f005 feab 	bl	8010734 <vReleaseNetworkBufferAndDescriptor>
			}
		}
#endif /* ipconfigUSE_LLMNR == 1 */
	}

	return ulIPAddress;
 800a9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3768      	adds	r7, #104	; 0x68
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	0801125c 	.word	0x0801125c
 800a9ec:	200001b0 	.word	0x200001b0

0800a9f0 <prvReplyDNSMessage>:
/*-----------------------------------------------------------*/

#if( ( ipconfigUSE_NBNS == 1 ) || ( ipconfigUSE_LLMNR == 1 ) )

	static void prvReplyDNSMessage( NetworkBufferDescriptor_t *pxNetworkBuffer, BaseType_t lNetLength )
	{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b086      	sub	sp, #24
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	6039      	str	r1, [r7, #0]
	UDPPacket_t *pxUDPPacket;
	IPHeader_t *pxIPHeader;
	UDPHeader_t *pxUDPHeader;

		pxUDPPacket = (UDPPacket_t *) pxNetworkBuffer->pucEthernetBuffer;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	699b      	ldr	r3, [r3, #24]
 800a9fe:	617b      	str	r3, [r7, #20]
		pxIPHeader = &pxUDPPacket->xIPHeader;
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	330e      	adds	r3, #14
 800aa04:	613b      	str	r3, [r7, #16]
		pxUDPHeader = &pxUDPPacket->xUDPHeader;
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	3322      	adds	r3, #34	; 0x22
 800aa0a:	60fb      	str	r3, [r7, #12]
		/* HT: started using defines like 'ipSIZE_OF_xxx' */
		pxIPHeader->usLength               = FreeRTOS_htons( lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	331c      	adds	r3, #28
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	021b      	lsls	r3, r3, #8
 800aa16:	b29a      	uxth	r2, r3
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	331c      	adds	r3, #28
 800aa1c:	0a1b      	lsrs	r3, r3, #8
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	4313      	orrs	r3, r2
 800aa22:	b29a      	uxth	r2, r3
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	805a      	strh	r2, [r3, #2]
		/* HT:endian: should not be translated, copying from packet to packet */
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	68da      	ldr	r2, [r3, #12]
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	611a      	str	r2, [r3, #16]
		pxIPHeader->ulSourceIPAddress      = *ipLOCAL_IP_ADDRESS_POINTER;
 800aa30:	4b36      	ldr	r3, [pc, #216]	; (800ab0c <prvReplyDNSMessage+0x11c>)
 800aa32:	695a      	ldr	r2, [r3, #20]
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	60da      	str	r2, [r3, #12]
		pxIPHeader->ucTimeToLive           = ipconfigUDP_TIME_TO_LIVE;
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	2280      	movs	r2, #128	; 0x80
 800aa3c:	721a      	strb	r2, [r3, #8]
		pxIPHeader->usIdentification       = FreeRTOS_htons( usPacketIdentifier );
 800aa3e:	4b34      	ldr	r3, [pc, #208]	; (800ab10 <prvReplyDNSMessage+0x120>)
 800aa40:	881b      	ldrh	r3, [r3, #0]
 800aa42:	021b      	lsls	r3, r3, #8
 800aa44:	b21a      	sxth	r2, r3
 800aa46:	4b32      	ldr	r3, [pc, #200]	; (800ab10 <prvReplyDNSMessage+0x120>)
 800aa48:	881b      	ldrh	r3, [r3, #0]
 800aa4a:	0a1b      	lsrs	r3, r3, #8
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	b21b      	sxth	r3, r3
 800aa50:	4313      	orrs	r3, r2
 800aa52:	b21b      	sxth	r3, r3
 800aa54:	b29a      	uxth	r2, r3
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	809a      	strh	r2, [r3, #4]
		usPacketIdentifier++;
 800aa5a:	4b2d      	ldr	r3, [pc, #180]	; (800ab10 <prvReplyDNSMessage+0x120>)
 800aa5c:	881b      	ldrh	r3, [r3, #0]
 800aa5e:	3301      	adds	r3, #1
 800aa60:	b29a      	uxth	r2, r3
 800aa62:	4b2b      	ldr	r3, [pc, #172]	; (800ab10 <prvReplyDNSMessage+0x120>)
 800aa64:	801a      	strh	r2, [r3, #0]
		pxUDPHeader->usLength              = FreeRTOS_htons( lNetLength + ipSIZE_OF_UDP_HEADER );
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	3308      	adds	r3, #8
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	021b      	lsls	r3, r3, #8
 800aa70:	b29a      	uxth	r2, r3
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	3308      	adds	r3, #8
 800aa76:	0a1b      	lsrs	r3, r3, #8
 800aa78:	b29b      	uxth	r3, r3
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	b29a      	uxth	r2, r3
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	809a      	strh	r2, [r3, #4]
		vFlip_16( pxUDPPacket->xUDPHeader.usSourcePort, pxUDPPacket->xUDPHeader.usDestinationPort );
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800aa88:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800aa8c:	021b      	lsls	r3, r3, #8
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	817b      	strh	r3, [r7, #10]
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800aa96:	b29a      	uxth	r2, r3
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	845a      	strh	r2, [r3, #34]	; 0x22
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	897a      	ldrh	r2, [r7, #10]
 800aaa0:	849a      	strh	r2, [r3, #36]	; 0x24

		#if( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
		{
			/* calculate the IP header checksum */
			pxIPHeader->usHeaderChecksum       = 0x00;
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	729a      	strb	r2, [r3, #10]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	72da      	strb	r2, [r3, #11]
			pxIPHeader->usHeaderChecksum       = usGenerateChecksum( 0UL, ( uint8_t * ) &( pxIPHeader->ucVersionHeaderLength ), ipSIZE_OF_IPv4_HEADER );
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	2214      	movs	r2, #20
 800aab0:	4619      	mov	r1, r3
 800aab2:	2000      	movs	r0, #0
 800aab4:	f000 ffd8 	bl	800ba68 <usGenerateChecksum>
 800aab8:	4603      	mov	r3, r0
 800aaba:	461a      	mov	r2, r3
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	815a      	strh	r2, [r3, #10]
			pxIPHeader->usHeaderChecksum       = ~FreeRTOS_htons( pxIPHeader->usHeaderChecksum );
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	895b      	ldrh	r3, [r3, #10]
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	021b      	lsls	r3, r3, #8
 800aac8:	b21a      	sxth	r2, r3
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	895b      	ldrh	r3, [r3, #10]
 800aace:	b29b      	uxth	r3, r3
 800aad0:	0a1b      	lsrs	r3, r3, #8
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	b21b      	sxth	r3, r3
 800aad6:	4313      	orrs	r3, r2
 800aad8:	b21b      	sxth	r3, r3
 800aada:	b29b      	uxth	r3, r3
 800aadc:	43db      	mvns	r3, r3
 800aade:	b29a      	uxth	r2, r3
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	815a      	strh	r2, [r3, #10]

			/* calculate the UDP checksum for outgoing package */
			usGenerateProtocolChecksum( ( uint8_t* ) pxUDPPacket, lNetLength, pdTRUE );
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	2201      	movs	r2, #1
 800aae8:	4619      	mov	r1, r3
 800aaea:	6978      	ldr	r0, [r7, #20]
 800aaec:	f000 fed4 	bl	800b898 <usGenerateProtocolChecksum>
		}
		#endif

		/* Important: tell NIC driver how many bytes must be sent */
		pxNetworkBuffer->xDataLength = ( size_t ) ( lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER );
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	61da      	str	r2, [r3, #28]

		/* This function will fill in the eth addresses and send the packet */
		vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 800aafa:	2100      	movs	r1, #0
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f001 f887 	bl	800bc10 <vReturnEthernetFrame>
	}
 800ab02:	bf00      	nop
 800ab04:	3718      	adds	r7, #24
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	200001b0 	.word	0x200001b0
 800ab10:	20004e5c 	.word	0x20004e5c

0800ab14 <prvProcessDNSCache>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_DNS_CACHE == 1 )

	static void prvProcessDNSCache( const char *pcName, uint32_t *pulIP, uint32_t ulTTL, BaseType_t xLookUp )
	{
 800ab14:	b590      	push	{r4, r7, lr}
 800ab16:	b089      	sub	sp, #36	; 0x24
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	607a      	str	r2, [r7, #4]
 800ab20:	603b      	str	r3, [r7, #0]
	BaseType_t x;
	BaseType_t xFound = pdFALSE;
 800ab22:	2300      	movs	r3, #0
 800ab24:	61bb      	str	r3, [r7, #24]
    uint32_t ulCurrentTimeSeconds = 
        xTaskGetTickCount( ) / portTICK_PERIOD_MS / 1000;
 800ab26:	f7fe fb15 	bl	8009154 <xTaskGetTickCount>
 800ab2a:	4602      	mov	r2, r0
    uint32_t ulCurrentTimeSeconds = 
 800ab2c:	4b78      	ldr	r3, [pc, #480]	; (800ad10 <prvProcessDNSCache+0x1fc>)
 800ab2e:	fba3 2302 	umull	r2, r3, r3, r2
 800ab32:	099b      	lsrs	r3, r3, #6
 800ab34:	617b      	str	r3, [r7, #20]
	static BaseType_t xFreeEntry = 0;

		/* For each entry in the DNS cache table. */
		for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 800ab36:	2300      	movs	r3, #0
 800ab38:	61fb      	str	r3, [r7, #28]
 800ab3a:	e093      	b.n	800ac64 <prvProcessDNSCache+0x150>
		{
			if( xDNSCache[ x ].pcName[ 0 ] == 0 )
 800ab3c:	4975      	ldr	r1, [pc, #468]	; (800ad14 <prvProcessDNSCache+0x200>)
 800ab3e:	69fa      	ldr	r2, [r7, #28]
 800ab40:	4613      	mov	r3, r2
 800ab42:	00db      	lsls	r3, r3, #3
 800ab44:	1a9b      	subs	r3, r3, r2
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	440b      	add	r3, r1
 800ab4a:	3304      	adds	r3, #4
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	f000 808d 	beq.w	800ac6e <prvProcessDNSCache+0x15a>
			{
				break;
			}

			if( 0 == strcmp( xDNSCache[ x ].pcName, pcName ) )
 800ab54:	69fa      	ldr	r2, [r7, #28]
 800ab56:	4613      	mov	r3, r2
 800ab58:	00db      	lsls	r3, r3, #3
 800ab5a:	1a9b      	subs	r3, r3, r2
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	4a6d      	ldr	r2, [pc, #436]	; (800ad14 <prvProcessDNSCache+0x200>)
 800ab60:	4413      	add	r3, r2
 800ab62:	3304      	adds	r3, #4
 800ab64:	68f9      	ldr	r1, [r7, #12]
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7f5 fb3a 	bl	80001e0 <strcmp>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d175      	bne.n	800ac5e <prvProcessDNSCache+0x14a>
			{
				/* Is this function called for a lookup or to add/update an IP address? */
				if( xLookUp != pdFALSE )
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d051      	beq.n	800ac1c <prvProcessDNSCache+0x108>
				{
                    /* Confirm that the record is still fresh. */
                    if( ulCurrentTimeSeconds < 
                            xDNSCache[ x ].ulTimeWhenAddedInSeconds + 
 800ab78:	4966      	ldr	r1, [pc, #408]	; (800ad14 <prvProcessDNSCache+0x200>)
 800ab7a:	69fa      	ldr	r2, [r7, #28]
 800ab7c:	4613      	mov	r3, r2
 800ab7e:	00db      	lsls	r3, r3, #3
 800ab80:	1a9b      	subs	r3, r3, r2
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	440b      	add	r3, r1
 800ab86:	3318      	adds	r3, #24
 800ab88:	6819      	ldr	r1, [r3, #0]
                            FreeRTOS_ntohl( xDNSCache[ x ].ulTTL ) )
 800ab8a:	4862      	ldr	r0, [pc, #392]	; (800ad14 <prvProcessDNSCache+0x200>)
 800ab8c:	69fa      	ldr	r2, [r7, #28]
 800ab8e:	4613      	mov	r3, r2
 800ab90:	00db      	lsls	r3, r3, #3
 800ab92:	1a9b      	subs	r3, r3, r2
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	4403      	add	r3, r0
 800ab98:	3314      	adds	r3, #20
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	0618      	lsls	r0, r3, #24
 800ab9e:	4c5d      	ldr	r4, [pc, #372]	; (800ad14 <prvProcessDNSCache+0x200>)
 800aba0:	69fa      	ldr	r2, [r7, #28]
 800aba2:	4613      	mov	r3, r2
 800aba4:	00db      	lsls	r3, r3, #3
 800aba6:	1a9b      	subs	r3, r3, r2
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	4423      	add	r3, r4
 800abac:	3314      	adds	r3, #20
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	021b      	lsls	r3, r3, #8
 800abb2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800abb6:	4318      	orrs	r0, r3
 800abb8:	4c56      	ldr	r4, [pc, #344]	; (800ad14 <prvProcessDNSCache+0x200>)
 800abba:	69fa      	ldr	r2, [r7, #28]
 800abbc:	4613      	mov	r3, r2
 800abbe:	00db      	lsls	r3, r3, #3
 800abc0:	1a9b      	subs	r3, r3, r2
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	4423      	add	r3, r4
 800abc6:	3314      	adds	r3, #20
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	0a1b      	lsrs	r3, r3, #8
 800abcc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800abd0:	4318      	orrs	r0, r3
 800abd2:	4c50      	ldr	r4, [pc, #320]	; (800ad14 <prvProcessDNSCache+0x200>)
 800abd4:	69fa      	ldr	r2, [r7, #28]
 800abd6:	4613      	mov	r3, r2
 800abd8:	00db      	lsls	r3, r3, #3
 800abda:	1a9b      	subs	r3, r3, r2
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	4423      	add	r3, r4
 800abe0:	3314      	adds	r3, #20
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	0e1b      	lsrs	r3, r3, #24
 800abe6:	4303      	orrs	r3, r0
                            xDNSCache[ x ].ulTimeWhenAddedInSeconds + 
 800abe8:	18ca      	adds	r2, r1, r3
                    if( ulCurrentTimeSeconds < 
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	429a      	cmp	r2, r3
 800abee:	d90a      	bls.n	800ac06 <prvProcessDNSCache+0xf2>
                    {
                        *pulIP = xDNSCache[ x ].ulIPAddress;
 800abf0:	4948      	ldr	r1, [pc, #288]	; (800ad14 <prvProcessDNSCache+0x200>)
 800abf2:	69fa      	ldr	r2, [r7, #28]
 800abf4:	4613      	mov	r3, r2
 800abf6:	00db      	lsls	r3, r3, #3
 800abf8:	1a9b      	subs	r3, r3, r2
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	440b      	add	r3, r1
 800abfe:	681a      	ldr	r2, [r3, #0]
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	601a      	str	r2, [r3, #0]
 800ac04:	e028      	b.n	800ac58 <prvProcessDNSCache+0x144>
                    }
                    else
                    {
                        /* Age out the old cached record. */
                        xDNSCache[ x ].pcName[ 0 ] = 0;
 800ac06:	4943      	ldr	r1, [pc, #268]	; (800ad14 <prvProcessDNSCache+0x200>)
 800ac08:	69fa      	ldr	r2, [r7, #28]
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	00db      	lsls	r3, r3, #3
 800ac0e:	1a9b      	subs	r3, r3, r2
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	440b      	add	r3, r1
 800ac14:	3304      	adds	r3, #4
 800ac16:	2200      	movs	r2, #0
 800ac18:	701a      	strb	r2, [r3, #0]
 800ac1a:	e01d      	b.n	800ac58 <prvProcessDNSCache+0x144>
                    }
				}
				else
				{
					xDNSCache[ x ].ulIPAddress = *pulIP;
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	6819      	ldr	r1, [r3, #0]
 800ac20:	483c      	ldr	r0, [pc, #240]	; (800ad14 <prvProcessDNSCache+0x200>)
 800ac22:	69fa      	ldr	r2, [r7, #28]
 800ac24:	4613      	mov	r3, r2
 800ac26:	00db      	lsls	r3, r3, #3
 800ac28:	1a9b      	subs	r3, r3, r2
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	4403      	add	r3, r0
 800ac2e:	6019      	str	r1, [r3, #0]
                    xDNSCache[ x ].ulTTL = ulTTL;
 800ac30:	4938      	ldr	r1, [pc, #224]	; (800ad14 <prvProcessDNSCache+0x200>)
 800ac32:	69fa      	ldr	r2, [r7, #28]
 800ac34:	4613      	mov	r3, r2
 800ac36:	00db      	lsls	r3, r3, #3
 800ac38:	1a9b      	subs	r3, r3, r2
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	440b      	add	r3, r1
 800ac3e:	3314      	adds	r3, #20
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	601a      	str	r2, [r3, #0]
                    xDNSCache[ x ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 800ac44:	4933      	ldr	r1, [pc, #204]	; (800ad14 <prvProcessDNSCache+0x200>)
 800ac46:	69fa      	ldr	r2, [r7, #28]
 800ac48:	4613      	mov	r3, r2
 800ac4a:	00db      	lsls	r3, r3, #3
 800ac4c:	1a9b      	subs	r3, r3, r2
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	440b      	add	r3, r1
 800ac52:	3318      	adds	r3, #24
 800ac54:	697a      	ldr	r2, [r7, #20]
 800ac56:	601a      	str	r2, [r3, #0]
				}

				xFound = pdTRUE;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	61bb      	str	r3, [r7, #24]
				break;
 800ac5c:	e008      	b.n	800ac70 <prvProcessDNSCache+0x15c>
		for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 800ac5e:	69fb      	ldr	r3, [r7, #28]
 800ac60:	3301      	adds	r3, #1
 800ac62:	61fb      	str	r3, [r7, #28]
 800ac64:	69fb      	ldr	r3, [r7, #28]
 800ac66:	2b03      	cmp	r3, #3
 800ac68:	f77f af68 	ble.w	800ab3c <prvProcessDNSCache+0x28>
 800ac6c:	e000      	b.n	800ac70 <prvProcessDNSCache+0x15c>
				break;
 800ac6e:	bf00      	nop
			}
		}

		if( xFound == pdFALSE )
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d146      	bne.n	800ad04 <prvProcessDNSCache+0x1f0>
		{
			if( xLookUp != pdFALSE )
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d003      	beq.n	800ac84 <prvProcessDNSCache+0x170>
			{
				*pulIP = 0;
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	601a      	str	r2, [r3, #0]
 800ac82:	e03f      	b.n	800ad04 <prvProcessDNSCache+0x1f0>
			}
			else
			{
				/* Add or update the item. */
                if( strlen( pcName ) < ipconfigDNS_CACHE_NAME_LENGTH )
 800ac84:	68f8      	ldr	r0, [r7, #12]
 800ac86:	f7f5 fab5 	bl	80001f4 <strlen>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b0f      	cmp	r3, #15
 800ac8e:	d839      	bhi.n	800ad04 <prvProcessDNSCache+0x1f0>
                {
                    strcpy( xDNSCache[ xFreeEntry ].pcName, pcName );
 800ac90:	4b21      	ldr	r3, [pc, #132]	; (800ad18 <prvProcessDNSCache+0x204>)
 800ac92:	681a      	ldr	r2, [r3, #0]
 800ac94:	4613      	mov	r3, r2
 800ac96:	00db      	lsls	r3, r3, #3
 800ac98:	1a9b      	subs	r3, r3, r2
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	4a1d      	ldr	r2, [pc, #116]	; (800ad14 <prvProcessDNSCache+0x200>)
 800ac9e:	4413      	add	r3, r2
 800aca0:	3304      	adds	r3, #4
 800aca2:	68f9      	ldr	r1, [r7, #12]
 800aca4:	4618      	mov	r0, r3
 800aca6:	f006 f99b 	bl	8010fe0 <strcpy>

                    xDNSCache[ xFreeEntry ].ulIPAddress = *pulIP;
 800acaa:	4b1b      	ldr	r3, [pc, #108]	; (800ad18 <prvProcessDNSCache+0x204>)
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	6819      	ldr	r1, [r3, #0]
 800acb2:	4818      	ldr	r0, [pc, #96]	; (800ad14 <prvProcessDNSCache+0x200>)
 800acb4:	4613      	mov	r3, r2
 800acb6:	00db      	lsls	r3, r3, #3
 800acb8:	1a9b      	subs	r3, r3, r2
 800acba:	009b      	lsls	r3, r3, #2
 800acbc:	4403      	add	r3, r0
 800acbe:	6019      	str	r1, [r3, #0]
                    xDNSCache[ xFreeEntry ].ulTTL = ulTTL;
 800acc0:	4b15      	ldr	r3, [pc, #84]	; (800ad18 <prvProcessDNSCache+0x204>)
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	4913      	ldr	r1, [pc, #76]	; (800ad14 <prvProcessDNSCache+0x200>)
 800acc6:	4613      	mov	r3, r2
 800acc8:	00db      	lsls	r3, r3, #3
 800acca:	1a9b      	subs	r3, r3, r2
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	440b      	add	r3, r1
 800acd0:	3314      	adds	r3, #20
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	601a      	str	r2, [r3, #0]
                    xDNSCache[ xFreeEntry ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 800acd6:	4b10      	ldr	r3, [pc, #64]	; (800ad18 <prvProcessDNSCache+0x204>)
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	490e      	ldr	r1, [pc, #56]	; (800ad14 <prvProcessDNSCache+0x200>)
 800acdc:	4613      	mov	r3, r2
 800acde:	00db      	lsls	r3, r3, #3
 800ace0:	1a9b      	subs	r3, r3, r2
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	440b      	add	r3, r1
 800ace6:	3318      	adds	r3, #24
 800ace8:	697a      	ldr	r2, [r7, #20]
 800acea:	601a      	str	r2, [r3, #0]

                    xFreeEntry++;
 800acec:	4b0a      	ldr	r3, [pc, #40]	; (800ad18 <prvProcessDNSCache+0x204>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	3301      	adds	r3, #1
 800acf2:	4a09      	ldr	r2, [pc, #36]	; (800ad18 <prvProcessDNSCache+0x204>)
 800acf4:	6013      	str	r3, [r2, #0]
                    if( xFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 800acf6:	4b08      	ldr	r3, [pc, #32]	; (800ad18 <prvProcessDNSCache+0x204>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	2b04      	cmp	r3, #4
 800acfc:	d102      	bne.n	800ad04 <prvProcessDNSCache+0x1f0>
                    {
                        xFreeEntry = 0;
 800acfe:	4b06      	ldr	r3, [pc, #24]	; (800ad18 <prvProcessDNSCache+0x204>)
 800ad00:	2200      	movs	r2, #0
 800ad02:	601a      	str	r2, [r3, #0]
                    }
                }
			}
		}

		if( ( xLookUp == 0 ) || ( *pulIP != 0 ) )
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	2b00      	cmp	r3, #0
		{
			FreeRTOS_debug_printf( ( "prvProcessDNSCache: %s: '%s' @ %lxip\n", xLookUp ? "look-up" : "add", pcName, FreeRTOS_ntohl( *pulIP ) ) );
		}
	}
 800ad08:	bf00      	nop
 800ad0a:	3724      	adds	r7, #36	; 0x24
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd90      	pop	{r4, r7, pc}
 800ad10:	10624dd3 	.word	0x10624dd3
 800ad14:	20004de4 	.word	0x20004de4
 800ad18:	20004e54 	.word	0x20004e54

0800ad1c <prvIPTask>:
#endif

/*-----------------------------------------------------------*/

static void prvIPTask( void *pvParameters )
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b088      	sub	sp, #32
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]

	/* Generate a dummy message to say that the network connection has gone
	down.  This will cause this task to initialise the network interface.  After
	this it is the responsibility of the network interface hardware driver to
	send this message if a previously connected network is disconnected. */
	FreeRTOS_NetworkDown();
 800ad24:	f000 f998 	bl	800b058 <FreeRTOS_NetworkDown>

	#if( ipconfigUSE_TCP == 1 )
	{
		/* Initialise the TCP timer. */
		prvIPTimerReload( &xTCPTimer, pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 800ad28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ad2c:	484e      	ldr	r0, [pc, #312]	; (800ae68 <prvIPTask+0x14c>)
 800ad2e:	f000 f953 	bl	800afd8 <prvIPTimerReload>
	}
	#endif

	/* Initialisation is complete and events can now be processed. */
	xIPTaskInitialised = pdTRUE;
 800ad32:	4b4e      	ldr	r3, [pc, #312]	; (800ae6c <prvIPTask+0x150>)
 800ad34:	2201      	movs	r2, #1
 800ad36:	601a      	str	r2, [r3, #0]
	{
		ipconfigWATCHDOG_TIMER();

		/* Check the ARP, DHCP and TCP timers to see if there is any periodic
		or timeout processing to perform. */
		prvCheckNetworkTimers();
 800ad38:	f000 f8ea 	bl	800af10 <prvCheckNetworkTimers>

		/* Calculate the acceptable maximum sleep time. */
		xNextIPSleep = prvCalculateSleepTime();
 800ad3c:	f000 f8c0 	bl	800aec0 <prvCalculateSleepTime>
 800ad40:	61f8      	str	r0, [r7, #28]

		/* Wait until there is something to do. If the following call exits
		 * due to a time out rather than a message being received, set a
		 * 'NoEvent' value. */
		if ( xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep ) == pdFALSE ) {
 800ad42:	4b4b      	ldr	r3, [pc, #300]	; (800ae70 <prvIPTask+0x154>)
 800ad44:	6818      	ldr	r0, [r3, #0]
 800ad46:	f107 0110 	add.w	r1, r7, #16
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	69fa      	ldr	r2, [r7, #28]
 800ad4e:	f7fd fcfd 	bl	800874c <xQueueGenericReceive>
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d101      	bne.n	800ad5c <prvIPTask+0x40>
			xReceivedEvent.eEventType = eNoEvent;
 800ad58:	23ff      	movs	r3, #255	; 0xff
 800ad5a:	743b      	strb	r3, [r7, #16]
		}
		#endif /* ipconfigCHECK_IP_QUEUE_SPACE */

		iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );

		switch( xReceivedEvent.eEventType )
 800ad5c:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800ad60:	2b0b      	cmp	r3, #11
 800ad62:	d875      	bhi.n	800ae50 <prvIPTask+0x134>
 800ad64:	a201      	add	r2, pc, #4	; (adr r2, 800ad6c <prvIPTask+0x50>)
 800ad66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad6a:	bf00      	nop
 800ad6c:	0800ad9d 	.word	0x0800ad9d
 800ad70:	0800ada9 	.word	0x0800ada9
 800ad74:	0800adb3 	.word	0x0800adb3
 800ad78:	0800ae0d 	.word	0x0800ae0d
 800ad7c:	0800ae51 	.word	0x0800ae51
 800ad80:	0800ae21 	.word	0x0800ae21
 800ad84:	0800ae2d 	.word	0x0800ae2d
 800ad88:	0800ae51 	.word	0x0800ae51
 800ad8c:	0800adb9 	.word	0x0800adb9
 800ad90:	0800ae03 	.word	0x0800ae03
 800ad94:	0800ae17 	.word	0x0800ae17
 800ad98:	0800ae51 	.word	0x0800ae51
		{
			case eNetworkDownEvent :
				/* Attempt to establish a connection. */
				xNetworkUp = pdFALSE;
 800ad9c:	4b35      	ldr	r3, [pc, #212]	; (800ae74 <prvIPTask+0x158>)
 800ad9e:	2200      	movs	r2, #0
 800ada0:	601a      	str	r2, [r3, #0]
				prvProcessNetworkDownEvent();
 800ada2:	f000 fb47 	bl	800b434 <prvProcessNetworkDownEvent>
				break;
 800ada6:	e056      	b.n	800ae56 <prvIPTask+0x13a>

			case eNetworkRxEvent:
				/* The network hardware driver has received a new packet.  A
				pointer to the received buffer is located in the pvData member
				of the received event structure. */
				prvHandleEthernetPacket( ( NetworkBufferDescriptor_t * ) ( xReceivedEvent.pvData ) );
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	4618      	mov	r0, r3
 800adac:	f000 f87c 	bl	800aea8 <prvHandleEthernetPacket>
				break;
 800adb0:	e051      	b.n	800ae56 <prvIPTask+0x13a>

			case eARPTimerEvent :
				/* The ARP timer has expired, process the ARP cache. */
				vARPAgeCache();
 800adb2:	f7ff f9fb 	bl	800a1ac <vARPAgeCache>
				break;
 800adb6:	e04e      	b.n	800ae56 <prvIPTask+0x13a>
				/* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
				to a port. The port number is communicated in the socket field
				usLocalPort. vSocketBind() will actually bind the socket and the
				API will unblock as soon as the eSOCKET_BOUND event is
				triggered. */
				pxSocket = ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData );
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	61bb      	str	r3, [r7, #24]
				xAddress.sin_addr = 0u;	/* For the moment. */
 800adbc:	2300      	movs	r3, #0
 800adbe:	60fb      	str	r3, [r7, #12]
				xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 800adc0:	69bb      	ldr	r3, [r7, #24]
 800adc2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800adc4:	021b      	lsls	r3, r3, #8
 800adc6:	b21a      	sxth	r2, r3
 800adc8:	69bb      	ldr	r3, [r7, #24]
 800adca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800adcc:	0a1b      	lsrs	r3, r3, #8
 800adce:	b29b      	uxth	r3, r3
 800add0:	b21b      	sxth	r3, r3
 800add2:	4313      	orrs	r3, r2
 800add4:	b21b      	sxth	r3, r3
 800add6:	b29b      	uxth	r3, r3
 800add8:	817b      	strh	r3, [r7, #10]
				pxSocket->usLocalPort = 0u;
 800adda:	69bb      	ldr	r3, [r7, #24]
 800addc:	2200      	movs	r2, #0
 800adde:	849a      	strh	r2, [r3, #36]	; 0x24
				vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 800ade0:	f107 0108 	add.w	r1, r7, #8
 800ade4:	2300      	movs	r3, #0
 800ade6:	2208      	movs	r2, #8
 800ade8:	69b8      	ldr	r0, [r7, #24]
 800adea:	f001 f90b 	bl	800c004 <vSocketBind>

				/* Before 'eSocketBindEvent' was sent it was tested that
				( xEventGroup != NULL ) so it can be used now to wake up the
				user. */
				pxSocket->xEventBits |= eSOCKET_BOUND;
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f043 0210 	orr.w	r2, r3, #16
 800adf6:	69bb      	ldr	r3, [r7, #24]
 800adf8:	601a      	str	r2, [r3, #0]
				vSocketWakeUpUser( pxSocket );
 800adfa:	69b8      	ldr	r0, [r7, #24]
 800adfc:	f001 fb08 	bl	800c410 <vSocketWakeUpUser>
				break;
 800ae00:	e029      	b.n	800ae56 <prvIPTask+0x13a>
			case eSocketCloseEvent :
				/* The user API FreeRTOS_closesocket() has sent a message to the
				IP-task to actually close a socket. This is handled in
				vSocketClose().  As the socket gets closed, there is no way to
				report back to the API, so the API won't wait for the result */
				vSocketClose( ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData ) );
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	4618      	mov	r0, r3
 800ae06:	f001 f9bb 	bl	800c180 <vSocketClose>
				break;
 800ae0a:	e024      	b.n	800ae56 <prvIPTask+0x13a>

			case eStackTxEvent :
				/* The network stack has generated a packet to send.  A
				pointer to the generated buffer is located in the pvData
				member of the received event structure. */
				vProcessGeneratedUDPPacket( ( NetworkBufferDescriptor_t * ) ( xReceivedEvent.pvData ) );
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f005 fa38 	bl	8010284 <vProcessGeneratedUDPPacket>
				break;
 800ae14:	e01f      	b.n	800ae56 <prvIPTask+0x13a>
				/* FreeRTOS_select() has got unblocked by a socket event,
				vSocketSelect() will check which sockets actually have an event
				and update the socket field xSocketBits. */
				#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
				{
					vSocketSelect( ( SocketSelect_t * ) ( xReceivedEvent.pvData ) );
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f001 fcf5 	bl	800c808 <vSocketSelect>
				}
				#endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
				break;
 800ae1e:	e01a      	b.n	800ae56 <prvIPTask+0x13a>
			case eTCPTimerEvent :
				#if( ipconfigUSE_TCP == 1 )
				{
					/* Simply mark the TCP timer as expired so it gets processed
					the next time prvCheckNetworkTimers() is called. */
					xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 800ae20:	4a11      	ldr	r2, [pc, #68]	; (800ae68 <prvIPTask+0x14c>)
 800ae22:	7813      	ldrb	r3, [r2, #0]
 800ae24:	f043 0302 	orr.w	r3, r3, #2
 800ae28:	7013      	strb	r3, [r2, #0]
				}
				#endif /* ipconfigUSE_TCP */
				break;
 800ae2a:	e014      	b.n	800ae56 <prvIPTask+0x13a>
				/* The API FreeRTOS_accept() was called, the IP-task will now
				check if the listening socket (communicated in pvData) actually
				received a new connection. */
				#if( ipconfigUSE_TCP == 1 )
				{
					pxSocket = ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData );
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	61bb      	str	r3, [r7, #24]

					if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 800ae30:	69b8      	ldr	r0, [r7, #24]
 800ae32:	f004 fa27 	bl	800f284 <xTCPCheckNewClient>
 800ae36:	4603      	mov	r3, r0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d00b      	beq.n	800ae54 <prvIPTask+0x138>
					{
						pxSocket->xEventBits |= eSOCKET_ACCEPT;
 800ae3c:	69bb      	ldr	r3, [r7, #24]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f043 0204 	orr.w	r2, r3, #4
 800ae44:	69bb      	ldr	r3, [r7, #24]
 800ae46:	601a      	str	r2, [r3, #0]
						vSocketWakeUpUser( pxSocket );
 800ae48:	69b8      	ldr	r0, [r7, #24]
 800ae4a:	f001 fae1 	bl	800c410 <vSocketWakeUpUser>
					}
				}
				#endif /* ipconfigUSE_TCP */
				break;
 800ae4e:	e001      	b.n	800ae54 <prvIPTask+0x138>
				#endif /* ipconfigUSE_TCP */
				break;

			default :
				/* Should not get here. */
				break;
 800ae50:	bf00      	nop
 800ae52:	e000      	b.n	800ae56 <prvIPTask+0x13a>
				break;
 800ae54:	bf00      	nop
		}

		if( xNetworkDownEventPending != pdFALSE )
 800ae56:	4b08      	ldr	r3, [pc, #32]	; (800ae78 <prvIPTask+0x15c>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	f43f af6c 	beq.w	800ad38 <prvIPTask+0x1c>
		{
			/* A network down event could not be posted to the network event
			queue because the queue was full.  Try posting again. */
			FreeRTOS_NetworkDown();
 800ae60:	f000 f8fa 	bl	800b058 <FreeRTOS_NetworkDown>
		prvCheckNetworkTimers();
 800ae64:	e768      	b.n	800ad38 <prvIPTask+0x1c>
 800ae66:	bf00      	nop
 800ae68:	20004eac 	.word	0x20004eac
 800ae6c:	20004ec0 	.word	0x20004ec0
 800ae70:	20004e58 	.word	0x20004e58
 800ae74:	20004e94 	.word	0x20004e94
 800ae78:	20004e88 	.word	0x20004e88

0800ae7c <xIsCallingFromIPTask>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xIsCallingFromIPTask( void )
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b082      	sub	sp, #8
 800ae80:	af00      	add	r7, sp, #0
BaseType_t xReturn;

	if( xTaskGetCurrentTaskHandle() == xIPTaskHandle )
 800ae82:	f7fe fcf7 	bl	8009874 <xTaskGetCurrentTaskHandle>
 800ae86:	4602      	mov	r2, r0
 800ae88:	4b06      	ldr	r3, [pc, #24]	; (800aea4 <xIsCallingFromIPTask+0x28>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d102      	bne.n	800ae96 <xIsCallingFromIPTask+0x1a>
	{
		xReturn = pdTRUE;
 800ae90:	2301      	movs	r3, #1
 800ae92:	607b      	str	r3, [r7, #4]
 800ae94:	e001      	b.n	800ae9a <xIsCallingFromIPTask+0x1e>
	}
	else
	{
		xReturn = pdFALSE;
 800ae96:	2300      	movs	r3, #0
 800ae98:	607b      	str	r3, [r7, #4]
	}

	return xReturn;
 800ae9a:	687b      	ldr	r3, [r7, #4]
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3708      	adds	r7, #8
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	20004e8c 	.word	0x20004e8c

0800aea8 <prvHandleEthernetPacket>:
/*-----------------------------------------------------------*/

static void prvHandleEthernetPacket( NetworkBufferDescriptor_t *pxBuffer )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
	#if( ipconfigUSE_LINKED_RX_MESSAGES == 0 )
	{
		/* When ipconfigUSE_LINKED_RX_MESSAGES is not set to 0 then only one
		buffer will be sent at a time.  This is the default way for +TCP to pass
		messages from the MAC to the TCP/IP stack. */
		prvProcessEthernetPacket( pxBuffer );
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f000 fae9 	bl	800b488 <prvProcessEthernetPacket>

		/* While there is another packet in the chain. */
		} while( pxBuffer != NULL );
	}
	#endif /* ipconfigUSE_LINKED_RX_MESSAGES */
}
 800aeb6:	bf00      	nop
 800aeb8:	3708      	adds	r7, #8
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
	...

0800aec0 <prvCalculateSleepTime>:
/*-----------------------------------------------------------*/

static TickType_t prvCalculateSleepTime( void )
{
 800aec0:	b480      	push	{r7}
 800aec2:	b083      	sub	sp, #12
 800aec4:	af00      	add	r7, sp, #0
TickType_t xMaximumSleepTime;

	/* Start with the maximum sleep time, then check this against the remaining
	time in any other timers that are active. */
	xMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 800aec6:	f242 7310 	movw	r3, #10000	; 0x2710
 800aeca:	607b      	str	r3, [r7, #4]

	if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 800aecc:	4b0e      	ldr	r3, [pc, #56]	; (800af08 <prvCalculateSleepTime+0x48>)
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	f003 0301 	and.w	r3, r3, #1
 800aed4:	b2db      	uxtb	r3, r3
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d007      	beq.n	800aeea <prvCalculateSleepTime+0x2a>
	{
		if( xARPTimer.ulRemainingTime < xMaximumSleepTime )
 800aeda:	4b0b      	ldr	r3, [pc, #44]	; (800af08 <prvCalculateSleepTime+0x48>)
 800aedc:	68da      	ldr	r2, [r3, #12]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d202      	bcs.n	800aeea <prvCalculateSleepTime+0x2a>
		{
			xMaximumSleepTime = xARPTimer.ulReloadTime;
 800aee4:	4b08      	ldr	r3, [pc, #32]	; (800af08 <prvCalculateSleepTime+0x48>)
 800aee6:	691b      	ldr	r3, [r3, #16]
 800aee8:	607b      	str	r3, [r7, #4]
	}
	#endif /* ipconfigUSE_DHCP */

	#if( ipconfigUSE_TCP == 1 )
	{
		if( xTCPTimer.ulRemainingTime < xMaximumSleepTime )
 800aeea:	4b08      	ldr	r3, [pc, #32]	; (800af0c <prvCalculateSleepTime+0x4c>)
 800aeec:	68da      	ldr	r2, [r3, #12]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d202      	bcs.n	800aefa <prvCalculateSleepTime+0x3a>
		{
			xMaximumSleepTime = xTCPTimer.ulRemainingTime;
 800aef4:	4b05      	ldr	r3, [pc, #20]	; (800af0c <prvCalculateSleepTime+0x4c>)
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	607b      	str	r3, [r7, #4]
			}
		}
	}
	#endif

	return xMaximumSleepTime;
 800aefa:	687b      	ldr	r3, [r7, #4]
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	370c      	adds	r7, #12
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr
 800af08:	20004e98 	.word	0x20004e98
 800af0c:	20004eac 	.word	0x20004eac

0800af10 <prvCheckNetworkTimers>:
/*-----------------------------------------------------------*/

static void prvCheckNetworkTimers( void )
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
	/* Is it time for ARP processing? */
	if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 800af16:	481a      	ldr	r0, [pc, #104]	; (800af80 <prvCheckNetworkTimers+0x70>)
 800af18:	f000 f86e 	bl	800aff8 <prvIPTimerCheck>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d002      	beq.n	800af28 <prvCheckNetworkTimers+0x18>
	{
		xSendEventToIPTask( eARPTimerEvent );
 800af22:	2002      	movs	r0, #2
 800af24:	f000 fa26 	bl	800b374 <xSendEventToIPTask>
	{
	BaseType_t xWillSleep;
	TickType_t xNextTime;
	BaseType_t xCheckTCPSockets;

		if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0u )
 800af28:	4b16      	ldr	r3, [pc, #88]	; (800af84 <prvCheckNetworkTimers+0x74>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4618      	mov	r0, r3
 800af2e:	f7fd fd1f 	bl	8008970 <uxQueueMessagesWaiting>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d102      	bne.n	800af3e <prvCheckNetworkTimers+0x2e>
		{
			xWillSleep = pdTRUE;
 800af38:	2301      	movs	r3, #1
 800af3a:	60fb      	str	r3, [r7, #12]
 800af3c:	e001      	b.n	800af42 <prvCheckNetworkTimers+0x32>
		}
		else
		{
			xWillSleep = pdFALSE;
 800af3e:	2300      	movs	r3, #0
 800af40:	60fb      	str	r3, [r7, #12]
		}

		/* Sockets need to be checked if the TCP timer has expired. */
		xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 800af42:	4811      	ldr	r0, [pc, #68]	; (800af88 <prvCheckNetworkTimers+0x78>)
 800af44:	f000 f858 	bl	800aff8 <prvIPTimerCheck>
 800af48:	60b8      	str	r0, [r7, #8]

		/* Sockets will also be checked if there are TCP messages but the
		message queue is empty (indicated by xWillSleep being true). */
		if( ( xProcessedTCPMessage != pdFALSE ) && ( xWillSleep != pdFALSE ) )
 800af4a:	4b10      	ldr	r3, [pc, #64]	; (800af8c <prvCheckNetworkTimers+0x7c>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d004      	beq.n	800af5c <prvCheckNetworkTimers+0x4c>
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d001      	beq.n	800af5c <prvCheckNetworkTimers+0x4c>
		{
			xCheckTCPSockets = pdTRUE;
 800af58:	2301      	movs	r3, #1
 800af5a:	60bb      	str	r3, [r7, #8]
		}

		if( xCheckTCPSockets != pdFALSE )
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d00a      	beq.n	800af78 <prvCheckNetworkTimers+0x68>
		{
			/* Attend to the sockets, returning the period after which the
			check must be repeated. */
			xNextTime = xTCPTimerCheck( xWillSleep );
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	f001 fa90 	bl	800c488 <xTCPTimerCheck>
 800af68:	6078      	str	r0, [r7, #4]
			prvIPTimerStart( &xTCPTimer, xNextTime );
 800af6a:	6879      	ldr	r1, [r7, #4]
 800af6c:	4806      	ldr	r0, [pc, #24]	; (800af88 <prvCheckNetworkTimers+0x78>)
 800af6e:	f000 f80f 	bl	800af90 <prvIPTimerStart>
			xProcessedTCPMessage = 0;
 800af72:	4b06      	ldr	r3, [pc, #24]	; (800af8c <prvCheckNetworkTimers+0x7c>)
 800af74:	2200      	movs	r2, #0
 800af76:	601a      	str	r2, [r3, #0]
		}
	}
	#endif /* ipconfigUSE_TCP == 1 */
}
 800af78:	bf00      	nop
 800af7a:	3710      	adds	r7, #16
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}
 800af80:	20004e98 	.word	0x20004e98
 800af84:	20004e58 	.word	0x20004e58
 800af88:	20004eac 	.word	0x20004eac
 800af8c:	20004e90 	.word	0x20004e90

0800af90 <prvIPTimerStart>:
/*-----------------------------------------------------------*/

static void prvIPTimerStart( IPTimer_t *pxTimer, TickType_t xTime )
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b082      	sub	sp, #8
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	3304      	adds	r3, #4
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7fe fb10 	bl	80095c4 <vTaskSetTimeOutState>
	pxTimer->ulRemainingTime = xTime;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	683a      	ldr	r2, [r7, #0]
 800afa8:	60da      	str	r2, [r3, #12]

	if( xTime == ( TickType_t ) 0 )
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d105      	bne.n	800afbc <prvIPTimerStart+0x2c>
	{
		pxTimer->bExpired = pdTRUE_UNSIGNED;
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	7813      	ldrb	r3, [r2, #0]
 800afb4:	f043 0302 	orr.w	r3, r3, #2
 800afb8:	7013      	strb	r3, [r2, #0]
 800afba:	e004      	b.n	800afc6 <prvIPTimerStart+0x36>
	}
	else
	{
		pxTimer->bExpired = pdFALSE_UNSIGNED;
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	7813      	ldrb	r3, [r2, #0]
 800afc0:	f36f 0341 	bfc	r3, #1, #1
 800afc4:	7013      	strb	r3, [r2, #0]
	}

	pxTimer->bActive = pdTRUE_UNSIGNED;
 800afc6:	687a      	ldr	r2, [r7, #4]
 800afc8:	7813      	ldrb	r3, [r2, #0]
 800afca:	f043 0301 	orr.w	r3, r3, #1
 800afce:	7013      	strb	r3, [r2, #0]
}
 800afd0:	bf00      	nop
 800afd2:	3708      	adds	r7, #8
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <prvIPTimerReload>:
/*-----------------------------------------------------------*/

static void prvIPTimerReload( IPTimer_t *pxTimer, TickType_t xTime )
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b082      	sub	sp, #8
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
	pxTimer->ulReloadTime = xTime;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	683a      	ldr	r2, [r7, #0]
 800afe6:	611a      	str	r2, [r3, #16]
	prvIPTimerStart( pxTimer, xTime );
 800afe8:	6839      	ldr	r1, [r7, #0]
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f7ff ffd0 	bl	800af90 <prvIPTimerStart>
}
 800aff0:	bf00      	nop
 800aff2:	3708      	adds	r7, #8
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <prvIPTimerCheck>:
/*-----------------------------------------------------------*/

static BaseType_t prvIPTimerCheck( IPTimer_t *pxTimer )
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	if( pxTimer->bActive == pdFALSE_UNSIGNED )
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	f003 0301 	and.w	r3, r3, #1
 800b008:	b2db      	uxtb	r3, r3
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d102      	bne.n	800b014 <prvIPTimerCheck+0x1c>
	{
		/* The timer is not enabled. */
		xReturn = pdFALSE;
 800b00e:	2300      	movs	r3, #0
 800b010:	60fb      	str	r3, [r7, #12]
 800b012:	e01c      	b.n	800b04e <prvIPTimerCheck+0x56>
	}
	else
	{
		/* The timer might have set the bExpired flag already, if not, check the
		value of xTimeOut against ulRemainingTime. */
		if( ( pxTimer->bExpired != pdFALSE_UNSIGNED ) ||
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	781b      	ldrb	r3, [r3, #0]
 800b018:	f003 0302 	and.w	r3, r3, #2
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d10a      	bne.n	800b038 <prvIPTimerCheck+0x40>
			( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE ) )
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	1d1a      	adds	r2, r3, #4
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	330c      	adds	r3, #12
 800b02a:	4619      	mov	r1, r3
 800b02c:	4610      	mov	r0, r2
 800b02e:	f7fe faed 	bl	800960c <xTaskCheckForTimeOut>
 800b032:	4603      	mov	r3, r0
		if( ( pxTimer->bExpired != pdFALSE_UNSIGNED ) ||
 800b034:	2b00      	cmp	r3, #0
 800b036:	d008      	beq.n	800b04a <prvIPTimerCheck+0x52>
		{
			prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	691b      	ldr	r3, [r3, #16]
 800b03c:	4619      	mov	r1, r3
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f7ff ffa6 	bl	800af90 <prvIPTimerStart>
			xReturn = pdTRUE;
 800b044:	2301      	movs	r3, #1
 800b046:	60fb      	str	r3, [r7, #12]
 800b048:	e001      	b.n	800b04e <prvIPTimerCheck+0x56>
		}
		else
		{
			xReturn = pdFALSE;
 800b04a:	2300      	movs	r3, #0
 800b04c:	60fb      	str	r3, [r7, #12]
		}
	}

	return xReturn;
 800b04e:	68fb      	ldr	r3, [r7, #12]
}
 800b050:	4618      	mov	r0, r3
 800b052:	3710      	adds	r7, #16
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <FreeRTOS_NetworkDown>:
/*-----------------------------------------------------------*/

void FreeRTOS_NetworkDown( void )
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
static const IPStackEvent_t xNetworkDownEvent = { eNetworkDownEvent, NULL };
const TickType_t xDontBlock = ( TickType_t ) 0;
 800b05e:	2300      	movs	r3, #0
 800b060:	607b      	str	r3, [r7, #4]

	/* Simply send the network task the appropriate event. */
	if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 800b062:	6879      	ldr	r1, [r7, #4]
 800b064:	4808      	ldr	r0, [pc, #32]	; (800b088 <FreeRTOS_NetworkDown+0x30>)
 800b066:	f000 f99b 	bl	800b3a0 <xSendEventStructToIPTask>
 800b06a:	4603      	mov	r3, r0
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d003      	beq.n	800b078 <FreeRTOS_NetworkDown+0x20>
	{
		/* Could not send the message, so it is still pending. */
		xNetworkDownEventPending = pdTRUE;
 800b070:	4b06      	ldr	r3, [pc, #24]	; (800b08c <FreeRTOS_NetworkDown+0x34>)
 800b072:	2201      	movs	r2, #1
 800b074:	601a      	str	r2, [r3, #0]
		/* Message was sent so it is not pending. */
		xNetworkDownEventPending = pdFALSE;
	}

	iptraceNETWORK_DOWN();
}
 800b076:	e002      	b.n	800b07e <FreeRTOS_NetworkDown+0x26>
		xNetworkDownEventPending = pdFALSE;
 800b078:	4b04      	ldr	r3, [pc, #16]	; (800b08c <FreeRTOS_NetworkDown+0x34>)
 800b07a:	2200      	movs	r2, #0
 800b07c:	601a      	str	r2, [r3, #0]
}
 800b07e:	bf00      	nop
 800b080:	3708      	adds	r7, #8
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	0801124c 	.word	0x0801124c
 800b08c:	20004e88 	.word	0x20004e88

0800b090 <FreeRTOS_NetworkDownFromISR>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_NetworkDownFromISR( void )
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
static const IPStackEvent_t xNetworkDownEvent = { eNetworkDownEvent, NULL };
BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800b096:	2300      	movs	r3, #0
 800b098:	607b      	str	r3, [r7, #4]

	/* Simply send the network task the appropriate event. */
	if( xQueueSendToBackFromISR( xNetworkEventQueue, &xNetworkDownEvent, &xHigherPriorityTaskWoken ) != pdPASS )
 800b09a:	4b0b      	ldr	r3, [pc, #44]	; (800b0c8 <FreeRTOS_NetworkDownFromISR+0x38>)
 800b09c:	6818      	ldr	r0, [r3, #0]
 800b09e:	1d3a      	adds	r2, r7, #4
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	490a      	ldr	r1, [pc, #40]	; (800b0cc <FreeRTOS_NetworkDownFromISR+0x3c>)
 800b0a4:	f7fd fabe 	bl	8008624 <xQueueGenericSendFromISR>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d003      	beq.n	800b0b6 <FreeRTOS_NetworkDownFromISR+0x26>
	{
		xNetworkDownEventPending = pdTRUE;
 800b0ae:	4b08      	ldr	r3, [pc, #32]	; (800b0d0 <FreeRTOS_NetworkDownFromISR+0x40>)
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	601a      	str	r2, [r3, #0]
 800b0b4:	e002      	b.n	800b0bc <FreeRTOS_NetworkDownFromISR+0x2c>
	}
	else
	{
		xNetworkDownEventPending = pdFALSE;
 800b0b6:	4b06      	ldr	r3, [pc, #24]	; (800b0d0 <FreeRTOS_NetworkDownFromISR+0x40>)
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	601a      	str	r2, [r3, #0]
	}

	iptraceNETWORK_DOWN();

	return xHigherPriorityTaskWoken;
 800b0bc:	687b      	ldr	r3, [r7, #4]
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3708      	adds	r7, #8
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	20004e58 	.word	0x20004e58
 800b0cc:	08011254 	.word	0x08011254
 800b0d0:	20004e88 	.word	0x20004e88

0800b0d4 <pxDuplicateNetworkBufferWithDescriptor>:
}
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t *pxDuplicateNetworkBufferWithDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer,
	BaseType_t xNewLength )
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
NetworkBufferDescriptor_t * pxNewBuffer;

	/* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
	The transmit routine wants to have ownership of the network buffer
	descriptor, because it will pass the buffer straight to DMA. */
	pxNewBuffer = pxGetNetworkBufferWithDescriptor( ( size_t ) xNewLength, ( TickType_t ) 0 );
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	2100      	movs	r1, #0
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f005 faae 	bl	8010644 <pxGetNetworkBufferWithDescriptor>
 800b0e8:	60f8      	str	r0, [r7, #12]

	if( pxNewBuffer != NULL )
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d017      	beq.n	800b120 <pxDuplicateNetworkBufferWithDescriptor+0x4c>
	{
        /* Set the actual packet size in case a bigger buffer than requested 
        was returned. */
        pxNewBuffer->xDataLength = xNewLength;
 800b0f0:	683a      	ldr	r2, [r7, #0]
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	61da      	str	r2, [r3, #28]

        /* Copy the original packet information. */
		pxNewBuffer->ulIPAddress = pxNetworkBuffer->ulIPAddress;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	695a      	ldr	r2, [r3, #20]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	615a      	str	r2, [r3, #20]
		pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	8c1a      	ldrh	r2, [r3, #32]
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	841a      	strh	r2, [r3, #32]
		pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	845a      	strh	r2, [r3, #34]	; 0x22
		memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	6998      	ldr	r0, [r3, #24]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6999      	ldr	r1, [r3, #24]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	69db      	ldr	r3, [r3, #28]
 800b11a:	461a      	mov	r2, r3
 800b11c:	f005 fe1f 	bl	8010d5e <memcpy>
	}

	return pxNewBuffer;
 800b120:	68fb      	ldr	r3, [r7, #12]
}
 800b122:	4618      	mov	r0, r3
 800b124:	3710      	adds	r7, #16
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}

0800b12a <pxUDPPayloadBuffer_to_NetworkBuffer>:

#endif /* ipconfigZERO_COPY_TX_DRIVER != 0 */
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t *pxUDPPayloadBuffer_to_NetworkBuffer( void *pvBuffer )
{
 800b12a:	b480      	push	{r7}
 800b12c:	b085      	sub	sp, #20
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
uint8_t *pucBuffer;
NetworkBufferDescriptor_t *pxResult;

	if( pvBuffer == NULL )
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d102      	bne.n	800b13e <pxUDPPayloadBuffer_to_NetworkBuffer+0x14>
	{
		pxResult = NULL;
 800b138:	2300      	movs	r3, #0
 800b13a:	60fb      	str	r3, [r7, #12]
 800b13c:	e00f      	b.n	800b15e <pxUDPPayloadBuffer_to_NetworkBuffer+0x34>
	}
	else
	{
		/* Obtain the network buffer from the zero copy pointer. */
		pucBuffer = ( uint8_t * ) pvBuffer;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	60bb      	str	r3, [r7, #8]

		/* The input here is a pointer to a payload buffer.  Subtract
		the total size of a UDP/IP header plus the size of the header in
		the network buffer, usually 8 + 2 bytes. */
		pucBuffer -= ( sizeof( UDPPacket_t ) + ipBUFFER_PADDING );
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	3b34      	subs	r3, #52	; 0x34
 800b146:	60bb      	str	r3, [r7, #8]

		/* Here a pointer was placed to the network descriptor,
		As a pointer is dereferenced, make sure it is well aligned */
		if( ( ( ( uint32_t ) pucBuffer ) & ( sizeof( pucBuffer ) - 1 ) ) == 0 )
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	f003 0303 	and.w	r3, r3, #3
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d103      	bne.n	800b15a <pxUDPPayloadBuffer_to_NetworkBuffer+0x30>
		{
			/* The following statement may trigger a:
			warning: cast increases required alignment of target type [-Wcast-align].
			It has been confirmed though that the alignment is suitable. */
			pxResult = * ( ( NetworkBufferDescriptor_t ** ) pucBuffer );
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	60fb      	str	r3, [r7, #12]
 800b158:	e001      	b.n	800b15e <pxUDPPayloadBuffer_to_NetworkBuffer+0x34>
		}
		else
		{
			pxResult = NULL;
 800b15a:	2300      	movs	r3, #0
 800b15c:	60fb      	str	r3, [r7, #12]
		}
	}

	return pxResult;
 800b15e:	68fb      	ldr	r3, [r7, #12]
}
 800b160:	4618      	mov	r0, r3
 800b162:	3714      	adds	r7, #20
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr

0800b16c <FreeRTOS_IPInit>:
/*_RB_ Should we add an error or assert if the task priorities are set such that the servers won't function as expected? */
/*_HT_ There was a bug in FreeRTOS_TCP_IP.c that only occurred when the applications' priority was too high.
 As that bug has been repaired, there is not an urgent reason to warn.
 It is better though to use the advised priority scheme. */
BaseType_t FreeRTOS_IPInit( const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
{
 800b16c:	b5b0      	push	{r4, r5, r7, lr}
 800b16e:	b08c      	sub	sp, #48	; 0x30
 800b170:	af02      	add	r7, sp, #8
 800b172:	60f8      	str	r0, [r7, #12]
 800b174:	60b9      	str	r1, [r7, #8]
 800b176:	607a      	str	r2, [r7, #4]
 800b178:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFALSE;
 800b17a:	2300      	movs	r3, #0
 800b17c:	627b      	str	r3, [r7, #36]	; 0x24

	/* This function should only be called once. */
	configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 800b17e:	f000 fd67 	bl	800bc50 <xIPIsNetworkTaskReady>
 800b182:	4603      	mov	r3, r0
 800b184:	2b00      	cmp	r3, #0
 800b186:	d009      	beq.n	800b19c <FreeRTOS_IPInit+0x30>
	__asm volatile
 800b188:	f04f 0340 	mov.w	r3, #64	; 0x40
 800b18c:	f383 8811 	msr	BASEPRI, r3
 800b190:	f3bf 8f6f 	isb	sy
 800b194:	f3bf 8f4f 	dsb	sy
 800b198:	623b      	str	r3, [r7, #32]
 800b19a:	e7fe      	b.n	800b19a <FreeRTOS_IPInit+0x2e>
	configASSERT( xNetworkEventQueue == NULL );
 800b19c:	4b6d      	ldr	r3, [pc, #436]	; (800b354 <FreeRTOS_IPInit+0x1e8>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d009      	beq.n	800b1b8 <FreeRTOS_IPInit+0x4c>
 800b1a4:	f04f 0340 	mov.w	r3, #64	; 0x40
 800b1a8:	f383 8811 	msr	BASEPRI, r3
 800b1ac:	f3bf 8f6f 	isb	sy
 800b1b0:	f3bf 8f4f 	dsb	sy
 800b1b4:	61fb      	str	r3, [r7, #28]
 800b1b6:	e7fe      	b.n	800b1b6 <FreeRTOS_IPInit+0x4a>
	configASSERT( xIPTaskHandle == NULL );
 800b1b8:	4b67      	ldr	r3, [pc, #412]	; (800b358 <FreeRTOS_IPInit+0x1ec>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d009      	beq.n	800b1d4 <FreeRTOS_IPInit+0x68>
 800b1c0:	f04f 0340 	mov.w	r3, #64	; 0x40
 800b1c4:	f383 8811 	msr	BASEPRI, r3
 800b1c8:	f3bf 8f6f 	isb	sy
 800b1cc:	f3bf 8f4f 	dsb	sy
 800b1d0:	61bb      	str	r3, [r7, #24]
 800b1d2:	e7fe      	b.n	800b1d2 <FreeRTOS_IPInit+0x66>
	configASSERT( sizeof( IPHeader_t ) == ipEXPECTED_IPHeader_t_SIZE );
	configASSERT( sizeof( ICMPHeader_t ) == ipEXPECTED_ICMPHeader_t_SIZE );
	configASSERT( sizeof( UDPHeader_t ) == ipEXPECTED_UDPHeader_t_SIZE );

	/* Attempt to create the queue used to communicate with the IP task. */
	xNetworkEventQueue = xQueueCreate( ( UBaseType_t ) ipconfigEVENT_QUEUE_LENGTH, ( UBaseType_t ) sizeof( IPStackEvent_t ) );
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	2108      	movs	r1, #8
 800b1d8:	2041      	movs	r0, #65	; 0x41
 800b1da:	f7fd f89f 	bl	800831c <xQueueGenericCreate>
 800b1de:	4602      	mov	r2, r0
 800b1e0:	4b5c      	ldr	r3, [pc, #368]	; (800b354 <FreeRTOS_IPInit+0x1e8>)
 800b1e2:	601a      	str	r2, [r3, #0]
	configASSERT( xNetworkEventQueue );
 800b1e4:	4b5b      	ldr	r3, [pc, #364]	; (800b354 <FreeRTOS_IPInit+0x1e8>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d109      	bne.n	800b200 <FreeRTOS_IPInit+0x94>
 800b1ec:	f04f 0340 	mov.w	r3, #64	; 0x40
 800b1f0:	f383 8811 	msr	BASEPRI, r3
 800b1f4:	f3bf 8f6f 	isb	sy
 800b1f8:	f3bf 8f4f 	dsb	sy
 800b1fc:	617b      	str	r3, [r7, #20]
 800b1fe:	e7fe      	b.n	800b1fe <FreeRTOS_IPInit+0x92>

	if( xNetworkEventQueue != NULL )
 800b200:	4b54      	ldr	r3, [pc, #336]	; (800b354 <FreeRTOS_IPInit+0x1e8>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	2b00      	cmp	r3, #0
 800b206:	f000 80a0 	beq.w	800b34a <FreeRTOS_IPInit+0x1de>
		#if ( configQUEUE_REGISTRY_SIZE > 0 )
		{
			/* A queue registry is normally used to assist a kernel aware
			debugger.  If one is in use then it will be helpful for the debugger
			to show information about the network event queue. */
			vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 800b20a:	4b52      	ldr	r3, [pc, #328]	; (800b354 <FreeRTOS_IPInit+0x1e8>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4953      	ldr	r1, [pc, #332]	; (800b35c <FreeRTOS_IPInit+0x1f0>)
 800b210:	4618      	mov	r0, r3
 800b212:	f7fd fcf7 	bl	8008c04 <vQueueAddToRegistry>
		}
		#endif /* configQUEUE_REGISTRY_SIZE */

		if( xNetworkBuffersInitialise() == pdPASS )
 800b216:	f005 f987 	bl	8010528 <xNetworkBuffersInitialise>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	f040 808c 	bne.w	800b33a <FreeRTOS_IPInit+0x1ce>
		{
			/* Store the local IP and MAC address. */
			xNetworkAddressing.ulDefaultIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	3303      	adds	r3, #3
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	061a      	lsls	r2, r3, #24
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	3302      	adds	r3, #2
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	041b      	lsls	r3, r3, #16
 800b232:	431a      	orrs	r2, r3
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	3301      	adds	r3, #1
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	021b      	lsls	r3, r3, #8
 800b23c:	4313      	orrs	r3, r2
 800b23e:	68fa      	ldr	r2, [r7, #12]
 800b240:	7812      	ldrb	r2, [r2, #0]
 800b242:	4313      	orrs	r3, r2
 800b244:	4a46      	ldr	r2, [pc, #280]	; (800b360 <FreeRTOS_IPInit+0x1f4>)
 800b246:	6013      	str	r3, [r2, #0]
			xNetworkAddressing.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	3303      	adds	r3, #3
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	061a      	lsls	r2, r3, #24
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	3302      	adds	r3, #2
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	041b      	lsls	r3, r3, #16
 800b258:	431a      	orrs	r2, r3
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	3301      	adds	r3, #1
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	021b      	lsls	r3, r3, #8
 800b262:	4313      	orrs	r3, r2
 800b264:	68ba      	ldr	r2, [r7, #8]
 800b266:	7812      	ldrb	r2, [r2, #0]
 800b268:	4313      	orrs	r3, r2
 800b26a:	4a3d      	ldr	r2, [pc, #244]	; (800b360 <FreeRTOS_IPInit+0x1f4>)
 800b26c:	6053      	str	r3, [r2, #4]
			xNetworkAddressing.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	3303      	adds	r3, #3
 800b272:	781b      	ldrb	r3, [r3, #0]
 800b274:	061a      	lsls	r2, r3, #24
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	3302      	adds	r3, #2
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	041b      	lsls	r3, r3, #16
 800b27e:	431a      	orrs	r2, r3
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	3301      	adds	r3, #1
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	021b      	lsls	r3, r3, #8
 800b288:	4313      	orrs	r3, r2
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	7812      	ldrb	r2, [r2, #0]
 800b28e:	4313      	orrs	r3, r2
 800b290:	4a33      	ldr	r2, [pc, #204]	; (800b360 <FreeRTOS_IPInit+0x1f4>)
 800b292:	6093      	str	r3, [r2, #8]
			xNetworkAddressing.ulDNSServerAddress = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	3303      	adds	r3, #3
 800b298:	781b      	ldrb	r3, [r3, #0]
 800b29a:	061a      	lsls	r2, r3, #24
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	3302      	adds	r3, #2
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	041b      	lsls	r3, r3, #16
 800b2a4:	431a      	orrs	r2, r3
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	021b      	lsls	r3, r3, #8
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	683a      	ldr	r2, [r7, #0]
 800b2b2:	7812      	ldrb	r2, [r2, #0]
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	4a2a      	ldr	r2, [pc, #168]	; (800b360 <FreeRTOS_IPInit+0x1f4>)
 800b2b8:	60d3      	str	r3, [r2, #12]
			xNetworkAddressing.ulBroadcastAddress = ( xNetworkAddressing.ulDefaultIPAddress & xNetworkAddressing.ulNetMask ) |  ~xNetworkAddressing.ulNetMask;
 800b2ba:	4b29      	ldr	r3, [pc, #164]	; (800b360 <FreeRTOS_IPInit+0x1f4>)
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	4b28      	ldr	r3, [pc, #160]	; (800b360 <FreeRTOS_IPInit+0x1f4>)
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	43db      	mvns	r3, r3
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	4a26      	ldr	r2, [pc, #152]	; (800b360 <FreeRTOS_IPInit+0x1f4>)
 800b2c8:	6113      	str	r3, [r2, #16]

			memcpy( &xDefaultAddressing, &xNetworkAddressing, sizeof( xDefaultAddressing ) );
 800b2ca:	4a26      	ldr	r2, [pc, #152]	; (800b364 <FreeRTOS_IPInit+0x1f8>)
 800b2cc:	4b24      	ldr	r3, [pc, #144]	; (800b360 <FreeRTOS_IPInit+0x1f4>)
 800b2ce:	4614      	mov	r4, r2
 800b2d0:	461d      	mov	r5, r3
 800b2d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b2d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b2d6:	682b      	ldr	r3, [r5, #0]
 800b2d8:	6023      	str	r3, [r4, #0]
				*ipLOCAL_IP_ADDRESS_POINTER = 0x00UL;
			}
			#else
			{
				/* The IP address is set from the value passed in. */
				*ipLOCAL_IP_ADDRESS_POINTER = xNetworkAddressing.ulDefaultIPAddress;
 800b2da:	4b21      	ldr	r3, [pc, #132]	; (800b360 <FreeRTOS_IPInit+0x1f4>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4a22      	ldr	r2, [pc, #136]	; (800b368 <FreeRTOS_IPInit+0x1fc>)
 800b2e0:	6153      	str	r3, [r2, #20]

				/* Added to prevent ARP flood to gateway.  Ensure the
				gateway is on the same subnet as the IP	address. */
				configASSERT( ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) == ( xNetworkAddressing.ulGatewayAddress & xNetworkAddressing.ulNetMask ) );
 800b2e2:	4b21      	ldr	r3, [pc, #132]	; (800b368 <FreeRTOS_IPInit+0x1fc>)
 800b2e4:	695a      	ldr	r2, [r3, #20]
 800b2e6:	4b1e      	ldr	r3, [pc, #120]	; (800b360 <FreeRTOS_IPInit+0x1f4>)
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	405a      	eors	r2, r3
 800b2ec:	4b1c      	ldr	r3, [pc, #112]	; (800b360 <FreeRTOS_IPInit+0x1f4>)
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	4013      	ands	r3, r2
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d009      	beq.n	800b30a <FreeRTOS_IPInit+0x19e>
 800b2f6:	f04f 0340 	mov.w	r3, #64	; 0x40
 800b2fa:	f383 8811 	msr	BASEPRI, r3
 800b2fe:	f3bf 8f6f 	isb	sy
 800b302:	f3bf 8f4f 	dsb	sy
 800b306:	613b      	str	r3, [r7, #16]
 800b308:	e7fe      	b.n	800b308 <FreeRTOS_IPInit+0x19c>
			}
			#endif /* ipconfigUSE_DHCP == 1 */

			/* The MAC address is stored in the start of the default packet
			header fragment, which is used when sending UDP packets. */
			memcpy( ( void * ) ipLOCAL_MAC_ADDRESS, ( void * ) ucMACAddress, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800b30a:	2206      	movs	r2, #6
 800b30c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b30e:	4816      	ldr	r0, [pc, #88]	; (800b368 <FreeRTOS_IPInit+0x1fc>)
 800b310:	f005 fd25 	bl	8010d5e <memcpy>

			/* Prepare the sockets interface. */
            xReturn = vNetworkSocketsInit();
 800b314:	f000 fd46 	bl	800bda4 <vNetworkSocketsInit>
 800b318:	6278      	str	r0, [r7, #36]	; 0x24
            
            if( pdTRUE == xReturn )
 800b31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	d114      	bne.n	800b34a <FreeRTOS_IPInit+0x1de>
            {
                /* Create the task that processes Ethernet and stack events. */
                xReturn = xTaskCreate( prvIPTask, "IP-task", ( uint16_t )ipconfigIP_TASK_STACK_SIZE_WORDS, NULL, ( UBaseType_t )ipconfigIP_TASK_PRIORITY, &xIPTaskHandle );
 800b320:	4b0d      	ldr	r3, [pc, #52]	; (800b358 <FreeRTOS_IPInit+0x1ec>)
 800b322:	9301      	str	r3, [sp, #4]
 800b324:	2305      	movs	r3, #5
 800b326:	9300      	str	r3, [sp, #0]
 800b328:	2300      	movs	r3, #0
 800b32a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b32e:	490f      	ldr	r1, [pc, #60]	; (800b36c <FreeRTOS_IPInit+0x200>)
 800b330:	480f      	ldr	r0, [pc, #60]	; (800b370 <FreeRTOS_IPInit+0x204>)
 800b332:	f7fd fcb9 	bl	8008ca8 <xTaskCreate>
 800b336:	6278      	str	r0, [r7, #36]	; 0x24
 800b338:	e007      	b.n	800b34a <FreeRTOS_IPInit+0x1de>
		else
		{
			FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: xNetworkBuffersInitialise() failed\n") );

			/* Clean up. */
			vQueueDelete( xNetworkEventQueue );
 800b33a:	4b06      	ldr	r3, [pc, #24]	; (800b354 <FreeRTOS_IPInit+0x1e8>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	4618      	mov	r0, r3
 800b340:	f7fd fb33 	bl	80089aa <vQueueDelete>
			xNetworkEventQueue = NULL;
 800b344:	4b03      	ldr	r3, [pc, #12]	; (800b354 <FreeRTOS_IPInit+0x1e8>)
 800b346:	2200      	movs	r2, #0
 800b348:	601a      	str	r2, [r3, #0]
	else
	{
		FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: Network event queue could not be created\n") );
	}

	return xReturn;
 800b34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3728      	adds	r7, #40	; 0x28
 800b350:	46bd      	mov	sp, r7
 800b352:	bdb0      	pop	{r4, r5, r7, pc}
 800b354:	20004e58 	.word	0x20004e58
 800b358:	20004e8c 	.word	0x20004e8c
 800b35c:	08011120 	.word	0x08011120
 800b360:	20004e60 	.word	0x20004e60
 800b364:	20004e74 	.word	0x20004e74
 800b368:	200001b0 	.word	0x200001b0
 800b36c:	08011128 	.word	0x08011128
 800b370:	0800ad1d 	.word	0x0800ad1d

0800b374 <xSendEventToIPTask>:

#endif /* ipconfigSUPPORT_OUTGOING_PINGS == 1 */
/*-----------------------------------------------------------*/

BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b086      	sub	sp, #24
 800b378:	af00      	add	r7, sp, #0
 800b37a:	4603      	mov	r3, r0
 800b37c:	71fb      	strb	r3, [r7, #7]
IPStackEvent_t xEventMessage;
const TickType_t xDontBlock = ( TickType_t ) 0;
 800b37e:	2300      	movs	r3, #0
 800b380:	617b      	str	r3, [r7, #20]

	xEventMessage.eEventType = eEvent;
 800b382:	79fb      	ldrb	r3, [r7, #7]
 800b384:	733b      	strb	r3, [r7, #12]
	xEventMessage.pvData = ( void* )NULL;
 800b386:	2300      	movs	r3, #0
 800b388:	613b      	str	r3, [r7, #16]

	return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 800b38a:	f107 030c 	add.w	r3, r7, #12
 800b38e:	6979      	ldr	r1, [r7, #20]
 800b390:	4618      	mov	r0, r3
 800b392:	f000 f805 	bl	800b3a0 <xSendEventStructToIPTask>
 800b396:	4603      	mov	r3, r0
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3718      	adds	r7, #24
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <xSendEventStructToIPTask>:
/*-----------------------------------------------------------*/

BaseType_t xSendEventStructToIPTask( const IPStackEvent_t *pxEvent, TickType_t xTimeout )
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn, xSendMessage;

	if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 800b3aa:	f000 fc51 	bl	800bc50 <xIPIsNetworkTaskReady>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d107      	bne.n	800b3c4 <xSendEventStructToIPTask+0x24>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f993 3000 	ldrsb.w	r3, [r3]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d002      	beq.n	800b3c4 <xSendEventStructToIPTask+0x24>
	{
		/* Only allow eNetworkDownEvent events if the IP task is not ready
		yet.  Not going to attempt to send the message so the send failed. */
		xReturn = pdFAIL;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	60fb      	str	r3, [r7, #12]
 800b3c2:	e02d      	b.n	800b420 <xSendEventStructToIPTask+0x80>
	}
	else
	{
		xSendMessage = pdTRUE;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	60bb      	str	r3, [r7, #8]

		#if( ipconfigUSE_TCP == 1 )
		{
			if( pxEvent->eEventType == eTCPTimerEvent )
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f993 3000 	ldrsb.w	r3, [r3]
 800b3ce:	2b05      	cmp	r3, #5
 800b3d0:	d10e      	bne.n	800b3f0 <xSendEventStructToIPTask+0x50>
			{
				/* TCP timer events are sent to wake the timer task when
				xTCPTimer has expired, but there is no point sending them if the
				IP task is already awake processing other message. */
				xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 800b3d2:	4a16      	ldr	r2, [pc, #88]	; (800b42c <xSendEventStructToIPTask+0x8c>)
 800b3d4:	7813      	ldrb	r3, [r2, #0]
 800b3d6:	f043 0302 	orr.w	r3, r3, #2
 800b3da:	7013      	strb	r3, [r2, #0]

				if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0u )
 800b3dc:	4b14      	ldr	r3, [pc, #80]	; (800b430 <xSendEventStructToIPTask+0x90>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f7fd fac5 	bl	8008970 <uxQueueMessagesWaiting>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d001      	beq.n	800b3f0 <xSendEventStructToIPTask+0x50>
				{
					/* Not actually going to send the message but this is not a
					failure as the message didn't need to be sent. */
					xSendMessage = pdFALSE;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	60bb      	str	r3, [r7, #8]
				}
			}
		}
		#endif /* ipconfigUSE_TCP */

		if( xSendMessage != pdFALSE )
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d012      	beq.n	800b41c <xSendEventStructToIPTask+0x7c>
		{
			/* The IP task cannot block itself while waiting for itself to
			respond. */
			if( ( xIsCallingFromIPTask() == pdTRUE ) && ( xTimeout > ( TickType_t ) 0 ) )
 800b3f6:	f7ff fd41 	bl	800ae7c <xIsCallingFromIPTask>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d104      	bne.n	800b40a <xSendEventStructToIPTask+0x6a>
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d001      	beq.n	800b40a <xSendEventStructToIPTask+0x6a>
			{
				xTimeout = ( TickType_t ) 0;
 800b406:	2300      	movs	r3, #0
 800b408:	603b      	str	r3, [r7, #0]
			}

			xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, xTimeout );
 800b40a:	4b09      	ldr	r3, [pc, #36]	; (800b430 <xSendEventStructToIPTask+0x90>)
 800b40c:	6818      	ldr	r0, [r3, #0]
 800b40e:	2300      	movs	r3, #0
 800b410:	683a      	ldr	r2, [r7, #0]
 800b412:	6879      	ldr	r1, [r7, #4]
 800b414:	f7fd f80c 	bl	8008430 <xQueueGenericSend>
 800b418:	60f8      	str	r0, [r7, #12]
 800b41a:	e001      	b.n	800b420 <xSendEventStructToIPTask+0x80>
		}
		else
		{
			/* It was not necessary to send the message to process the event so
			even though the message was not sent the call was successful. */
			xReturn = pdPASS;
 800b41c:	2301      	movs	r3, #1
 800b41e:	60fb      	str	r3, [r7, #12]
		}
	}

	return xReturn;
 800b420:	68fb      	ldr	r3, [r7, #12]
}
 800b422:	4618      	mov	r0, r3
 800b424:	3710      	adds	r7, #16
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop
 800b42c:	20004eac 	.word	0x20004eac
 800b430:	20004e58 	.word	0x20004e58

0800b434 <prvProcessNetworkDownEvent>:
	return eReturn;
}
/*-----------------------------------------------------------*/

static void prvProcessNetworkDownEvent( void )
{
 800b434:	b580      	push	{r7, lr}
 800b436:	af00      	add	r7, sp, #0
	/* Stop the ARP timer while there is no network. */
	xARPTimer.bActive = pdFALSE_UNSIGNED;
 800b438:	4a0a      	ldr	r2, [pc, #40]	; (800b464 <prvProcessNetworkDownEvent+0x30>)
 800b43a:	7813      	ldrb	r3, [r2, #0]
 800b43c:	f36f 0300 	bfc	r3, #0, #1
 800b440:	7013      	strb	r3, [r2, #0]
	#endif

	/* The network has been disconnected (or is being initialised for the first
	time).  Perform whatever hardware processing is necessary to bring it up
	again, or wait for it to be available again.  This is hardware dependent. */
	if( xNetworkInterfaceInitialise() != pdPASS )
 800b442:	f7f9 fe53 	bl	80050ec <xNetworkInterfaceInitialise>
 800b446:	4603      	mov	r3, r0
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d006      	beq.n	800b45a <prvProcessNetworkDownEvent+0x26>
	{
		/* Ideally the network interface initialisation function will only
		return when the network is available.  In case this is not the case,
		wait a while before retrying the initialisation. */
		vTaskDelay( ipINITIALISATION_RETRY_DELAY );
 800b44c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800b450:	f7fd fd5c 	bl	8008f0c <vTaskDelay>
		FreeRTOS_NetworkDown();
 800b454:	f7ff fe00 	bl	800b058 <FreeRTOS_NetworkDown>
			/* Perform any necessary 'network up' processing. */
			vIPNetworkUpCalls();
		}
		#endif
	}
}
 800b458:	e001      	b.n	800b45e <prvProcessNetworkDownEvent+0x2a>
			vIPNetworkUpCalls();
 800b45a:	f000 f805 	bl	800b468 <vIPNetworkUpCalls>
}
 800b45e:	bf00      	nop
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	20004e98 	.word	0x20004e98

0800b468 <vIPNetworkUpCalls>:
/*-----------------------------------------------------------*/

void vIPNetworkUpCalls( void )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	af00      	add	r7, sp, #0
	xNetworkUp = pdTRUE;
 800b46c:	4b04      	ldr	r3, [pc, #16]	; (800b480 <vIPNetworkUpCalls+0x18>)
 800b46e:	2201      	movs	r2, #1
 800b470:	601a      	str	r2, [r3, #0]
		vDNSInitialise();
	}
	#endif /* ipconfigDNS_USE_CALLBACKS != 0 */

	/* Set remaining time to 0 so it will become active immediately. */
	prvIPTimerReload( &xARPTimer, pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 800b472:	f242 7110 	movw	r1, #10000	; 0x2710
 800b476:	4803      	ldr	r0, [pc, #12]	; (800b484 <vIPNetworkUpCalls+0x1c>)
 800b478:	f7ff fdae 	bl	800afd8 <prvIPTimerReload>
}
 800b47c:	bf00      	nop
 800b47e:	bd80      	pop	{r7, pc}
 800b480:	20004e94 	.word	0x20004e94
 800b484:	20004e98 	.word	0x20004e98

0800b488 <prvProcessEthernetPacket>:
/*-----------------------------------------------------------*/

static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b086      	sub	sp, #24
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
EthernetHeader_t *pxEthernetHeader;
eFrameProcessingResult_t eReturned = eReleaseBuffer;
 800b490:	2300      	movs	r3, #0
 800b492:	75fb      	strb	r3, [r7, #23]

	configASSERT( pxNetworkBuffer );
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d109      	bne.n	800b4ae <prvProcessEthernetPacket+0x26>
 800b49a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800b49e:	f383 8811 	msr	BASEPRI, r3
 800b4a2:	f3bf 8f6f 	isb	sy
 800b4a6:	f3bf 8f4f 	dsb	sy
 800b4aa:	60fb      	str	r3, [r7, #12]
 800b4ac:	e7fe      	b.n	800b4ac <prvProcessEthernetPacket+0x24>

	/* Interpret the Ethernet frame. */
    if( pxNetworkBuffer->xDataLength >= sizeof( EthernetHeader_t ) )
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	69db      	ldr	r3, [r3, #28]
 800b4b2:	2b0d      	cmp	r3, #13
 800b4b4:	d931      	bls.n	800b51a <prvProcessEthernetPacket+0x92>
    {
        eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	75fb      	strb	r3, [r7, #23]
        pxEthernetHeader = ( EthernetHeader_t * )( pxNetworkBuffer->pucEthernetBuffer );
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	699b      	ldr	r3, [r3, #24]
 800b4be:	613b      	str	r3, [r7, #16]

        if( eReturned == eProcessBuffer )
 800b4c0:	7dfb      	ldrb	r3, [r7, #23]
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d129      	bne.n	800b51a <prvProcessEthernetPacket+0x92>
        {
            /* Interpret the received Ethernet packet. */
            switch( pxEthernetHeader->usFrameType )
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	899b      	ldrh	r3, [r3, #12]
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	2b08      	cmp	r3, #8
 800b4ce:	d011      	beq.n	800b4f4 <prvProcessEthernetPacket+0x6c>
 800b4d0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800b4d4:	d11e      	bne.n	800b514 <prvProcessEthernetPacket+0x8c>
            {
            case ipARP_FRAME_TYPE:
                /* The Ethernet frame contains an ARP packet. */
                if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	69db      	ldr	r3, [r3, #28]
 800b4da:	2b29      	cmp	r3, #41	; 0x29
 800b4dc:	d907      	bls.n	800b4ee <prvProcessEthernetPacket+0x66>
                {
                    eReturned = eARPProcessPacket( ( ARPPacket_t * )pxNetworkBuffer->pucEthernetBuffer );
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	699b      	ldr	r3, [r3, #24]
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7fe fc40 	bl	8009d68 <eARPProcessPacket>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	75fb      	strb	r3, [r7, #23]
                }
                else
                {
                    eReturned = eReleaseBuffer;
                }
                break;
 800b4ec:	e015      	b.n	800b51a <prvProcessEthernetPacket+0x92>
                    eReturned = eReleaseBuffer;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	75fb      	strb	r3, [r7, #23]
                break;
 800b4f2:	e012      	b.n	800b51a <prvProcessEthernetPacket+0x92>

            case ipIPv4_FRAME_TYPE:
                /* The Ethernet frame contains an IP packet. */
                if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	69db      	ldr	r3, [r3, #28]
 800b4f8:	2b21      	cmp	r3, #33	; 0x21
 800b4fa:	d908      	bls.n	800b50e <prvProcessEthernetPacket+0x86>
                {
                    eReturned = prvProcessIPPacket( ( IPPacket_t * )pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer );
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	699b      	ldr	r3, [r3, #24]
 800b500:	6879      	ldr	r1, [r7, #4]
 800b502:	4618      	mov	r0, r3
 800b504:	f000 f868 	bl	800b5d8 <prvProcessIPPacket>
 800b508:	4603      	mov	r3, r0
 800b50a:	75fb      	strb	r3, [r7, #23]
                }
                else
                {
                    eReturned = eReleaseBuffer;
                }
                break;
 800b50c:	e005      	b.n	800b51a <prvProcessEthernetPacket+0x92>
                    eReturned = eReleaseBuffer;
 800b50e:	2300      	movs	r3, #0
 800b510:	75fb      	strb	r3, [r7, #23]
                break;
 800b512:	e002      	b.n	800b51a <prvProcessEthernetPacket+0x92>

            default:
                /* No other packet types are handled.  Nothing to do. */
                eReturned = eReleaseBuffer;
 800b514:	2300      	movs	r3, #0
 800b516:	75fb      	strb	r3, [r7, #23]
                break;
 800b518:	bf00      	nop
            }
        }
    }

	/* Perform any actions that resulted from processing the Ethernet frame. */
	switch( eReturned )
 800b51a:	7dfb      	ldrb	r3, [r7, #23]
 800b51c:	2b02      	cmp	r3, #2
 800b51e:	d002      	beq.n	800b526 <prvProcessEthernetPacket+0x9e>
 800b520:	2b03      	cmp	r3, #3
 800b522:	d009      	beq.n	800b538 <prvProcessEthernetPacket+0xb0>
 800b524:	e004      	b.n	800b530 <prvProcessEthernetPacket+0xa8>
	{
		case eReturnEthernetFrame :
			/* The Ethernet frame will have been updated (maybe it was
			an ARP request or a PING request?) and should be sent back to
			its source. */
			vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 800b526:	2101      	movs	r1, #1
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f000 fb71 	bl	800bc10 <vReturnEthernetFrame>
			/* parameter pdTRUE: the buffer must be released once
			the frame has been transmitted */
			break;
 800b52e:	e004      	b.n	800b53a <prvProcessEthernetPacket+0xb2>

		default :
			/* The frame is not being used anywhere, and the
			NetworkBufferDescriptor_t structure containing the frame should
			just be	released back to the list of free buffers. */
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f005 f8ff 	bl	8010734 <vReleaseNetworkBufferAndDescriptor>
			break;
 800b536:	e000      	b.n	800b53a <prvProcessEthernetPacket+0xb2>
			break;
 800b538:	bf00      	nop
	}
}
 800b53a:	bf00      	nop
 800b53c:	3718      	adds	r7, #24
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
	...

0800b544 <prvAllowIPPacket>:
/*-----------------------------------------------------------*/

static eFrameProcessingResult_t prvAllowIPPacket( const IPPacket_t * const pxIPPacket,
	NetworkBufferDescriptor_t * const pxNetworkBuffer, UBaseType_t uxHeaderLength )
{
 800b544:	b480      	push	{r7}
 800b546:	b089      	sub	sp, #36	; 0x24
 800b548:	af00      	add	r7, sp, #0
 800b54a:	60f8      	str	r0, [r7, #12]
 800b54c:	60b9      	str	r1, [r7, #8]
 800b54e:	607a      	str	r2, [r7, #4]
eFrameProcessingResult_t eReturn = eProcessBuffer;
 800b550:	2301      	movs	r3, #1
 800b552:	77fb      	strb	r3, [r7, #31]

#if( ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) || ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) )
	const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	330e      	adds	r3, #14
 800b558:	61bb      	str	r3, [r7, #24]
	#if( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 )
	{
		/* In systems with a very small amount of RAM, it might be advantageous
		to have incoming messages checked earlier, by the network card driver.
		This method may decrease the usage of sparse network buffers. */
		uint32_t ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 800b55a:	69bb      	ldr	r3, [r7, #24]
 800b55c:	691b      	ldr	r3, [r3, #16]
 800b55e:	617b      	str	r3, [r7, #20]

			/* Ensure that the incoming packet is not fragmented (only outgoing
			packets can be fragmented) as these are the only handled IP frames
			currently. */
			if( ( pxIPHeader->usFragmentOffset & ipFRAGMENT_OFFSET_BIT_MASK ) != 0U )
 800b560:	69bb      	ldr	r3, [r7, #24]
 800b562:	88db      	ldrh	r3, [r3, #6]
 800b564:	b29b      	uxth	r3, r3
 800b566:	461a      	mov	r2, r3
 800b568:	f64f 730f 	movw	r3, #65295	; 0xff0f
 800b56c:	4013      	ands	r3, r2
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d002      	beq.n	800b578 <prvAllowIPPacket+0x34>
			{
				/* Can not handle, fragmented packet. */
				eReturn = eReleaseBuffer;
 800b572:	2300      	movs	r3, #0
 800b574:	77fb      	strb	r3, [r7, #31]
 800b576:	e022      	b.n	800b5be <prvAllowIPPacket+0x7a>
			}
			/* 0x45 means: IPv4 with an IP header of 5 x 4 = 20 bytes
			 * 0x47 means: IPv4 with an IP header of 7 x 4 = 28 bytes */
			else if( ( pxIPHeader->ucVersionHeaderLength < 0x45u ) || ( pxIPHeader->ucVersionHeaderLength > 0x4Fu ) )
 800b578:	69bb      	ldr	r3, [r7, #24]
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	2b44      	cmp	r3, #68	; 0x44
 800b57e:	d903      	bls.n	800b588 <prvAllowIPPacket+0x44>
 800b580:	69bb      	ldr	r3, [r7, #24]
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	2b4f      	cmp	r3, #79	; 0x4f
 800b586:	d902      	bls.n	800b58e <prvAllowIPPacket+0x4a>
			{
				/* Can not handle, unknown or invalid header version. */
				eReturn = eReleaseBuffer;
 800b588:	2300      	movs	r3, #0
 800b58a:	77fb      	strb	r3, [r7, #31]
 800b58c:	e017      	b.n	800b5be <prvAllowIPPacket+0x7a>
			}
				/* Is the packet for this IP address? */
			else if( ( ulDestinationIPAddress != *ipLOCAL_IP_ADDRESS_POINTER ) &&
 800b58e:	4b0f      	ldr	r3, [pc, #60]	; (800b5cc <prvAllowIPPacket+0x88>)
 800b590:	695a      	ldr	r2, [r3, #20]
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	429a      	cmp	r2, r3
 800b596:	d012      	beq.n	800b5be <prvAllowIPPacket+0x7a>
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b59e:	d00e      	beq.n	800b5be <prvAllowIPPacket+0x7a>
				/* Is it the global broadcast address 255.255.255.255 ? */
				( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
				/* Is it a specific broadcast address 192.168.1.255 ? */
				( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 800b5a0:	4b0b      	ldr	r3, [pc, #44]	; (800b5d0 <prvAllowIPPacket+0x8c>)
 800b5a2:	691a      	ldr	r2, [r3, #16]
				( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d009      	beq.n	800b5be <prvAllowIPPacket+0x7a>
				( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	4a09      	ldr	r2, [pc, #36]	; (800b5d4 <prvAllowIPPacket+0x90>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d005      	beq.n	800b5be <prvAllowIPPacket+0x7a>
			#if( ipconfigUSE_LLMNR == 1 )
				/* Is it the LLMNR multicast address? */
				( ulDestinationIPAddress != ipLLMNR_IP_ADDR ) &&
			#endif
				/* Or (during DHCP negotiation) we have no IP-address yet? */
				( *ipLOCAL_IP_ADDRESS_POINTER != 0UL ) )
 800b5b2:	4b06      	ldr	r3, [pc, #24]	; (800b5cc <prvAllowIPPacket+0x88>)
 800b5b4:	695b      	ldr	r3, [r3, #20]
				( ulDestinationIPAddress != ipLLMNR_IP_ADDR ) &&
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d001      	beq.n	800b5be <prvAllowIPPacket+0x7a>
			{
				/* Packet is not for this node, release it */
				eReturn = eReleaseBuffer;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	77fb      	strb	r3, [r7, #31]
		( void ) pxNetworkBuffer;
		( void ) uxHeaderLength;
	}
	#endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */

	return eReturn;
 800b5be:	7ffb      	ldrb	r3, [r7, #31]
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3724      	adds	r7, #36	; 0x24
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr
 800b5cc:	200001b0 	.word	0x200001b0
 800b5d0:	20004e60 	.word	0x20004e60
 800b5d4:	fc0000e0 	.word	0xfc0000e0

0800b5d8 <prvProcessIPPacket>:
/*-----------------------------------------------------------*/

static eFrameProcessingResult_t prvProcessIPPacket( IPPacket_t * const pxIPPacket, NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b08c      	sub	sp, #48	; 0x30
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
eFrameProcessingResult_t eReturn;
IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	330e      	adds	r3, #14
 800b5e6:	62bb      	str	r3, [r7, #40]	; 0x28
UBaseType_t uxHeaderLength = ( UBaseType_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0x0Fu ) << 2 );
 800b5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800b5f2:	627b      	str	r3, [r7, #36]	; 0x24
uint8_t ucProtocol;

    /* Bound the calculated header length: take away the Ethernet header size,
    then check if the IP header is claiming to be longer than the remaining
    total packet size. Also check for minimal header field length. */
    if( uxHeaderLength > pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ||
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	69db      	ldr	r3, [r3, #28]
 800b5f8:	f1a3 020e 	sub.w	r2, r3, #14
 800b5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d302      	bcc.n	800b608 <prvProcessIPPacket+0x30>
 800b602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b604:	2b13      	cmp	r3, #19
 800b606:	d801      	bhi.n	800b60c <prvProcessIPPacket+0x34>
        uxHeaderLength < ipSIZE_OF_IPv4_HEADER )
    {
        return eReleaseBuffer;
 800b608:	2300      	movs	r3, #0
 800b60a:	e0cb      	b.n	800b7a4 <prvProcessIPPacket+0x1cc>
    }

	ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	7ddb      	ldrb	r3, [r3, #23]
 800b610:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	/* Check if the IP headers are acceptable and if it has our destination. */
	eReturn = prvAllowIPPacket( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 800b614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b616:	6839      	ldr	r1, [r7, #0]
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f7ff ff93 	bl	800b544 <prvAllowIPPacket>
 800b61e:	4603      	mov	r3, r0
 800b620:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if( eReturn == eProcessBuffer )
 800b624:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b628:	2b01      	cmp	r3, #1
 800b62a:	f040 80b9 	bne.w	800b7a0 <prvProcessIPPacket+0x1c8>
	{
		if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 800b62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b630:	2b14      	cmp	r3, #20
 800b632:	d927      	bls.n	800b684 <prvProcessIPPacket+0xac>
		{
			/* All structs of headers expect a IP header size of 20 bytes
			 * IP header options were included, we'll ignore them and cut them out
			 * Note: IP options are mostly use in Multi-cast protocols */
			const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 800b634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b636:	3b14      	subs	r3, #20
 800b638:	61fb      	str	r3, [r7, #28]
			/* From: the previous start of UDP/ICMP/TCP data */
			uint8_t *pucSource = ( uint8_t* )(pxNetworkBuffer->pucEthernetBuffer + sizeof( EthernetHeader_t ) + uxHeaderLength);
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	699a      	ldr	r2, [r3, #24]
 800b63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b640:	330e      	adds	r3, #14
 800b642:	4413      	add	r3, r2
 800b644:	61bb      	str	r3, [r7, #24]
			/* To: the usual start of UDP/ICMP/TCP data at offset 20 from IP header */
			uint8_t *pucTarget = ( uint8_t* )(pxNetworkBuffer->pucEthernetBuffer + sizeof( EthernetHeader_t ) + ipSIZE_OF_IPv4_HEADER);
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	699b      	ldr	r3, [r3, #24]
 800b64a:	3322      	adds	r3, #34	; 0x22
 800b64c:	617b      	str	r3, [r7, #20]
			/* How many: total length minus the options and the lower headers */
			const size_t  xMoveLen = pxNetworkBuffer->xDataLength - optlen - ipSIZE_OF_IPv4_HEADER - ipSIZE_OF_ETH_HEADER;
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	69da      	ldr	r2, [r3, #28]
 800b652:	69fb      	ldr	r3, [r7, #28]
 800b654:	1ad3      	subs	r3, r2, r3
 800b656:	3b22      	subs	r3, #34	; 0x22
 800b658:	613b      	str	r3, [r7, #16]

			memmove( pucTarget, pucSource, xMoveLen );
 800b65a:	693a      	ldr	r2, [r7, #16]
 800b65c:	69b9      	ldr	r1, [r7, #24]
 800b65e:	6978      	ldr	r0, [r7, #20]
 800b660:	f005 fb88 	bl	8010d74 <memmove>
			pxNetworkBuffer->xDataLength -= optlen;
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	69da      	ldr	r2, [r3, #28]
 800b668:	69fb      	ldr	r3, [r7, #28]
 800b66a:	1ad2      	subs	r2, r2, r3
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	61da      	str	r2, [r3, #28]

            /* Fix-up new version/header length field in IP packet. */
            pxIPHeader->ucVersionHeaderLength =
                ( pxIPHeader->ucVersionHeaderLength & 0xF0 ) | /* High nibble is the version. */
 800b670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b672:	781b      	ldrb	r3, [r3, #0]
 800b674:	f023 030f 	bic.w	r3, r3, #15
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	f043 0305 	orr.w	r3, r3, #5
 800b67e:	b2da      	uxtb	r2, r3
            pxIPHeader->ucVersionHeaderLength =
 800b680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b682:	701a      	strb	r2, [r3, #0]
		}

		/* Add the IP and MAC addresses to the ARP table if they are not
		already there - otherwise refresh the age of the existing
		entry. */
		if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 800b684:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b688:	2b11      	cmp	r3, #17
 800b68a:	d007      	beq.n	800b69c <prvProcessIPPacket+0xc4>
			 * For UDP packets, this will be done later in xProcessReceivedUDPPacket()
			 * as soon as know that the message will be handled by someone
			 * This will prevent that the ARP cache will get overwritten
			 * with the IP-address of useless broadcast packets
			 */
			vARPRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	1d9a      	adds	r2, r3, #6
 800b690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b692:	68db      	ldr	r3, [r3, #12]
 800b694:	4619      	mov	r1, r3
 800b696:	4610      	mov	r0, r2
 800b698:	f7fe fbe0 	bl	8009e5c <vARPRefreshCacheEntry>
		}
		switch( ucProtocol )
 800b69c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b6a0:	2b06      	cmp	r3, #6
 800b6a2:	d06b      	beq.n	800b77c <prvProcessIPPacket+0x1a4>
 800b6a4:	2b11      	cmp	r3, #17
 800b6a6:	d01a      	beq.n	800b6de <prvProcessIPPacket+0x106>
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d000      	beq.n	800b6ae <prvProcessIPPacket+0xd6>
				}
				break;
#endif
			default	:
				/* Not a supported frame type. */
				break;
 800b6ac:	e078      	b.n	800b7a0 <prvProcessIPPacket+0x1c8>
                    if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	69db      	ldr	r3, [r3, #28]
 800b6b2:	2b29      	cmp	r3, #41	; 0x29
 800b6b4:	d90f      	bls.n	800b6d6 <prvProcessIPPacket+0xfe>
                        ICMPPacket_t *pxICMPPacket = ( ICMPPacket_t * )( pxNetworkBuffer->pucEthernetBuffer );
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	699b      	ldr	r3, [r3, #24]
 800b6ba:	60fb      	str	r3, [r7, #12]
                        if( pxIPHeader->ulDestinationIPAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 800b6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6be:	691a      	ldr	r2, [r3, #16]
 800b6c0:	4b3a      	ldr	r3, [pc, #232]	; (800b7ac <prvProcessIPPacket+0x1d4>)
 800b6c2:	695b      	ldr	r3, [r3, #20]
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d168      	bne.n	800b79a <prvProcessIPPacket+0x1c2>
                            eReturn = prvProcessICMPPacket( pxICMPPacket );
 800b6c8:	68f8      	ldr	r0, [r7, #12]
 800b6ca:	f000 f8cb 	bl	800b864 <prvProcessICMPPacket>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800b6d4:	e061      	b.n	800b79a <prvProcessIPPacket+0x1c2>
                        eReturn = eReleaseBuffer;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800b6dc:	e05d      	b.n	800b79a <prvProcessIPPacket+0x1c2>
					UDPPacket_t *pxUDPPacket = ( UDPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	699b      	ldr	r3, [r3, #24]
 800b6e2:	60bb      	str	r3, [r7, #8]
                    if ( pxNetworkBuffer->xDataLength >= sizeof( UDPPacket_t ) )
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	69db      	ldr	r3, [r3, #28]
 800b6e8:	2b29      	cmp	r3, #41	; 0x29
 800b6ea:	d943      	bls.n	800b774 <prvProcessIPPacket+0x19c>
                        pxNetworkBuffer->xDataLength -= sizeof( UDPPacket_t );
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	69db      	ldr	r3, [r3, #28]
 800b6f0:	f1a3 022a 	sub.w	r2, r3, #42	; 0x2a
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	61da      	str	r2, [r3, #28]
                        if( ( FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usLength ) - sizeof( UDPHeader_t ) ) <
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b6fc:	b29b      	uxth	r3, r3
 800b6fe:	021b      	lsls	r3, r3, #8
 800b700:	b21a      	sxth	r2, r3
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b706:	b29b      	uxth	r3, r3
 800b708:	0a1b      	lsrs	r3, r3, #8
 800b70a:	b29b      	uxth	r3, r3
 800b70c:	b21b      	sxth	r3, r3
 800b70e:	4313      	orrs	r3, r2
 800b710:	b21b      	sxth	r3, r3
 800b712:	b29b      	uxth	r3, r3
 800b714:	f1a3 0208 	sub.w	r2, r3, #8
                                pxNetworkBuffer->xDataLength )
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	69db      	ldr	r3, [r3, #28]
                        if( ( FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usLength ) - sizeof( UDPHeader_t ) ) <
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d211      	bcs.n	800b744 <prvProcessIPPacket+0x16c>
                            pxNetworkBuffer->xDataLength = FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usLength ) - 
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b724:	b29b      	uxth	r3, r3
 800b726:	021b      	lsls	r3, r3, #8
 800b728:	b21a      	sxth	r2, r3
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b72e:	b29b      	uxth	r3, r3
 800b730:	0a1b      	lsrs	r3, r3, #8
 800b732:	b29b      	uxth	r3, r3
 800b734:	b21b      	sxth	r3, r3
 800b736:	4313      	orrs	r3, r2
 800b738:	b21b      	sxth	r3, r3
 800b73a:	b29b      	uxth	r3, r3
 800b73c:	f1a3 0208 	sub.w	r2, r3, #8
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	61da      	str	r2, [r3, #28]
                        pxNetworkBuffer->usPort = pxUDPPacket->xUDPHeader.usSourcePort;
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b748:	b29a      	uxth	r2, r3
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	841a      	strh	r2, [r3, #32]
                        pxNetworkBuffer->ulIPAddress = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	f8d3 201a 	ldr.w	r2, [r3, #26]
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	615a      	str	r2, [r3, #20]
                        if( xProcessReceivedUDPPacket( pxNetworkBuffer, 
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	4619      	mov	r1, r3
 800b760:	6838      	ldr	r0, [r7, #0]
 800b762:	f004 fe71 	bl	8010448 <xProcessReceivedUDPPacket>
 800b766:	4603      	mov	r3, r0
 800b768:	2b01      	cmp	r3, #1
 800b76a:	d118      	bne.n	800b79e <prvProcessIPPacket+0x1c6>
                            eReturn = eFrameConsumed;
 800b76c:	2303      	movs	r3, #3
 800b76e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800b772:	e014      	b.n	800b79e <prvProcessIPPacket+0x1c6>
                        eReturn = eReleaseBuffer;
 800b774:	2300      	movs	r3, #0
 800b776:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800b77a:	e010      	b.n	800b79e <prvProcessIPPacket+0x1c6>
					if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 800b77c:	6838      	ldr	r0, [r7, #0]
 800b77e:	f003 fb37 	bl	800edf0 <xProcessReceivedTCPPacket>
 800b782:	4603      	mov	r3, r0
 800b784:	2b01      	cmp	r3, #1
 800b786:	d102      	bne.n	800b78e <prvProcessIPPacket+0x1b6>
						eReturn = eFrameConsumed;
 800b788:	2303      	movs	r3, #3
 800b78a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					xProcessedTCPMessage++;
 800b78e:	4b08      	ldr	r3, [pc, #32]	; (800b7b0 <prvProcessIPPacket+0x1d8>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	3301      	adds	r3, #1
 800b794:	4a06      	ldr	r2, [pc, #24]	; (800b7b0 <prvProcessIPPacket+0x1d8>)
 800b796:	6013      	str	r3, [r2, #0]
				break;
 800b798:	e002      	b.n	800b7a0 <prvProcessIPPacket+0x1c8>
				break;
 800b79a:	bf00      	nop
 800b79c:	e000      	b.n	800b7a0 <prvProcessIPPacket+0x1c8>
				break;
 800b79e:	bf00      	nop
		}
	}

	return eReturn;
 800b7a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3730      	adds	r7, #48	; 0x30
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	200001b0 	.word	0x200001b0
 800b7b0:	20004e90 	.word	0x20004e90

0800b7b4 <prvProcessICMPEchoRequest>:
/*-----------------------------------------------------------*/

#if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )

	static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket )
	{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b087      	sub	sp, #28
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
	ICMPHeader_t *pxICMPHeader;
	IPHeader_t *pxIPHeader;
	uint16_t usRequest;

		pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	3322      	adds	r3, #34	; 0x22
 800b7c0:	617b      	str	r3, [r7, #20]
		pxIPHeader = &( pxICMPPacket->xIPHeader );
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	330e      	adds	r3, #14
 800b7c6:	613b      	str	r3, [r7, #16]

		/* The checksum can be checked here - but a ping reply should be
		returned even if the checksum is incorrect so the other end can
		tell that the ping was received - even if the ping reply contains
		invalid data. */
		pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	701a      	strb	r2, [r3, #0]
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	68da      	ldr	r2, [r3, #12]
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	611a      	str	r2, [r3, #16]
		pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800b7d6:	4b22      	ldr	r3, [pc, #136]	; (800b860 <prvProcessICMPEchoRequest+0xac>)
 800b7d8:	695a      	ldr	r2, [r3, #20]
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	60da      	str	r2, [r3, #12]
		has been changed to ipICMP_ECHO_REPLY.  This is faster than calling
		usGenerateChecksum(). */

		/* due to compiler warning "integer operation result is out of range" */

		usRequest = ( uint16_t ) ( ( uint16_t )ipICMP_ECHO_REQUEST << 8 );
 800b7de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b7e2:	81fb      	strh	r3, [r7, #14]

		if( pxICMPHeader->usChecksum >= FreeRTOS_htons( 0xFFFFu - usRequest ) )
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	885b      	ldrh	r3, [r3, #2]
 800b7e8:	b29a      	uxth	r2, r3
 800b7ea:	89fb      	ldrh	r3, [r7, #14]
 800b7ec:	43db      	mvns	r3, r3
 800b7ee:	b29b      	uxth	r3, r3
 800b7f0:	021b      	lsls	r3, r3, #8
 800b7f2:	b299      	uxth	r1, r3
 800b7f4:	89fb      	ldrh	r3, [r7, #14]
 800b7f6:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800b7fa:	33ff      	adds	r3, #255	; 0xff
 800b7fc:	0a1b      	lsrs	r3, r3, #8
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	430b      	orrs	r3, r1
 800b802:	b29b      	uxth	r3, r3
 800b804:	429a      	cmp	r2, r3
 800b806:	d312      	bcc.n	800b82e <prvProcessICMPEchoRequest+0x7a>
		{
			pxICMPHeader->usChecksum = ( uint16_t )
				( ( ( uint32_t ) pxICMPHeader->usChecksum ) +
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	885b      	ldrh	r3, [r3, #2]
 800b80c:	b29a      	uxth	r2, r3
					FreeRTOS_htons( usRequest + 1UL ) );
 800b80e:	89fb      	ldrh	r3, [r7, #14]
 800b810:	3301      	adds	r3, #1
 800b812:	b29b      	uxth	r3, r3
 800b814:	021b      	lsls	r3, r3, #8
 800b816:	b299      	uxth	r1, r3
 800b818:	89fb      	ldrh	r3, [r7, #14]
 800b81a:	3301      	adds	r3, #1
 800b81c:	0a1b      	lsrs	r3, r3, #8
 800b81e:	b29b      	uxth	r3, r3
 800b820:	430b      	orrs	r3, r1
 800b822:	b29b      	uxth	r3, r3
			pxICMPHeader->usChecksum = ( uint16_t )
 800b824:	4413      	add	r3, r2
 800b826:	b29a      	uxth	r2, r3
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	805a      	strh	r2, [r3, #2]
 800b82c:	e010      	b.n	800b850 <prvProcessICMPEchoRequest+0x9c>
		}
		else
		{
			pxICMPHeader->usChecksum = ( uint16_t )
				( ( ( uint32_t ) pxICMPHeader->usChecksum ) +
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	885b      	ldrh	r3, [r3, #2]
 800b832:	b29a      	uxth	r2, r3
					FreeRTOS_htons( usRequest ) );
 800b834:	89fb      	ldrh	r3, [r7, #14]
 800b836:	021b      	lsls	r3, r3, #8
 800b838:	b219      	sxth	r1, r3
 800b83a:	89fb      	ldrh	r3, [r7, #14]
 800b83c:	0a1b      	lsrs	r3, r3, #8
 800b83e:	b29b      	uxth	r3, r3
 800b840:	b21b      	sxth	r3, r3
 800b842:	430b      	orrs	r3, r1
 800b844:	b21b      	sxth	r3, r3
 800b846:	b29b      	uxth	r3, r3
			pxICMPHeader->usChecksum = ( uint16_t )
 800b848:	4413      	add	r3, r2
 800b84a:	b29a      	uxth	r2, r3
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	805a      	strh	r2, [r3, #2]
		}
		return eReturnEthernetFrame;
 800b850:	2302      	movs	r3, #2
	}
 800b852:	4618      	mov	r0, r3
 800b854:	371c      	adds	r7, #28
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr
 800b85e:	bf00      	nop
 800b860:	200001b0 	.word	0x200001b0

0800b864 <prvProcessICMPPacket>:
/*-----------------------------------------------------------*/

#if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

	static eFrameProcessingResult_t prvProcessICMPPacket( ICMPPacket_t * const pxICMPPacket )
	{
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
	eFrameProcessingResult_t eReturn = eReleaseBuffer;
 800b86c:	2300      	movs	r3, #0
 800b86e:	73fb      	strb	r3, [r7, #15]

		iptraceICMP_PACKET_RECEIVED();
		switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800b876:	2b00      	cmp	r3, #0
 800b878:	d008      	beq.n	800b88c <prvProcessICMPPacket+0x28>
 800b87a:	2b08      	cmp	r3, #8
 800b87c:	d000      	beq.n	800b880 <prvProcessICMPPacket+0x1c>
				}
				#endif /* ipconfigSUPPORT_OUTGOING_PINGS */
				break;

			default	:
				break;
 800b87e:	e006      	b.n	800b88e <prvProcessICMPPacket+0x2a>
					eReturn = prvProcessICMPEchoRequest( pxICMPPacket );
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f7ff ff97 	bl	800b7b4 <prvProcessICMPEchoRequest>
 800b886:	4603      	mov	r3, r0
 800b888:	73fb      	strb	r3, [r7, #15]
				break;
 800b88a:	e000      	b.n	800b88e <prvProcessICMPPacket+0x2a>
				break;
 800b88c:	bf00      	nop
		}

		return eReturn;
 800b88e:	7bfb      	ldrb	r3, [r7, #15]
	}
 800b890:	4618      	mov	r0, r3
 800b892:	3710      	adds	r7, #16
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <usGenerateProtocolChecksum>:

#endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 ) */
/*-----------------------------------------------------------*/

uint16_t usGenerateProtocolChecksum( const uint8_t * const pucEthernetBuffer, size_t uxBufferLength, BaseType_t xOutgoingPacket )
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b08c      	sub	sp, #48	; 0x30
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	607a      	str	r2, [r7, #4]
#if( ipconfigHAS_DEBUG_PRINTF != 0 )
	const char *pcType;
#endif

    /* Check for minimum packet size. */
    if( uxBufferLength < sizeof( IPPacket_t ) )
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	2b21      	cmp	r3, #33	; 0x21
 800b8a8:	d802      	bhi.n	800b8b0 <usGenerateProtocolChecksum+0x18>
    {
        return ipINVALID_LENGTH;
 800b8aa:	f241 2334 	movw	r3, #4660	; 0x1234
 800b8ae:	e0d7      	b.n	800ba60 <usGenerateProtocolChecksum+0x1c8>
    }

    /* Parse the packet length. */
	pxIPPacket = ( const IPPacket_t * ) pucEthernetBuffer;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* Per https://tools.ietf.org/html/rfc791, the four-bit Internet Header 
    Length field contains the length of the internet header in 32-bit words. */
	uxIPHeaderLength = ( UBaseType_t ) 
        ( sizeof( uint32_t ) * ( pxIPPacket->xIPHeader.ucVersionHeaderLength & 0x0Fu ) ); 
 800b8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b6:	7b9b      	ldrb	r3, [r3, #14]
 800b8b8:	f003 030f 	and.w	r3, r3, #15
	uxIPHeaderLength = ( UBaseType_t ) 
 800b8bc:	009b      	lsls	r3, r3, #2
 800b8be:	623b      	str	r3, [r7, #32]

    /* Check for minimum packet size. */
    if( uxBufferLength < sizeof( IPPacket_t ) + uxIPHeaderLength - ipSIZE_OF_IPv4_HEADER )
 800b8c0:	6a3b      	ldr	r3, [r7, #32]
 800b8c2:	f103 020e 	add.w	r2, r3, #14
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d902      	bls.n	800b8d2 <usGenerateProtocolChecksum+0x3a>
    {
        return ipINVALID_LENGTH;
 800b8cc:	f241 2334 	movw	r3, #4660	; 0x1234
 800b8d0:	e0c6      	b.n	800ba60 <usGenerateProtocolChecksum+0x1c8>
    }
    if( uxBufferLength < FreeRTOS_ntohs( pxIPPacket->xIPHeader.usLength ) )
 800b8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d4:	8a1b      	ldrh	r3, [r3, #16]
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	021b      	lsls	r3, r3, #8
 800b8da:	b21a      	sxth	r2, r3
 800b8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8de:	8a1b      	ldrh	r3, [r3, #16]
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	0a1b      	lsrs	r3, r3, #8
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	b21b      	sxth	r3, r3
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	b21b      	sxth	r3, r3
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d902      	bls.n	800b8fc <usGenerateProtocolChecksum+0x64>
    {
        return ipINVALID_LENGTH;
 800b8f6:	f241 2334 	movw	r3, #4660	; 0x1234
 800b8fa:	e0b1      	b.n	800ba60 <usGenerateProtocolChecksum+0x1c8>
    }

    /* Identify the next protocol. */
    ucProtocol = pxIPPacket->xIPHeader.ucProtocol; 
 800b8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fe:	7ddb      	ldrb	r3, [r3, #23]
 800b900:	77fb      	strb	r3, [r7, #31]
    /* N.B., if this IP packet header includes Options, then the following 
    assignment results in a pointer into the protocol packet with the Ethernet 
    and IP headers incorrectly aligned. However, either way, the "third"
    protocol (Layer 3 or 4) header will be aligned, which is the convenience 
    of this calculation. */
    pxProtPack = ( ProtocolPacket_t * ) ( pucEthernetBuffer + ( uxIPHeaderLength - ipSIZE_OF_IPv4_HEADER ) );
 800b902:	6a3b      	ldr	r3, [r7, #32]
 800b904:	3b14      	subs	r3, #20
 800b906:	68fa      	ldr	r2, [r7, #12]
 800b908:	4413      	add	r3, r2
 800b90a:	61bb      	str	r3, [r7, #24]

    /* Switch on the Layer 3/4 protocol. */
	if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800b90c:	7ffb      	ldrb	r3, [r7, #31]
 800b90e:	2b11      	cmp	r3, #17
 800b910:	d10c      	bne.n	800b92c <usGenerateProtocolChecksum+0x94>
	{
        if( uxBufferLength < uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER )
 800b912:	6a3b      	ldr	r3, [r7, #32]
 800b914:	f103 0216 	add.w	r2, r3, #22
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d902      	bls.n	800b924 <usGenerateProtocolChecksum+0x8c>
        {
            return ipINVALID_LENGTH;
 800b91e:	f241 2334 	movw	r3, #4660	; 0x1234
 800b922:	e09d      	b.n	800ba60 <usGenerateProtocolChecksum+0x1c8>
        }

		pusChecksum = ( uint16_t * ) ( &( pxProtPack->xUDPPacket.xUDPHeader.usChecksum ) );
 800b924:	69bb      	ldr	r3, [r7, #24]
 800b926:	3328      	adds	r3, #40	; 0x28
 800b928:	62bb      	str	r3, [r7, #40]	; 0x28
 800b92a:	e025      	b.n	800b978 <usGenerateProtocolChecksum+0xe0>
		{
			pcType = "UDP";
		}
		#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */
	}
	else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 800b92c:	7ffb      	ldrb	r3, [r7, #31]
 800b92e:	2b06      	cmp	r3, #6
 800b930:	d10c      	bne.n	800b94c <usGenerateProtocolChecksum+0xb4>
	{
        if( uxBufferLength < uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER )
 800b932:	6a3b      	ldr	r3, [r7, #32]
 800b934:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d902      	bls.n	800b944 <usGenerateProtocolChecksum+0xac>
        {
            return ipINVALID_LENGTH;
 800b93e:	f241 2334 	movw	r3, #4660	; 0x1234
 800b942:	e08d      	b.n	800ba60 <usGenerateProtocolChecksum+0x1c8>
        }
        
        pusChecksum = ( uint16_t * ) ( &( pxProtPack->xTCPPacket.xTCPHeader.usChecksum ) );
 800b944:	69bb      	ldr	r3, [r7, #24]
 800b946:	3332      	adds	r3, #50	; 0x32
 800b948:	62bb      	str	r3, [r7, #40]	; 0x28
 800b94a:	e015      	b.n	800b978 <usGenerateProtocolChecksum+0xe0>
		{
			pcType = "TCP";
		}
		#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */
	}
	else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 800b94c:	7ffb      	ldrb	r3, [r7, #31]
 800b94e:	2b01      	cmp	r3, #1
 800b950:	d002      	beq.n	800b958 <usGenerateProtocolChecksum+0xc0>
 800b952:	7ffb      	ldrb	r3, [r7, #31]
 800b954:	2b02      	cmp	r3, #2
 800b956:	d10c      	bne.n	800b972 <usGenerateProtocolChecksum+0xda>
			( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
	{
        if( uxBufferLength < uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMP_HEADER )
 800b958:	6a3b      	ldr	r3, [r7, #32]
 800b95a:	f103 0216 	add.w	r2, r3, #22
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	429a      	cmp	r2, r3
 800b962:	d902      	bls.n	800b96a <usGenerateProtocolChecksum+0xd2>
        {
            return ipINVALID_LENGTH;
 800b964:	f241 2334 	movw	r3, #4660	; 0x1234
 800b968:	e07a      	b.n	800ba60 <usGenerateProtocolChecksum+0x1c8>
        }
        
        pusChecksum = ( uint16_t * ) ( &( pxProtPack->xICMPPacket.xICMPHeader.usChecksum ) );
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	3324      	adds	r3, #36	; 0x24
 800b96e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b970:	e002      	b.n	800b978 <usGenerateProtocolChecksum+0xe0>
		#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */
	}
	else
	{
		/* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
		return ipUNHANDLED_PROTOCOL;
 800b972:	f244 3321 	movw	r3, #17185	; 0x4321
 800b976:	e073      	b.n	800ba60 <usGenerateProtocolChecksum+0x1c8>
	}

    /* The protocol and checksum field have been identified. Check the direction
    of the packet. */
	if( xOutgoingPacket != pdFALSE )
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d003      	beq.n	800b986 <usGenerateProtocolChecksum+0xee>
	{
		/* This is an outgoing packet. Before calculating the checksum, set it
		to zero. */
		*( pusChecksum ) = 0u;
 800b97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b980:	2200      	movs	r2, #0
 800b982:	801a      	strh	r2, [r3, #0]
 800b984:	e009      	b.n	800b99a <usGenerateProtocolChecksum+0x102>
	}
	else if( ( *pusChecksum == 0u ) && ( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP ) )
 800b986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b988:	881b      	ldrh	r3, [r3, #0]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d105      	bne.n	800b99a <usGenerateProtocolChecksum+0x102>
 800b98e:	7ffb      	ldrb	r3, [r7, #31]
 800b990:	2b11      	cmp	r3, #17
 800b992:	d102      	bne.n	800b99a <usGenerateProtocolChecksum+0x102>
	{
		/* Sender hasn't set the checksum, no use to calculate it. */
		return ipCORRECT_CRC;
 800b994:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b998:	e062      	b.n	800ba60 <usGenerateProtocolChecksum+0x1c8>
	}

	ulLength = ( uint32_t )
		( FreeRTOS_ntohs( pxIPPacket->xIPHeader.usLength ) - ( ( uint16_t ) uxIPHeaderLength ) ); /* normally minus 20 */
 800b99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99c:	8a1b      	ldrh	r3, [r3, #16]
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	021b      	lsls	r3, r3, #8
 800b9a2:	b21a      	sxth	r2, r3
 800b9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a6:	8a1b      	ldrh	r3, [r3, #16]
 800b9a8:	b29b      	uxth	r3, r3
 800b9aa:	0a1b      	lsrs	r3, r3, #8
 800b9ac:	b29b      	uxth	r3, r3
 800b9ae:	b21b      	sxth	r3, r3
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	b21b      	sxth	r3, r3
 800b9b4:	b29b      	uxth	r3, r3
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	6a3b      	ldr	r3, [r7, #32]
 800b9ba:	b29b      	uxth	r3, r3
 800b9bc:	1ad3      	subs	r3, r2, r3
	ulLength = ( uint32_t )
 800b9be:	617b      	str	r3, [r7, #20]

	if( ( ulLength < sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ||
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	2b07      	cmp	r3, #7
 800b9c4:	d905      	bls.n	800b9d2 <usGenerateProtocolChecksum+0x13a>
		( ulLength > ( uint32_t )( ipconfigNETWORK_MTU - uxIPHeaderLength ) ) )
 800b9c6:	6a3b      	ldr	r3, [r7, #32]
 800b9c8:	f5c3 6296 	rsb	r2, r3, #1200	; 0x4b0
	if( ( ulLength < sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ||
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d202      	bcs.n	800b9d8 <usGenerateProtocolChecksum+0x140>

		/* Again, in a 16-bit return value there is no space to indicate an
		error.  For incoming packets, 0x1234 will cause dropping of the packet.
		For outgoing packets, there is a serious problem with the
		format/length */
		return ipINVALID_LENGTH;
 800b9d2:	f241 2334 	movw	r3, #4660	; 0x1234
 800b9d6:	e043      	b.n	800ba60 <usGenerateProtocolChecksum+0x1c8>
	}
	if( ucProtocol <= ( uint8_t ) ipPROTOCOL_IGMP )
 800b9d8:	7ffb      	ldrb	r3, [r7, #31]
 800b9da:	2b02      	cmp	r3, #2
 800b9dc:	d80a      	bhi.n	800b9f4 <usGenerateProtocolChecksum+0x15c>
	{
		/* ICMP/IGMP do not have a pseudo header for CRC-calculation. */
		usChecksum = ( uint16_t )
			( ~usGenerateChecksum( 0UL,
				( uint8_t * ) &( pxProtPack->xTCPPacket.xTCPHeader ), ( size_t ) ulLength ) );
 800b9de:	69bb      	ldr	r3, [r7, #24]
 800b9e0:	3322      	adds	r3, #34	; 0x22
			( ~usGenerateChecksum( 0UL,
 800b9e2:	697a      	ldr	r2, [r7, #20]
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	2000      	movs	r0, #0
 800b9e8:	f000 f83e 	bl	800ba68 <usGenerateChecksum>
 800b9ec:	4603      	mov	r3, r0
		usChecksum = ( uint16_t )
 800b9ee:	43db      	mvns	r3, r3
 800b9f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b9f2:	e011      	b.n	800ba18 <usGenerateProtocolChecksum+0x180>
	}
	else
	{
		/* For UDP and TCP, sum the pseudo header, i.e. IP protocol + length
		fields */
		usChecksum = ( uint16_t ) ( ulLength + ( ( uint16_t ) ucProtocol ) );
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	b29a      	uxth	r2, r3
 800b9f8:	7ffb      	ldrb	r3, [r7, #31]
 800b9fa:	b29b      	uxth	r3, r3
 800b9fc:	4413      	add	r3, r2
 800b9fe:	85fb      	strh	r3, [r7, #46]	; 0x2e

		/* And then continue at the IPv4 source and destination addresses. */
		usChecksum = ( uint16_t )
			( ~usGenerateChecksum( ( uint32_t ) usChecksum, ( uint8_t * )&( pxIPPacket->xIPHeader.ulSourceIPAddress ),
 800ba00:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 800ba02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba04:	f103 011a 	add.w	r1, r3, #26
				( 2u * sizeof( pxIPPacket->xIPHeader.ulSourceIPAddress ) + ulLength ) ) );
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	3308      	adds	r3, #8
			( ~usGenerateChecksum( ( uint32_t ) usChecksum, ( uint8_t * )&( pxIPPacket->xIPHeader.ulSourceIPAddress ),
 800ba0c:	461a      	mov	r2, r3
 800ba0e:	f000 f82b 	bl	800ba68 <usGenerateChecksum>
 800ba12:	4603      	mov	r3, r0
		usChecksum = ( uint16_t )
 800ba14:	43db      	mvns	r3, r3
 800ba16:	85fb      	strh	r3, [r7, #46]	; 0x2e

		/* Sum TCP header and data. */
	}

	if( xOutgoingPacket == pdFALSE )
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d106      	bne.n	800ba2c <usGenerateProtocolChecksum+0x194>
	{
		/* This is in incoming packet. If the CRC is correct, it should be zero. */
		if( usChecksum == 0u )
 800ba1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d10c      	bne.n	800ba3e <usGenerateProtocolChecksum+0x1a6>
		{
			usChecksum = ( uint16_t )ipCORRECT_CRC;
 800ba24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba28:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ba2a:	e008      	b.n	800ba3e <usGenerateProtocolChecksum+0x1a6>
		}
	}
	else
	{
		if( ( usChecksum == 0u ) && ( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP ) )
 800ba2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d105      	bne.n	800ba3e <usGenerateProtocolChecksum+0x1a6>
 800ba32:	7ffb      	ldrb	r3, [r7, #31]
 800ba34:	2b11      	cmp	r3, #17
 800ba36:	d102      	bne.n	800ba3e <usGenerateProtocolChecksum+0x1a6>
					FreeRTOS_debug_printf( ( "usGenerateProtocolChecksum[%s]: crc swap: %04X\n", pcType, usChecksum ) );
				}
			}
			#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */

			usChecksum = ( uint16_t )0xffffu;
 800ba38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		}
	}
	usChecksum = FreeRTOS_htons( usChecksum );
 800ba3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ba40:	021b      	lsls	r3, r3, #8
 800ba42:	b21a      	sxth	r2, r3
 800ba44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ba46:	0a1b      	lsrs	r3, r3, #8
 800ba48:	b29b      	uxth	r3, r3
 800ba4a:	b21b      	sxth	r3, r3
 800ba4c:	4313      	orrs	r3, r2
 800ba4e:	b21b      	sxth	r3, r3
 800ba50:	85fb      	strh	r3, [r7, #46]	; 0x2e

	if( xOutgoingPacket != pdFALSE )
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d002      	beq.n	800ba5e <usGenerateProtocolChecksum+0x1c6>
	{
		*( pusChecksum ) = usChecksum;
 800ba58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ba5c:	801a      	strh	r2, [r3, #0]
			FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulDestinationIPAddress ),
			FreeRTOS_ntohs( *pusChecksum ) ) );
	}
	#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */

	return usChecksum;
 800ba5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3730      	adds	r7, #48	; 0x30
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <usGenerateChecksum>:
 *     method should process. The method's memory iterator is initialized to this value.
 *   uxDataLengthBytes: This argument contains the number of bytes that this method
 *     should process.
 */
uint16_t usGenerateChecksum( uint32_t ulSum, const uint8_t * pucNextData, size_t uxDataLengthBytes )
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b08d      	sub	sp, #52	; 0x34
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	60f8      	str	r0, [r7, #12]
 800ba70:	60b9      	str	r1, [r7, #8]
 800ba72:	607a      	str	r2, [r7, #4]
xUnion32 xSum2, xSum, xTerm;
xUnionPtr xSource;		/* Points to first byte */
xUnionPtr xLastSource;	/* Points to last byte plus one */
uint32_t ulAlignBits, ulCarry = 0ul;
 800ba74:	2300      	movs	r3, #0
 800ba76:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Small MCUs often spend up to 30% of the time doing checksum calculations
	This function is optimised for 32-bit CPUs; Each time it will try to fetch
	32-bits, sums it with an accumulator and counts the number of carries. */

	/* Swap the input (little endian platform only). */
	xSum.u32 = FreeRTOS_ntohs( ulSum );
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	b29b      	uxth	r3, r3
 800ba7c:	021b      	lsls	r3, r3, #8
 800ba7e:	b29a      	uxth	r2, r3
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	0a1b      	lsrs	r3, r3, #8
 800ba84:	b29b      	uxth	r3, r3
 800ba86:	4313      	orrs	r3, r2
 800ba88:	b29b      	uxth	r3, r3
 800ba8a:	623b      	str	r3, [r7, #32]
	xTerm.u32 = 0ul;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	61fb      	str	r3, [r7, #28]

	xSource.u8ptr = ( uint8_t * ) pucNextData;
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	61bb      	str	r3, [r7, #24]
	ulAlignBits = ( ( ( uint32_t ) pucNextData ) & 0x03u ); /* gives 0, 1, 2, or 3 */
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	f003 0303 	and.w	r3, r3, #3
 800ba9a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* If byte (8-bit) aligned... */
	if( ( ( ulAlignBits & 1ul ) != 0ul ) && ( uxDataLengthBytes >= ( size_t ) 1 ) )
 800ba9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba9e:	f003 0301 	and.w	r3, r3, #1
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d00b      	beq.n	800babe <usGenerateChecksum+0x56>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d008      	beq.n	800babe <usGenerateChecksum+0x56>
	{
		xTerm.u8[ 1 ] = *( xSource.u8ptr );
 800baac:	69bb      	ldr	r3, [r7, #24]
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	777b      	strb	r3, [r7, #29]
		( xSource.u8ptr )++;
 800bab2:	69bb      	ldr	r3, [r7, #24]
 800bab4:	3301      	adds	r3, #1
 800bab6:	61bb      	str	r3, [r7, #24]
		uxDataLengthBytes--;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	3b01      	subs	r3, #1
 800babc:	607b      	str	r3, [r7, #4]
		/* Now xSource is word (16-bit) aligned. */
	}

	/* If half-word (16-bit) aligned... */
	if( ( ( ulAlignBits == 1u ) || ( ulAlignBits == 2u ) ) && ( uxDataLengthBytes >= 2u ) )
 800babe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d002      	beq.n	800baca <usGenerateChecksum+0x62>
 800bac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac6:	2b02      	cmp	r3, #2
 800bac8:	d10d      	bne.n	800bae6 <usGenerateChecksum+0x7e>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d90a      	bls.n	800bae6 <usGenerateChecksum+0x7e>
	{
		xSum.u32 += *(xSource.u16ptr);
 800bad0:	6a3b      	ldr	r3, [r7, #32]
 800bad2:	69ba      	ldr	r2, [r7, #24]
 800bad4:	8812      	ldrh	r2, [r2, #0]
 800bad6:	4413      	add	r3, r2
 800bad8:	623b      	str	r3, [r7, #32]
		( xSource.u16ptr )++;
 800bada:	69bb      	ldr	r3, [r7, #24]
 800badc:	3302      	adds	r3, #2
 800bade:	61bb      	str	r3, [r7, #24]
		uxDataLengthBytes -= 2u;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	3b02      	subs	r3, #2
 800bae4:	607b      	str	r3, [r7, #4]
		/* Now xSource is word (32-bit) aligned. */
	}

	/* Word (32-bit) aligned, do the most part. */
	xLastSource.u32ptr = ( xSource.u32ptr + ( uxDataLengthBytes / 4u ) ) - 3u;
 800bae6:	69ba      	ldr	r2, [r7, #24]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f023 0303 	bic.w	r3, r3, #3
 800baee:	3b0c      	subs	r3, #12
 800baf0:	4413      	add	r3, r2
 800baf2:	617b      	str	r3, [r7, #20]

	/* In this loop, four 32-bit additions will be done, in total 16 bytes.
	Indexing with constants (0,1,2,3) gives faster code than using
	post-increments. */
	while( xSource.u32ptr < xLastSource.u32ptr )
 800baf4:	e035      	b.n	800bb62 <usGenerateChecksum+0xfa>
	{
		/* Use a secondary Sum2, just to see if the addition produced an
		overflow. */
		xSum2.u32 = xSum.u32 + xSource.u32ptr[ 0 ];
 800baf6:	6a3a      	ldr	r2, [r7, #32]
 800baf8:	69bb      	ldr	r3, [r7, #24]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	4413      	add	r3, r2
 800bafe:	627b      	str	r3, [r7, #36]	; 0x24
		if( xSum2.u32 < xSum.u32 )
 800bb00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb02:	6a3b      	ldr	r3, [r7, #32]
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d202      	bcs.n	800bb0e <usGenerateChecksum+0xa6>
		{
			ulCarry++;
 800bb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		/* Now add the secondary sum to the major sum, and remember if there was
		a carry. */
		xSum.u32 = xSum2.u32 + xSource.u32ptr[ 1 ];
 800bb0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb10:	69bb      	ldr	r3, [r7, #24]
 800bb12:	3304      	adds	r3, #4
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4413      	add	r3, r2
 800bb18:	623b      	str	r3, [r7, #32]
		if( xSum2.u32 > xSum.u32 )
 800bb1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb1c:	6a3b      	ldr	r3, [r7, #32]
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d902      	bls.n	800bb28 <usGenerateChecksum+0xc0>
		{
			ulCarry++;
 800bb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb24:	3301      	adds	r3, #1
 800bb26:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		/* And do the same trick once again for indexes 2 and 3 */
		xSum2.u32 = xSum.u32 + xSource.u32ptr[ 2 ];
 800bb28:	6a3a      	ldr	r2, [r7, #32]
 800bb2a:	69bb      	ldr	r3, [r7, #24]
 800bb2c:	3308      	adds	r3, #8
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4413      	add	r3, r2
 800bb32:	627b      	str	r3, [r7, #36]	; 0x24
		if( xSum2.u32 < xSum.u32 )
 800bb34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb36:	6a3b      	ldr	r3, [r7, #32]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d202      	bcs.n	800bb42 <usGenerateChecksum+0xda>
		{
			ulCarry++;
 800bb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb3e:	3301      	adds	r3, #1
 800bb40:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		xSum.u32 = xSum2.u32 + xSource.u32ptr[ 3 ];
 800bb42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb44:	69bb      	ldr	r3, [r7, #24]
 800bb46:	330c      	adds	r3, #12
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	4413      	add	r3, r2
 800bb4c:	623b      	str	r3, [r7, #32]

		if( xSum2.u32 > xSum.u32 )
 800bb4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb50:	6a3b      	ldr	r3, [r7, #32]
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d902      	bls.n	800bb5c <usGenerateChecksum+0xf4>
		{
			ulCarry++;
 800bb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb58:	3301      	adds	r3, #1
 800bb5a:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		/* And finally advance the pointer 4 * 4 = 16 bytes. */
		xSource.u32ptr += 4;
 800bb5c:	69bb      	ldr	r3, [r7, #24]
 800bb5e:	3310      	adds	r3, #16
 800bb60:	61bb      	str	r3, [r7, #24]
	while( xSource.u32ptr < xLastSource.u32ptr )
 800bb62:	69ba      	ldr	r2, [r7, #24]
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	429a      	cmp	r2, r3
 800bb68:	d3c5      	bcc.n	800baf6 <usGenerateChecksum+0x8e>
	}

	/* Now add all carries. */
	xSum.u32 = ( uint32_t )xSum.u16[ 0 ] + xSum.u16[ 1 ] + ulCarry;
 800bb6a:	8c3b      	ldrh	r3, [r7, #32]
 800bb6c:	461a      	mov	r2, r3
 800bb6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb70:	441a      	add	r2, r3
 800bb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb74:	4413      	add	r3, r2
 800bb76:	623b      	str	r3, [r7, #32]

	uxDataLengthBytes %= 16u;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f003 030f 	and.w	r3, r3, #15
 800bb7e:	607b      	str	r3, [r7, #4]
	xLastSource.u8ptr = ( uint8_t * ) ( xSource.u8ptr + ( uxDataLengthBytes & ~( ( size_t ) 1 ) ) );
 800bb80:	69ba      	ldr	r2, [r7, #24]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f023 0301 	bic.w	r3, r3, #1
 800bb88:	4413      	add	r3, r2
 800bb8a:	617b      	str	r3, [r7, #20]

	/* Half-word aligned. */
	while( xSource.u16ptr < xLastSource.u16ptr )
 800bb8c:	e007      	b.n	800bb9e <usGenerateChecksum+0x136>
	{
		/* At least one more short. */
		xSum.u32 += xSource.u16ptr[ 0 ];
 800bb8e:	6a3b      	ldr	r3, [r7, #32]
 800bb90:	69ba      	ldr	r2, [r7, #24]
 800bb92:	8812      	ldrh	r2, [r2, #0]
 800bb94:	4413      	add	r3, r2
 800bb96:	623b      	str	r3, [r7, #32]
		xSource.u16ptr++;
 800bb98:	69bb      	ldr	r3, [r7, #24]
 800bb9a:	3302      	adds	r3, #2
 800bb9c:	61bb      	str	r3, [r7, #24]
	while( xSource.u16ptr < xLastSource.u16ptr )
 800bb9e:	69ba      	ldr	r2, [r7, #24]
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d3f3      	bcc.n	800bb8e <usGenerateChecksum+0x126>
	}

	if( ( uxDataLengthBytes & ( size_t ) 1 ) != 0u )	/* Maybe one more ? */
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f003 0301 	and.w	r3, r3, #1
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d002      	beq.n	800bbb6 <usGenerateChecksum+0x14e>
	{
		xTerm.u8[ 0 ] = xSource.u8ptr[ 0 ];
 800bbb0:	69bb      	ldr	r3, [r7, #24]
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	773b      	strb	r3, [r7, #28]
	}
	xSum.u32 += xTerm.u32;
 800bbb6:	6a3a      	ldr	r2, [r7, #32]
 800bbb8:	69fb      	ldr	r3, [r7, #28]
 800bbba:	4413      	add	r3, r2
 800bbbc:	623b      	str	r3, [r7, #32]

	/* Now add all carries again. */
	xSum.u32 = ( uint32_t ) xSum.u16[ 0 ] + xSum.u16[ 1 ];
 800bbbe:	8c3b      	ldrh	r3, [r7, #32]
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bbc4:	4413      	add	r3, r2
 800bbc6:	623b      	str	r3, [r7, #32]

	/* The previous summation might have given a 16-bit carry. */
	xSum.u32 = ( uint32_t ) xSum.u16[ 0 ] + xSum.u16[ 1 ];
 800bbc8:	8c3b      	ldrh	r3, [r7, #32]
 800bbca:	461a      	mov	r2, r3
 800bbcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bbce:	4413      	add	r3, r2
 800bbd0:	623b      	str	r3, [r7, #32]

	if( ( ulAlignBits & 1u ) != 0u )
 800bbd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd4:	f003 0301 	and.w	r3, r3, #1
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d007      	beq.n	800bbec <usGenerateChecksum+0x184>
	{
		/* Quite unlikely, but pucNextData might be non-aligned, which would
		 mean that a checksum is calculated starting at an odd position. */
		xSum.u32 = ( ( xSum.u32 & 0xffu ) << 8 ) | ( ( xSum.u32 & 0xff00u ) >> 8 );
 800bbdc:	6a3b      	ldr	r3, [r7, #32]
 800bbde:	021b      	lsls	r3, r3, #8
 800bbe0:	b29a      	uxth	r2, r3
 800bbe2:	6a3b      	ldr	r3, [r7, #32]
 800bbe4:	0a1b      	lsrs	r3, r3, #8
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	623b      	str	r3, [r7, #32]
	}

	/* swap the output (little endian platform only). */
	return FreeRTOS_htons( ( (uint16_t) xSum.u32 ) );
 800bbec:	6a3b      	ldr	r3, [r7, #32]
 800bbee:	b29b      	uxth	r3, r3
 800bbf0:	021b      	lsls	r3, r3, #8
 800bbf2:	b21a      	sxth	r2, r3
 800bbf4:	6a3b      	ldr	r3, [r7, #32]
 800bbf6:	b29b      	uxth	r3, r3
 800bbf8:	0a1b      	lsrs	r3, r3, #8
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	b21b      	sxth	r3, r3
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	b21b      	sxth	r3, r3
 800bc02:	b29b      	uxth	r3, r3
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3734      	adds	r7, #52	; 0x34
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr

0800bc10 <vReturnEthernetFrame>:
/*-----------------------------------------------------------*/

void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer, BaseType_t xReleaseAfterSend )
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b084      	sub	sp, #16
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
	}

	if( pxNetworkBuffer != NULL )
#endif
	{
		pxEthernetHeader = ( EthernetHeader_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	699b      	ldr	r3, [r3, #24]
 800bc1e:	60fb      	str	r3, [r7, #12]

		/* Swap source and destination MAC addresses. */
		memcpy( ( void * ) &( pxEthernetHeader->xDestinationAddress ), ( void * ) &( pxEthernetHeader->xSourceAddress ), sizeof( pxEthernetHeader->xDestinationAddress ) );
 800bc20:	68f8      	ldr	r0, [r7, #12]
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	3306      	adds	r3, #6
 800bc26:	2206      	movs	r2, #6
 800bc28:	4619      	mov	r1, r3
 800bc2a:	f005 f898 	bl	8010d5e <memcpy>
		memcpy( ( void * ) &( pxEthernetHeader->xSourceAddress) , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	3306      	adds	r3, #6
 800bc32:	2206      	movs	r2, #6
 800bc34:	4905      	ldr	r1, [pc, #20]	; (800bc4c <vReturnEthernetFrame+0x3c>)
 800bc36:	4618      	mov	r0, r3
 800bc38:	f005 f891 	bl	8010d5e <memcpy>

		/* Send! */
		xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 800bc3c:	6839      	ldr	r1, [r7, #0]
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f7f9 fa7c 	bl	800513c <xNetworkInterfaceOutput>
	}
}
 800bc44:	bf00      	nop
 800bc46:	3710      	adds	r7, #16
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}
 800bc4c:	200001b0 	.word	0x200001b0

0800bc50 <xIPIsNetworkTaskReady>:
	}
#endif /* ipconfigDNS_USE_CALLBACKS != 0 */
/*-----------------------------------------------------------*/

BaseType_t xIPIsNetworkTaskReady( void )
{
 800bc50:	b480      	push	{r7}
 800bc52:	af00      	add	r7, sp, #0
	return xIPTaskInitialised;
 800bc54:	4b03      	ldr	r3, [pc, #12]	; (800bc64 <xIPIsNetworkTaskReady+0x14>)
 800bc56:	681b      	ldr	r3, [r3, #0]
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr
 800bc62:	bf00      	nop
 800bc64:	20004ec0 	.word	0x20004ec0

0800bc68 <FreeRTOS_max_uint32>:
	static portINLINE UBaseType_t FreeRTOS_max_UBaseType (UBaseType_t a, UBaseType_t b);
	static portINLINE UBaseType_t  	FreeRTOS_min_UBaseType (UBaseType_t  a, UBaseType_t  b);


	static portINLINE int32_t  FreeRTOS_max_int32  (int32_t  a, int32_t  b) { return a >= b ? a : b; }
	static portINLINE uint32_t FreeRTOS_max_uint32 (uint32_t a, uint32_t b) { return a >= b ? a : b; }
 800bc68:	b480      	push	{r7}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	4293      	cmp	r3, r2
 800bc78:	bf38      	it	cc
 800bc7a:	4613      	movcc	r3, r2
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	370c      	adds	r7, #12
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr

0800bc88 <FreeRTOS_round_up>:
	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
	static portINLINE uint32_t FreeRTOS_round_up   (uint32_t a, uint32_t d) { return d * ( ( a + d - 1u ) / d ); }
 800bc88:	b480      	push	{r7}
 800bc8a:	b083      	sub	sp, #12
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
 800bc90:	6039      	str	r1, [r7, #0]
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	4413      	add	r3, r2
 800bc98:	1e5a      	subs	r2, r3, #1
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bca0:	683a      	ldr	r2, [r7, #0]
 800bca2:	fb02 f303 	mul.w	r3, r2, r3
 800bca6:	4618      	mov	r0, r3
 800bca8:	370c      	adds	r7, #12
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb0:	4770      	bx	lr

0800bcb2 <uxStreamBufferSpace>:
}
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferSpace( const StreamBuffer_t *pxBuffer, const size_t uxLower, const size_t uxUpper );
static portINLINE size_t uxStreamBufferSpace( const StreamBuffer_t *pxBuffer, const size_t uxLower, const size_t uxUpper )
{
 800bcb2:	b480      	push	{r7}
 800bcb4:	b087      	sub	sp, #28
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	60f8      	str	r0, [r7, #12]
 800bcba:	60b9      	str	r1, [r7, #8]
 800bcbc:	607a      	str	r2, [r7, #4]
/* Returns the space between uxLower and uxUpper, which equals to the distance minus 1 */
size_t uxCount;

	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	691a      	ldr	r2, [r3, #16]
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	441a      	add	r2, r3
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	1ad3      	subs	r3, r2, r3
 800bcca:	3b01      	subs	r3, #1
 800bccc:	617b      	str	r3, [r7, #20]
	if( uxCount >= pxBuffer->LENGTH )
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	691a      	ldr	r2, [r3, #16]
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d804      	bhi.n	800bce2 <uxStreamBufferSpace+0x30>
	{
		uxCount -= pxBuffer->LENGTH;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	691b      	ldr	r3, [r3, #16]
 800bcdc:	697a      	ldr	r2, [r7, #20]
 800bcde:	1ad3      	subs	r3, r2, r3
 800bce0:	617b      	str	r3, [r7, #20]
	}

	return uxCount;
 800bce2:	697b      	ldr	r3, [r7, #20]
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	371c      	adds	r7, #28
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr

0800bcf0 <uxStreamBufferDistance>:
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferDistance( const StreamBuffer_t *pxBuffer, const size_t uxLower, const size_t uxUpper );
static portINLINE size_t uxStreamBufferDistance( const StreamBuffer_t *pxBuffer, const size_t uxLower, const size_t uxUpper )
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b087      	sub	sp, #28
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	607a      	str	r2, [r7, #4]
/* Returns the distance between uxLower and uxUpper */
size_t uxCount;

	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	691a      	ldr	r2, [r3, #16]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	441a      	add	r2, r3
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	1ad3      	subs	r3, r2, r3
 800bd08:	617b      	str	r3, [r7, #20]
	if ( uxCount >= pxBuffer->LENGTH )
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	691a      	ldr	r2, [r3, #16]
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d804      	bhi.n	800bd1e <uxStreamBufferDistance+0x2e>
	{
		uxCount -= pxBuffer->LENGTH;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	691b      	ldr	r3, [r3, #16]
 800bd18:	697a      	ldr	r2, [r7, #20]
 800bd1a:	1ad3      	subs	r3, r2, r3
 800bd1c:	617b      	str	r3, [r7, #20]
	}

	return uxCount;
 800bd1e:	697b      	ldr	r3, [r7, #20]
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	371c      	adds	r7, #28
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr

0800bd2c <uxStreamBufferGetSpace>:
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t *pxBuffer );
static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t *pxBuffer )
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
/* Returns the number of items which can still be added to uxHead
before hitting on uxTail */
size_t uxHead = pxBuffer->uxHead;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	689b      	ldr	r3, [r3, #8]
 800bd38:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	60bb      	str	r3, [r7, #8]

	return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800bd40:	68ba      	ldr	r2, [r7, #8]
 800bd42:	68f9      	ldr	r1, [r7, #12]
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f7ff ffb4 	bl	800bcb2 <uxStreamBufferSpace>
 800bd4a:	4603      	mov	r3, r0
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3710      	adds	r7, #16
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <uxStreamBufferFrontSpace>:
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t *pxBuffer );
static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t *pxBuffer )
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b084      	sub	sp, #16
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
/* Distance between uxFront and uxTail
or the number of items which can still be added to uxFront,
before hitting on uxTail */

size_t uxFront = pxBuffer->uxFront;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	68db      	ldr	r3, [r3, #12]
 800bd60:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	60bb      	str	r3, [r7, #8]

	return uxStreamBufferSpace( pxBuffer, uxFront, uxTail );
 800bd68:	68ba      	ldr	r2, [r7, #8]
 800bd6a:	68f9      	ldr	r1, [r7, #12]
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f7ff ffa0 	bl	800bcb2 <uxStreamBufferSpace>
 800bd72:	4603      	mov	r3, r0
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3710      	adds	r7, #16
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <uxStreamBufferGetSize>:
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t *pxBuffer );
static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t *pxBuffer )
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
/* Returns the number of items which can be read from uxTail
before reaching uxHead */
size_t uxHead = pxBuffer->uxHead;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	689b      	ldr	r3, [r3, #8]
 800bd88:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	60bb      	str	r3, [r7, #8]

	return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
 800bd90:	68fa      	ldr	r2, [r7, #12]
 800bd92:	68b9      	ldr	r1, [r7, #8]
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f7ff ffab 	bl	800bcf0 <uxStreamBufferDistance>
 800bd9a:	4603      	mov	r3, r0
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3710      	adds	r7, #16
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <vNetworkSocketsInit>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t vNetworkSocketsInit( void )
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	af00      	add	r7, sp, #0
    vListInitialise( &xBoundUDPSocketsList );
 800bda8:	4804      	ldr	r0, [pc, #16]	; (800bdbc <vNetworkSocketsInit+0x18>)
 800bdaa:	f7fb fdb2 	bl	8007912 <vListInitialise>

    #if( ipconfigUSE_TCP == 1 )
    {
        vListInitialise( &xBoundTCPSocketsList );
 800bdae:	4804      	ldr	r0, [pc, #16]	; (800bdc0 <vNetworkSocketsInit+0x1c>)
 800bdb0:	f7fb fdaf 	bl	8007912 <vListInitialise>
    }
    #endif  /* ipconfigUSE_TCP == 1 */

    return pdTRUE;
 800bdb4:	2301      	movs	r3, #1
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	bd80      	pop	{r7, pc}
 800bdba:	bf00      	nop
 800bdbc:	200069a4 	.word	0x200069a4
 800bdc0:	20006990 	.word	0x20006990

0800bdc4 <prvDetermineSocketSize>:
/*-----------------------------------------------------------*/

static BaseType_t prvDetermineSocketSize( BaseType_t xDomain, BaseType_t xType, BaseType_t xProtocol, size_t *pxSocketSize )
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b08c      	sub	sp, #48	; 0x30
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	60f8      	str	r0, [r7, #12]
 800bdcc:	60b9      	str	r1, [r7, #8]
 800bdce:	607a      	str	r2, [r7, #4]
 800bdd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdPASS;
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	62fb      	str	r3, [r7, #44]	; 0x2c
FreeRTOS_Socket_t *pxSocket;

	/* Asserts must not appear before it has been determined that the network
	task is ready - otherwise the asserts will fail. */
	if( xIPIsNetworkTaskReady() == pdFALSE )
 800bdd6:	f7ff ff3b 	bl	800bc50 <xIPIsNetworkTaskReady>
 800bdda:	4603      	mov	r3, r0
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d102      	bne.n	800bde6 <prvDetermineSocketSize+0x22>
	{
		xReturn = pdFAIL;
 800bde0:	2300      	movs	r3, #0
 800bde2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bde4:	e06c      	b.n	800bec0 <prvDetermineSocketSize+0xfc>
	}
	else
	{
		/* Only Ethernet is currently supported. */
		configASSERT( xDomain == FREERTOS_AF_INET );
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	2b02      	cmp	r3, #2
 800bdea:	d009      	beq.n	800be00 <prvDetermineSocketSize+0x3c>
 800bdec:	f04f 0340 	mov.w	r3, #64	; 0x40
 800bdf0:	f383 8811 	msr	BASEPRI, r3
 800bdf4:	f3bf 8f6f 	isb	sy
 800bdf8:	f3bf 8f4f 	dsb	sy
 800bdfc:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdfe:	e7fe      	b.n	800bdfe <prvDetermineSocketSize+0x3a>

		/* Check if the UDP socket-list has been initialised. */
		configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 800be00:	4b32      	ldr	r3, [pc, #200]	; (800becc <prvDetermineSocketSize+0x108>)
 800be02:	689b      	ldr	r3, [r3, #8]
 800be04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be08:	d009      	beq.n	800be1e <prvDetermineSocketSize+0x5a>
 800be0a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800be0e:	f383 8811 	msr	BASEPRI, r3
 800be12:	f3bf 8f6f 	isb	sy
 800be16:	f3bf 8f4f 	dsb	sy
 800be1a:	627b      	str	r3, [r7, #36]	; 0x24
 800be1c:	e7fe      	b.n	800be1c <prvDetermineSocketSize+0x58>
		#if( ipconfigUSE_TCP == 1 )
		{
			/* Check if the TCP socket-list has been initialised. */
			configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 800be1e:	4b2c      	ldr	r3, [pc, #176]	; (800bed0 <prvDetermineSocketSize+0x10c>)
 800be20:	689b      	ldr	r3, [r3, #8]
 800be22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be26:	d009      	beq.n	800be3c <prvDetermineSocketSize+0x78>
 800be28:	f04f 0340 	mov.w	r3, #64	; 0x40
 800be2c:	f383 8811 	msr	BASEPRI, r3
 800be30:	f3bf 8f6f 	isb	sy
 800be34:	f3bf 8f4f 	dsb	sy
 800be38:	623b      	str	r3, [r7, #32]
 800be3a:	e7fe      	b.n	800be3a <prvDetermineSocketSize+0x76>
		}
		#endif  /* ipconfigUSE_TCP == 1 */

		if( xProtocol == FREERTOS_IPPROTO_UDP )
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2b11      	cmp	r3, #17
 800be40:	d115      	bne.n	800be6e <prvDetermineSocketSize+0xaa>
		{
			if( xType != FREERTOS_SOCK_DGRAM )
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	2b02      	cmp	r3, #2
 800be46:	d00e      	beq.n	800be66 <prvDetermineSocketSize+0xa2>
			{
				xReturn = pdFAIL;
 800be48:	2300      	movs	r3, #0
 800be4a:	62fb      	str	r3, [r7, #44]	; 0x2c
                configASSERT( xReturn );
 800be4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d109      	bne.n	800be66 <prvDetermineSocketSize+0xa2>
 800be52:	f04f 0340 	mov.w	r3, #64	; 0x40
 800be56:	f383 8811 	msr	BASEPRI, r3
 800be5a:	f3bf 8f6f 	isb	sy
 800be5e:	f3bf 8f4f 	dsb	sy
 800be62:	61fb      	str	r3, [r7, #28]
 800be64:	e7fe      	b.n	800be64 <prvDetermineSocketSize+0xa0>
			}
			/* In case a UDP socket is created, do not allocate space for TCP data. */
			*pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	224c      	movs	r2, #76	; 0x4c
 800be6a:	601a      	str	r2, [r3, #0]
 800be6c:	e028      	b.n	800bec0 <prvDetermineSocketSize+0xfc>
		}
#if( ipconfigUSE_TCP == 1 )
		else if( xProtocol == FREERTOS_IPPROTO_TCP )
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2b06      	cmp	r3, #6
 800be72:	d116      	bne.n	800bea2 <prvDetermineSocketSize+0xde>
		{
			if( xType != FREERTOS_SOCK_STREAM )
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	2b01      	cmp	r3, #1
 800be78:	d00e      	beq.n	800be98 <prvDetermineSocketSize+0xd4>
			{
				xReturn = pdFAIL;
 800be7a:	2300      	movs	r3, #0
 800be7c:	62fb      	str	r3, [r7, #44]	; 0x2c
                configASSERT( xReturn );
 800be7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be80:	2b00      	cmp	r3, #0
 800be82:	d109      	bne.n	800be98 <prvDetermineSocketSize+0xd4>
 800be84:	f04f 0340 	mov.w	r3, #64	; 0x40
 800be88:	f383 8811 	msr	BASEPRI, r3
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	61bb      	str	r3, [r7, #24]
 800be96:	e7fe      	b.n	800be96 <prvDetermineSocketSize+0xd2>
			}

			*pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800be9e:	601a      	str	r2, [r3, #0]
 800bea0:	e00e      	b.n	800bec0 <prvDetermineSocketSize+0xfc>
		}
#endif  /* ipconfigUSE_TCP == 1 */
		else
		{
			xReturn = pdFAIL;
 800bea2:	2300      	movs	r3, #0
 800bea4:	62fb      	str	r3, [r7, #44]	; 0x2c
            configASSERT( xReturn );
 800bea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d109      	bne.n	800bec0 <prvDetermineSocketSize+0xfc>
 800beac:	f04f 0340 	mov.w	r3, #64	; 0x40
 800beb0:	f383 8811 	msr	BASEPRI, r3
 800beb4:	f3bf 8f6f 	isb	sy
 800beb8:	f3bf 8f4f 	dsb	sy
 800bebc:	617b      	str	r3, [r7, #20]
 800bebe:	e7fe      	b.n	800bebe <prvDetermineSocketSize+0xfa>
		}
	}
	/* In case configASSERT() is not used */
	( void )xDomain;
	return xReturn;
 800bec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3730      	adds	r7, #48	; 0x30
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop
 800becc:	200069a4 	.word	0x200069a4
 800bed0:	20006990 	.word	0x20006990

0800bed4 <FreeRTOS_socket>:
/*-----------------------------------------------------------*/

/* FreeRTOS_socket() allocates and initiates a socket */
Socket_t FreeRTOS_socket( BaseType_t xDomain, BaseType_t xType, BaseType_t xProtocol )
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b088      	sub	sp, #32
 800bed8:	af00      	add	r7, sp, #0
 800beda:	60f8      	str	r0, [r7, #12]
 800bedc:	60b9      	str	r1, [r7, #8]
 800bede:	607a      	str	r2, [r7, #4]
FreeRTOS_Socket_t *pxSocket;
size_t uxSocketSize;
EventGroupHandle_t xEventGroup;
Socket_t xReturn;

	if( prvDetermineSocketSize( xDomain, xType, xProtocol, &uxSocketSize ) == pdFAIL )
 800bee0:	f107 0310 	add.w	r3, r7, #16
 800bee4:	687a      	ldr	r2, [r7, #4]
 800bee6:	68b9      	ldr	r1, [r7, #8]
 800bee8:	68f8      	ldr	r0, [r7, #12]
 800beea:	f7ff ff6b 	bl	800bdc4 <prvDetermineSocketSize>
 800beee:	4603      	mov	r3, r0
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d103      	bne.n	800befc <FreeRTOS_socket+0x28>
	{
		xReturn = FREERTOS_INVALID_SOCKET;
 800bef4:	f04f 33ff 	mov.w	r3, #4294967295
 800bef8:	61bb      	str	r3, [r7, #24]
 800befa:	e07b      	b.n	800bff4 <FreeRTOS_socket+0x120>
	{
		/* Allocate the structure that will hold the socket information.  The
		size depends on the type of socket: UDP sockets need less space.  A
		define 'pvPortMallocSocket' will used to allocate the necessary space.
		By default it points to the FreeRTOS function 'pvPortMalloc()'. */
		pxSocket = ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize );
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	4618      	mov	r0, r3
 800bf00:	f7fb ffce 	bl	8007ea0 <pvPortMalloc>
 800bf04:	61f8      	str	r0, [r7, #28]

		if( pxSocket == NULL )
 800bf06:	69fb      	ldr	r3, [r7, #28]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d103      	bne.n	800bf14 <FreeRTOS_socket+0x40>
		{
			pxSocket = ( FreeRTOS_Socket_t * ) FREERTOS_INVALID_SOCKET;
 800bf0c:	f04f 33ff 	mov.w	r3, #4294967295
 800bf10:	61fb      	str	r3, [r7, #28]
 800bf12:	e06d      	b.n	800bff0 <FreeRTOS_socket+0x11c>
			iptraceFAILED_TO_CREATE_SOCKET();
		}
		else if( ( xEventGroup = xEventGroupCreate() ) == NULL )
 800bf14:	f7fb fbf7 	bl	8007706 <xEventGroupCreate>
 800bf18:	6178      	str	r0, [r7, #20]
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d106      	bne.n	800bf2e <FreeRTOS_socket+0x5a>
		{
			vPortFreeSocket( pxSocket );
 800bf20:	69f8      	ldr	r0, [r7, #28]
 800bf22:	f7fc f87f 	bl	8008024 <vPortFree>
			pxSocket = ( FreeRTOS_Socket_t * ) FREERTOS_INVALID_SOCKET;
 800bf26:	f04f 33ff 	mov.w	r3, #4294967295
 800bf2a:	61fb      	str	r3, [r7, #28]
 800bf2c:	e060      	b.n	800bff0 <FreeRTOS_socket+0x11c>
			iptraceFAILED_TO_CREATE_EVENT_GROUP();
		}
		else
		{
			/* Clear the entire space to avoid nulling individual entries */
			memset( pxSocket, '\0', uxSocketSize );
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	461a      	mov	r2, r3
 800bf32:	2100      	movs	r1, #0
 800bf34:	69f8      	ldr	r0, [r7, #28]
 800bf36:	f004 ff37 	bl	8010da8 <memset>

			pxSocket->xEventGroup = xEventGroup;
 800bf3a:	69fb      	ldr	r3, [r7, #28]
 800bf3c:	697a      	ldr	r2, [r7, #20]
 800bf3e:	605a      	str	r2, [r3, #4]

			/* Initialise the socket's members.  The semaphore will be created
			if the socket is bound to an address, for now the pointer to the
			semaphore is just set to NULL to show it has not been created. */
			if( xProtocol == FREERTOS_IPPROTO_UDP )
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2b11      	cmp	r3, #17
 800bf44:	d104      	bne.n	800bf50 <FreeRTOS_socket+0x7c>
			{
				vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800bf46:	69fb      	ldr	r3, [r7, #28]
 800bf48:	3338      	adds	r3, #56	; 0x38
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7fb fce1 	bl	8007912 <vListInitialise>
					pxSocket->u.xUDP.uxMaxPackets = ( UBaseType_t ) ipconfigUDP_MAX_RX_PACKETS;
				}
				#endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
			}

			vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800bf50:	69fb      	ldr	r3, [r7, #28]
 800bf52:	3308      	adds	r3, #8
 800bf54:	4618      	mov	r0, r3
 800bf56:	f7fb fcfc 	bl	8007952 <vListInitialiseItem>
			listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ( void * ) pxSocket );
 800bf5a:	69fb      	ldr	r3, [r7, #28]
 800bf5c:	69fa      	ldr	r2, [r7, #28]
 800bf5e:	615a      	str	r2, [r3, #20]

			pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 800bf60:	69fb      	ldr	r3, [r7, #28]
 800bf62:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf66:	61da      	str	r2, [r3, #28]
			pxSocket->xSendBlockTime    = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 800bf68:	69fb      	ldr	r3, [r7, #28]
 800bf6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf6e:	621a      	str	r2, [r3, #32]
			pxSocket->ucSocketOptions   = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800bf70:	69fb      	ldr	r3, [r7, #28]
 800bf72:	2202      	movs	r2, #2
 800bf74:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			pxSocket->ucProtocol        = ( uint8_t ) xProtocol; /* protocol: UDP or TCP */
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	b2da      	uxtb	r2, r3
 800bf7c:	69fb      	ldr	r3, [r7, #28]
 800bf7e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

			#if( ipconfigUSE_TCP == 1 )
			{
				if( xProtocol == FREERTOS_IPPROTO_TCP )
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2b06      	cmp	r3, #6
 800bf86:	d133      	bne.n	800bff0 <FreeRTOS_socket+0x11c>
				{
					/* StreamSize is expressed in number of bytes */
					/* Round up buffer sizes to nearest multiple of MSS */
					pxSocket->u.xTCP.usInitMSS    = pxSocket->u.xTCP.usCurMSS = ipconfigTCP_MSS;
 800bf88:	69fb      	ldr	r3, [r7, #28]
 800bf8a:	f44f 6291 	mov.w	r2, #1160	; 0x488
 800bf8e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800bf92:	69fb      	ldr	r3, [r7, #28]
 800bf94:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bf98:	69fb      	ldr	r3, [r7, #28]
 800bf9a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
					pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 800bf9e:	69fb      	ldr	r3, [r7, #28]
 800bfa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bfa4:	66da      	str	r2, [r3, #108]	; 0x6c
					pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 800bfa6:	f44f 6191 	mov.w	r1, #1160	; 0x488
 800bfaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bfae:	f7ff fe6b 	bl	800bc88 <FreeRTOS_round_up>
 800bfb2:	4602      	mov	r2, r0
 800bfb4:	69fb      	ldr	r3, [r7, #28]
 800bfb6:	671a      	str	r2, [r3, #112]	; 0x70
					/* Use half of the buffer size of the TCP windows */
					#if ( ipconfigUSE_TCP_WIN == 1 )
					{
						pxSocket->u.xTCP.uxRxWinSize  = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxRxStreamSize / 2 ) / ipconfigTCP_MSS );
 800bfb8:	69fb      	ldr	r3, [r7, #28]
 800bfba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfbc:	4a10      	ldr	r2, [pc, #64]	; (800c000 <FreeRTOS_socket+0x12c>)
 800bfbe:	fba2 2303 	umull	r2, r3, r2, r3
 800bfc2:	0adb      	lsrs	r3, r3, #11
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	2001      	movs	r0, #1
 800bfc8:	f7ff fe4e 	bl	800bc68 <FreeRTOS_max_uint32>
 800bfcc:	4602      	mov	r2, r0
 800bfce:	69fb      	ldr	r3, [r7, #28]
 800bfd0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
						pxSocket->u.xTCP.uxTxWinSize  = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxTxStreamSize / 2 ) / ipconfigTCP_MSS );
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfd8:	4a09      	ldr	r2, [pc, #36]	; (800c000 <FreeRTOS_socket+0x12c>)
 800bfda:	fba2 2303 	umull	r2, r3, r2, r3
 800bfde:	0adb      	lsrs	r3, r3, #11
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	2001      	movs	r0, #1
 800bfe4:	f7ff fe40 	bl	800bc68 <FreeRTOS_max_uint32>
 800bfe8:	4602      	mov	r2, r0
 800bfea:	69fb      	ldr	r3, [r7, #28]
 800bfec:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				}
			}
			#endif  /* ipconfigUSE_TCP == 1 */
		}

		xReturn = ( Socket_t ) pxSocket;
 800bff0:	69fb      	ldr	r3, [r7, #28]
 800bff2:	61bb      	str	r3, [r7, #24]
	}

	/* Remove compiler warnings in the case the configASSERT() is not defined. */
	( void ) xDomain;

	return xReturn;
 800bff4:	69bb      	ldr	r3, [r7, #24]
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3720      	adds	r7, #32
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop
 800c000:	e1fc780f 	.word	0xe1fc780f

0800c004 <vSocketBind>:
 * vSocketBind(): internal version of bind() that should not be called directly.
 * 'xInternal' is used for TCP sockets only: it allows to have several
 * (connected) child sockets bound to the same server port.
 */
BaseType_t vSocketBind( FreeRTOS_Socket_t *pxSocket, struct freertos_sockaddr * pxAddress, size_t uxAddressLength, BaseType_t xInternal )
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b08c      	sub	sp, #48	; 0x30
 800c008:	af00      	add	r7, sp, #0
 800c00a:	60f8      	str	r0, [r7, #12]
 800c00c:	60b9      	str	r1, [r7, #8]
 800c00e:	607a      	str	r2, [r7, #4]
 800c010:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 800c012:	2300      	movs	r3, #0
 800c014:	62fb      	str	r3, [r7, #44]	; 0x2c
#if( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
	struct freertos_sockaddr xAddress;
#endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */

#if( ipconfigUSE_TCP == 1 )
	if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800c01c:	2b06      	cmp	r3, #6
 800c01e:	d102      	bne.n	800c026 <vSocketBind+0x22>
	{
		pxSocketList = &xBoundTCPSocketsList;
 800c020:	4b42      	ldr	r3, [pc, #264]	; (800c12c <vSocketBind+0x128>)
 800c022:	62bb      	str	r3, [r7, #40]	; 0x28
 800c024:	e001      	b.n	800c02a <vSocketBind+0x26>
	}
	else
#endif  /* ipconfigUSE_TCP == 1 */
	{
		pxSocketList = &xBoundUDPSocketsList;
 800c026:	4b42      	ldr	r3, [pc, #264]	; (800c130 <vSocketBind+0x12c>)
 800c028:	62bb      	str	r3, [r7, #40]	; 0x28

	/* The function prototype is designed to maintain the expected Berkeley
	sockets standard, but this implementation does not use all the parameters. */
	( void ) uxAddressLength;

	configASSERT( pxSocket );
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d109      	bne.n	800c044 <vSocketBind+0x40>
 800c030:	f04f 0340 	mov.w	r3, #64	; 0x40
 800c034:	f383 8811 	msr	BASEPRI, r3
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f3bf 8f4f 	dsb	sy
 800c040:	627b      	str	r3, [r7, #36]	; 0x24
 800c042:	e7fe      	b.n	800c042 <vSocketBind+0x3e>
	configASSERT( pxSocket != FREERTOS_INVALID_SOCKET );
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c04a:	d109      	bne.n	800c060 <vSocketBind+0x5c>
 800c04c:	f04f 0340 	mov.w	r3, #64	; 0x40
 800c050:	f383 8811 	msr	BASEPRI, r3
 800c054:	f3bf 8f6f 	isb	sy
 800c058:	f3bf 8f4f 	dsb	sy
 800c05c:	623b      	str	r3, [r7, #32]
 800c05e:	e7fe      	b.n	800c05e <vSocketBind+0x5a>
	#if( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
	{
		/* pxAddress will be NULL if sendto() was called on a socket without the
		socket being bound to an address. In this case, automatically allocate
		an address and port to the socket. */
		if( pxAddress == NULL )
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d105      	bne.n	800c072 <vSocketBind+0x6e>
		{
			pxAddress = &xAddress;
 800c066:	f107 0314 	add.w	r3, r7, #20
 800c06a:	60bb      	str	r3, [r7, #8]
			/* Put the port to zero to be assigned later. */
			pxAddress->sin_port = 0u;
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	2200      	movs	r2, #0
 800c070:	805a      	strh	r2, [r3, #2]
	}
	#endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */

	/* Sockets must be bound before calling FreeRTOS_sendto() if
	ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
	configASSERT( pxAddress );
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d109      	bne.n	800c08c <vSocketBind+0x88>
 800c078:	f04f 0340 	mov.w	r3, #64	; 0x40
 800c07c:	f383 8811 	msr	BASEPRI, r3
 800c080:	f3bf 8f6f 	isb	sy
 800c084:	f3bf 8f4f 	dsb	sy
 800c088:	61fb      	str	r3, [r7, #28]
 800c08a:	e7fe      	b.n	800c08a <vSocketBind+0x86>

	if( pxAddress != NULL )
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d043      	beq.n	800c11a <vSocketBind+0x116>
	{
		if( pxAddress->sin_port == 0u )
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	885b      	ldrh	r3, [r3, #2]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d110      	bne.n	800c0bc <vSocketBind+0xb8>
		{
			pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t )pxSocket->ucProtocol );            
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f000 f905 	bl	800c2b0 <prvGetPrivatePortNumber>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	805a      	strh	r2, [r3, #2]
            if( 0 == pxAddress->sin_port )
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	885b      	ldrh	r3, [r3, #2]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d102      	bne.n	800c0bc <vSocketBind+0xb8>
            {
                return -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 800c0b6:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800c0ba:	e032      	b.n	800c122 <vSocketBind+0x11e>
		confirmed that the socket was not yet bound to a port.  If it is called
		from the IP-task, no such check is necessary. */

		/* Check to ensure the port is not already in use.  If the bind is
		called internally, a port MAY be used by more than one socket. */
		if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d004      	beq.n	800c0cc <vSocketBind+0xc8>
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800c0c8:	2b06      	cmp	r3, #6
 800c0ca:	d00c      	beq.n	800c0e6 <vSocketBind+0xe2>
			( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	885b      	ldrh	r3, [r3, #2]
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0d4:	f000 f94c 	bl	800c370 <pxListFindListItemWithValue>
 800c0d8:	4603      	mov	r3, r0
		if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d003      	beq.n	800c0e6 <vSocketBind+0xe2>
		{
			FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
				pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ? "TC" : "UD",
				FreeRTOS_ntohs( pxAddress->sin_port ) ) );
			xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 800c0de:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 800c0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0e4:	e01c      	b.n	800c120 <vSocketBind+0x11c>
		}
		else
		{
			/* Allocate the port number to the socket.
			This macro will set 'xBoundSocketListItem->xItemValue' */
			socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	885b      	ldrh	r3, [r3, #2]
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	609a      	str	r2, [r3, #8]

			/* And also store it in a socket field 'usLocalPort' in host-byte-order,
			mostly used for logging and debugging purposes */
			pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	885b      	ldrh	r3, [r3, #2]
 800c0f4:	021b      	lsls	r3, r3, #8
 800c0f6:	b21a      	sxth	r2, r3
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	885b      	ldrh	r3, [r3, #2]
 800c0fc:	0a1b      	lsrs	r3, r3, #8
 800c0fe:	b29b      	uxth	r3, r3
 800c100:	b21b      	sxth	r3, r3
 800c102:	4313      	orrs	r3, r2
 800c104:	b21b      	sxth	r3, r3
 800c106:	b29a      	uxth	r2, r3
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	849a      	strh	r2, [r3, #36]	; 0x24
					vTaskSuspendAll();
				}
				#endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

				/* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
				vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	3308      	adds	r3, #8
 800c110:	4619      	mov	r1, r3
 800c112:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c114:	f7fb fc2a 	bl	800796c <vListInsertEnd>
 800c118:	e002      	b.n	800c120 <vSocketBind+0x11c>
			}
		}
	}
	else
	{
		xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 800c11a:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800c11e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if( xReturn != 0 )
	{
		iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
	}

	return xReturn;
 800c120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
} /* Tested */
 800c122:	4618      	mov	r0, r3
 800c124:	3730      	adds	r7, #48	; 0x30
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	20006990 	.word	0x20006990
 800c130:	200069a4 	.word	0x200069a4

0800c134 <FreeRTOS_closesocket>:
 * In case of a TCP socket: the connection will not be closed automatically
 * Subsequent messages for the closed socket will be responded to with a RST
 * The IP-task will actually close the socket, after receiving a 'eSocketCloseEvent' message
 */
BaseType_t FreeRTOS_closesocket( Socket_t xSocket )
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b086      	sub	sp, #24
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
BaseType_t xResult;
#if( ipconfigUSE_TCP == 1 ) && ( ipconfigUSE_CALLBACKS == 1 )
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * )xSocket;
#endif
IPStackEvent_t xCloseEvent;
xCloseEvent.eEventType = eSocketCloseEvent;
 800c13c:	2309      	movs	r3, #9
 800c13e:	733b      	strb	r3, [r7, #12]
xCloseEvent.pvData = ( void * ) xSocket;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	613b      	str	r3, [r7, #16]

	if( ( xSocket == NULL ) || ( xSocket == FREERTOS_INVALID_SOCKET ) )
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d003      	beq.n	800c152 <FreeRTOS_closesocket+0x1e>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c150:	d102      	bne.n	800c158 <FreeRTOS_closesocket+0x24>
	{
		xResult = 0;
 800c152:	2300      	movs	r3, #0
 800c154:	617b      	str	r3, [r7, #20]
 800c156:	e00e      	b.n	800c176 <FreeRTOS_closesocket+0x42>
		packet handling. */

		/* Note when changing the time-out value below, it must be checked who is calling
		this function. If it is called by the IP-task, a deadlock could occur.
		The IP-task would only call it in case of a user call-back */
		if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) 0 ) == pdFAIL )
 800c158:	f107 030c 	add.w	r3, r7, #12
 800c15c:	2100      	movs	r1, #0
 800c15e:	4618      	mov	r0, r3
 800c160:	f7ff f91e 	bl	800b3a0 <xSendEventStructToIPTask>
 800c164:	4603      	mov	r3, r0
 800c166:	2b00      	cmp	r3, #0
 800c168:	d103      	bne.n	800c172 <FreeRTOS_closesocket+0x3e>
		{
			FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
			xResult = -1;
 800c16a:	f04f 33ff 	mov.w	r3, #4294967295
 800c16e:	617b      	str	r3, [r7, #20]
 800c170:	e001      	b.n	800c176 <FreeRTOS_closesocket+0x42>
		}
		else
		{
			xResult = 1;
 800c172:	2301      	movs	r3, #1
 800c174:	617b      	str	r3, [r7, #20]
		}
	}

	return xResult;
 800c176:	697b      	ldr	r3, [r7, #20]
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3718      	adds	r7, #24
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <vSocketClose>:

/* This is the internal version of FreeRTOS_closesocket()
 * It will be called by the IPtask only to avoid problems with synchronicity
 */
void *vSocketClose( FreeRTOS_Socket_t *pxSocket )
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
NetworkBufferDescriptor_t *pxNetworkBuffer;

	#if( ipconfigUSE_TCP == 1 )
	{
		/* For TCP: clean up a little more. */
		if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800c18e:	2b06      	cmp	r3, #6
 800c190:	d122      	bne.n	800c1d8 <vSocketClose+0x58>
		{
			#if( ipconfigUSE_TCP_WIN == 1 )
			{
				if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c196:	2b00      	cmp	r3, #0
 800c198:	d004      	beq.n	800c1a4 <vSocketClose+0x24>
				{
					vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f004 fac8 	bl	8010734 <vReleaseNetworkBufferAndDescriptor>
				}
				/* Free the resources which were claimed by the tcpWin member */
				vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	33dc      	adds	r3, #220	; 0xdc
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f003 fac9 	bl	800f740 <vTCPWindowDestroy>
			}
			#endif /* ipconfigUSE_TCP_WIN */

			/* Free the input and output streams */
			if( pxSocket->u.xTCP.rxStream != NULL )
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d004      	beq.n	800c1c0 <vSocketClose+0x40>
			{
				vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7fb ff32 	bl	8008024 <vPortFree>
			}

			if( pxSocket->u.xTCP.txStream != NULL )
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d004      	beq.n	800c1d2 <vSocketClose+0x52>
			{
				vPortFreeLarge( pxSocket->u.xTCP.txStream );
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f7fb ff29 	bl	8008024 <vPortFree>
			}

			/* In case this is a child socket, make sure the child-count of the
			parent socket is decreased. */
			prvTCPSetSocketCount( pxSocket );
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f000 f834 	bl	800c240 <prvTCPSetSocketCount>
	}
	#endif  /* ipconfigUSE_TCP == 1 */

	/* Socket must be unbound first, to ensure no more packets are queued on
	it. */
	if( socketSOCKET_IS_BOUND( pxSocket ) != pdFALSE )
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	699b      	ldr	r3, [r3, #24]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d001      	beq.n	800c1e4 <vSocketClose+0x64>
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	e000      	b.n	800c1e6 <vSocketClose+0x66>
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d004      	beq.n	800c1f4 <vSocketClose+0x74>
		{
			vTaskSuspendAll();
		}
		#endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

		uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	3308      	adds	r3, #8
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7fb fc19 	bl	8007a26 <uxListRemove>
		#endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
	}

	/* Now the socket is not bound the list of waiting packets can be
	drained. */
	if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800c1fa:	2b11      	cmp	r3, #17
 800c1fc:	d10f      	bne.n	800c21e <vSocketClose+0x9e>
	{
		while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800c1fe:	e00a      	b.n	800c216 <vSocketClose+0x96>
		{
			pxNetworkBuffer = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c204:	68db      	ldr	r3, [r3, #12]
 800c206:	60fb      	str	r3, [r7, #12]
			uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7fb fc0b 	bl	8007a26 <uxListRemove>
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800c210:	68f8      	ldr	r0, [r7, #12]
 800c212:	f004 fa8f 	bl	8010734 <vReleaseNetworkBufferAndDescriptor>
		while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d1f0      	bne.n	800c200 <vSocketClose+0x80>
		}
	}

	if( pxSocket->xEventGroup )
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d004      	beq.n	800c230 <vSocketClose+0xb0>
	{
		vEventGroupDelete( pxSocket->xEventGroup );
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7fb fb41 	bl	80078b2 <vEventGroupDelete>
		}
	}
	#endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

	/* Anf finally, after all resources have been freed, free the socket space */
	vPortFreeSocket( pxSocket );
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f7fb fef7 	bl	8008024 <vPortFree>

	return 0;
 800c236:	2300      	movs	r3, #0
} /* Tested */
 800c238:	4618      	mov	r0, r3
 800c23a:	3710      	adds	r7, #16
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <prvTCPSetSocketCount>:
	 * When a child socket gets closed, make sure to update the child-count of the
	 * parent.  When a listening parent socket is closed, make sure no child-sockets
	 * keep a pointer to it.
	 */
	static void prvTCPSetSocketCount( FreeRTOS_Socket_t *pxSocketToDelete )
	{
 800c240:	b480      	push	{r7}
 800c242:	b087      	sub	sp, #28
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
	const ListItem_t *pxIterator;
	const MiniListItem_t *pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xBoundTCPSocketsList );
 800c248:	4b18      	ldr	r3, [pc, #96]	; (800c2ac <prvTCPSetSocketCount+0x6c>)
 800c24a:	613b      	str	r3, [r7, #16]
	FreeRTOS_Socket_t *pxOtherSocket;
	uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c250:	81fb      	strh	r3, [r7, #14]

		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	617b      	str	r3, [r7, #20]
 800c258:	e01d      	b.n	800c296 <prvTCPSetSocketCount+0x56>
			 pxIterator != ( const ListItem_t * ) pxEnd;
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			pxOtherSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	68db      	ldr	r3, [r3, #12]
 800c25e:	60bb      	str	r3, [r7, #8]
			if( ( pxOtherSocket->u.xTCP.ucTCPState == eTCP_LISTEN ) &&
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c266:	2b01      	cmp	r3, #1
 800c268:	d112      	bne.n	800c290 <prvTCPSetSocketCount+0x50>
				( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			if( ( pxOtherSocket->u.xTCP.ucTCPState == eTCP_LISTEN ) &&
 800c26e:	89fa      	ldrh	r2, [r7, #14]
 800c270:	429a      	cmp	r2, r3
 800c272:	d10d      	bne.n	800c290 <prvTCPSetSocketCount+0x50>
				( pxOtherSocket->u.xTCP.usChildCount ) )
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
				( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d008      	beq.n	800c290 <prvTCPSetSocketCount+0x50>
			{
				pxOtherSocket->u.xTCP.usChildCount--;
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800c284:	3b01      	subs	r3, #1
 800c286:	b29a      	uxth	r2, r3
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
				FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
					pxOtherSocket->usLocalPort,
					pxOtherSocket->u.xTCP.usChildCount,
					pxOtherSocket->u.xTCP.usBacklog,
					pxOtherSocket->u.xTCP.usChildCount == 1u ? "" : "ren" ) );
				break;
 800c28e:	e006      	b.n	800c29e <prvTCPSetSocketCount+0x5e>
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	685b      	ldr	r3, [r3, #4]
 800c294:	617b      	str	r3, [r7, #20]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800c296:	697a      	ldr	r2, [r7, #20]
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d1dd      	bne.n	800c25a <prvTCPSetSocketCount+0x1a>
			}
		}
	}
 800c29e:	bf00      	nop
 800c2a0:	371c      	adds	r7, #28
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr
 800c2aa:	bf00      	nop
 800c2ac:	20006998 	.word	0x20006998

0800c2b0 <prvGetPrivatePortNumber>:

/*-----------------------------------------------------------*/

/* Find an available port number per https://tools.ietf.org/html/rfc6056. */
static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b088      	sub	sp, #32
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
const uint16_t usEphemeralPortCount = 
 800c2b8:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800c2bc:	827b      	strh	r3, [r7, #18]
    socketAUTO_PORT_ALLOCATION_MAX_NUMBER - socketAUTO_PORT_ALLOCATION_START_NUMBER + 1;
uint16_t usIterations = usEphemeralPortCount; 
 800c2be:	8a7b      	ldrh	r3, [r7, #18]
 800c2c0:	83fb      	strh	r3, [r7, #30]
uint32_t ulRandomSeed = 0;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	60fb      	str	r3, [r7, #12]
uint16_t usResult = 0;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	83bb      	strh	r3, [r7, #28]
BaseType_t xGotZeroOnce = pdFALSE;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	61bb      	str	r3, [r7, #24]
const List_t *pxList;

#if ipconfigUSE_TCP == 1
	if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2b06      	cmp	r3, #6
 800c2d2:	d102      	bne.n	800c2da <prvGetPrivatePortNumber+0x2a>
	{
		pxList = &xBoundTCPSocketsList;
 800c2d4:	4b24      	ldr	r3, [pc, #144]	; (800c368 <prvGetPrivatePortNumber+0xb8>)
 800c2d6:	617b      	str	r3, [r7, #20]
 800c2d8:	e001      	b.n	800c2de <prvGetPrivatePortNumber+0x2e>
	}
	else
#endif
	{
		pxList = &xBoundUDPSocketsList;
 800c2da:	4b24      	ldr	r3, [pc, #144]	; (800c36c <prvGetPrivatePortNumber+0xbc>)
 800c2dc:	617b      	str	r3, [r7, #20]
    /* Find the next available port using the random seed as a starting 
    point. */
    do
    {
        /* Generate a random seed. */
        ulRandomSeed = ipconfigRAND32( );
 800c2de:	f004 fe17 	bl	8010f10 <rand>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	60fb      	str	r3, [r7, #12]

        /* Only proceed if the random number generator succeeded. */
        if( 0 == ulRandomSeed )
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d105      	bne.n	800c2f8 <prvGetPrivatePortNumber+0x48>
        {
            if( pdFALSE == xGotZeroOnce )
 800c2ec:	69bb      	ldr	r3, [r7, #24]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d133      	bne.n	800c35a <prvGetPrivatePortNumber+0xaa>
            {
                xGotZeroOnce = pdTRUE;
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	61bb      	str	r3, [r7, #24]
                continue;
 800c2f6:	e02c      	b.n	800c352 <prvGetPrivatePortNumber+0xa2>
        }

        /* Map the random to a candidate port. */
        usResult =
            socketAUTO_PORT_ALLOCATION_START_NUMBER +
            ( ( ( uint16_t )ulRandomSeed ) % usEphemeralPortCount );
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	b29b      	uxth	r3, r3
            socketAUTO_PORT_ALLOCATION_START_NUMBER +
 800c2fc:	8a7a      	ldrh	r2, [r7, #18]
 800c2fe:	fbb3 f1f2 	udiv	r1, r3, r2
 800c302:	fb02 f201 	mul.w	r2, r2, r1
 800c306:	1a9b      	subs	r3, r3, r2
 800c308:	b29b      	uxth	r3, r3
        usResult =
 800c30a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c30e:	83bb      	strh	r3, [r7, #28]

        /* Check if there's already an open socket with the same protocol
        and port. */
        if( NULL == pxListFindListItemWithValue( 
            pxList, 
            ( TickType_t )FreeRTOS_htons( usResult ) ) )
 800c310:	8bbb      	ldrh	r3, [r7, #28]
 800c312:	021b      	lsls	r3, r3, #8
 800c314:	b21a      	sxth	r2, r3
 800c316:	8bbb      	ldrh	r3, [r7, #28]
 800c318:	0a1b      	lsrs	r3, r3, #8
 800c31a:	b29b      	uxth	r3, r3
 800c31c:	b21b      	sxth	r3, r3
 800c31e:	4313      	orrs	r3, r2
 800c320:	b21b      	sxth	r3, r3
 800c322:	b29b      	uxth	r3, r3
        if( NULL == pxListFindListItemWithValue( 
 800c324:	4619      	mov	r1, r3
 800c326:	6978      	ldr	r0, [r7, #20]
 800c328:	f000 f822 	bl	800c370 <pxListFindListItemWithValue>
 800c32c:	4603      	mov	r3, r0
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d10a      	bne.n	800c348 <prvGetPrivatePortNumber+0x98>
        {
            usResult = FreeRTOS_htons( usResult );
 800c332:	8bbb      	ldrh	r3, [r7, #28]
 800c334:	021b      	lsls	r3, r3, #8
 800c336:	b21a      	sxth	r2, r3
 800c338:	8bbb      	ldrh	r3, [r7, #28]
 800c33a:	0a1b      	lsrs	r3, r3, #8
 800c33c:	b29b      	uxth	r3, r3
 800c33e:	b21b      	sxth	r3, r3
 800c340:	4313      	orrs	r3, r2
 800c342:	b21b      	sxth	r3, r3
 800c344:	83bb      	strh	r3, [r7, #28]
            break;
 800c346:	e009      	b.n	800c35c <prvGetPrivatePortNumber+0xac>
        }
        else
        {
            usResult = 0;
 800c348:	2300      	movs	r3, #0
 800c34a:	83bb      	strh	r3, [r7, #28]
        }

        usIterations--;
 800c34c:	8bfb      	ldrh	r3, [r7, #30]
 800c34e:	3b01      	subs	r3, #1
 800c350:	83fb      	strh	r3, [r7, #30]
    }
    while( usIterations > 0 );
 800c352:	8bfb      	ldrh	r3, [r7, #30]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d1c2      	bne.n	800c2de <prvGetPrivatePortNumber+0x2e>
 800c358:	e000      	b.n	800c35c <prvGetPrivatePortNumber+0xac>
                break;
 800c35a:	bf00      	nop
    
    return usResult;
 800c35c:	8bbb      	ldrh	r3, [r7, #28]
} 
 800c35e:	4618      	mov	r0, r3
 800c360:	3720      	adds	r7, #32
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	20006990 	.word	0x20006990
 800c36c:	200069a4 	.word	0x200069a4

0800c370 <pxListFindListItemWithValue>:
/*-----------------------------------------------------------*/

/* pxListFindListItemWithValue: find a list item in a bound socket list
'xWantedItemValue' refers to a port number */
static const ListItem_t * pxListFindListItemWithValue( const List_t *pxList, TickType_t xWantedItemValue )
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b086      	sub	sp, #24
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	6039      	str	r1, [r7, #0]
const ListItem_t * pxResult = NULL;
 800c37a:	2300      	movs	r3, #0
 800c37c:	617b      	str	r3, [r7, #20]

	if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 800c37e:	f7ff fc67 	bl	800bc50 <xIPIsNetworkTaskReady>
 800c382:	4603      	mov	r3, r0
 800c384:	2b00      	cmp	r3, #0
 800c386:	d018      	beq.n	800c3ba <pxListFindListItemWithValue+0x4a>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d015      	beq.n	800c3ba <pxListFindListItemWithValue+0x4a>
	{
		const ListItem_t *pxIterator;
		const MiniListItem_t *pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( pxList );
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	3308      	adds	r3, #8
 800c392:	60fb      	str	r3, [r7, #12]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	613b      	str	r3, [r7, #16]
 800c39a:	e00a      	b.n	800c3b2 <pxListFindListItemWithValue+0x42>
			 pxIterator != ( const ListItem_t * ) pxEnd;
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d102      	bne.n	800c3ac <pxListFindListItemWithValue+0x3c>
			{
				pxResult = pxIterator;
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	617b      	str	r3, [r7, #20]
				break;
 800c3aa:	e006      	b.n	800c3ba <pxListFindListItemWithValue+0x4a>
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	613b      	str	r3, [r7, #16]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800c3b2:	693a      	ldr	r2, [r7, #16]
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	429a      	cmp	r2, r3
 800c3b8:	d1f0      	bne.n	800c39c <pxListFindListItemWithValue+0x2c>
			}
		}
	}

	return pxResult;
 800c3ba:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3718      	adds	r7, #24
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <pxUDPSocketLookup>:

/*-----------------------------------------------------------*/

FreeRTOS_Socket_t *pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b086      	sub	sp, #24
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
const ListItem_t *pxListItem;
FreeRTOS_Socket_t *pxSocket = NULL;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	617b      	str	r3, [r7, #20]

	/* Looking up a socket is quite simple, find a match with the local port.

	See if there is a list item associated with the port number on the
	list of bound sockets. */
	pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 800c3d0:	6879      	ldr	r1, [r7, #4]
 800c3d2:	480e      	ldr	r0, [pc, #56]	; (800c40c <pxUDPSocketLookup+0x48>)
 800c3d4:	f7ff ffcc 	bl	800c370 <pxListFindListItemWithValue>
 800c3d8:	6138      	str	r0, [r7, #16]

	if( pxListItem != NULL )
 800c3da:	693b      	ldr	r3, [r7, #16]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d00f      	beq.n	800c400 <pxUDPSocketLookup+0x3c>
	{
		/* The owner of the list item is the socket itself. */
		pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxListItem );
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	68db      	ldr	r3, [r3, #12]
 800c3e4:	617b      	str	r3, [r7, #20]
		configASSERT( pxSocket != NULL );
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d109      	bne.n	800c400 <pxUDPSocketLookup+0x3c>
 800c3ec:	f04f 0340 	mov.w	r3, #64	; 0x40
 800c3f0:	f383 8811 	msr	BASEPRI, r3
 800c3f4:	f3bf 8f6f 	isb	sy
 800c3f8:	f3bf 8f4f 	dsb	sy
 800c3fc:	60fb      	str	r3, [r7, #12]
 800c3fe:	e7fe      	b.n	800c3fe <pxUDPSocketLookup+0x3a>
	}
	return pxSocket;
 800c400:	697b      	ldr	r3, [r7, #20]
}
 800c402:	4618      	mov	r0, r3
 800c404:	3718      	adds	r7, #24
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop
 800c40c:	200069a4 	.word	0x200069a4

0800c410 <vSocketWakeUpUser>:
}

/*-----------------------------------------------------------*/

void vSocketWakeUpUser( FreeRTOS_Socket_t *pxSocket )
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b084      	sub	sp, #16
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
	}
	#endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
	{
		if( pxSocket->pxSocketSet != NULL )
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d015      	beq.n	800c44c <vSocketWakeUpUser+0x3c>
		{
			EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & eSELECT_ALL;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	0a1b      	lsrs	r3, r3, #8
 800c426:	f003 030f 	and.w	r3, r3, #15
 800c42a:	60fb      	str	r3, [r7, #12]
			if( xSelectBits != 0ul )
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d00c      	beq.n	800c44c <vSocketWakeUpUser+0x3c>
			{
				pxSocket->xSocketBits |= xSelectBits;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	431a      	orrs	r2, r3
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	631a      	str	r2, [r3, #48]	; 0x30
				xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	68f9      	ldr	r1, [r7, #12]
 800c446:	4618      	mov	r0, r3
 800c448:	f7fb f9aa 	bl	80077a0 <xEventGroupSetBits>
			}
		}

		pxSocket->xEventBits &= eSOCKET_ALL;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	601a      	str	r2, [r3, #0]
	}
	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */

	if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0u ) )
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d00b      	beq.n	800c478 <vSocketWakeUpUser+0x68>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d007      	beq.n	800c478 <vSocketWakeUpUser+0x68>
	{
		xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	685a      	ldr	r2, [r3, #4]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4619      	mov	r1, r3
 800c472:	4610      	mov	r0, r2
 800c474:	f7fb f994 	bl	80077a0 <xEventGroupSetBits>
	}

	pxSocket->xEventBits = 0ul;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2200      	movs	r2, #0
 800c47c:	601a      	str	r2, [r3, #0]
}
 800c47e:	bf00      	nop
 800c480:	3710      	adds	r7, #16
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
	...

0800c488 <xTCPTimerCheck>:
	 * - Send new data
	 * - Send a keep-alive packet
	 * - Check for timeout (in non-connected states only)
	 */
	TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
	{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b08a      	sub	sp, #40	; 0x28
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
	FreeRTOS_Socket_t *pxSocket;
	TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
 800c490:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c494:	627b      	str	r3, [r7, #36]	; 0x24
	TickType_t xNow = xTaskGetTickCount();
 800c496:	f7fc fe5d 	bl	8009154 <xTaskGetTickCount>
 800c49a:	61b8      	str	r0, [r7, #24]
	static TickType_t xLastTime = 0u;
	TickType_t xDelta = xNow - xLastTime;
 800c49c:	4b31      	ldr	r3, [pc, #196]	; (800c564 <xTCPTimerCheck+0xdc>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	69ba      	ldr	r2, [r7, #24]
 800c4a2:	1ad3      	subs	r3, r2, r3
 800c4a4:	623b      	str	r3, [r7, #32]
	ListItem_t* pxEnd = ( ListItem_t * ) listGET_END_MARKER( &xBoundTCPSocketsList );
 800c4a6:	4b30      	ldr	r3, [pc, #192]	; (800c568 <xTCPTimerCheck+0xe0>)
 800c4a8:	617b      	str	r3, [r7, #20]
	ListItem_t *pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800c4aa:	4b30      	ldr	r3, [pc, #192]	; (800c56c <xTCPTimerCheck+0xe4>)
 800c4ac:	68db      	ldr	r3, [r3, #12]
 800c4ae:	61fb      	str	r3, [r7, #28]

		xLastTime = xNow;
 800c4b0:	4a2c      	ldr	r2, [pc, #176]	; (800c564 <xTCPTimerCheck+0xdc>)
 800c4b2:	69bb      	ldr	r3, [r7, #24]
 800c4b4:	6013      	str	r3, [r2, #0]

		if( xDelta == 0u )
 800c4b6:	6a3b      	ldr	r3, [r7, #32]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d149      	bne.n	800c550 <xTCPTimerCheck+0xc8>
		{
			xDelta = 1u;
 800c4bc:	2301      	movs	r3, #1
 800c4be:	623b      	str	r3, [r7, #32]
		}

		while( pxIterator != pxEnd )
 800c4c0:	e046      	b.n	800c550 <xTCPTimerCheck+0xc8>
		{
			pxSocket = ( FreeRTOS_Socket_t * )listGET_LIST_ITEM_OWNER( pxIterator );
 800c4c2:	69fb      	ldr	r3, [r7, #28]
 800c4c4:	68db      	ldr	r3, [r3, #12]
 800c4c6:	613b      	str	r3, [r7, #16]
			pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 800c4c8:	69fb      	ldr	r3, [r7, #28]
 800c4ca:	685b      	ldr	r3, [r3, #4]
 800c4cc:	61fb      	str	r3, [r7, #28]

			/* Sockets with 'tmout == 0' do not need any regular attention. */
			if( pxSocket->u.xTCP.usTimeout == 0u )
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d100      	bne.n	800c4da <xTCPTimerCheck+0x52>
			{
				continue;
 800c4d8:	e03a      	b.n	800c550 <xTCPTimerCheck+0xc8>
			}

			if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	6a3b      	ldr	r3, [r7, #32]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d90a      	bls.n	800c4fe <xTCPTimerCheck+0x76>
			{
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c4ee:	6a3b      	ldr	r3, [r7, #32]
 800c4f0:	b29b      	uxth	r3, r3
 800c4f2:	1ad3      	subs	r3, r2, r3
 800c4f4:	b29a      	uxth	r2, r3
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c4fc:	e00b      	b.n	800c516 <xTCPTimerCheck+0x8e>
			}
			else
			{
			int rc ;
				pxSocket->u.xTCP.usTimeout = 0u;
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	2200      	movs	r2, #0
 800c502:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
				rc = xTCPSocketCheck( pxSocket );
 800c506:	6938      	ldr	r0, [r7, #16]
 800c508:	f000 fdba 	bl	800d080 <xTCPSocketCheck>
 800c50c:	60f8      	str	r0, [r7, #12]

				/* Within this function, the socket might want to send a delayed
				ack or send out data or whatever it needs to do. */
				if( rc < 0 )
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2b00      	cmp	r3, #0
 800c512:	da00      	bge.n	800c516 <xTCPTimerCheck+0x8e>
				{
					/* Continue because the socket was deleted. */
					continue;
 800c514:	e01c      	b.n	800c550 <xTCPTimerCheck+0xc8>
			}

			/* In xEventBits the driver may indicate that the socket has
			important events for the user.  These are only done just before the
			IP-task goes to sleep. */
			if( pxSocket->xEventBits != 0u )
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d008      	beq.n	800c530 <xTCPTimerCheck+0xa8>
			{
				if( xWillSleep != pdFALSE )
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d003      	beq.n	800c52c <xTCPTimerCheck+0xa4>
				{
					/* The IP-task is about to go to sleep, so messages can be
					sent to the socket owners. */
					vSocketWakeUpUser( pxSocket );
 800c524:	6938      	ldr	r0, [r7, #16]
 800c526:	f7ff ff73 	bl	800c410 <vSocketWakeUpUser>
 800c52a:	e001      	b.n	800c530 <xTCPTimerCheck+0xa8>
				}
				else
				{
					/* Or else make sure this will be called again to wake-up
					the sockets' owner. */
					xShortest = ( TickType_t ) 0;
 800c52c:	2300      	movs	r3, #0
 800c52e:	627b      	str	r3, [r7, #36]	; 0x24
				}
			}

			if( ( pxSocket->u.xTCP.usTimeout != 0u ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c536:	2b00      	cmp	r3, #0
 800c538:	d00a      	beq.n	800c550 <xTCPTimerCheck+0xc8>
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c540:	461a      	mov	r2, r3
 800c542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c544:	429a      	cmp	r2, r3
 800c546:	d203      	bcs.n	800c550 <xTCPTimerCheck+0xc8>
			{
				xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c54e:	627b      	str	r3, [r7, #36]	; 0x24
		while( pxIterator != pxEnd )
 800c550:	69fa      	ldr	r2, [r7, #28]
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	429a      	cmp	r2, r3
 800c556:	d1b4      	bne.n	800c4c2 <xTCPTimerCheck+0x3a>
			}
		}

		return xShortest;
 800c558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3728      	adds	r7, #40	; 0x28
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
 800c562:	bf00      	nop
 800c564:	20004ec4 	.word	0x20004ec4
 800c568:	20006998 	.word	0x20006998
 800c56c:	20006990 	.word	0x20006990

0800c570 <pxTCPSocketLookup>:
	 * looking up a socket is a little more complex:
	 * Both a local port, and a remote port and IP address are being used
	 * For a socket in listening mode, the remote port and IP address are both 0
	 */
	FreeRTOS_Socket_t *pxTCPSocketLookup( uint32_t ulLocalIP, UBaseType_t uxLocalPort, uint32_t ulRemoteIP, UBaseType_t uxRemotePort )
	{
 800c570:	b480      	push	{r7}
 800c572:	b08b      	sub	sp, #44	; 0x2c
 800c574:	af00      	add	r7, sp, #0
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	607a      	str	r2, [r7, #4]
 800c57c:	603b      	str	r3, [r7, #0]
	ListItem_t *pxIterator;
	FreeRTOS_Socket_t *pxResult = NULL, *pxListenSocket = NULL;
 800c57e:	2300      	movs	r3, #0
 800c580:	623b      	str	r3, [r7, #32]
 800c582:	2300      	movs	r3, #0
 800c584:	61fb      	str	r3, [r7, #28]
	MiniListItem_t *pxEnd = ( MiniListItem_t* )listGET_END_MARKER( &xBoundTCPSocketsList );
 800c586:	4b1c      	ldr	r3, [pc, #112]	; (800c5f8 <pxTCPSocketLookup+0x88>)
 800c588:	61bb      	str	r3, [r7, #24]

		/* Parameter not yet supported. */
		( void ) ulLocalIP;

		for( pxIterator  = ( ListItem_t * ) listGET_NEXT( pxEnd );
 800c58a:	69bb      	ldr	r3, [r7, #24]
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	627b      	str	r3, [r7, #36]	; 0x24
 800c590:	e021      	b.n	800c5d6 <pxTCPSocketLookup+0x66>
			 pxIterator != ( ListItem_t * ) pxEnd;
			 pxIterator  = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800c592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c594:	68db      	ldr	r3, [r3, #12]
 800c596:	617b      	str	r3, [r7, #20]

			if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	b29b      	uxth	r3, r3
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d115      	bne.n	800c5d0 <pxTCPSocketLookup+0x60>
			{
				if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c5aa:	2b01      	cmp	r3, #1
 800c5ac:	d102      	bne.n	800c5b4 <pxTCPSocketLookup+0x44>
				{
					/* If this is a socket listening to uxLocalPort, remember it
					in case there is no perfect match. */
					pxListenSocket = pxSocket;
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	61fb      	str	r3, [r7, #28]
 800c5b2:	e00d      	b.n	800c5d0 <pxTCPSocketLookup+0x60>
				}
				else if( ( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort ) && ( pxSocket->u.xTCP.ulRemoteIP == ulRemoteIP ) )
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	b29b      	uxth	r3, r3
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	d107      	bne.n	800c5d0 <pxTCPSocketLookup+0x60>
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d102      	bne.n	800c5d0 <pxTCPSocketLookup+0x60>
				{
					/* For sockets not in listening mode, find a match with
					xLocalPort, ulRemoteIP AND xRemotePort. */
					pxResult = pxSocket;
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	623b      	str	r3, [r7, #32]
					break;
 800c5ce:	e006      	b.n	800c5de <pxTCPSocketLookup+0x6e>
			 pxIterator  = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
 800c5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	627b      	str	r3, [r7, #36]	; 0x24
		for( pxIterator  = ( ListItem_t * ) listGET_NEXT( pxEnd );
 800c5d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5d8:	69bb      	ldr	r3, [r7, #24]
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	d1d9      	bne.n	800c592 <pxTCPSocketLookup+0x22>
				}
			}
		}
		if( pxResult == NULL )
 800c5de:	6a3b      	ldr	r3, [r7, #32]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d101      	bne.n	800c5e8 <pxTCPSocketLookup+0x78>
		{
			/* An exact match was not found, maybe a listening socket was
			found. */
			pxResult = pxListenSocket;
 800c5e4:	69fb      	ldr	r3, [r7, #28]
 800c5e6:	623b      	str	r3, [r7, #32]
		}

		return pxResult;
 800c5e8:	6a3b      	ldr	r3, [r7, #32]
	}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	372c      	adds	r7, #44	; 0x2c
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f4:	4770      	bx	lr
 800c5f6:	bf00      	nop
 800c5f8:	20006998 	.word	0x20006998

0800c5fc <prvTCPCreateStream>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP == 1 )

	static StreamBuffer_t *prvTCPCreateStream ( FreeRTOS_Socket_t *pxSocket, BaseType_t xIsInputStream )
	{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b086      	sub	sp, #24
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	6039      	str	r1, [r7, #0]
	size_t uxLength;
	size_t uxSize;

		/* Now that a stream is created, the maximum size is fixed before
		creation, it could still be changed with setsockopt(). */
		if( xIsInputStream != pdFALSE )
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d01c      	beq.n	800c646 <prvTCPCreateStream+0x4a>
		{
			uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c610:	617b      	str	r3, [r7, #20]

			if( pxSocket->u.xTCP.uxLittleSpace == 0ul )
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c616:	2b00      	cmp	r3, #0
 800c618:	d107      	bne.n	800c62a <prvTCPCreateStream+0x2e>
			{
				pxSocket->u.xTCP.uxLittleSpace  = ( 1ul * pxSocket->u.xTCP.uxRxStreamSize ) / 5u; /*_RB_ Why divide by 5?  Can this be changed to a #define? */
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c61e:	4a25      	ldr	r2, [pc, #148]	; (800c6b4 <prvTCPCreateStream+0xb8>)
 800c620:	fba2 2303 	umull	r2, r3, r2, r3
 800c624:	089a      	lsrs	r2, r3, #2
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	665a      	str	r2, [r3, #100]	; 0x64
			}

			if( pxSocket->u.xTCP.uxEnoughSpace == 0ul )
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d10c      	bne.n	800c64c <prvTCPCreateStream+0x50>
			{
				pxSocket->u.xTCP.uxEnoughSpace = ( 4ul * pxSocket->u.xTCP.uxRxStreamSize ) / 5u; /*_RB_ Why multiply by 4?  Maybe sock80_PERCENT?*/
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c636:	009b      	lsls	r3, r3, #2
 800c638:	4a1e      	ldr	r2, [pc, #120]	; (800c6b4 <prvTCPCreateStream+0xb8>)
 800c63a:	fba2 2303 	umull	r2, r3, r2, r3
 800c63e:	089a      	lsrs	r2, r3, #2
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	669a      	str	r2, [r3, #104]	; 0x68
 800c644:	e002      	b.n	800c64c <prvTCPCreateStream+0x50>
			}
		}
		else
		{
			uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c64a:	617b      	str	r3, [r7, #20]
		}

		/* Add an extra 4 (or 8) bytes. */
		uxLength += sizeof( size_t );
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	3304      	adds	r3, #4
 800c650:	617b      	str	r3, [r7, #20]

		/* And make the length a multiple of sizeof( size_t ). */
		uxLength &= ~( sizeof( size_t ) - 1u );
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	f023 0303 	bic.w	r3, r3, #3
 800c658:	617b      	str	r3, [r7, #20]

		uxSize = sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) + uxLength;
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	3314      	adds	r3, #20
 800c65e:	613b      	str	r3, [r7, #16]

		pxBuffer = ( StreamBuffer_t * )pvPortMallocLarge( uxSize );
 800c660:	6938      	ldr	r0, [r7, #16]
 800c662:	f7fb fc1d 	bl	8007ea0 <pvPortMalloc>
 800c666:	60f8      	str	r0, [r7, #12]

		if( pxBuffer == NULL )
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d10b      	bne.n	800c686 <prvTCPCreateStream+0x8a>
		{
			FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
			pxSocket->u.xTCP.bits.bMallocError = pdTRUE_UNSIGNED;
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800c674:	f043 0308 	orr.w	r3, r3, #8
 800c678:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800c67c:	2108      	movs	r1, #8
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f001 fa89 	bl	800db96 <vTCPStateChange>
 800c684:	e011      	b.n	800c6aa <prvTCPCreateStream+0xae>
		}
		else
		{
			/* Clear the markers of the stream */
			memset( pxBuffer, '\0', sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 800c686:	2214      	movs	r2, #20
 800c688:	2100      	movs	r1, #0
 800c68a:	68f8      	ldr	r0, [r7, #12]
 800c68c:	f004 fb8c 	bl	8010da8 <memset>
			pxBuffer->LENGTH = ( size_t ) uxLength ;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	697a      	ldr	r2, [r7, #20]
 800c694:	611a      	str	r2, [r3, #16]
			if( xTCPWindowLoggingLevel != 0 )
			{
				FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %lu bytes (total %lu)\n", xIsInputStream ? 'R' : 'T', uxLength, uxSize ) );
			}

			if( xIsInputStream != 0 )
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d003      	beq.n	800c6a4 <prvTCPCreateStream+0xa8>
			{
				pxSocket->u.xTCP.rxStream = pxBuffer;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	68fa      	ldr	r2, [r7, #12]
 800c6a0:	675a      	str	r2, [r3, #116]	; 0x74
 800c6a2:	e002      	b.n	800c6aa <prvTCPCreateStream+0xae>
			}
			else
			{
				pxSocket->u.xTCP.txStream = pxBuffer;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	68fa      	ldr	r2, [r7, #12]
 800c6a8:	679a      	str	r2, [r3, #120]	; 0x78
			}
		}

		return pxBuffer;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
	}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3718      	adds	r7, #24
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}
 800c6b4:	cccccccd 	.word	0xcccccccd

0800c6b8 <lTCPAddRxdata>:
	/*
	 * Add data to the RxStream.  When uxOffset > 0, data has come in out-of-order
	 * and will be put in front of the head so it can not be popped by the user.
	 */
	int32_t lTCPAddRxdata( FreeRTOS_Socket_t *pxSocket, size_t uxOffset, const uint8_t *pcData, uint32_t ulByteCount )
	{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b088      	sub	sp, #32
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	60f8      	str	r0, [r7, #12]
 800c6c0:	60b9      	str	r1, [r7, #8]
 800c6c2:	607a      	str	r2, [r7, #4]
 800c6c4:	603b      	str	r3, [r7, #0]
	StreamBuffer_t *pxStream = pxSocket->u.xTCP.rxStream;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6ca:	61fb      	str	r3, [r7, #28]
		/* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
		if( pucData != NULL ) copy data the the buffer
		if( pucData == NULL ) no copying, just advance rxHead
		if( uxOffset != 0 ) Just store data which has come out-of-order
		if( uxOffset == 0 ) Also advance rxHead */
		if( pxStream == NULL )
 800c6cc:	69fb      	ldr	r3, [r7, #28]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d10a      	bne.n	800c6e8 <lTCPAddRxdata+0x30>
		{
			pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 800c6d2:	2101      	movs	r1, #1
 800c6d4:	68f8      	ldr	r0, [r7, #12]
 800c6d6:	f7ff ff91 	bl	800c5fc <prvTCPCreateStream>
 800c6da:	61f8      	str	r0, [r7, #28]
			if( pxStream == NULL )
 800c6dc:	69fb      	ldr	r3, [r7, #28]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d102      	bne.n	800c6e8 <lTCPAddRxdata+0x30>
			{
				return -1;
 800c6e2:	f04f 33ff 	mov.w	r3, #4294967295
 800c6e6:	e045      	b.n	800c774 <lTCPAddRxdata+0xbc>
				pcData = NULL;
			}
		}
		#endif /* ipconfigUSE_CALLBACKS */

		xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	687a      	ldr	r2, [r7, #4]
 800c6ec:	68b9      	ldr	r1, [r7, #8]
 800c6ee:	69f8      	ldr	r0, [r7, #28]
 800c6f0:	f000 fa52 	bl	800cb98 <uxStreamBufferAdd>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	61bb      	str	r3, [r7, #24]
					pxStream->uxFront ) );
			}
		}
		#endif /* ipconfigHAS_DEBUG_PRINTF */

		if( uxOffset == 0u )
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d139      	bne.n	800c772 <lTCPAddRxdata+0xba>
					}
				} else
			#endif /* ipconfigUSE_CALLBACKS */
			{
				/* See if running out of space. */
				if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c704:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c708:	b2db      	uxtb	r3, r3
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d11f      	bne.n	800c74e <lTCPAddRxdata+0x96>
				{
					size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c712:	4618      	mov	r0, r3
 800c714:	f7ff fb1e 	bl	800bd54 <uxStreamBufferFrontSpace>
 800c718:	6178      	str	r0, [r7, #20]
					if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace  )
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	429a      	cmp	r2, r3
 800c722:	d314      	bcc.n	800c74e <lTCPAddRxdata+0x96>
					{
						pxSocket->u.xTCP.bits.bLowWater = pdTRUE_UNSIGNED;
 800c724:	68fa      	ldr	r2, [r7, #12]
 800c726:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800c72a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c72e:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
						pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800c732:	68fa      	ldr	r2, [r7, #12]
 800c734:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c738:	f043 0301 	orr.w	r3, r3, #1
 800c73c:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

						/* bLowWater was reached, send the changed window size. */
						pxSocket->u.xTCP.usTimeout = 1u;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2201      	movs	r2, #1
 800c744:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
						xSendEventToIPTask( eTCPTimerEvent );
 800c748:	2005      	movs	r0, #5
 800c74a:	f7fe fe13 	bl	800b374 <xSendEventToIPTask>
					}
				}

				/* New incoming data is available, wake up the user.   User's
				semaphores will be set just before the IP-task goes asleep. */
				pxSocket->xEventBits |= eSOCKET_RECEIVE;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f043 0201 	orr.w	r2, r3, #1
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	601a      	str	r2, [r3, #0]

				#if ipconfigSUPPORT_SELECT_FUNCTION == 1
				{
					if( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 )
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c75e:	f003 0301 	and.w	r3, r3, #1
 800c762:	2b00      	cmp	r3, #0
 800c764:	d005      	beq.n	800c772 <lTCPAddRxdata+0xba>
					{
						pxSocket->xEventBits |= ( eSELECT_READ << SOCKET_EVENT_BIT_COUNT );
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	601a      	str	r2, [r3, #0]
				}
				#endif
			}
		}

		return xResult;
 800c772:	69bb      	ldr	r3, [r7, #24]
	}
 800c774:	4618      	mov	r0, r3
 800c776:	3720      	adds	r7, #32
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}

0800c77c <FreeRTOS_tx_space>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP ==1 )

	BaseType_t FreeRTOS_tx_space( Socket_t xSocket )
	{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b084      	sub	sp, #16
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800c78e:	2b06      	cmp	r3, #6
 800c790:	d003      	beq.n	800c79a <FreeRTOS_tx_space+0x1e>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800c792:	f06f 0315 	mvn.w	r3, #21
 800c796:	60fb      	str	r3, [r7, #12]
 800c798:	e00e      	b.n	800c7b8 <FreeRTOS_tx_space+0x3c>
		}
		else
		{
			if( pxSocket->u.xTCP.txStream != NULL )
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d007      	beq.n	800c7b2 <FreeRTOS_tx_space+0x36>
			{
				xReturn = ( BaseType_t ) uxStreamBufferGetSpace ( pxSocket->u.xTCP.txStream );
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7ff fac0 	bl	800bd2c <uxStreamBufferGetSpace>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	60fb      	str	r3, [r7, #12]
 800c7b0:	e002      	b.n	800c7b8 <FreeRTOS_tx_space+0x3c>
			}
			else
			{
				xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7b6:	60fb      	str	r3, [r7, #12]
			}
		}

		return xReturn;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
	}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3710      	adds	r7, #16
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}

0800c7c2 <FreeRTOS_rx_size>:

	/*
	 * Returns the number of bytes which can be read.
	 */
	BaseType_t FreeRTOS_rx_size( Socket_t xSocket )
	{
 800c7c2:	b580      	push	{r7, lr}
 800c7c4:	b084      	sub	sp, #16
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800c7d4:	2b06      	cmp	r3, #6
 800c7d6:	d003      	beq.n	800c7e0 <FreeRTOS_rx_size+0x1e>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800c7d8:	f06f 0315 	mvn.w	r3, #21
 800c7dc:	60fb      	str	r3, [r7, #12]
 800c7de:	e00d      	b.n	800c7fc <FreeRTOS_rx_size+0x3a>
		}
		else if( pxSocket->u.xTCP.rxStream != NULL )
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d007      	beq.n	800c7f8 <FreeRTOS_rx_size+0x36>
		{
			xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f7ff fac5 	bl	800bd7c <uxStreamBufferGetSize>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	60fb      	str	r3, [r7, #12]
 800c7f6:	e001      	b.n	800c7fc <FreeRTOS_rx_size+0x3a>
		}
		else
		{
			xReturn = 0;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
	}
 800c7fe:	4618      	mov	r0, r3
 800c800:	3710      	adds	r7, #16
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}
	...

0800c808 <vSocketSelect>:
/*-----------------------------------------------------------*/

#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )

	void vSocketSelect( SocketSelect_t *pxSocketSet )
	{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b08c      	sub	sp, #48	; 0x30
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
	BaseType_t xRound;
	EventBits_t xSocketBits, xBitsToClear;
	#if ipconfigUSE_TCP == 1
		BaseType_t xLastRound = 1;
 800c810:	2301      	movs	r3, #1
 800c812:	613b      	str	r3, [r7, #16]
	#else
		BaseType_t xLastRound = 0;
	#endif

		/* These flags will be switched on after checking the socket status. */
		EventBits_t xGroupBits = 0;
 800c814:	2300      	movs	r3, #0
 800c816:	627b      	str	r3, [r7, #36]	; 0x24
		pxSocketSet->pxSocket = NULL;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2200      	movs	r2, #0
 800c81c:	609a      	str	r2, [r3, #8]

		for( xRound = 0; xRound <= xLastRound; xRound++ )
 800c81e:	2300      	movs	r3, #0
 800c820:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c822:	e0e1      	b.n	800c9e8 <vSocketSelect+0x1e0>
		{
			const ListItem_t *pxIterator;
			const MiniListItem_t *pxEnd;
			if( xRound == 0 )
 800c824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c826:	2b00      	cmp	r3, #0
 800c828:	d102      	bne.n	800c830 <vSocketSelect+0x28>
			{
				pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xBoundUDPSocketsList );
 800c82a:	4b84      	ldr	r3, [pc, #528]	; (800ca3c <vSocketSelect+0x234>)
 800c82c:	61fb      	str	r3, [r7, #28]
 800c82e:	e001      	b.n	800c834 <vSocketSelect+0x2c>
			}
		#if ipconfigUSE_TCP == 1
			else
			{
				pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xBoundTCPSocketsList );
 800c830:	4b83      	ldr	r3, [pc, #524]	; (800ca40 <vSocketSelect+0x238>)
 800c832:	61fb      	str	r3, [r7, #28]
			}
		#endif /* ipconfigUSE_TCP == 1 */
			for( pxIterator = ( const ListItem_t * ) ( listGET_NEXT( pxEnd ) );
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	623b      	str	r3, [r7, #32]
 800c83a:	e0cd      	b.n	800c9d8 <vSocketSelect+0x1d0>
				 pxIterator != ( const ListItem_t * ) pxEnd;
				 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
			{
				FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800c83c:	6a3b      	ldr	r3, [r7, #32]
 800c83e:	68db      	ldr	r3, [r3, #12]
 800c840:	60fb      	str	r3, [r7, #12]
				if( pxSocket->pxSocketSet != pxSocketSet )
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	429a      	cmp	r2, r3
 800c84a:	f040 80c1 	bne.w	800c9d0 <vSocketSelect+0x1c8>
				{
					/* Socket does not belong to this select group. */
					continue;
				}
				xSocketBits = 0;
 800c84e:	2300      	movs	r3, #0
 800c850:	62bb      	str	r3, [r7, #40]	; 0x28

				#if( ipconfigUSE_TCP == 1 )
					if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP )
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800c858:	2b06      	cmp	r3, #6
 800c85a:	f040 80a3 	bne.w	800c9a4 <vSocketSelect+0x19c>
					{
						/* Check if the socket has already been accepted by the
						owner.  If not, it is useless to return it from a
						select(). */
						BaseType_t bAccepted = pdFALSE;
 800c85e:	2300      	movs	r3, #0
 800c860:	61bb      	str	r3, [r7, #24]

						if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c868:	f003 0304 	and.w	r3, r3, #4
 800c86c:	b2db      	uxtb	r3, r3
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d109      	bne.n	800c886 <vSocketSelect+0x7e>
						{
							if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c878:	f003 0302 	and.w	r3, r3, #2
 800c87c:	b2db      	uxtb	r3, r3
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d101      	bne.n	800c886 <vSocketSelect+0x7e>
							{
								bAccepted = pdTRUE;
 800c882:	2301      	movs	r3, #1
 800c884:	61bb      	str	r3, [r7, #24]
							}
						}

						/* Is the set owner interested in READ events? */
						if( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 )
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c88a:	f003 0301 	and.w	r3, r3, #1
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d038      	beq.n	800c904 <vSocketSelect+0xfc>
						{
							if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c898:	2b01      	cmp	r3, #1
 800c89a:	d111      	bne.n	800c8c0 <vSocketSelect+0xb8>
							{
								if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != 0 ) )
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d02f      	beq.n	800c904 <vSocketSelect+0xfc>
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c8ac:	f003 0302 	and.w	r3, r3, #2
 800c8b0:	b2db      	uxtb	r3, r3
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d026      	beq.n	800c904 <vSocketSelect+0xfc>
								{
									xSocketBits |= eSELECT_READ;
 800c8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b8:	f043 0301 	orr.w	r3, r3, #1
 800c8bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8be:	e021      	b.n	800c904 <vSocketSelect+0xfc>
								}
							}
							else if( ( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c8c6:	f003 0308 	and.w	r3, r3, #8
 800c8ca:	b2db      	uxtb	r3, r3
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d00c      	beq.n	800c8ea <vSocketSelect+0xe2>
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c8d6:	f003 0302 	and.w	r3, r3, #2
 800c8da:	b2db      	uxtb	r3, r3
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d004      	beq.n	800c8ea <vSocketSelect+0xe2>
							{
								/* This socket has the re-use flag. After connecting it turns into
								aconnected socket. Set the READ event, so that accept() will be called. */
								xSocketBits |= eSELECT_READ;
 800c8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e2:	f043 0301 	orr.w	r3, r3, #1
 800c8e6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8e8:	e00c      	b.n	800c904 <vSocketSelect+0xfc>
							}
							else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 800c8ea:	69bb      	ldr	r3, [r7, #24]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d009      	beq.n	800c904 <vSocketSelect+0xfc>
 800c8f0:	68f8      	ldr	r0, [r7, #12]
 800c8f2:	f7ff ff66 	bl	800c7c2 <FreeRTOS_rx_size>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	dd03      	ble.n	800c904 <vSocketSelect+0xfc>
							{
								xSocketBits |= eSELECT_READ;
 800c8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8fe:	f043 0301 	orr.w	r3, r3, #1
 800c902:	62bb      	str	r3, [r7, #40]	; 0x28
							}
						}
						/* Is the set owner interested in EXCEPTION events? */
						if( ( pxSocket->xSelectBits & eSELECT_EXCEPT ) != 0 )
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c908:	f003 0304 	and.w	r3, r3, #4
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d00d      	beq.n	800c92c <vSocketSelect+0x124>
						{
							if( ( pxSocket->u.xTCP.ucTCPState == eCLOSE_WAIT ) || ( pxSocket->u.xTCP.ucTCPState == eCLOSED ) )
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c916:	2b08      	cmp	r3, #8
 800c918:	d004      	beq.n	800c924 <vSocketSelect+0x11c>
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c920:	2b00      	cmp	r3, #0
 800c922:	d103      	bne.n	800c92c <vSocketSelect+0x124>
							{
								xSocketBits |= eSELECT_EXCEPT;
 800c924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c926:	f043 0304 	orr.w	r3, r3, #4
 800c92a:	62bb      	str	r3, [r7, #40]	; 0x28
							}
						}

						/* Is the set owner interested in WRITE events? */
						if( ( pxSocket->xSelectBits & eSELECT_WRITE ) != 0 )
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c930:	f003 0302 	and.w	r3, r3, #2
 800c934:	2b00      	cmp	r3, #0
 800c936:	d043      	beq.n	800c9c0 <vSocketSelect+0x1b8>
						{
							BaseType_t bMatch = pdFALSE;
 800c938:	2300      	movs	r3, #0
 800c93a:	617b      	str	r3, [r7, #20]

							if( bAccepted != 0 )
 800c93c:	69bb      	ldr	r3, [r7, #24]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d007      	beq.n	800c952 <vSocketSelect+0x14a>
							{
								if( FreeRTOS_tx_space( pxSocket ) > 0 )
 800c942:	68f8      	ldr	r0, [r7, #12]
 800c944:	f7ff ff1a 	bl	800c77c <FreeRTOS_tx_space>
 800c948:	4603      	mov	r3, r0
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	dd01      	ble.n	800c952 <vSocketSelect+0x14a>
								{
									bMatch = pdTRUE;
 800c94e:	2301      	movs	r3, #1
 800c950:	617b      	str	r3, [r7, #20]
								}
							}

							if( bMatch == pdFALSE )
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d11d      	bne.n	800c994 <vSocketSelect+0x18c>
							{
								if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c95e:	f003 0308 	and.w	r3, r3, #8
 800c962:	b2db      	uxtb	r3, r3
 800c964:	2b00      	cmp	r3, #0
 800c966:	d015      	beq.n	800c994 <vSocketSelect+0x18c>
									( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) &&
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
								if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800c96e:	2b04      	cmp	r3, #4
 800c970:	d910      	bls.n	800c994 <vSocketSelect+0x18c>
									( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c978:	f003 0310 	and.w	r3, r3, #16
 800c97c:	b2db      	uxtb	r3, r3
									( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) &&
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d108      	bne.n	800c994 <vSocketSelect+0x18c>
								{
									pxSocket->u.xTCP.bits.bConnPassed = pdTRUE_UNSIGNED;
 800c982:	68fa      	ldr	r2, [r7, #12]
 800c984:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c988:	f043 0310 	orr.w	r3, r3, #16
 800c98c:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
									bMatch = pdTRUE;
 800c990:	2301      	movs	r3, #1
 800c992:	617b      	str	r3, [r7, #20]
								}
							}

							if( bMatch != pdFALSE )
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d012      	beq.n	800c9c0 <vSocketSelect+0x1b8>
							{
								xSocketBits |= eSELECT_WRITE;
 800c99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99c:	f043 0302 	orr.w	r3, r3, #2
 800c9a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9a2:	e00d      	b.n	800c9c0 <vSocketSelect+0x1b8>
					}
					else
				#endif /* ipconfigUSE_TCP == 1 */
				{
					/* Select events for UDP are simpler. */
					if( ( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 ) &&
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9a8:	f003 0301 	and.w	r3, r3, #1
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d007      	beq.n	800c9c0 <vSocketSelect+0x1b8>
						( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
					if( ( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 ) &&
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d003      	beq.n	800c9c0 <vSocketSelect+0x1b8>
					{
						xSocketBits |= eSELECT_READ;
 800c9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ba:	f043 0301 	orr.w	r3, r3, #1
 800c9be:	62bb      	str	r3, [r7, #40]	; 0x28
					/* The WRITE and EXCEPT bits are not used for UDP */
				}	/* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

				/* Each socket keeps its own event flags, which are looked-up
				by FreeRTOS_FD_ISSSET() */
				pxSocket->xSocketBits = xSocketBits;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9c4:	631a      	str	r2, [r3, #48]	; 0x30

				/* The ORed value will be used to set the bits in the event
				group. */
				xGroupBits |= xSocketBits;
 800c9c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ca:	4313      	orrs	r3, r2
 800c9cc:	627b      	str	r3, [r7, #36]	; 0x24
 800c9ce:	e000      	b.n	800c9d2 <vSocketSelect+0x1ca>
					continue;
 800c9d0:	bf00      	nop
				 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800c9d2:	6a3b      	ldr	r3, [r7, #32]
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	623b      	str	r3, [r7, #32]
			for( pxIterator = ( const ListItem_t * ) ( listGET_NEXT( pxEnd ) );
 800c9d8:	6a3a      	ldr	r2, [r7, #32]
 800c9da:	69fb      	ldr	r3, [r7, #28]
 800c9dc:	429a      	cmp	r2, r3
 800c9de:	f47f af2d 	bne.w	800c83c <vSocketSelect+0x34>
		for( xRound = 0; xRound <= xLastRound; xRound++ )
 800c9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e4:	3301      	adds	r3, #1
 800c9e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	f77f af19 	ble.w	800c824 <vSocketSelect+0x1c>

			}	/* for( pxIterator ... ) */
		}	/* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

		xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	2100      	movs	r1, #0
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f7fa fe9b 	bl	8007734 <xEventGroupClearBits>
 800c9fe:	60b8      	str	r0, [r7, #8]

		/* Now set the necessary bits. */
		xBitsToClear = ( xBitsToClear & ~xGroupBits ) & eSELECT_ALL;
 800ca00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca02:	43da      	mvns	r2, r3
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	4013      	ands	r3, r2
 800ca08:	f003 030f 	and.w	r3, r3, #15
 800ca0c:	60bb      	str	r3, [r7, #8]
			and cleared in FreeRTOS_select(). */
			xBitsToClear &= ( EventBits_t ) ~eSELECT_INTR;
		}
		#endif /* ipconfigSUPPORT_SIGNALS */

		if( xBitsToClear != 0 )
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d005      	beq.n	800ca20 <vSocketSelect+0x218>
		{
			xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	68b9      	ldr	r1, [r7, #8]
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7fa fe8a 	bl	8007734 <xEventGroupClearBits>
		}

		/* Now include eSELECT_CALL_IP to wakeup the caller. */
		xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | eSELECT_CALL_IP );
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681a      	ldr	r2, [r3, #0]
 800ca24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca26:	f043 0310 	orr.w	r3, r3, #16
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	4610      	mov	r0, r2
 800ca2e:	f7fa feb7 	bl	80077a0 <xEventGroupSetBits>
	}
 800ca32:	bf00      	nop
 800ca34:	3730      	adds	r7, #48	; 0x30
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}
 800ca3a:	bf00      	nop
 800ca3c:	200069ac 	.word	0x200069ac
 800ca40:	20006998 	.word	0x20006998

0800ca44 <FreeRTOS_min_uint32>:
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
 800ca44:	b480      	push	{r7}
 800ca46:	b083      	sub	sp, #12
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	6039      	str	r1, [r7, #0]
 800ca4e:	687a      	ldr	r2, [r7, #4]
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	4293      	cmp	r3, r2
 800ca54:	bf28      	it	cs
 800ca56:	4613      	movcs	r3, r2
 800ca58:	4618      	mov	r0, r3
 800ca5a:	370c      	adds	r7, #12
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr

0800ca64 <uxStreamBufferSpace>:
{
 800ca64:	b480      	push	{r7}
 800ca66:	b087      	sub	sp, #28
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	60f8      	str	r0, [r7, #12]
 800ca6c:	60b9      	str	r1, [r7, #8]
 800ca6e:	607a      	str	r2, [r7, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	691a      	ldr	r2, [r3, #16]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	441a      	add	r2, r3
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	1ad3      	subs	r3, r2, r3
 800ca7c:	3b01      	subs	r3, #1
 800ca7e:	617b      	str	r3, [r7, #20]
	if( uxCount >= pxBuffer->LENGTH )
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	691a      	ldr	r2, [r3, #16]
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	429a      	cmp	r2, r3
 800ca88:	d804      	bhi.n	800ca94 <uxStreamBufferSpace+0x30>
		uxCount -= pxBuffer->LENGTH;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	691b      	ldr	r3, [r3, #16]
 800ca8e:	697a      	ldr	r2, [r7, #20]
 800ca90:	1ad3      	subs	r3, r2, r3
 800ca92:	617b      	str	r3, [r7, #20]
	return uxCount;
 800ca94:	697b      	ldr	r3, [r7, #20]
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	371c      	adds	r7, #28
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa0:	4770      	bx	lr

0800caa2 <uxStreamBufferDistance>:
{
 800caa2:	b480      	push	{r7}
 800caa4:	b087      	sub	sp, #28
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	60f8      	str	r0, [r7, #12]
 800caaa:	60b9      	str	r1, [r7, #8]
 800caac:	607a      	str	r2, [r7, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	691a      	ldr	r2, [r3, #16]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	441a      	add	r2, r3
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	1ad3      	subs	r3, r2, r3
 800caba:	617b      	str	r3, [r7, #20]
	if ( uxCount >= pxBuffer->LENGTH )
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	691a      	ldr	r2, [r3, #16]
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d804      	bhi.n	800cad0 <uxStreamBufferDistance+0x2e>
		uxCount -= pxBuffer->LENGTH;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	691b      	ldr	r3, [r3, #16]
 800caca:	697a      	ldr	r2, [r7, #20]
 800cacc:	1ad3      	subs	r3, r2, r3
 800cace:	617b      	str	r3, [r7, #20]
	return uxCount;
 800cad0:	697b      	ldr	r3, [r7, #20]
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	371c      	adds	r7, #28
 800cad6:	46bd      	mov	sp, r7
 800cad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cadc:	4770      	bx	lr

0800cade <uxStreamBufferGetSpace>:
{
 800cade:	b580      	push	{r7, lr}
 800cae0:	b084      	sub	sp, #16
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
size_t uxHead = pxBuffer->uxHead;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	689b      	ldr	r3, [r3, #8]
 800caea:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800caf2:	68ba      	ldr	r2, [r7, #8]
 800caf4:	68f9      	ldr	r1, [r7, #12]
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f7ff ffb4 	bl	800ca64 <uxStreamBufferSpace>
 800cafc:	4603      	mov	r3, r0
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3710      	adds	r7, #16
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}

0800cb06 <uxStreamBufferGetSize>:
{
 800cb06:	b580      	push	{r7, lr}
 800cb08:	b084      	sub	sp, #16
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	6078      	str	r0, [r7, #4]
size_t uxHead = pxBuffer->uxHead;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	689b      	ldr	r3, [r3, #8]
 800cb12:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
 800cb1a:	68fa      	ldr	r2, [r7, #12]
 800cb1c:	68b9      	ldr	r1, [r7, #8]
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f7ff ffbf 	bl	800caa2 <uxStreamBufferDistance>
 800cb24:	4603      	mov	r3, r0
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3710      	adds	r7, #16
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}

0800cb2e <xStreamBufferLessThenEqual>:
}
/*-----------------------------------------------------------*/

static portINLINE BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t *pxBuffer, const size_t uxLeft, const size_t uxRight );
static portINLINE BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t *pxBuffer, const size_t uxLeft, const size_t uxRight )
{
 800cb2e:	b480      	push	{r7}
 800cb30:	b087      	sub	sp, #28
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	60f8      	str	r0, [r7, #12]
 800cb36:	60b9      	str	r1, [r7, #8]
 800cb38:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
size_t uxTail = pxBuffer->uxTail;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	613b      	str	r3, [r7, #16]

	/* Returns true if ( uxLeft < uxRight ) */
	if( ( uxLeft < uxTail ) ^ ( uxRight < uxTail ) )
 800cb40:	68ba      	ldr	r2, [r7, #8]
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	429a      	cmp	r2, r3
 800cb46:	bf34      	ite	cc
 800cb48:	2301      	movcc	r3, #1
 800cb4a:	2300      	movcs	r3, #0
 800cb4c:	b2da      	uxtb	r2, r3
 800cb4e:	6879      	ldr	r1, [r7, #4]
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	4299      	cmp	r1, r3
 800cb54:	bf34      	ite	cc
 800cb56:	2301      	movcc	r3, #1
 800cb58:	2300      	movcs	r3, #0
 800cb5a:	b2db      	uxtb	r3, r3
 800cb5c:	4053      	eors	r3, r2
 800cb5e:	b2db      	uxtb	r3, r3
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d009      	beq.n	800cb78 <xStreamBufferLessThenEqual+0x4a>
	{
		if( uxRight < uxTail )
 800cb64:	687a      	ldr	r2, [r7, #4]
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d202      	bcs.n	800cb72 <xStreamBufferLessThenEqual+0x44>
		{
			xReturn = pdTRUE;
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	617b      	str	r3, [r7, #20]
 800cb70:	e00b      	b.n	800cb8a <xStreamBufferLessThenEqual+0x5c>
		}
		else
		{
			xReturn = pdFALSE;
 800cb72:	2300      	movs	r3, #0
 800cb74:	617b      	str	r3, [r7, #20]
 800cb76:	e008      	b.n	800cb8a <xStreamBufferLessThenEqual+0x5c>
		}
	}
	else
	{
		if( uxLeft <= uxRight )
 800cb78:	68ba      	ldr	r2, [r7, #8]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d802      	bhi.n	800cb86 <xStreamBufferLessThenEqual+0x58>
		{
			xReturn = pdTRUE;
 800cb80:	2301      	movs	r3, #1
 800cb82:	617b      	str	r3, [r7, #20]
 800cb84:	e001      	b.n	800cb8a <xStreamBufferLessThenEqual+0x5c>
		}
		else
		{
			xReturn = pdFALSE;
 800cb86:	2300      	movs	r3, #0
 800cb88:	617b      	str	r3, [r7, #20]
		}
	}
	return xReturn;
 800cb8a:	697b      	ldr	r3, [r7, #20]
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	371c      	adds	r7, #28
 800cb90:	46bd      	mov	sp, r7
 800cb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb96:	4770      	bx	lr

0800cb98 <uxStreamBufferAdd>:
 * an offset from uxHead while uxHead will not be moved yet.  This possibility
 * will be used when TCP data is received while earlier data is still missing.
 * If 'pucData' equals NULL, the function is called to advance 'uxHead' only.
 */
size_t uxStreamBufferAdd( StreamBuffer_t *pxBuffer, size_t uxOffset, const uint8_t *pucData, size_t uxCount )
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b088      	sub	sp, #32
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	60f8      	str	r0, [r7, #12]
 800cba0:	60b9      	str	r1, [r7, #8]
 800cba2:	607a      	str	r2, [r7, #4]
 800cba4:	603b      	str	r3, [r7, #0]
size_t uxSpace, uxNextHead, uxFirst;

	uxSpace = uxStreamBufferGetSpace( pxBuffer );
 800cba6:	68f8      	ldr	r0, [r7, #12]
 800cba8:	f7ff ff99 	bl	800cade <uxStreamBufferGetSpace>
 800cbac:	61f8      	str	r0, [r7, #28]

	/* If uxOffset > 0, items can be placed in front of uxHead */
	if( uxSpace > uxOffset )
 800cbae:	69fa      	ldr	r2, [r7, #28]
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d904      	bls.n	800cbc0 <uxStreamBufferAdd+0x28>
	{
		uxSpace -= uxOffset;
 800cbb6:	69fa      	ldr	r2, [r7, #28]
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	1ad3      	subs	r3, r2, r3
 800cbbc:	61fb      	str	r3, [r7, #28]
 800cbbe:	e001      	b.n	800cbc4 <uxStreamBufferAdd+0x2c>
	}
	else
	{
		uxSpace = 0u;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	61fb      	str	r3, [r7, #28]
	}

	/* The number of bytes that can be written is the minimum of the number of
	bytes requested and the number available. */
	uxCount = FreeRTOS_min_uint32( uxSpace, uxCount );
 800cbc4:	6839      	ldr	r1, [r7, #0]
 800cbc6:	69f8      	ldr	r0, [r7, #28]
 800cbc8:	f7ff ff3c 	bl	800ca44 <FreeRTOS_min_uint32>
 800cbcc:	6038      	str	r0, [r7, #0]

	if( uxCount != 0u )
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d05a      	beq.n	800cc8a <uxStreamBufferAdd+0xf2>
	{
		uxNextHead = pxBuffer->uxHead;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	689b      	ldr	r3, [r3, #8]
 800cbd8:	61bb      	str	r3, [r7, #24]

		if( uxOffset != 0u )
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d00d      	beq.n	800cbfc <uxStreamBufferAdd+0x64>
		{
			/* ( uxOffset > 0 ) means: write in front if the uxHead marker */
			uxNextHead += uxOffset;
 800cbe0:	69ba      	ldr	r2, [r7, #24]
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	4413      	add	r3, r2
 800cbe6:	61bb      	str	r3, [r7, #24]
			if( uxNextHead >= pxBuffer->LENGTH )
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	691a      	ldr	r2, [r3, #16]
 800cbec:	69bb      	ldr	r3, [r7, #24]
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d804      	bhi.n	800cbfc <uxStreamBufferAdd+0x64>
			{
				uxNextHead -= pxBuffer->LENGTH;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	691b      	ldr	r3, [r3, #16]
 800cbf6:	69ba      	ldr	r2, [r7, #24]
 800cbf8:	1ad3      	subs	r3, r2, r3
 800cbfa:	61bb      	str	r3, [r7, #24]
			}
		}

		if( pucData != NULL )
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d022      	beq.n	800cc48 <uxStreamBufferAdd+0xb0>
		{
			/* Calculate the number of bytes that can be added in the first
			write - which may be less than the total number of bytes that need
			to be added if the buffer will wrap back to the beginning. */
			uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextHead, uxCount );
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	691a      	ldr	r2, [r3, #16]
 800cc06:	69bb      	ldr	r3, [r7, #24]
 800cc08:	1ad3      	subs	r3, r2, r3
 800cc0a:	6839      	ldr	r1, [r7, #0]
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f7ff ff19 	bl	800ca44 <FreeRTOS_min_uint32>
 800cc12:	6178      	str	r0, [r7, #20]

			/* Write as many bytes as can be written in the first write. */
			memcpy( ( void* ) ( pxBuffer->ucArray + uxNextHead ), pucData, uxFirst );
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	f103 0214 	add.w	r2, r3, #20
 800cc1a:	69bb      	ldr	r3, [r7, #24]
 800cc1c:	4413      	add	r3, r2
 800cc1e:	697a      	ldr	r2, [r7, #20]
 800cc20:	6879      	ldr	r1, [r7, #4]
 800cc22:	4618      	mov	r0, r3
 800cc24:	f004 f89b 	bl	8010d5e <memcpy>

			/* If the number of bytes written was less than the number that
			could be written in the first write... */
			if( uxCount > uxFirst )
 800cc28:	683a      	ldr	r2, [r7, #0]
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d90b      	bls.n	800cc48 <uxStreamBufferAdd+0xb0>
			{
				/* ...then write the remaining bytes to the start of the
				buffer. */
				memcpy( ( void * )pxBuffer->ucArray, pucData + uxFirst, uxCount - uxFirst );
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	f103 0014 	add.w	r0, r3, #20
 800cc36:	687a      	ldr	r2, [r7, #4]
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	18d1      	adds	r1, r2, r3
 800cc3c:	683a      	ldr	r2, [r7, #0]
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	1ad3      	subs	r3, r2, r3
 800cc42:	461a      	mov	r2, r3
 800cc44:	f004 f88b 	bl	8010d5e <memcpy>
			}
		}

		if( uxOffset == 0u )
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d110      	bne.n	800cc70 <uxStreamBufferAdd+0xd8>
		{
			/* ( uxOffset == 0 ) means: write at uxHead position */
			uxNextHead += uxCount;
 800cc4e:	69ba      	ldr	r2, [r7, #24]
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	4413      	add	r3, r2
 800cc54:	61bb      	str	r3, [r7, #24]
			if( uxNextHead >= pxBuffer->LENGTH )
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	691a      	ldr	r2, [r3, #16]
 800cc5a:	69bb      	ldr	r3, [r7, #24]
 800cc5c:	429a      	cmp	r2, r3
 800cc5e:	d804      	bhi.n	800cc6a <uxStreamBufferAdd+0xd2>
			{
				uxNextHead -= pxBuffer->LENGTH;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	691b      	ldr	r3, [r3, #16]
 800cc64:	69ba      	ldr	r2, [r7, #24]
 800cc66:	1ad3      	subs	r3, r2, r3
 800cc68:	61bb      	str	r3, [r7, #24]
			}
			pxBuffer->uxHead = uxNextHead;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	69ba      	ldr	r2, [r7, #24]
 800cc6e:	609a      	str	r2, [r3, #8]
		}

		if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	68db      	ldr	r3, [r3, #12]
 800cc74:	69ba      	ldr	r2, [r7, #24]
 800cc76:	4619      	mov	r1, r3
 800cc78:	68f8      	ldr	r0, [r7, #12]
 800cc7a:	f7ff ff58 	bl	800cb2e <xStreamBufferLessThenEqual>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d002      	beq.n	800cc8a <uxStreamBufferAdd+0xf2>
		{
			/* Advance the front pointer */
			pxBuffer->uxFront = uxNextHead;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	69ba      	ldr	r2, [r7, #24]
 800cc88:	60da      	str	r2, [r3, #12]
		}
	}

	return uxCount;
 800cc8a:	683b      	ldr	r3, [r7, #0]
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3720      	adds	r7, #32
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <uxStreamBufferGet>:
 * If 'pucData' equals NULL, the function is called to advance 'lTail' only.
 * if 'xPeek' is pdTRUE, or if 'uxOffset' is non-zero, the 'lTail' pointer will
 * not be advanced.
 */
size_t uxStreamBufferGet( StreamBuffer_t *pxBuffer, size_t uxOffset, uint8_t *pucData, size_t uxMaxCount, BaseType_t xPeek )
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b088      	sub	sp, #32
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	607a      	str	r2, [r7, #4]
 800cca0:	603b      	str	r3, [r7, #0]
size_t uxSize, uxCount, uxFirst, uxNextTail;

	/* How much data is available? */
	uxSize = uxStreamBufferGetSize( pxBuffer );
 800cca2:	68f8      	ldr	r0, [r7, #12]
 800cca4:	f7ff ff2f 	bl	800cb06 <uxStreamBufferGetSize>
 800cca8:	61f8      	str	r0, [r7, #28]

	if( uxSize > uxOffset )
 800ccaa:	69fa      	ldr	r2, [r7, #28]
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	d904      	bls.n	800ccbc <uxStreamBufferGet+0x28>
	{
		uxSize -= uxOffset;
 800ccb2:	69fa      	ldr	r2, [r7, #28]
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	1ad3      	subs	r3, r2, r3
 800ccb8:	61fb      	str	r3, [r7, #28]
 800ccba:	e001      	b.n	800ccc0 <uxStreamBufferGet+0x2c>
	}
	else
	{
		uxSize = 0u;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	61fb      	str	r3, [r7, #28]
	}

	/* Use the minimum of the wanted bytes and the available bytes. */
	uxCount = FreeRTOS_min_uint32( uxSize, uxMaxCount );
 800ccc0:	6839      	ldr	r1, [r7, #0]
 800ccc2:	69f8      	ldr	r0, [r7, #28]
 800ccc4:	f7ff febe 	bl	800ca44 <FreeRTOS_min_uint32>
 800ccc8:	6178      	str	r0, [r7, #20]

	if( uxCount > 0u )
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d050      	beq.n	800cd72 <uxStreamBufferGet+0xde>
	{
		uxNextTail = pxBuffer->uxTail;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	61bb      	str	r3, [r7, #24]

		if( uxOffset != 0u )
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d00d      	beq.n	800ccf8 <uxStreamBufferGet+0x64>
		{
			uxNextTail += uxOffset;
 800ccdc:	69ba      	ldr	r2, [r7, #24]
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	4413      	add	r3, r2
 800cce2:	61bb      	str	r3, [r7, #24]
			if( uxNextTail >= pxBuffer->LENGTH )
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	691a      	ldr	r2, [r3, #16]
 800cce8:	69bb      	ldr	r3, [r7, #24]
 800ccea:	429a      	cmp	r2, r3
 800ccec:	d804      	bhi.n	800ccf8 <uxStreamBufferGet+0x64>
			{
				uxNextTail -= pxBuffer->LENGTH;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	691b      	ldr	r3, [r3, #16]
 800ccf2:	69ba      	ldr	r2, [r7, #24]
 800ccf4:	1ad3      	subs	r3, r2, r3
 800ccf6:	61bb      	str	r3, [r7, #24]
			}
		}

		if( pucData != NULL )
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d022      	beq.n	800cd44 <uxStreamBufferGet+0xb0>
		{
			/* Calculate the number of bytes that can be read - which may be
			less than the number wanted if the data wraps around to the start of
			the buffer. */
			uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextTail, uxCount );
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	691a      	ldr	r2, [r3, #16]
 800cd02:	69bb      	ldr	r3, [r7, #24]
 800cd04:	1ad3      	subs	r3, r2, r3
 800cd06:	6979      	ldr	r1, [r7, #20]
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f7ff fe9b 	bl	800ca44 <FreeRTOS_min_uint32>
 800cd0e:	6138      	str	r0, [r7, #16]

			/* Obtain the number of bytes it is possible to obtain in the first
			read. */
			memcpy( pucData, pxBuffer->ucArray + uxNextTail, uxFirst );
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	f103 0214 	add.w	r2, r3, #20
 800cd16:	69bb      	ldr	r3, [r7, #24]
 800cd18:	4413      	add	r3, r2
 800cd1a:	693a      	ldr	r2, [r7, #16]
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f004 f81d 	bl	8010d5e <memcpy>

			/* If the total number of wanted bytes is greater than the number
			that could be read in the first read... */
			if( uxCount > uxFirst )
 800cd24:	697a      	ldr	r2, [r7, #20]
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d90b      	bls.n	800cd44 <uxStreamBufferGet+0xb0>
			{
				/*...then read the remaining bytes from the start of the buffer. */
				memcpy( pucData + uxFirst, pxBuffer->ucArray, uxCount - uxFirst );
 800cd2c:	687a      	ldr	r2, [r7, #4]
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	18d0      	adds	r0, r2, r3
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	f103 0114 	add.w	r1, r3, #20
 800cd38:	697a      	ldr	r2, [r7, #20]
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	1ad3      	subs	r3, r2, r3
 800cd3e:	461a      	mov	r2, r3
 800cd40:	f004 f80d 	bl	8010d5e <memcpy>
			}
		}

		if( ( xPeek == pdFALSE ) && ( uxOffset == 0UL ) )
 800cd44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d113      	bne.n	800cd72 <uxStreamBufferGet+0xde>
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d110      	bne.n	800cd72 <uxStreamBufferGet+0xde>
		{
			/* Move the tail pointer to effecively remove the data read from
			the buffer. */
			uxNextTail += uxCount;
 800cd50:	69ba      	ldr	r2, [r7, #24]
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	4413      	add	r3, r2
 800cd56:	61bb      	str	r3, [r7, #24]

			if( uxNextTail >= pxBuffer->LENGTH )
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	691a      	ldr	r2, [r3, #16]
 800cd5c:	69bb      	ldr	r3, [r7, #24]
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d804      	bhi.n	800cd6c <uxStreamBufferGet+0xd8>
			{
				uxNextTail -= pxBuffer->LENGTH;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	691b      	ldr	r3, [r3, #16]
 800cd66:	69ba      	ldr	r2, [r7, #24]
 800cd68:	1ad3      	subs	r3, r2, r3
 800cd6a:	61bb      	str	r3, [r7, #24]
			}

			pxBuffer->uxTail = uxNextTail;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	69ba      	ldr	r2, [r7, #24]
 800cd70:	601a      	str	r2, [r3, #0]
		}
	}

	return uxCount;
 800cd72:	697b      	ldr	r3, [r7, #20]
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3720      	adds	r7, #32
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}

0800cd7c <FreeRTOS_max_int32>:
	static portINLINE int32_t  FreeRTOS_max_int32  (int32_t  a, int32_t  b) { return a >= b ? a : b; }
 800cd7c:	b480      	push	{r7}
 800cd7e:	b083      	sub	sp, #12
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	6039      	str	r1, [r7, #0]
 800cd86:	687a      	ldr	r2, [r7, #4]
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	bfb8      	it	lt
 800cd8e:	4613      	movlt	r3, r2
 800cd90:	4618      	mov	r0, r3
 800cd92:	370c      	adds	r7, #12
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr

0800cd9c <FreeRTOS_min_int32>:
	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
 800cd9c:	b480      	push	{r7}
 800cd9e:	b083      	sub	sp, #12
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	6039      	str	r1, [r7, #0]
 800cda6:	687a      	ldr	r2, [r7, #4]
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	bfa8      	it	ge
 800cdae:	4613      	movge	r3, r2
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	370c      	adds	r7, #12
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr

0800cdbc <FreeRTOS_min_uint32>:
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
 800cdbc:	b480      	push	{r7}
 800cdbe:	b083      	sub	sp, #12
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	6039      	str	r1, [r7, #0]
 800cdc6:	687a      	ldr	r2, [r7, #4]
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	bf28      	it	cs
 800cdce:	4613      	movcs	r3, r2
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	370c      	adds	r7, #12
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdda:	4770      	bx	lr

0800cddc <uxStreamBufferSpace>:
{
 800cddc:	b480      	push	{r7}
 800cdde:	b087      	sub	sp, #28
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	60f8      	str	r0, [r7, #12]
 800cde4:	60b9      	str	r1, [r7, #8]
 800cde6:	607a      	str	r2, [r7, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	691a      	ldr	r2, [r3, #16]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	441a      	add	r2, r3
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	1ad3      	subs	r3, r2, r3
 800cdf4:	3b01      	subs	r3, #1
 800cdf6:	617b      	str	r3, [r7, #20]
	if( uxCount >= pxBuffer->LENGTH )
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	691a      	ldr	r2, [r3, #16]
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	d804      	bhi.n	800ce0c <uxStreamBufferSpace+0x30>
		uxCount -= pxBuffer->LENGTH;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	691b      	ldr	r3, [r3, #16]
 800ce06:	697a      	ldr	r2, [r7, #20]
 800ce08:	1ad3      	subs	r3, r2, r3
 800ce0a:	617b      	str	r3, [r7, #20]
	return uxCount;
 800ce0c:	697b      	ldr	r3, [r7, #20]
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	371c      	adds	r7, #28
 800ce12:	46bd      	mov	sp, r7
 800ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce18:	4770      	bx	lr

0800ce1a <uxStreamBufferDistance>:
{
 800ce1a:	b480      	push	{r7}
 800ce1c:	b087      	sub	sp, #28
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	60f8      	str	r0, [r7, #12]
 800ce22:	60b9      	str	r1, [r7, #8]
 800ce24:	607a      	str	r2, [r7, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	691a      	ldr	r2, [r3, #16]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	441a      	add	r2, r3
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	1ad3      	subs	r3, r2, r3
 800ce32:	617b      	str	r3, [r7, #20]
	if ( uxCount >= pxBuffer->LENGTH )
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	691a      	ldr	r2, [r3, #16]
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d804      	bhi.n	800ce48 <uxStreamBufferDistance+0x2e>
		uxCount -= pxBuffer->LENGTH;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	691b      	ldr	r3, [r3, #16]
 800ce42:	697a      	ldr	r2, [r7, #20]
 800ce44:	1ad3      	subs	r3, r2, r3
 800ce46:	617b      	str	r3, [r7, #20]
	return uxCount;
 800ce48:	697b      	ldr	r3, [r7, #20]
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	371c      	adds	r7, #28
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce54:	4770      	bx	lr

0800ce56 <uxStreamBufferGetSpace>:
{
 800ce56:	b580      	push	{r7, lr}
 800ce58:	b084      	sub	sp, #16
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	6078      	str	r0, [r7, #4]
size_t uxHead = pxBuffer->uxHead;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	689b      	ldr	r3, [r3, #8]
 800ce62:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800ce6a:	68ba      	ldr	r2, [r7, #8]
 800ce6c:	68f9      	ldr	r1, [r7, #12]
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f7ff ffb4 	bl	800cddc <uxStreamBufferSpace>
 800ce74:	4603      	mov	r3, r0
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3710      	adds	r7, #16
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}

0800ce7e <uxStreamBufferFrontSpace>:
{
 800ce7e:	b580      	push	{r7, lr}
 800ce80:	b084      	sub	sp, #16
 800ce82:	af00      	add	r7, sp, #0
 800ce84:	6078      	str	r0, [r7, #4]
size_t uxFront = pxBuffer->uxFront;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	68db      	ldr	r3, [r3, #12]
 800ce8a:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferSpace( pxBuffer, uxFront, uxTail );
 800ce92:	68ba      	ldr	r2, [r7, #8]
 800ce94:	68f9      	ldr	r1, [r7, #12]
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f7ff ffa0 	bl	800cddc <uxStreamBufferSpace>
 800ce9c:	4603      	mov	r3, r0
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3710      	adds	r7, #16
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}

0800cea6 <uxStreamBufferMidSpace>:
{
 800cea6:	b580      	push	{r7, lr}
 800cea8:	b084      	sub	sp, #16
 800ceaa:	af00      	add	r7, sp, #0
 800ceac:	6078      	str	r0, [r7, #4]
size_t uxHead = pxBuffer->uxHead;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	689b      	ldr	r3, [r3, #8]
 800ceb2:	60fb      	str	r3, [r7, #12]
size_t uxMid = pxBuffer->uxMid;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferDistance( pxBuffer, uxMid, uxHead );
 800ceba:	68fa      	ldr	r2, [r7, #12]
 800cebc:	68b9      	ldr	r1, [r7, #8]
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f7ff ffab 	bl	800ce1a <uxStreamBufferDistance>
 800cec4:	4603      	mov	r3, r0
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3710      	adds	r7, #16
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}

0800cece <vStreamBufferMoveMid>:
{
 800cece:	b580      	push	{r7, lr}
 800ced0:	b084      	sub	sp, #16
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	6078      	str	r0, [r7, #4]
 800ced6:	6039      	str	r1, [r7, #0]
size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f7ff ffe4 	bl	800cea6 <uxStreamBufferMidSpace>
 800cede:	60f8      	str	r0, [r7, #12]
	if( uxCount > uxSize )
 800cee0:	683a      	ldr	r2, [r7, #0]
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d901      	bls.n	800ceec <vStreamBufferMoveMid+0x1e>
		uxCount = uxSize;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	603b      	str	r3, [r7, #0]
	pxBuffer->uxMid += uxCount;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	685a      	ldr	r2, [r3, #4]
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	441a      	add	r2, r3
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	605a      	str	r2, [r3, #4]
	if( pxBuffer->uxMid >= pxBuffer->LENGTH )
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	685a      	ldr	r2, [r3, #4]
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	691b      	ldr	r3, [r3, #16]
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d306      	bcc.n	800cf12 <vStreamBufferMoveMid+0x44>
		pxBuffer->uxMid -= pxBuffer->LENGTH;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	685a      	ldr	r2, [r3, #4]
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	691b      	ldr	r3, [r3, #16]
 800cf0c:	1ad2      	subs	r2, r2, r3
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	605a      	str	r2, [r3, #4]
}
 800cf12:	bf00      	nop
 800cf14:	3710      	adds	r7, #16
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}

0800cf1a <ulChar2u32>:
{
 800cf1a:	b480      	push	{r7}
 800cf1c:	b083      	sub	sp, #12
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	6078      	str	r0, [r7, #4]
	return  ( ( ( uint32_t )apChr[0] ) << 24) |
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	061a      	lsls	r2, r3, #24
			( ( ( uint32_t )apChr[1] ) << 16) |
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	041b      	lsls	r3, r3, #16
	return  ( ( ( uint32_t )apChr[0] ) << 24) |
 800cf30:	431a      	orrs	r2, r3
			( ( ( uint32_t )apChr[2] ) << 8) |
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	3302      	adds	r3, #2
 800cf36:	781b      	ldrb	r3, [r3, #0]
 800cf38:	021b      	lsls	r3, r3, #8
			( ( ( uint32_t )apChr[1] ) << 16) |
 800cf3a:	4313      	orrs	r3, r2
			( ( ( uint32_t )apChr[3] ) );
 800cf3c:	687a      	ldr	r2, [r7, #4]
 800cf3e:	3203      	adds	r2, #3
 800cf40:	7812      	ldrb	r2, [r2, #0]
			( ( ( uint32_t )apChr[2] ) << 8) |
 800cf42:	4313      	orrs	r3, r2
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	370c      	adds	r7, #12
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr

0800cf50 <usChar2u16>:
{
 800cf50:	b480      	push	{r7}
 800cf52:	b083      	sub	sp, #12
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
			( ( ( ( uint32_t )apChr[0] ) << 8) |
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	b29b      	uxth	r3, r3
 800cf5e:	021b      	lsls	r3, r3, #8
 800cf60:	b29a      	uxth	r2, r3
			  ( ( ( uint32_t )apChr[1] ) ) );
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	3301      	adds	r3, #1
 800cf66:	781b      	ldrb	r3, [r3, #0]
 800cf68:	b29b      	uxth	r3, r3
	return ( uint16_t )
 800cf6a:	4313      	orrs	r3, r2
 800cf6c:	b29b      	uxth	r3, r3
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	370c      	adds	r7, #12
 800cf72:	46bd      	mov	sp, r7
 800cf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf78:	4770      	bx	lr
	...

0800cf7c <prvTCPSocketIsActive>:

/* prvTCPSocketIsActive() returns true if the socket must be checked.
 * Non-active sockets are waiting for user action, either connect()
 * or close(). */
static BaseType_t prvTCPSocketIsActive( UBaseType_t uxStatus )
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b083      	sub	sp, #12
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
	switch( uxStatus )
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2b0b      	cmp	r3, #11
 800cf88:	d81c      	bhi.n	800cfc4 <prvTCPSocketIsActive+0x48>
 800cf8a:	a201      	add	r2, pc, #4	; (adr r2, 800cf90 <prvTCPSocketIsActive+0x14>)
 800cf8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf90:	0800cfc1 	.word	0x0800cfc1
 800cf94:	0800cfc5 	.word	0x0800cfc5
 800cf98:	0800cfc5 	.word	0x0800cfc5
 800cf9c:	0800cfc5 	.word	0x0800cfc5
 800cfa0:	0800cfc5 	.word	0x0800cfc5
 800cfa4:	0800cfc5 	.word	0x0800cfc5
 800cfa8:	0800cfc5 	.word	0x0800cfc5
 800cfac:	0800cfc1 	.word	0x0800cfc1
 800cfb0:	0800cfc1 	.word	0x0800cfc1
 800cfb4:	0800cfc1 	.word	0x0800cfc1
 800cfb8:	0800cfc5 	.word	0x0800cfc5
 800cfbc:	0800cfc1 	.word	0x0800cfc1
	case eCLOSED:
	case eCLOSE_WAIT:
	case eFIN_WAIT_2:
	case eCLOSING:
	case eTIME_WAIT:
		return pdFALSE;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	e000      	b.n	800cfc6 <prvTCPSocketIsActive+0x4a>
	default:
		return pdTRUE;
 800cfc4:	2301      	movs	r3, #1
	}
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	370c      	adds	r7, #12
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd0:	4770      	bx	lr
 800cfd2:	bf00      	nop

0800cfd4 <prvTCPStatusAgeCheck>:
/*-----------------------------------------------------------*/

#if( ipconfigTCP_HANG_PROTECTION == 1 )

	static BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t *pxSocket )
	{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b084      	sub	sp, #16
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
	BaseType_t xResult;
		switch( pxSocket->u.xTCP.ucTCPState )
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cfe2:	2b08      	cmp	r3, #8
 800cfe4:	d81a      	bhi.n	800d01c <prvTCPStatusAgeCheck+0x48>
 800cfe6:	a201      	add	r2, pc, #4	; (adr r2, 800cfec <prvTCPStatusAgeCheck+0x18>)
 800cfe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfec:	0800d017 	.word	0x0800d017
 800cff0:	0800d017 	.word	0x0800d017
 800cff4:	0800d01d 	.word	0x0800d01d
 800cff8:	0800d01d 	.word	0x0800d01d
 800cffc:	0800d01d 	.word	0x0800d01d
 800d000:	0800d011 	.word	0x0800d011
 800d004:	0800d01d 	.word	0x0800d01d
 800d008:	0800d01d 	.word	0x0800d01d
 800d00c:	0800d017 	.word	0x0800d017
		{
		case eESTABLISHED:
			/* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
			state ESTABLISHED can be protected using keep-alive messages. */
			xResult = pdFALSE;
 800d010:	2300      	movs	r3, #0
 800d012:	60fb      	str	r3, [r7, #12]
			break;
 800d014:	e005      	b.n	800d022 <prvTCPStatusAgeCheck+0x4e>
		case eCLOSED:
		case eTCP_LISTEN:
		case eCLOSE_WAIT:
			/* These 3 states may last for ever, up to the owner. */
			xResult = pdFALSE;
 800d016:	2300      	movs	r3, #0
 800d018:	60fb      	str	r3, [r7, #12]
			break;
 800d01a:	e002      	b.n	800d022 <prvTCPStatusAgeCheck+0x4e>
		default:
			/* All other (non-connected) states will get anti-hanging
			protection. */
			xResult = pdTRUE;
 800d01c:	2301      	movs	r3, #1
 800d01e:	60fb      	str	r3, [r7, #12]
			break;
 800d020:	bf00      	nop
		}
		if( xResult != pdFALSE )
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d025      	beq.n	800d074 <prvTCPStatusAgeCheck+0xa0>
		{
			/* How much time has past since the last active moment which is
			defined as A) a state change or B) a packet has arrived. */
			TickType_t xAge = xTaskGetTickCount( ) - pxSocket->u.xTCP.xLastActTime;
 800d028:	f7fc f894 	bl	8009154 <xTaskGetTickCount>
 800d02c:	4602      	mov	r2, r0
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d032:	1ad3      	subs	r3, r2, r3
 800d034:	60bb      	str	r3, [r7, #8]

			/* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
			if( xAge > ( ipconfigTCP_HANG_PROTECTION_TIME * configTICK_RATE_HZ ) )
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	f247 5230 	movw	r2, #30000	; 0x7530
 800d03c:	4293      	cmp	r3, r2
 800d03e:	d919      	bls.n	800d074 <prvTCPStatusAgeCheck+0xa0>
						FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) ) );
				}
				#endif /* ipconfigHAS_DEBUG_PRINTF */

				/* Move to eCLOSE_WAIT, user may close the socket. */
				vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800d040:	2108      	movs	r1, #8
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f000 fda7 	bl	800db96 <vTCPStateChange>

				/* When 'bPassQueued' true, this socket is an orphan until it
				gets connected. */
				if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d04e:	f003 0304 	and.w	r3, r3, #4
 800d052:	b2db      	uxtb	r3, r3
 800d054:	2b00      	cmp	r3, #0
 800d056:	d00d      	beq.n	800d074 <prvTCPStatusAgeCheck+0xa0>
				{
					if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d05e:	f003 0308 	and.w	r3, r3, #8
 800d062:	b2db      	uxtb	r3, r3
 800d064:	2b00      	cmp	r3, #0
 800d066:	d102      	bne.n	800d06e <prvTCPStatusAgeCheck+0x9a>
					{
						/* As it did not get connected, and the user can never
						accept() it anymore, it will be deleted now.  Called from
						the IP-task, so it's safe to call the internal Close
						function: vSocketClose(). */
						vSocketClose( pxSocket );
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f7ff f889 	bl	800c180 <vSocketClose>
					}
					/* Return a negative value to tell to inform the caller
					xTCPTimerCheck()
					that the socket got closed and may not be accessed anymore. */
					xResult = -1;
 800d06e:	f04f 33ff 	mov.w	r3, #4294967295
 800d072:	60fb      	str	r3, [r7, #12]
				}
			}
		}
		return xResult;
 800d074:	68fb      	ldr	r3, [r7, #12]
	}
 800d076:	4618      	mov	r0, r3
 800d078:	3710      	adds	r7, #16
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
 800d07e:	bf00      	nop

0800d080 <xTCPSocketCheck>:
 *		prvTCPSendRepeated()			// Send at most 8 messages on a row
 *			prvTCPReturnPacket()		// Prepare for returning
 *			xNetworkInterfaceOutput()	// Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
 */
BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t *pxSocket )
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b084      	sub	sp, #16
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
BaseType_t xResult = 0;
 800d088:	2300      	movs	r3, #0
 800d08a:	60fb      	str	r3, [r7, #12]
BaseType_t xReady = pdFALSE;
 800d08c:	2300      	movs	r3, #0
 800d08e:	60bb      	str	r3, [r7, #8]

	if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d096:	2b04      	cmp	r3, #4
 800d098:	d906      	bls.n	800d0a8 <xTCPSocketCheck+0x28>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d002      	beq.n	800d0a8 <xTCPSocketCheck+0x28>
	{
		/* The API FreeRTOS_send() might have added data to the TX stream.  Add
		this data to the windowing system to it can be transmitted. */
		prvTCPAddTxData( pxSocket );
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f001 f89e 	bl	800e1e4 <prvTCPAddTxData>
	}

	#if ipconfigUSE_TCP_WIN == 1
	{
		if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d02a      	beq.n	800d106 <xTCPSocketCheck+0x86>
		{
			/* The first task of this regular socket check is to send-out delayed
			ACK's. */
			if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d0b6:	f003 0320 	and.w	r3, r3, #32
 800d0ba:	b2db      	uxtb	r3, r3
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d116      	bne.n	800d0ee <xTCPSocketCheck+0x6e>
			{
				/* Earlier data was received but not yet acknowledged.  This
				function is called when the TCP timer for the socket expires, the
				ACK may be sent now. */
				if( pxSocket->u.xTCP.ucTCPState != eCLOSED )
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d009      	beq.n	800d0de <xTCPSocketCheck+0x5e>
				{
					if( xTCPWindowLoggingLevel > 1 && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 800d0ca:	4b1d      	ldr	r3, [pc, #116]	; (800d140 <xTCPSocketCheck+0xc0>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	2b01      	cmp	r3, #1
							pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber,
							pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber   - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber,
							ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) );
					}

					prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER, ipconfigZERO_COPY_TX_DRIVER );
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	2228      	movs	r2, #40	; 0x28
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f000 f8bb 	bl	800d254 <prvTCPReturnPacket>
						clear the pointer to it. */
						pxSocket->u.xTCP.pxAckMessage = NULL;
					}
					#endif /* ipconfigZERO_COPY_TX_DRIVER */
				}
				if( prvTCPNextTimeout( pxSocket ) > 1 )
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f001 f800 	bl	800e0e4 <prvTCPNextTimeout>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	2b01      	cmp	r3, #1
 800d0e8:	d901      	bls.n	800d0ee <xTCPSocketCheck+0x6e>
				{
					/* Tell the code below that this function is ready. */
					xReady = pdTRUE;
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	60bb      	str	r3, [r7, #8]
				/* The user wants to perform an active shutdown(), skip sending
				the	delayed	ACK.  The function prvTCPSendPacket() will send the
				FIN	along with the ACK's. */
			}

			if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d007      	beq.n	800d106 <xTCPSocketCheck+0x86>
			{
				vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f003 fb1a 	bl	8010734 <vReleaseNetworkBufferAndDescriptor>
				pxSocket->u.xTCP.pxAckMessage = NULL;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2200      	movs	r2, #0
 800d104:	67da      	str	r2, [r3, #124]	; 0x7c
			}
		}
	}
	#endif /* ipconfigUSE_TCP_WIN */

	if( xReady == pdFALSE )
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d113      	bne.n	800d134 <xTCPSocketCheck+0xb4>
	{
		/* The second task of this regular socket check is sending out data. */
		if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) ||
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d112:	2b04      	cmp	r3, #4
 800d114:	d804      	bhi.n	800d120 <xTCPSocketCheck+0xa0>
			( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN ) )
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
		if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) ||
 800d11c:	2b02      	cmp	r3, #2
 800d11e:	d102      	bne.n	800d126 <xTCPSocketCheck+0xa6>
		{
			prvTCPSendPacket( pxSocket );
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f000 f80f 	bl	800d144 <prvTCPSendPacket>
		}

		/* Set the time-out for the next wakeup for this socket. */
		prvTCPNextTimeout( pxSocket );
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f000 ffdc 	bl	800e0e4 <prvTCPNextTimeout>

		#if( ipconfigTCP_HANG_PROTECTION == 1 )
		{
			/* In all (non-connected) states in which keep-alive messages can not be sent
			the anti-hang protocol will close sockets that are 'hanging'. */
			xResult = prvTCPStatusAgeCheck( pxSocket );
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f7ff ff51 	bl	800cfd4 <prvTCPStatusAgeCheck>
 800d132:	60f8      	str	r0, [r7, #12]
		}
		#endif
	}

	return xResult;
 800d134:	68fb      	ldr	r3, [r7, #12]
}
 800d136:	4618      	mov	r0, r3
 800d138:	3710      	adds	r7, #16
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	20004ee0 	.word	0x20004ee0

0800d144 <prvTCPSendPacket>:
/*
 * prvTCPSendPacket() will be called when the socket time-out has been reached.
 * It is only called by xTCPSocketCheck().
 */
static int32_t prvTCPSendPacket( FreeRTOS_Socket_t *pxSocket )
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b086      	sub	sp, #24
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
int32_t lResult = 0;
 800d14c:	2300      	movs	r3, #0
 800d14e:	617b      	str	r3, [r7, #20]
UBaseType_t uxOptionsLength;
TCPPacket_t *pxTCPPacket;
NetworkBufferDescriptor_t *pxNetworkBuffer;

	if( pxSocket->u.xTCP.ucTCPState != eCONNECT_SYN )
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d156:	2b02      	cmp	r3, #2
 800d158:	d010      	beq.n	800d17c <prvTCPSendPacket+0x38>
	{
		/* The connection is in s state other than SYN. */
		pxNetworkBuffer = NULL;
 800d15a:	2300      	movs	r3, #0
 800d15c:	60bb      	str	r3, [r7, #8]

		/* prvTCPSendRepeated() will only create a network buffer if necessary,
		i.e. when data must be sent to the peer. */
		lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800d15e:	f107 0308 	add.w	r3, r7, #8
 800d162:	4619      	mov	r1, r3
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f000 f848 	bl	800d1fa <prvTCPSendRepeated>
 800d16a:	6178      	str	r0, [r7, #20]

		if( pxNetworkBuffer != NULL )
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d03e      	beq.n	800d1f0 <prvTCPSendPacket+0xac>
		{
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	4618      	mov	r0, r3
 800d176:	f003 fadd 	bl	8010734 <vReleaseNetworkBufferAndDescriptor>
 800d17a:	e039      	b.n	800d1f0 <prvTCPSendPacket+0xac>
		}
	}
	else
	{
		if( pxSocket->u.xTCP.ucRepCount >= 3u )
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d182:	2b02      	cmp	r3, #2
 800d184:	d904      	bls.n	800d190 <prvTCPSendPacket+0x4c>
			to most 3 times.  When there is no response, the socket get the
			status 'eCLOSE_WAIT'. */
			FreeRTOS_debug_printf( ( "Connect: giving up %lxip:%u\n",
				pxSocket->u.xTCP.ulRemoteIP,		/* IP address of remote machine. */
				pxSocket->u.xTCP.usRemotePort ) );	/* Port on remote machine. */
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800d186:	2108      	movs	r1, #8
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f000 fd04 	bl	800db96 <vTCPStateChange>
 800d18e:	e02f      	b.n	800d1f0 <prvTCPSendPacket+0xac>
		}
		else if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) || ( prvTCPPrepareConnect( pxSocket ) == pdTRUE ) )
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d196:	f003 0308 	and.w	r3, r3, #8
 800d19a:	b2db      	uxtb	r3, r3
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d105      	bne.n	800d1ac <prvTCPSendPacket+0x68>
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f000 fa5f 	bl	800d664 <prvTCPPrepareConnect>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	2b01      	cmp	r3, #1
 800d1aa:	d121      	bne.n	800d1f0 <prvTCPSendPacket+0xac>
		{
			/* Or else, if the connection has been prepared, or can be prepared
			now, proceed to send the packet with the SYN flag.
			prvTCPPrepareConnect() prepares 'xPacket' and returns pdTRUE if
			the Ethernet address of the peer or the gateway is found. */
			pxTCPPacket = ( TCPPacket_t * )pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	3382      	adds	r3, #130	; 0x82
 800d1b0:	613b      	str	r3, [r7, #16]

			/* About to send a SYN packet.  Call prvSetSynAckOptions() to set
			the proper options: The size of MSS and whether SACK's are
			allowed. */
			uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPPacket );
 800d1b2:	6939      	ldr	r1, [r7, #16]
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f000 fc76 	bl	800daa6 <prvSetSynAckOptions>
 800d1ba:	60f8      	str	r0, [r7, #12]

			/* Return the number of bytes to be sent. */
			lResult = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	3328      	adds	r3, #40	; 0x28
 800d1c0:	617b      	str	r3, [r7, #20]

			/* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
			uxOptionsLength is always a multiple of 4.  The complete expression
			would be:
			ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
			pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	b2db      	uxtb	r3, r3
 800d1c6:	3314      	adds	r3, #20
 800d1c8:	b2db      	uxtb	r3, r3
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	b2da      	uxtb	r2, r3
 800d1ce:	693b      	ldr	r3, [r7, #16]
 800d1d0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

			/* Repeat Count is used for a connecting socket, to limit the number
			of tries. */
			pxSocket->u.xTCP.ucRepCount++;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d1da:	3301      	adds	r3, #1
 800d1dc:	b2da      	uxtb	r2, r3
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

			/* Send the SYN message to make a connection.  The messages is
			stored in the socket field 'xPacket'.  It will be wrapped in a
			pseudo network buffer descriptor before it will be sent. */
			prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 800d1e4:	697a      	ldr	r2, [r7, #20]
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	2100      	movs	r1, #0
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f000 f832 	bl	800d254 <prvTCPReturnPacket>
		}
	}

	/* Return the total number of bytes sent. */
	return lResult;
 800d1f0:	697b      	ldr	r3, [r7, #20]
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3718      	adds	r7, #24
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}

0800d1fa <prvTCPSendRepeated>:
/*
 * prvTCPSendRepeated will try to send a series of messages, as long as there is
 * data to be sent and as long as the transmit window isn't full.
 */
static int32_t prvTCPSendRepeated( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer )
{
 800d1fa:	b580      	push	{r7, lr}
 800d1fc:	b086      	sub	sp, #24
 800d1fe:	af00      	add	r7, sp, #0
 800d200:	6078      	str	r0, [r7, #4]
 800d202:	6039      	str	r1, [r7, #0]
UBaseType_t uxIndex;
int32_t lResult = 0;
 800d204:	2300      	movs	r3, #0
 800d206:	613b      	str	r3, [r7, #16]
UBaseType_t uxOptionsLength = 0u;
 800d208:	2300      	movs	r3, #0
 800d20a:	60fb      	str	r3, [r7, #12]
int32_t xSendLength;

	for( uxIndex = 0u; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800d20c:	2300      	movs	r3, #0
 800d20e:	617b      	str	r3, [r7, #20]
 800d210:	e016      	b.n	800d240 <prvTCPSendRepeated+0x46>
	{
		/* prvTCPPrepareSend() might allocate a network buffer if there is data
		to be sent. */
		xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800d212:	68fa      	ldr	r2, [r7, #12]
 800d214:	6839      	ldr	r1, [r7, #0]
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f000 fdfc 	bl	800de14 <prvTCPPrepareSend>
 800d21c:	60b8      	str	r0, [r7, #8]
		if( xSendLength <= 0 )
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	2b00      	cmp	r3, #0
 800d222:	dd11      	ble.n	800d248 <prvTCPSendRepeated+0x4e>
		{
			break;
		}

		/* And return the packet to the peer. */
		prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	6819      	ldr	r1, [r3, #0]
 800d228:	68ba      	ldr	r2, [r7, #8]
 800d22a:	2300      	movs	r3, #0
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f000 f811 	bl	800d254 <prvTCPReturnPacket>
		{
			*ppxNetworkBuffer = NULL;
		}
		#endif /* ipconfigZERO_COPY_TX_DRIVER */

		lResult += xSendLength;
 800d232:	693a      	ldr	r2, [r7, #16]
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	4413      	add	r3, r2
 800d238:	613b      	str	r3, [r7, #16]
	for( uxIndex = 0u; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	3301      	adds	r3, #1
 800d23e:	617b      	str	r3, [r7, #20]
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	2b07      	cmp	r3, #7
 800d244:	d9e5      	bls.n	800d212 <prvTCPSendRepeated+0x18>
 800d246:	e000      	b.n	800d24a <prvTCPSendRepeated+0x50>
			break;
 800d248:	bf00      	nop
	}

	/* Return the total number of bytes sent. */
	return lResult;
 800d24a:	693b      	ldr	r3, [r7, #16]
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	3718      	adds	r7, #24
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <prvTCPReturnPacket>:
 * which may either point to a real network buffer or to a TCP socket field
 * called 'xTCP.xPacket'.   A temporary xNetworkBuffer will be used to pass
 * the data to the NIC.
 */
static void prvTCPReturnPacket( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer, uint32_t ulLen, BaseType_t xReleaseAfterSend )
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b098      	sub	sp, #96	; 0x60
 800d258:	af00      	add	r7, sp, #0
 800d25a:	60f8      	str	r0, [r7, #12]
 800d25c:	60b9      	str	r1, [r7, #8]
 800d25e:	607a      	str	r2, [r7, #4]
 800d260:	603b      	str	r3, [r7, #0]
uint32_t ulFrontSpace, ulSpace, ulSourceAddress, ulWinSize;
TCPWindow_t *pxTCPWindow;
NetworkBufferDescriptor_t xTempBuffer;
/* For sending, a pseudo network buffer will be used, as explained above. */

	if( pxNetworkBuffer == NULL )
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d109      	bne.n	800d27c <prvTCPReturnPacket+0x28>
	{
		pxNetworkBuffer = &xTempBuffer;
 800d268:	f107 0310 	add.w	r3, r7, #16
 800d26c:	60bb      	str	r3, [r7, #8]
		#if( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
		{
			xTempBuffer.pxNextBuffer = NULL;
		}
		#endif
		xTempBuffer.pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	3382      	adds	r3, #130	; 0x82
 800d272:	62bb      	str	r3, [r7, #40]	; 0x28
		xTempBuffer.xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800d274:	2346      	movs	r3, #70	; 0x46
 800d276:	62fb      	str	r3, [r7, #44]	; 0x2c
		xReleaseAfterSend = pdFALSE;
 800d278:	2300      	movs	r3, #0
 800d27a:	603b      	str	r3, [r7, #0]
			xReleaseAfterSend = pdTRUE;
		}
	}
	#endif /* ipconfigZERO_COPY_TX_DRIVER */

	if( pxNetworkBuffer != NULL )
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	f000 81c0 	beq.w	800d604 <prvTCPReturnPacket+0x3b0>
	{
		pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	699b      	ldr	r3, [r3, #24]
 800d288:	64fb      	str	r3, [r7, #76]	; 0x4c
		pxIPHeader = &pxTCPPacket->xIPHeader;
 800d28a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d28c:	330e      	adds	r3, #14
 800d28e:	64bb      	str	r3, [r7, #72]	; 0x48
		pxEthernetHeader = &pxTCPPacket->xEthernetHeader;
 800d290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d292:	647b      	str	r3, [r7, #68]	; 0x44

		/* Fill the packet, using hton translations. */
		if( pxSocket != NULL )
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	2b00      	cmp	r3, #0
 800d298:	f000 80ed 	beq.w	800d476 <prvTCPReturnPacket+0x222>
		{
			/* Calculate the space in the RX buffer in order to advertise the
			size of this socket's reception window. */
			pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	33dc      	adds	r3, #220	; 0xdc
 800d2a0:	643b      	str	r3, [r7, #64]	; 0x40

			if( pxSocket->u.xTCP.rxStream != NULL )
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d006      	beq.n	800d2b8 <prvTCPReturnPacket+0x64>
			{
				/* An RX stream was created already, see how much space is
				available. */
				ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f7ff fde5 	bl	800ce7e <uxStreamBufferFrontSpace>
 800d2b4:	65f8      	str	r0, [r7, #92]	; 0x5c
 800d2b6:	e002      	b.n	800d2be <prvTCPReturnPacket+0x6a>
			}
			else
			{
				/* No RX stream has been created, the full stream size is
				available. */
				ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2bc:	65fb      	str	r3, [r7, #92]	; 0x5c
			}

			/* Take the minimum of the RX buffer space and the RX window size. */
			ulSpace = FreeRTOS_min_uint32( pxSocket->u.xTCP.ulRxCurWinSize, pxTCPWindow->xSize.ulRxWindowLength );
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800d2c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2c6:	685b      	ldr	r3, [r3, #4]
 800d2c8:	4619      	mov	r1, r3
 800d2ca:	4610      	mov	r0, r2
 800d2cc:	f7ff fd76 	bl	800cdbc <FreeRTOS_min_uint32>
 800d2d0:	65b8      	str	r0, [r7, #88]	; 0x58

			if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d2d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d2dc:	b2db      	uxtb	r3, r3
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d107      	bne.n	800d2f2 <prvTCPReturnPacket+0x9e>
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d2e8:	f003 0304 	and.w	r3, r3, #4
 800d2ec:	b2db      	uxtb	r3, r3
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d001      	beq.n	800d2f6 <prvTCPReturnPacket+0xa2>
			{
				/* The low-water mark was reached, meaning there was little
				space left.  The socket will wait until the application has read
				or flushed the incoming data, and 'zero-window' will be
				advertised. */
				ulSpace = 0u;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	65bb      	str	r3, [r7, #88]	; 0x58
			}

			/* If possible, advertise an RX window size of at least 1 MSS, otherwise
			the peer might start 'zero window probing', i.e. sending small packets
			(1, 2, 4, 8... bytes). */
			if( ( ulSpace < pxSocket->u.xTCP.usCurMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usCurMSS ) )
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d2fc:	461a      	mov	r2, r3
 800d2fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d300:	429a      	cmp	r2, r3
 800d302:	d90a      	bls.n	800d31a <prvTCPReturnPacket+0xc6>
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d30a:	461a      	mov	r2, r3
 800d30c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d30e:	429a      	cmp	r2, r3
 800d310:	d803      	bhi.n	800d31a <prvTCPReturnPacket+0xc6>
			{
				ulSpace = pxSocket->u.xTCP.usCurMSS;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d318:	65bb      	str	r3, [r7, #88]	; 0x58
			}

			/* Avoid overflow of the 16-bit win field. */
			#if( ipconfigUSE_TCP_WIN != 0 )
			{
				ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800d320:	461a      	mov	r2, r3
 800d322:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d324:	40d3      	lsrs	r3, r2
 800d326:	653b      	str	r3, [r7, #80]	; 0x50
			#else
			{
				ulWinSize = ulSpace;
			}
			#endif
			if( ulWinSize > 0xfffcUL )
 800d328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d32a:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800d32e:	4293      	cmp	r3, r2
 800d330:	d902      	bls.n	800d338 <prvTCPReturnPacket+0xe4>
			{
				ulWinSize = 0xfffcUL;
 800d332:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800d336:	653b      	str	r3, [r7, #80]	; 0x50
			}

			pxTCPPacket->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 800d338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d33a:	b29b      	uxth	r3, r3
 800d33c:	021b      	lsls	r3, r3, #8
 800d33e:	b21a      	sxth	r2, r3
 800d340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d342:	b29b      	uxth	r3, r3
 800d344:	0a1b      	lsrs	r3, r3, #8
 800d346:	b29b      	uxth	r3, r3
 800d348:	b21b      	sxth	r3, r3
 800d34a:	4313      	orrs	r3, r2
 800d34c:	b21b      	sxth	r3, r3
 800d34e:	b29a      	uxth	r2, r3
 800d350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d352:	861a      	strh	r2, [r3, #48]	; 0x30
				}
			}
			#endif /* ipconfigHAS_DEBUG_PRINTF != 0 */

			/* The new window size has been advertised, switch off the flag. */
			pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 800d354:	68fa      	ldr	r2, [r7, #12]
 800d356:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d35a:	f36f 0300 	bfc	r3, #0, #1
 800d35e:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

			/* Later on, when deciding to delay an ACK, a precise estimate is needed
			of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
			highest sequence number minus 1 that the socket will accept. */
			pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 800d362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d364:	691a      	ldr	r2, [r3, #16]
 800d366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d368:	441a      	add	r2, r3
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	645a      	str	r2, [r3, #68]	; 0x44

			#if( ipconfigTCP_KEEP_ALIVE == 1 )
				if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d374:	f003 0302 	and.w	r3, r3, #2
 800d378:	b2db      	uxtb	r3, r3
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d02f      	beq.n	800d3de <prvTCPReturnPacket+0x18a>
				{
					/* Sending a keep-alive packet, send the current sequence number
					minus 1, which will	be recognised as a keep-alive packet an
					responded to by acknowledging the last byte. */
					pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800d37e:	68fa      	ldr	r2, [r7, #12]
 800d380:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d384:	f36f 0341 	bfc	r3, #1, #1
 800d388:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
					pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 800d38c:	68fa      	ldr	r2, [r7, #12]
 800d38e:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d392:	f043 0304 	orr.w	r3, r3, #4
 800d396:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

					pxTCPPacket->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1UL;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800d3a0:	1e5a      	subs	r2, r3, #1
 800d3a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3a4:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
					pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 800d3a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3aa:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800d3ae:	061a      	lsls	r2, r3, #24
 800d3b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3b2:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800d3b6:	021b      	lsls	r3, r3, #8
 800d3b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d3bc:	431a      	orrs	r2, r3
 800d3be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3c0:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800d3c4:	0a1b      	lsrs	r3, r3, #8
 800d3c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d3ca:	431a      	orrs	r2, r3
 800d3cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3ce:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800d3d2:	0e1b      	lsrs	r3, r3, #24
 800d3d4:	431a      	orrs	r2, r3
 800d3d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3d8:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
 800d3dc:	e034      	b.n	800d448 <prvTCPReturnPacket+0x1f4>
				}
				else
			#endif
			{
				pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800d3e4:	061a      	lsls	r2, r3, #24
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800d3ec:	021b      	lsls	r3, r3, #8
 800d3ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d3f2:	431a      	orrs	r2, r3
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800d3fa:	0a1b      	lsrs	r3, r3, #8
 800d3fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d400:	431a      	orrs	r2, r3
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800d408:	0e1b      	lsrs	r3, r3, #24
 800d40a:	431a      	orrs	r2, r3
 800d40c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d40e:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26

				if( ( pxTCPPacket->xTCPHeader.ucTCPFlags & ( uint8_t ) ipTCP_FLAG_FIN ) != 0u )
 800d412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d414:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d418:	f003 0301 	and.w	r3, r3, #1
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d013      	beq.n	800d448 <prvTCPReturnPacket+0x1f4>
				{
					/* Suppress FIN in case this packet carries earlier data to be
					retransmitted. */
					uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + ipSIZE_OF_IPv4_HEADER ) );
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	3b28      	subs	r3, #40	; 0x28
 800d424:	63fb      	str	r3, [r7, #60]	; 0x3c
					if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 800d426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d42a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d42c:	441a      	add	r2, r3
 800d42e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d432:	429a      	cmp	r2, r3
 800d434:	d008      	beq.n	800d448 <prvTCPReturnPacket+0x1f4>
					{
						pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_FIN );
 800d436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d438:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d43c:	f023 0301 	bic.w	r3, r3, #1
 800d440:	b2da      	uxtb	r2, r3
 800d442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d444:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
					}
				}
			}

			/* Tell which sequence number is expected next time */
			pxTCPPacket->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 800d448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d44a:	691b      	ldr	r3, [r3, #16]
 800d44c:	061a      	lsls	r2, r3, #24
 800d44e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d450:	691b      	ldr	r3, [r3, #16]
 800d452:	021b      	lsls	r3, r3, #8
 800d454:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d458:	431a      	orrs	r2, r3
 800d45a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d45c:	691b      	ldr	r3, [r3, #16]
 800d45e:	0a1b      	lsrs	r3, r3, #8
 800d460:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d464:	431a      	orrs	r2, r3
 800d466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d468:	691b      	ldr	r3, [r3, #16]
 800d46a:	0e1b      	lsrs	r3, r3, #24
 800d46c:	431a      	orrs	r2, r3
 800d46e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d470:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
 800d474:	e00d      	b.n	800d492 <prvTCPReturnPacket+0x23e>
		}
		else
		{
			/* Sending data without a socket, probably replying with a RST flag
			Just swap the two sequence numbers. */
			vFlip_32( pxTCPPacket->xTCPHeader.ulSequenceNumber, pxTCPPacket->xTCPHeader.ulAckNr );
 800d476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d478:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800d47c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d47e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d480:	f8d3 202a 	ldr.w	r2, [r3, #42]	; 0x2a
 800d484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d486:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
 800d48a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d48c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d48e:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
		}

		pxIPHeader->ucTimeToLive           = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800d492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d494:	2280      	movs	r2, #128	; 0x80
 800d496:	721a      	strb	r2, [r3, #8]
		pxIPHeader->usLength               = FreeRTOS_htons( ulLen );
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	b29b      	uxth	r3, r3
 800d49c:	021b      	lsls	r3, r3, #8
 800d49e:	b29a      	uxth	r2, r3
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	0a1b      	lsrs	r3, r3, #8
 800d4a4:	b29b      	uxth	r3, r3
 800d4a6:	4313      	orrs	r3, r2
 800d4a8:	b29a      	uxth	r2, r3
 800d4aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4ac:	805a      	strh	r2, [r3, #2]
		if( ( pxSocket == NULL ) || ( *ipLOCAL_IP_ADDRESS_POINTER == 0ul ) )
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d003      	beq.n	800d4bc <prvTCPReturnPacket+0x268>
 800d4b4:	4b55      	ldr	r3, [pc, #340]	; (800d60c <prvTCPReturnPacket+0x3b8>)
 800d4b6:	695b      	ldr	r3, [r3, #20]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d103      	bne.n	800d4c4 <prvTCPReturnPacket+0x270>
		{
			/* When pxSocket is NULL, this function is called by prvTCPSendReset()
			and the IP-addresses must be swapped.
			Also swap the IP-addresses in case the IP-tack doesn't have an
			IP-address yet, i.e. when ( *ipLOCAL_IP_ADDRESS_POINTER == 0ul ). */
			ulSourceAddress = pxIPHeader->ulDestinationIPAddress;
 800d4bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4be:	691b      	ldr	r3, [r3, #16]
 800d4c0:	657b      	str	r3, [r7, #84]	; 0x54
 800d4c2:	e002      	b.n	800d4ca <prvTCPReturnPacket+0x276>
		}
		else
		{
			ulSourceAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800d4c4:	4b51      	ldr	r3, [pc, #324]	; (800d60c <prvTCPReturnPacket+0x3b8>)
 800d4c6:	695b      	ldr	r3, [r3, #20]
 800d4c8:	657b      	str	r3, [r7, #84]	; 0x54
		}
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800d4ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4cc:	68da      	ldr	r2, [r3, #12]
 800d4ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4d0:	611a      	str	r2, [r3, #16]
		pxIPHeader->ulSourceIPAddress = ulSourceAddress;
 800d4d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d4d6:	60da      	str	r2, [r3, #12]
		vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 800d4d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4da:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800d4de:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800d4e2:	021b      	lsls	r3, r3, #8
 800d4e4:	4313      	orrs	r3, r2
 800d4e6:	86fb      	strh	r3, [r7, #54]	; 0x36
 800d4e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d4ec:	b29a      	uxth	r2, r3
 800d4ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4f0:	845a      	strh	r2, [r3, #34]	; 0x22
 800d4f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4f4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d4f6:	849a      	strh	r2, [r3, #36]	; 0x24

		/* Just an increasing number. */
		pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 800d4f8:	4b45      	ldr	r3, [pc, #276]	; (800d610 <prvTCPReturnPacket+0x3bc>)
 800d4fa:	881b      	ldrh	r3, [r3, #0]
 800d4fc:	021b      	lsls	r3, r3, #8
 800d4fe:	b21a      	sxth	r2, r3
 800d500:	4b43      	ldr	r3, [pc, #268]	; (800d610 <prvTCPReturnPacket+0x3bc>)
 800d502:	881b      	ldrh	r3, [r3, #0]
 800d504:	0a1b      	lsrs	r3, r3, #8
 800d506:	b29b      	uxth	r3, r3
 800d508:	b21b      	sxth	r3, r3
 800d50a:	4313      	orrs	r3, r2
 800d50c:	b21b      	sxth	r3, r3
 800d50e:	b29a      	uxth	r2, r3
 800d510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d512:	809a      	strh	r2, [r3, #4]
		usPacketIdentifier++;
 800d514:	4b3e      	ldr	r3, [pc, #248]	; (800d610 <prvTCPReturnPacket+0x3bc>)
 800d516:	881b      	ldrh	r3, [r3, #0]
 800d518:	3301      	adds	r3, #1
 800d51a:	b29a      	uxth	r2, r3
 800d51c:	4b3c      	ldr	r3, [pc, #240]	; (800d610 <prvTCPReturnPacket+0x3bc>)
 800d51e:	801a      	strh	r2, [r3, #0]
		pxIPHeader->usFragmentOffset = 0u;
 800d520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d522:	2200      	movs	r2, #0
 800d524:	719a      	strb	r2, [r3, #6]
 800d526:	2200      	movs	r2, #0
 800d528:	71da      	strb	r2, [r3, #7]

		#if( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
		{
			/* calculate the IP header checksum, in case the driver won't do that. */
			pxIPHeader->usHeaderChecksum = 0x00u;
 800d52a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d52c:	2200      	movs	r2, #0
 800d52e:	729a      	strb	r2, [r3, #10]
 800d530:	2200      	movs	r2, #0
 800d532:	72da      	strb	r2, [r3, #11]
			pxIPHeader->usHeaderChecksum = usGenerateChecksum( 0UL, ( uint8_t * ) &( pxIPHeader->ucVersionHeaderLength ), ipSIZE_OF_IPv4_HEADER );
 800d534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d536:	2214      	movs	r2, #20
 800d538:	4619      	mov	r1, r3
 800d53a:	2000      	movs	r0, #0
 800d53c:	f7fe fa94 	bl	800ba68 <usGenerateChecksum>
 800d540:	4603      	mov	r3, r0
 800d542:	461a      	mov	r2, r3
 800d544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d546:	815a      	strh	r2, [r3, #10]
			pxIPHeader->usHeaderChecksum = ~FreeRTOS_htons( pxIPHeader->usHeaderChecksum );
 800d548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d54a:	895b      	ldrh	r3, [r3, #10]
 800d54c:	b29b      	uxth	r3, r3
 800d54e:	021b      	lsls	r3, r3, #8
 800d550:	b21a      	sxth	r2, r3
 800d552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d554:	895b      	ldrh	r3, [r3, #10]
 800d556:	b29b      	uxth	r3, r3
 800d558:	0a1b      	lsrs	r3, r3, #8
 800d55a:	b29b      	uxth	r3, r3
 800d55c:	b21b      	sxth	r3, r3
 800d55e:	4313      	orrs	r3, r2
 800d560:	b21b      	sxth	r3, r3
 800d562:	b29b      	uxth	r3, r3
 800d564:	43db      	mvns	r3, r3
 800d566:	b29a      	uxth	r2, r3
 800d568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d56a:	815a      	strh	r2, [r3, #10]

			/* calculate the TCP checksum for an outgoing packet. */
			usGenerateProtocolChecksum( (uint8_t*)pxTCPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	69db      	ldr	r3, [r3, #28]
 800d570:	2201      	movs	r2, #1
 800d572:	4619      	mov	r1, r3
 800d574:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d576:	f7fe f98f 	bl	800b898 <usGenerateProtocolChecksum>

			/* A calculated checksum of 0 must be inverted as 0 means the checksum
			is disabled. */
			if( pxTCPPacket->xTCPHeader.usChecksum == 0x00u )
 800d57a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d57c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d57e:	b29b      	uxth	r3, r3
 800d580:	2b00      	cmp	r3, #0
 800d582:	d108      	bne.n	800d596 <prvTCPReturnPacket+0x342>
			{
				pxTCPPacket->xTCPHeader.usChecksum = 0xffffU;
 800d584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d586:	f04f 32ff 	mov.w	r2, #4294967295
 800d58a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800d58e:	f04f 32ff 	mov.w	r2, #4294967295
 800d592:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	#if( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
		pxNetworkBuffer->pxNextBuffer = NULL;
	#endif

		/* Important: tell NIC driver how many bytes must be sent. */
		pxNetworkBuffer->xDataLength = ulLen + ipSIZE_OF_ETH_HEADER;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f103 020e 	add.w	r2, r3, #14
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	61da      	str	r2, [r3, #28]

		/* Fill in the destination MAC addresses. */
		memcpy( ( void * ) &( pxEthernetHeader->xDestinationAddress ), ( void * ) &( pxEthernetHeader->xSourceAddress ),
 800d5a0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d5a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5a4:	3306      	adds	r3, #6
 800d5a6:	2206      	movs	r2, #6
 800d5a8:	4619      	mov	r1, r3
 800d5aa:	f003 fbd8 	bl	8010d5e <memcpy>
			sizeof( pxEthernetHeader->xDestinationAddress ) );

		/* The source MAC addresses is fixed to 'ipLOCAL_MAC_ADDRESS'. */
		memcpy( ( void * ) &( pxEthernetHeader->xSourceAddress) , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800d5ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5b0:	3306      	adds	r3, #6
 800d5b2:	2206      	movs	r2, #6
 800d5b4:	4915      	ldr	r1, [pc, #84]	; (800d60c <prvTCPReturnPacket+0x3b8>)
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f003 fbd1 	bl	8010d5e <memcpy>
			}
		}
		#endif

		/* Send! */
		xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 800d5bc:	6839      	ldr	r1, [r7, #0]
 800d5be:	68b8      	ldr	r0, [r7, #8]
 800d5c0:	f7f7 fdbc 	bl	800513c <xNetworkInterfaceOutput>

		if( xReleaseAfterSend == pdFALSE )
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d11c      	bne.n	800d604 <prvTCPReturnPacket+0x3b0>
		{
			/* Swap-back some fields, as pxBuffer probably points to a socket field
			containing the packet header. */
			vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort);
 800d5ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5cc:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800d5d0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800d5d4:	021b      	lsls	r3, r3, #8
 800d5d6:	4313      	orrs	r3, r2
 800d5d8:	86bb      	strh	r3, [r7, #52]	; 0x34
 800d5da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d5de:	b29a      	uxth	r2, r3
 800d5e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5e2:	845a      	strh	r2, [r3, #34]	; 0x22
 800d5e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800d5e8:	849a      	strh	r2, [r3, #36]	; 0x24
			pxTCPPacket->xIPHeader.ulSourceIPAddress = pxTCPPacket->xIPHeader.ulDestinationIPAddress;
 800d5ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5ec:	f8d3 201e 	ldr.w	r2, [r3, #30]
 800d5f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5f2:	f8c3 201a 	str.w	r2, [r3, #26]
			memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800d5f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5f8:	3306      	adds	r3, #6
 800d5fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d5fc:	2206      	movs	r2, #6
 800d5fe:	4618      	mov	r0, r3
 800d600:	f003 fbad 	bl	8010d5e <memcpy>
		else
		{
			/* Nothing to do: the buffer has been passed to DMA and will be released after use */
		}
	} /* if( pxNetworkBuffer != NULL ) */
}
 800d604:	bf00      	nop
 800d606:	3760      	adds	r7, #96	; 0x60
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}
 800d60c:	200001b0 	.word	0x200001b0
 800d610:	20004e5c 	.word	0x20004e5c

0800d614 <prvTCPCreateWindow>:
 * random starting value, are being synchronised.  The sliding window manager
 * (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 * Size (MSS) in use.
 */
static void prvTCPCreateWindow( FreeRTOS_Socket_t *pxSocket )
{
 800d614:	b5b0      	push	{r4, r5, r7, lr}
 800d616:	b084      	sub	sp, #16
 800d618:	af02      	add	r7, sp, #8
 800d61a:	6078      	str	r0, [r7, #4]
		FreeRTOS_debug_printf( ( "Limits (using): TCP Win size %lu Water %lu <= %lu <= %lu\n",
			pxSocket->u.xTCP.uxRxWinSize * ipconfigTCP_MSS,
			pxSocket->u.xTCP.uxLittleSpace ,
			pxSocket->u.xTCP.uxEnoughSpace,
			pxSocket->u.xTCP.uxRxStreamSize ) );
	vTCPWindowCreate(
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
		&pxSocket->u.xTCP.xTCPWindow,
		ipconfigTCP_MSS * pxSocket->u.xTCP.uxRxWinSize,
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800d628:	f44f 6291 	mov.w	r2, #1160	; 0x488
 800d62c:	fb02 f103 	mul.w	r1, r2, r3
		ipconfigTCP_MSS * pxSocket->u.xTCP.uxTxWinSize,
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d636:	f44f 6291 	mov.w	r2, #1160	; 0x488
 800d63a:	fb02 f403 	mul.w	r4, r2, r3
	vTCPWindowCreate(
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f8d3 50ec 	ldr.w	r5, [r3, #236]	; 0xec
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
		pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
		( uint32_t ) pxSocket->u.xTCP.usInitMSS );
 800d64a:	687a      	ldr	r2, [r7, #4]
 800d64c:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
	vTCPWindowCreate(
 800d650:	9201      	str	r2, [sp, #4]
 800d652:	9300      	str	r3, [sp, #0]
 800d654:	462b      	mov	r3, r5
 800d656:	4622      	mov	r2, r4
 800d658:	f002 f8a4 	bl	800f7a4 <vTCPWindowCreate>
}
 800d65c:	bf00      	nop
 800d65e:	3708      	adds	r7, #8
 800d660:	46bd      	mov	sp, r7
 800d662:	bdb0      	pop	{r4, r5, r7, pc}

0800d664 <prvTCPPrepareConnect>:
 * the Ethernet address of the target will be found using ARP.  In case the
 * target IP address is not within the netmask, the hardware address of the
 * gateway will be used.
 */
static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t *pxSocket )
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b08a      	sub	sp, #40	; 0x28
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
TCPPacket_t *pxTCPPacket;
IPHeader_t *pxIPHeader;
eARPLookupResult_t eReturned;
uint32_t ulRemoteIP;
MACAddress_t xEthAddress;
BaseType_t xReturn = pdTRUE;
 800d66c:	2301      	movs	r3, #1
 800d66e:	627b      	str	r3, [r7, #36]	; 0x24
uint32_t ulInitialSequenceNumber = 0;
 800d670:	2300      	movs	r3, #0
 800d672:	623b      	str	r3, [r7, #32]
		/* Only necessary for nicer logging. */
		memset( xEthAddress.ucBytes, '\0', sizeof( xEthAddress.ucBytes ) );
	}
	#endif /* ipconfigHAS_PRINTF != 0 */

	ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d678:	061a      	lsls	r2, r3, #24
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d67e:	021b      	lsls	r3, r3, #8
 800d680:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d684:	431a      	orrs	r2, r3
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d68a:	0a1b      	lsrs	r3, r3, #8
 800d68c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d690:	431a      	orrs	r2, r3
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d696:	0e1b      	lsrs	r3, r3, #24
 800d698:	4313      	orrs	r3, r2
 800d69a:	613b      	str	r3, [r7, #16]

	/* Determine the ARP cache status for the requested IP address. */
	eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ) );
 800d69c:	f107 0208 	add.w	r2, r7, #8
 800d6a0:	f107 0310 	add.w	r3, r7, #16
 800d6a4:	4611      	mov	r1, r2
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f7fc fcd2 	bl	800a050 <eARPGetCacheEntry>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	77fb      	strb	r3, [r7, #31]

	switch( eReturned )
 800d6b0:	7ffb      	ldrb	r3, [r7, #31]
 800d6b2:	2b01      	cmp	r3, #1
 800d6b4:	d00e      	beq.n	800d6d4 <prvTCPPrepareConnect+0x70>
		break;				/* We can now prepare the SYN packet. */
	case eARPCacheMiss:		/* An ARP table lookup did not find a valid entry. */
	case eCantSendPacket:	/* There is no IP address, or an ARP is still in progress. */
	default:
		/* Count the number of times it couldn't find the ARP address. */
		pxSocket->u.xTCP.ucRepCount++;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d6bc:	3301      	adds	r3, #1
 800d6be:	b2da      	uxtb	r2, r3
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			xEthAddress.ucBytes[ 3 ],
			xEthAddress.ucBytes[ 4 ],
			xEthAddress.ucBytes[ 5 ] ) );

		/* And issue a (new) ARP request */
		FreeRTOS_OutputARPRequest( ulRemoteIP );
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7fc fdfd 	bl	800a2c8 <FreeRTOS_OutputARPRequest>

		xReturn = pdFALSE;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	627b      	str	r3, [r7, #36]	; 0x24
 800d6d2:	e000      	b.n	800d6d6 <prvTCPPrepareConnect+0x72>
		break;				/* We can now prepare the SYN packet. */
 800d6d4:	bf00      	nop
	}

    if( xReturn != pdFALSE )
 800d6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d008      	beq.n	800d6ee <prvTCPPrepareConnect+0x8a>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ipconfigRAND32();
 800d6dc:	f003 fc18 	bl	8010f10 <rand>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	623b      	str	r3, [r7, #32]

        /* Check for a random number generation error. */
        if( 0 == ulInitialSequenceNumber )
 800d6e4:	6a3b      	ldr	r3, [r7, #32]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d101      	bne.n	800d6ee <prvTCPPrepareConnect+0x8a>
        {
            xReturn = pdFALSE;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

	if( xReturn != pdFALSE )
 800d6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	f000 808a 	beq.w	800d80a <prvTCPPrepareConnect+0x1a6>
	{
		/* The MAC-address of the peer (or gateway) has been found,
		now prepare the initial TCP packet and some fields in the socket. */
		pxTCPPacket = ( TCPPacket_t * )pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	3382      	adds	r3, #130	; 0x82
 800d6fa:	61bb      	str	r3, [r7, #24]
		pxIPHeader = &pxTCPPacket->xIPHeader;
 800d6fc:	69bb      	ldr	r3, [r7, #24]
 800d6fe:	330e      	adds	r3, #14
 800d700:	617b      	str	r3, [r7, #20]

		/* reset the retry counter to zero. */
		pxSocket->u.xTCP.ucRepCount = 0u;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2200      	movs	r2, #0
 800d706:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

		/* And remember that the connect/SYN data are prepared. */
		pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 800d70a:	687a      	ldr	r2, [r7, #4]
 800d70c:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d710:	f043 0308 	orr.w	r3, r3, #8
 800d714:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

		/* Now that the Ethernet address is known, the initial packet can be
		prepared. */
		memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, '\0', sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	3382      	adds	r3, #130	; 0x82
 800d71c:	2246      	movs	r2, #70	; 0x46
 800d71e:	2100      	movs	r1, #0
 800d720:	4618      	mov	r0, r3
 800d722:	f003 fb41 	bl	8010da8 <memset>

		/* Write the Ethernet address in Source, because it will be swapped by
		prvTCPReturnPacket(). */
		memcpy( &pxTCPPacket->xEthernetHeader.xSourceAddress, &xEthAddress, sizeof( xEthAddress ) );
 800d726:	69bb      	ldr	r3, [r7, #24]
 800d728:	3306      	adds	r3, #6
 800d72a:	461a      	mov	r2, r3
 800d72c:	f107 0308 	add.w	r3, r7, #8
 800d730:	6818      	ldr	r0, [r3, #0]
 800d732:	6010      	str	r0, [r2, #0]
 800d734:	889b      	ldrh	r3, [r3, #4]
 800d736:	8093      	strh	r3, [r2, #4]

		/* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
		pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 800d738:	69bb      	ldr	r3, [r7, #24]
 800d73a:	2200      	movs	r2, #0
 800d73c:	f042 0208 	orr.w	r2, r2, #8
 800d740:	731a      	strb	r2, [r3, #12]
 800d742:	2200      	movs	r2, #0
 800d744:	735a      	strb	r2, [r3, #13]

		pxIPHeader->ucVersionHeaderLength = 0x45u;
 800d746:	697b      	ldr	r3, [r7, #20]
 800d748:	2245      	movs	r2, #69	; 0x45
 800d74a:	701a      	strb	r2, [r3, #0]
		pxIPHeader->usLength = FreeRTOS_htons( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 800d74c:	697b      	ldr	r3, [r7, #20]
 800d74e:	2200      	movs	r2, #0
 800d750:	709a      	strb	r2, [r3, #2]
 800d752:	2200      	movs	r2, #0
 800d754:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800d758:	70da      	strb	r2, [r3, #3]
		pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	2280      	movs	r2, #128	; 0x80
 800d75e:	721a      	strb	r2, [r3, #8]

		pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	2206      	movs	r2, #6
 800d764:	725a      	strb	r2, [r3, #9]

		/* Addresses and ports will be stored swapped because prvTCPReturnPacket
		will swap them back while replying. */
		pxIPHeader->ulDestinationIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800d766:	4b2b      	ldr	r3, [pc, #172]	; (800d814 <prvTCPPrepareConnect+0x1b0>)
 800d768:	695a      	ldr	r2, [r3, #20]
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	611a      	str	r2, [r3, #16]
		pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d772:	061a      	lsls	r2, r3, #24
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d778:	021b      	lsls	r3, r3, #8
 800d77a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d77e:	431a      	orrs	r2, r3
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d784:	0a1b      	lsrs	r3, r3, #8
 800d786:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d78a:	431a      	orrs	r2, r3
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d790:	0e1b      	lsrs	r3, r3, #24
 800d792:	431a      	orrs	r2, r3
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	60da      	str	r2, [r3, #12]

		pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800d79c:	021b      	lsls	r3, r3, #8
 800d79e:	b21a      	sxth	r2, r3
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800d7a4:	0a1b      	lsrs	r3, r3, #8
 800d7a6:	b29b      	uxth	r3, r3
 800d7a8:	b21b      	sxth	r3, r3
 800d7aa:	4313      	orrs	r3, r2
 800d7ac:	b21b      	sxth	r3, r3
 800d7ae:	b29a      	uxth	r2, r3
 800d7b0:	69bb      	ldr	r3, [r7, #24]
 800d7b2:	845a      	strh	r2, [r3, #34]	; 0x22
		pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d7b8:	021b      	lsls	r3, r3, #8
 800d7ba:	b21a      	sxth	r2, r3
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d7c0:	0a1b      	lsrs	r3, r3, #8
 800d7c2:	b29b      	uxth	r3, r3
 800d7c4:	b21b      	sxth	r3, r3
 800d7c6:	4313      	orrs	r3, r2
 800d7c8:	b21b      	sxth	r3, r3
 800d7ca:	b29a      	uxth	r2, r3
 800d7cc:	69bb      	ldr	r3, [r7, #24]
 800d7ce:	849a      	strh	r2, [r3, #36]	; 0x24

		/* We are actively connecting, so the peer's Initial Sequence Number (ISN)
		isn't known yet. */
		pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0ul;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

		/* Start with ISN (Initial Sequence Number). */
		pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6a3a      	ldr	r2, [r7, #32]
 800d7dc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

		/* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
		the high nibble of the TCP offset field. */
		pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50u;
 800d7e0:	69bb      	ldr	r3, [r7, #24]
 800d7e2:	2250      	movs	r2, #80	; 0x50
 800d7e4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

		/* Only set the SYN flag. */
		pxTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_SYN;
 800d7e8:	69bb      	ldr	r3, [r7, #24]
 800d7ea:	2202      	movs	r2, #2
 800d7ec:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

		/* Set the values of usInitMSS / usCurMSS for this socket. */
		prvSocketSetMSS( pxSocket );
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f001 fac1 	bl	800ed78 <prvSocketSetMSS>

		/* For now this is also the advertised window size. */
		pxSocket->u.xTCP.ulRxCurWinSize = pxSocket->u.xTCP.usInitMSS;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800d7fc:	461a      	mov	r2, r3
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

		/* The initial sequence numbers at our side are known.  Later
		vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
		first wait for a SYN+ACK reply. */
		prvTCPCreateWindow( pxSocket );
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f7ff ff05 	bl	800d614 <prvTCPCreateWindow>
	}

	return xReturn;
 800d80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	3728      	adds	r7, #40	; 0x28
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}
 800d814:	200001b0 	.word	0x200001b0

0800d818 <prvCheckOptions>:
 * Parse the TCP option(s) received, if present.  It has already been verified
 * that: ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that the TP header
 * is longer than the usual 20 (5 x 4) bytes.
 */
static void prvCheckOptions( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b090      	sub	sp, #64	; 0x40
 800d81c:	af02      	add	r7, sp, #8
 800d81e:	6078      	str	r0, [r7, #4]
 800d820:	6039      	str	r1, [r7, #0]
const unsigned char *pucPtr;
const unsigned char *pucLast;
TCPWindow_t *pxTCPWindow;
UBaseType_t uxNewMSS;

	pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	699b      	ldr	r3, [r3, #24]
 800d826:	62fb      	str	r3, [r7, #44]	; 0x2c
	pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800d828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d82a:	3322      	adds	r3, #34	; 0x22
 800d82c:	62bb      	str	r3, [r7, #40]	; 0x28

	/* A character pointer to iterate through the option data */
	pucPtr = pxTCPHeader->ucOptdata;
 800d82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d830:	3314      	adds	r3, #20
 800d832:	637b      	str	r3, [r7, #52]	; 0x34
	pucLast = pucPtr + (((pxTCPHeader->ucTCPOffset >> 4) - 5) << 2);
 800d834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d836:	7b1b      	ldrb	r3, [r3, #12]
 800d838:	091b      	lsrs	r3, r3, #4
 800d83a:	b2db      	uxtb	r3, r3
 800d83c:	3b05      	subs	r3, #5
 800d83e:	009b      	lsls	r3, r3, #2
 800d840:	461a      	mov	r2, r3
 800d842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d844:	4413      	add	r3, r2
 800d846:	627b      	str	r3, [r7, #36]	; 0x24
	pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	33dc      	adds	r3, #220	; 0xdc
 800d84c:	623b      	str	r3, [r7, #32]

    /* Validate options size calculation. */
    if( pucLast > ( pxNetworkBuffer->pucEthernetBuffer + pxNetworkBuffer->xDataLength ) )
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	699a      	ldr	r2, [r3, #24]
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	69db      	ldr	r3, [r3, #28]
 800d856:	441a      	add	r2, r3
 800d858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85a:	429a      	cmp	r2, r3
 800d85c:	f0c0 80f8 	bcc.w	800da50 <prvCheckOptions+0x238>
        return;
    }

	/* The comparison with pucLast is only necessary in case the option data are
	corrupted, we don't like to run into invalid memory and crash. */
	while( pucPtr < pucLast )
 800d860:	e0f0      	b.n	800da44 <prvCheckOptions+0x22c>
	{
        UBaseType_t xRemainingOptionsBytes = pucLast - pucPtr;
 800d862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d866:	1ad3      	subs	r3, r2, r3
 800d868:	61fb      	str	r3, [r7, #28]

		if( pucPtr[ 0 ] == TCP_OPT_END )
 800d86a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d86c:	781b      	ldrb	r3, [r3, #0]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	f000 80f0 	beq.w	800da54 <prvCheckOptions+0x23c>
		{
			/* End of options. */
			break;
		}
		if( pucPtr[ 0 ] == TCP_OPT_NOOP)
 800d874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d103      	bne.n	800d884 <prvCheckOptions+0x6c>
		{
            /* NOP option, inserted to make the length a multiple of 4. */
            pucPtr++;
 800d87c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d87e:	3301      	adds	r3, #1
 800d880:	637b      	str	r3, [r7, #52]	; 0x34
            continue;
 800d882:	e0df      	b.n	800da44 <prvCheckOptions+0x22c>
		}

        /* Any other well-formed option must be at least two bytes: the option
        type byte followed by a length byte. */
        if( xRemainingOptionsBytes < 2 )
 800d884:	69fb      	ldr	r3, [r7, #28]
 800d886:	2b01      	cmp	r3, #1
 800d888:	f240 80e6 	bls.w	800da58 <prvCheckOptions+0x240>
        { 
            break;
        }
#if( ipconfigUSE_TCP_WIN != 0 )
		else if( pucPtr[ 0 ] == TCP_OPT_WSOPT )
 800d88c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d88e:	781b      	ldrb	r3, [r3, #0]
 800d890:	2b03      	cmp	r3, #3
 800d892:	d119      	bne.n	800d8c8 <prvCheckOptions+0xb0>
		{
            /* Confirm that the option fits in the remaining buffer space. */
            if( xRemainingOptionsBytes < TCP_OPT_WSOPT_LEN ||
 800d894:	69fb      	ldr	r3, [r7, #28]
 800d896:	2b02      	cmp	r3, #2
 800d898:	f240 80e1 	bls.w	800da5e <prvCheckOptions+0x246>
                pucPtr[ 1 ] != TCP_OPT_WSOPT_LEN )
 800d89c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d89e:	3301      	adds	r3, #1
 800d8a0:	781b      	ldrb	r3, [r3, #0]
            if( xRemainingOptionsBytes < TCP_OPT_WSOPT_LEN ||
 800d8a2:	2b03      	cmp	r3, #3
 800d8a4:	f040 80db 	bne.w	800da5e <prvCheckOptions+0x246>
            {
                break;
            }

			pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 800d8a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8aa:	789a      	ldrb	r2, [r3, #2]
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
			pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 800d8b2:	687a      	ldr	r2, [r7, #4]
 800d8b4:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800d8b8:	f043 0310 	orr.w	r3, r3, #16
 800d8bc:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
			pucPtr += TCP_OPT_WSOPT_LEN;
 800d8c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8c2:	3303      	adds	r3, #3
 800d8c4:	637b      	str	r3, [r7, #52]	; 0x34
 800d8c6:	e0bd      	b.n	800da44 <prvCheckOptions+0x22c>
		}
#endif	/* ipconfigUSE_TCP_WIN */
		else if( pucPtr[ 0 ] == TCP_OPT_MSS )
 800d8c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8ca:	781b      	ldrb	r3, [r3, #0]
 800d8cc:	2b02      	cmp	r3, #2
 800d8ce:	d15a      	bne.n	800d986 <prvCheckOptions+0x16e>
		{
            /* Confirm that the option fits in the remaining buffer space. */
            if( xRemainingOptionsBytes < TCP_OPT_MSS_LEN ||
 800d8d0:	69fb      	ldr	r3, [r7, #28]
 800d8d2:	2b03      	cmp	r3, #3
 800d8d4:	f240 80c3 	bls.w	800da5e <prvCheckOptions+0x246>
                pucPtr[ 1 ] != TCP_OPT_MSS_LEN )
 800d8d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8da:	3301      	adds	r3, #1
 800d8dc:	781b      	ldrb	r3, [r3, #0]
            if( xRemainingOptionsBytes < TCP_OPT_MSS_LEN ||
 800d8de:	2b04      	cmp	r3, #4
 800d8e0:	f040 80bd 	bne.w	800da5e <prvCheckOptions+0x246>
            }
            
            /* An MSS option with the correct option length.  FreeRTOS_htons()
			is not needed here because usChar2u16() already returns a host
			endian number. */
			uxNewMSS = usChar2u16( pucPtr + 2 );
 800d8e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8e6:	3302      	adds	r3, #2
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f7ff fb31 	bl	800cf50 <usChar2u16>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	61bb      	str	r3, [r7, #24]

			if( pxSocket->u.xTCP.usInitMSS != uxNewMSS )
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800d8f8:	461a      	mov	r2, r3
 800d8fa:	69bb      	ldr	r3, [r7, #24]
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d003      	beq.n	800d908 <prvCheckOptions+0xf0>
			{
                /* Perform a basic check on the the new MSS. */
                if( uxNewMSS == 0 )
 800d900:	69bb      	ldr	r3, [r7, #24]
 800d902:	2b00      	cmp	r3, #0
 800d904:	f000 80aa 	beq.w	800da5c <prvCheckOptions+0x244>
                }

				FreeRTOS_debug_printf( ( "MSS change %u -> %lu\n", pxSocket->u.xTCP.usInitMSS, uxNewMSS ) );
			}

			if( pxSocket->u.xTCP.usInitMSS > uxNewMSS )
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800d90e:	461a      	mov	r2, r3
 800d910:	69bb      	ldr	r3, [r7, #24]
 800d912:	429a      	cmp	r2, r3
 800d914:	d933      	bls.n	800d97e <prvCheckOptions+0x166>
			{
				/* our MSS was bigger than the MSS of the other party: adapt it. */
				pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 800d916:	687a      	ldr	r2, [r7, #4]
 800d918:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800d91c:	f043 0301 	orr.w	r3, r3, #1
 800d920:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
				if( ( pxTCPWindow != NULL ) && ( pxSocket->u.xTCP.usCurMSS > uxNewMSS ) )
 800d924:	6a3b      	ldr	r3, [r7, #32]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d00b      	beq.n	800d942 <prvCheckOptions+0x12a>
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d930:	461a      	mov	r2, r3
 800d932:	69bb      	ldr	r3, [r7, #24]
 800d934:	429a      	cmp	r2, r3
 800d936:	d904      	bls.n	800d942 <prvCheckOptions+0x12a>
				{
					/* The peer advertises a smaller MSS than this socket was
					using.  Use that as well. */
					FreeRTOS_debug_printf( ( "Change mss %d => %lu\n", pxSocket->u.xTCP.usCurMSS, uxNewMSS ) );
					pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 800d938:	69bb      	ldr	r3, [r7, #24]
 800d93a:	b29a      	uxth	r2, r3
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				}
				pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 800d942:	6a3b      	ldr	r3, [r7, #32]
 800d944:	685a      	ldr	r2, [r3, #4]
 800d946:	69bb      	ldr	r3, [r7, #24]
 800d948:	fbb2 f3f3 	udiv	r3, r2, r3
 800d94c:	69ba      	ldr	r2, [r7, #24]
 800d94e:	fb02 f203 	mul.w	r2, r2, r3
 800d952:	6a3b      	ldr	r3, [r7, #32]
 800d954:	605a      	str	r2, [r3, #4]
				pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 800d956:	69bb      	ldr	r3, [r7, #24]
 800d958:	b29a      	uxth	r2, r3
 800d95a:	6a3b      	ldr	r3, [r7, #32]
 800d95c:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
				pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 800d960:	69bb      	ldr	r3, [r7, #24]
 800d962:	b29a      	uxth	r2, r3
 800d964:	6a3b      	ldr	r3, [r7, #32]
 800d966:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
				pxSocket->u.xTCP.usInitMSS = ( uint16_t ) uxNewMSS;
 800d96a:	69bb      	ldr	r3, [r7, #24]
 800d96c:	b29a      	uxth	r2, r3
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 800d974:	69bb      	ldr	r3, [r7, #24]
 800d976:	b29a      	uxth	r2, r3
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			#if( ipconfigUSE_TCP_WIN != 1 )
				/* Without scaled windows, MSS is the only interesting option. */
				break;
			#else
				/* Or else we continue to check another option: selective ACK. */
				pucPtr += TCP_OPT_MSS_LEN;
 800d97e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d980:	3304      	adds	r3, #4
 800d982:	637b      	str	r3, [r7, #52]	; 0x34
 800d984:	e05e      	b.n	800da44 <prvCheckOptions+0x22c>
		}
		else
		{
			/* All other options have a length field, so that we easily
			can skip past them. */
			unsigned char len = pucPtr[ 1 ];
 800d986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d988:	785b      	ldrb	r3, [r3, #1]
 800d98a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			if( len < 2 || len > xRemainingOptionsBytes )
 800d98e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d992:	2b01      	cmp	r3, #1
 800d994:	d963      	bls.n	800da5e <prvCheckOptions+0x246>
 800d996:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d99a:	69fb      	ldr	r3, [r7, #28]
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d85e      	bhi.n	800da5e <prvCheckOptions+0x246>
			#if( ipconfigUSE_TCP_WIN == 1 )
			{
				/* Selective ACK: the peer has received a packet but it is missing earlier
				packets.  At least this packet does not need retransmission anymore
				ulTCPWindowTxSack( ) takes care of this administration. */
				if( pucPtr[0] == TCP_OPT_SACK_A )
 800d9a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	2b05      	cmp	r3, #5
 800d9a6:	d148      	bne.n	800da3a <prvCheckOptions+0x222>
				{
					len -= 2;
 800d9a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d9ac:	3b02      	subs	r3, #2
 800d9ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					pucPtr += 2;
 800d9b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9b4:	3302      	adds	r3, #2
 800d9b6:	637b      	str	r3, [r7, #52]	; 0x34

					while( len >= 8 )
 800d9b8:	e03b      	b.n	800da32 <prvCheckOptions+0x21a>
					{
					uint32_t ulFirst = ulChar2u32( pucPtr );
 800d9ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d9bc:	f7ff faad 	bl	800cf1a <ulChar2u32>
 800d9c0:	6178      	str	r0, [r7, #20]
					uint32_t ulLast  = ulChar2u32( pucPtr + 4 );
 800d9c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9c4:	3304      	adds	r3, #4
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f7ff faa7 	bl	800cf1a <ulChar2u32>
 800d9cc:	6138      	str	r0, [r7, #16]
					uint32_t ulCount = ulTCPWindowTxSack( &pxSocket->u.xTCP.xTCPWindow, ulFirst, ulLast );
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	33dc      	adds	r3, #220	; 0xdc
 800d9d2:	693a      	ldr	r2, [r7, #16]
 800d9d4:	6979      	ldr	r1, [r7, #20]
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f002 fc30 	bl	801023c <ulTCPWindowTxSack>
 800d9dc:	60f8      	str	r0, [r7, #12]
						/* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
						starting from the head position.
						Advance the tail pointer in txStream. */
						if( ( pxSocket->u.xTCP.txStream  != NULL ) && ( ulCount > 0 ) )
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d01d      	beq.n	800da22 <prvCheckOptions+0x20a>
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d01a      	beq.n	800da22 <prvCheckOptions+0x20a>
						{
							/* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
							uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	9300      	str	r3, [sp, #0]
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	2100      	movs	r1, #0
 800d9fa:	f7ff f94b 	bl	800cc94 <uxStreamBufferGet>
							pxSocket->xEventBits |= eSOCKET_SEND;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	f043 0202 	orr.w	r2, r3, #2
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	601a      	str	r2, [r3, #0]

							#if ipconfigSUPPORT_SELECT_FUNCTION == 1
							{
								if( pxSocket->xSelectBits & eSELECT_WRITE )
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da0e:	f003 0302 	and.w	r3, r3, #2
 800da12:	2b00      	cmp	r3, #0
 800da14:	d005      	beq.n	800da22 <prvCheckOptions+0x20a>
								{
									/* The field 'xEventBits' is used to store regular socket events (at most 8),
									as well as 'select events', which will be left-shifted */
									pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	601a      	str	r2, [r3, #0]
									pxSocket->u.xTCP.pxHandleSent( (Socket_t *)pxSocket, ulCount );
								}
							}
							#endif /* ipconfigUSE_CALLBACKS == 1  */
						}
						pucPtr += 8;
 800da22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da24:	3308      	adds	r3, #8
 800da26:	637b      	str	r3, [r7, #52]	; 0x34
						len -= 8;
 800da28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800da2c:	3b08      	subs	r3, #8
 800da2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					while( len >= 8 )
 800da32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800da36:	2b07      	cmp	r3, #7
 800da38:	d8bf      	bhi.n	800d9ba <prvCheckOptions+0x1a2>
					/* len should be 0 by now. */
				}
			}
			#endif	/* ipconfigUSE_TCP_WIN == 1 */

			pucPtr += len;
 800da3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800da3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da40:	4413      	add	r3, r2
 800da42:	637b      	str	r3, [r7, #52]	; 0x34
	while( pucPtr < pucLast )
 800da44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da48:	429a      	cmp	r2, r3
 800da4a:	f4ff af0a 	bcc.w	800d862 <prvCheckOptions+0x4a>
 800da4e:	e006      	b.n	800da5e <prvCheckOptions+0x246>
        return;
 800da50:	bf00      	nop
 800da52:	e004      	b.n	800da5e <prvCheckOptions+0x246>
			break;
 800da54:	bf00      	nop
 800da56:	e002      	b.n	800da5e <prvCheckOptions+0x246>
            break;
 800da58:	bf00      	nop
 800da5a:	e000      	b.n	800da5e <prvCheckOptions+0x246>
                    break;
 800da5c:	bf00      	nop
		}
	}
}
 800da5e:	3738      	adds	r7, #56	; 0x38
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}

0800da64 <prvWinScaleFactor>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN != 0 )

	static uint8_t prvWinScaleFactor( FreeRTOS_Socket_t *pxSocket )
	{
 800da64:	b480      	push	{r7}
 800da66:	b085      	sub	sp, #20
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
	size_t uxWinSize;
	uint8_t ucFactor;

		/* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
		uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usInitMSS;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800da72:	687a      	ldr	r2, [r7, #4]
 800da74:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 800da78:	fb02 f303 	mul.w	r3, r2, r3
 800da7c:	60fb      	str	r3, [r7, #12]
		ucFactor = 0u;
 800da7e:	2300      	movs	r3, #0
 800da80:	72fb      	strb	r3, [r7, #11]
		while( uxWinSize > 0xfffful )
 800da82:	e005      	b.n	800da90 <prvWinScaleFactor+0x2c>
		{
			/* Divide by two and increase the binary factor by 1. */
			uxWinSize >>= 1;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	085b      	lsrs	r3, r3, #1
 800da88:	60fb      	str	r3, [r7, #12]
			ucFactor++;
 800da8a:	7afb      	ldrb	r3, [r7, #11]
 800da8c:	3301      	adds	r3, #1
 800da8e:	72fb      	strb	r3, [r7, #11]
		while( uxWinSize > 0xfffful )
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da96:	d2f5      	bcs.n	800da84 <prvWinScaleFactor+0x20>
		FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %lu MSS %lu Factor %u\n",
			pxSocket->u.xTCP.uxRxWinSize,
			pxSocket->u.xTCP.usInitMSS,
			ucFactor ) );

		return ucFactor;
 800da98:	7afb      	ldrb	r3, [r7, #11]
	}
 800da9a:	4618      	mov	r0, r3
 800da9c:	3714      	adds	r7, #20
 800da9e:	46bd      	mov	sp, r7
 800daa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa4:	4770      	bx	lr

0800daa6 <prvSetSynAckOptions>:
 * When opening a TCP connection, while SYN's are being sent, the  parties may
 * communicate what MSS (Maximum Segment Size) they intend to use.   MSS is the
 * nett size of the payload, always smaller than MTU.
*/
static UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t *pxSocket, TCPPacket_t * pxTCPPacket )
{
 800daa6:	b580      	push	{r7, lr}
 800daa8:	b086      	sub	sp, #24
 800daaa:	af00      	add	r7, sp, #0
 800daac:	6078      	str	r0, [r7, #4]
 800daae:	6039      	str	r1, [r7, #0]
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	3322      	adds	r3, #34	; 0x22
 800dab4:	617b      	str	r3, [r7, #20]
uint16_t usMSS = pxSocket->u.xTCP.usInitMSS;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800dabc:	827b      	strh	r3, [r7, #18]
UBaseType_t uxOptionsLength;

	/* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */

	pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) TCP_OPT_MSS;
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	2202      	movs	r2, #2
 800dac2:	751a      	strb	r2, [r3, #20]
	pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) TCP_OPT_MSS_LEN;
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	2204      	movs	r2, #4
 800dac8:	755a      	strb	r2, [r3, #21]
	pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 800daca:	8a7b      	ldrh	r3, [r7, #18]
 800dacc:	0a1b      	lsrs	r3, r3, #8
 800dace:	b29b      	uxth	r3, r3
 800dad0:	b2da      	uxtb	r2, r3
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	759a      	strb	r2, [r3, #22]
	pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffu );
 800dad6:	8a7b      	ldrh	r3, [r7, #18]
 800dad8:	b2da      	uxtb	r2, r3
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	75da      	strb	r2, [r3, #23]

	#if( ipconfigUSE_TCP_WIN != 0 )
	{
		pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f7ff ffc0 	bl	800da64 <prvWinScaleFactor>
 800dae4:	4603      	mov	r3, r0
 800dae6:	461a      	mov	r2, r3
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9

		pxTCPHeader->ucOptdata[ 4 ] = TCP_OPT_NOOP;
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	2201      	movs	r2, #1
 800daf2:	761a      	strb	r2, [r3, #24]
		pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( TCP_OPT_WSOPT );
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	2203      	movs	r2, #3
 800daf8:	765a      	strb	r2, [r3, #25]
		pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( TCP_OPT_WSOPT_LEN );
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	2203      	movs	r2, #3
 800dafe:	769a      	strb	r2, [r3, #26]
		pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	76da      	strb	r2, [r3, #27]
		uxOptionsLength = 8u;
 800db0a:	2308      	movs	r3, #8
 800db0c:	60fb      	str	r3, [r7, #12]
	{
		return uxOptionsLength;
	}
	#else
	{
		pxTCPHeader->ucOptdata[ uxOptionsLength + 0 ] = TCP_OPT_NOOP;
 800db0e:	697a      	ldr	r2, [r7, #20]
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	4413      	add	r3, r2
 800db14:	3314      	adds	r3, #20
 800db16:	2201      	movs	r2, #1
 800db18:	701a      	strb	r2, [r3, #0]
		pxTCPHeader->ucOptdata[ uxOptionsLength + 1 ] = TCP_OPT_NOOP;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	3301      	adds	r3, #1
 800db1e:	697a      	ldr	r2, [r7, #20]
 800db20:	4413      	add	r3, r2
 800db22:	2201      	movs	r2, #1
 800db24:	751a      	strb	r2, [r3, #20]
		pxTCPHeader->ucOptdata[ uxOptionsLength + 2 ] = TCP_OPT_SACK_P;	/* 4: Sack-Permitted Option. */
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	3302      	adds	r3, #2
 800db2a:	697a      	ldr	r2, [r7, #20]
 800db2c:	4413      	add	r3, r2
 800db2e:	2204      	movs	r2, #4
 800db30:	751a      	strb	r2, [r3, #20]
		pxTCPHeader->ucOptdata[ uxOptionsLength + 3 ] = 2;	/* 2: length of this option. */
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	3303      	adds	r3, #3
 800db36:	697a      	ldr	r2, [r7, #20]
 800db38:	4413      	add	r3, r2
 800db3a:	2202      	movs	r2, #2
 800db3c:	751a      	strb	r2, [r3, #20]
		uxOptionsLength += 4u;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	3304      	adds	r3, #4
 800db42:	60fb      	str	r3, [r7, #12]

        return uxOptionsLength; /* bytes, not words. */
 800db44:	68fb      	ldr	r3, [r7, #12]
	}
	#endif	/* ipconfigUSE_TCP_WIN == 0 */
}
 800db46:	4618      	mov	r0, r3
 800db48:	3718      	adds	r7, #24
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}

0800db4e <prvTCPTouchSocket>:
 * For anti-hanging protection and TCP keep-alive messages.  Called in two
 * places: after receiving a packet and after a state change.  The socket's
 * alive timer may be reset.
 */
static void prvTCPTouchSocket( FreeRTOS_Socket_t *pxSocket )
{
 800db4e:	b580      	push	{r7, lr}
 800db50:	b082      	sub	sp, #8
 800db52:	af00      	add	r7, sp, #0
 800db54:	6078      	str	r0, [r7, #4]
	#if( ipconfigTCP_HANG_PROTECTION == 1 )
	{
		pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount( );
 800db56:	f7fb fafd 	bl	8009154 <xTaskGetTickCount>
 800db5a:	4602      	mov	r2, r0
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif

	#if( ipconfigTCP_KEEP_ALIVE == 1 )
	{
		pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 800db60:	687a      	ldr	r2, [r7, #4]
 800db62:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800db66:	f36f 0382 	bfc	r3, #2, #1
 800db6a:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
		pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800db6e:	687a      	ldr	r2, [r7, #4]
 800db70:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800db74:	f36f 0341 	bfc	r3, #1, #1
 800db78:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
		pxSocket->u.xTCP.ucKeepRepCount = 0u;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2200      	movs	r2, #0
 800db80:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 800db84:	f7fb fae6 	bl	8009154 <xTaskGetTickCount>
 800db88:	4602      	mov	r2, r0
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	65da      	str	r2, [r3, #92]	; 0x5c
	}
	#endif

	( void ) pxSocket;
}
 800db8e:	bf00      	nop
 800db90:	3708      	adds	r7, #8
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}

0800db96 <vTCPStateChange>:
 * resetting the alive timer, calling the user's OnConnect handler to notify
 * that a socket has got (dis)connected, and setting bit to unblock a call to
 * FreeRTOS_select()
 */
void vTCPStateChange( FreeRTOS_Socket_t *pxSocket, enum eTCP_STATE eTCPState )
{
 800db96:	b580      	push	{r7, lr}
 800db98:	b086      	sub	sp, #24
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	6078      	str	r0, [r7, #4]
 800db9e:	460b      	mov	r3, r1
 800dba0:	70fb      	strb	r3, [r7, #3]
FreeRTOS_Socket_t *xParent = NULL;
 800dba2:	2300      	movs	r3, #0
 800dba4:	617b      	str	r3, [r7, #20]
BaseType_t bBefore = ( BaseType_t ) NOW_CONNECTED( pxSocket->u.xTCP.ucTCPState );	/* Was it connected ? */
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800dbac:	2b04      	cmp	r3, #4
 800dbae:	d906      	bls.n	800dbbe <vTCPStateChange+0x28>
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800dbb6:	2b08      	cmp	r3, #8
 800dbb8:	d001      	beq.n	800dbbe <vTCPStateChange+0x28>
 800dbba:	2301      	movs	r3, #1
 800dbbc:	e000      	b.n	800dbc0 <vTCPStateChange+0x2a>
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	613b      	str	r3, [r7, #16]
BaseType_t bAfter  = ( BaseType_t ) NOW_CONNECTED( eTCPState );						/* Is it connected now ? */
 800dbc2:	78fb      	ldrb	r3, [r7, #3]
 800dbc4:	2b04      	cmp	r3, #4
 800dbc6:	d904      	bls.n	800dbd2 <vTCPStateChange+0x3c>
 800dbc8:	78fb      	ldrb	r3, [r7, #3]
 800dbca:	2b08      	cmp	r3, #8
 800dbcc:	d001      	beq.n	800dbd2 <vTCPStateChange+0x3c>
 800dbce:	2301      	movs	r3, #1
 800dbd0:	e000      	b.n	800dbd4 <vTCPStateChange+0x3e>
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	60fb      	str	r3, [r7, #12]
#if( ipconfigUSE_CALLBACKS == 1 )
	FreeRTOS_Socket_t *xConnected = NULL;
#endif

	/* Has the connected status changed? */
	if( bBefore != bAfter )
 800dbd6:	693a      	ldr	r2, [r7, #16]
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	f000 8087 	beq.w	800dcee <vTCPStateChange+0x158>
	{
		/* Is the socket connected now ? */
		if( bAfter != pdFALSE )
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d063      	beq.n	800dcae <vTCPStateChange+0x118>
		{
			/* if bPassQueued is true, this socket is an orphan until it gets connected. */
			if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dbec:	f003 0304 	and.w	r3, r3, #4
 800dbf0:	b2db      	uxtb	r3, r3
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d048      	beq.n	800dc88 <vTCPStateChange+0xf2>
			{
				/* Now that it is connected, find it's parent. */
				if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dbfc:	f003 0308 	and.w	r3, r3, #8
 800dc00:	b2db      	uxtb	r3, r3
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d002      	beq.n	800dc0c <vTCPStateChange+0x76>
				{
					xParent = pxSocket;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	617b      	str	r3, [r7, #20]
 800dc0a:	e00f      	b.n	800dc2c <vTCPStateChange+0x96>
				}
				else
				{
					xParent = pxSocket->u.xTCP.pxPeerSocket;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc10:	617b      	str	r3, [r7, #20]
					configASSERT( xParent != NULL );
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d109      	bne.n	800dc2c <vTCPStateChange+0x96>
 800dc18:	f04f 0340 	mov.w	r3, #64	; 0x40
 800dc1c:	f383 8811 	msr	BASEPRI, r3
 800dc20:	f3bf 8f6f 	isb	sy
 800dc24:	f3bf 8f4f 	dsb	sy
 800dc28:	60bb      	str	r3, [r7, #8]
 800dc2a:	e7fe      	b.n	800dc2a <vTCPStateChange+0x94>
				}
				if( xParent != NULL )
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d018      	beq.n	800dc64 <vTCPStateChange+0xce>
				{
					if( xParent->u.xTCP.pxPeerSocket == NULL )
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d102      	bne.n	800dc40 <vTCPStateChange+0xaa>
					{
						xParent->u.xTCP.pxPeerSocket = pxSocket;
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	687a      	ldr	r2, [r7, #4]
 800dc3e:	655a      	str	r2, [r3, #84]	; 0x54
					}

					xParent->xEventBits |= eSOCKET_ACCEPT;
 800dc40:	697b      	ldr	r3, [r7, #20]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	f043 0204 	orr.w	r2, r3, #4
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	601a      	str	r2, [r3, #0]

					#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
					{
						/* Library support FreeRTOS_select().  Receiving a new
						connection is being translated as a READ event. */
						if( ( xParent->xSelectBits & eSELECT_READ ) != 0 )
 800dc4c:	697b      	ldr	r3, [r7, #20]
 800dc4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc50:	f003 0301 	and.w	r3, r3, #1
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d005      	beq.n	800dc64 <vTCPStateChange+0xce>
						{
							xParent->xEventBits |= ( eSELECT_READ << SOCKET_EVENT_BIT_COUNT );
 800dc58:	697b      	ldr	r3, [r7, #20]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dc60:	697b      	ldr	r3, [r7, #20]
 800dc62:	601a      	str	r2, [r3, #0]
					#endif
				}

				/* Don't need to access the parent socket anymore, so the
				reference 'pxPeerSocket' may be cleared. */
				pxSocket->u.xTCP.pxPeerSocket = NULL;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2200      	movs	r2, #0
 800dc68:	655a      	str	r2, [r3, #84]	; 0x54
				pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 800dc6a:	687a      	ldr	r2, [r7, #4]
 800dc6c:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800dc70:	f36f 0382 	bfc	r3, #2, #1
 800dc74:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40

				/* When true, this socket may be returned in a call to accept(). */
				pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 800dc78:	687a      	ldr	r2, [r7, #4]
 800dc7a:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800dc7e:	f043 0302 	orr.w	r3, r3, #2
 800dc82:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 800dc86:	e024      	b.n	800dcd2 <vTCPStateChange+0x13c>
			}
			else
			{
				pxSocket->xEventBits |= eSOCKET_CONNECT;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	f043 0208 	orr.w	r2, r3, #8
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	601a      	str	r2, [r3, #0]

				#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
				{
					if( pxSocket->xSelectBits & eSELECT_WRITE )
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc98:	f003 0302 	and.w	r3, r3, #2
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d018      	beq.n	800dcd2 <vTCPStateChange+0x13c>
					{
						pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	601a      	str	r2, [r3, #0]
 800dcac:	e011      	b.n	800dcd2 <vTCPStateChange+0x13c>
			}
		}
		else  /* bAfter == pdFALSE, connection is closed. */
		{
			/* Notify/wake-up the socket-owner by setting a semaphore. */
			pxSocket->xEventBits |= eSOCKET_CLOSED;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	f043 0220 	orr.w	r2, r3, #32
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	601a      	str	r2, [r3, #0]

			#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
			{
				if( ( pxSocket->xSelectBits & eSELECT_EXCEPT ) != 0 )
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcbe:	f003 0304 	and.w	r3, r3, #4
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d005      	beq.n	800dcd2 <vTCPStateChange+0x13c>
				{
					pxSocket->xEventBits |= ( eSELECT_EXCEPT << SOCKET_EVENT_BIT_COUNT );
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	601a      	str	r2, [r3, #0]
				xConnected = pxSocket;
			}
		}
		#endif /* ipconfigUSE_CALLBACKS */

		if( prvTCPSocketIsActive( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) == pdFALSE )
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f7ff f94f 	bl	800cf7c <prvTCPSocketIsActive>
 800dcde:	4603      	mov	r3, r0
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d122      	bne.n	800dd2a <vTCPStateChange+0x194>
		{
			/* Now the socket isn't in an active state anymore so it
			won't need further attention of the IP-task.
			Setting time-out to zero means that the socket won't get checked during
			timer events. */
			pxSocket->u.xTCP.usTimeout = 0u;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2200      	movs	r2, #0
 800dce8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dcec:	e01d      	b.n	800dd2a <vTCPStateChange+0x194>
		}
	}
	else
	{
		if( eTCPState == eCLOSED )
 800dcee:	78fb      	ldrb	r3, [r7, #3]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d11a      	bne.n	800dd2a <vTCPStateChange+0x194>
		{
			/* Socket goes to status eCLOSED because of a RST.
			When nobody owns the socket yet, delete it. */
			if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dcfa:	f003 0304 	and.w	r3, r3, #4
 800dcfe:	b2db      	uxtb	r3, r3
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d107      	bne.n	800dd14 <vTCPStateChange+0x17e>
				( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dd0a:	f003 0302 	and.w	r3, r3, #2
 800dd0e:	b2db      	uxtb	r3, r3
			if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d00a      	beq.n	800dd2a <vTCPStateChange+0x194>
			{
				FreeRTOS_debug_printf( ( "vTCPStateChange: Closing socket\n" ) );
				if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dd1a:	f003 0308 	and.w	r3, r3, #8
 800dd1e:	b2db      	uxtb	r3, r3
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d102      	bne.n	800dd2a <vTCPStateChange+0x194>
				{
					FreeRTOS_closesocket( pxSocket );
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f7fe fa05 	bl	800c134 <FreeRTOS_closesocket>
			}
		}
	}

	/* Fill in the new state. */
	pxSocket->u.xTCP.ucTCPState = ( uint8_t ) eTCPState;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	78fa      	ldrb	r2, [r7, #3]
 800dd2e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* touch the alive timers because moving to another state. */
	prvTCPTouchSocket( pxSocket );
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f7ff ff0b 	bl	800db4e <prvTCPTouchSocket>
			/* The 'connected' state has changed, call the OnConnect handler of the parent. */
			xConnected->u.xTCP.pxHandleConnected( ( Socket_t * ) xConnected, bAfter );
		}
	}
	#endif
	if( xParent != NULL )
 800dd38:	697b      	ldr	r3, [r7, #20]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d002      	beq.n	800dd44 <vTCPStateChange+0x1ae>
	{
		vSocketWakeUpUser( xParent );
 800dd3e:	6978      	ldr	r0, [r7, #20]
 800dd40:	f7fe fb66 	bl	800c410 <vSocketWakeUpUser>
	}
}
 800dd44:	bf00      	nop
 800dd46:	3718      	adds	r7, #24
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}

0800dd4c <prvTCPBufferResize>:
/*-----------------------------------------------------------*/

static NetworkBufferDescriptor_t *prvTCPBufferResize( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer,
	int32_t lDataLen, UBaseType_t uxOptionsLength )
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b088      	sub	sp, #32
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	60f8      	str	r0, [r7, #12]
 800dd54:	60b9      	str	r1, [r7, #8]
 800dd56:	607a      	str	r2, [r7, #4]
 800dd58:	603b      	str	r3, [r7, #0]
NetworkBufferDescriptor_t *pxReturn;
int32_t lNeeded;
BaseType_t xResize;

	if( xBufferAllocFixedSize != pdFALSE )
 800dd5a:	4b2d      	ldr	r3, [pc, #180]	; (800de10 <prvTCPBufferResize+0xc4>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d00a      	beq.n	800dd78 <prvTCPBufferResize+0x2c>
	{
		/* Network buffers are created with a fixed size and can hold the largest
		MTU. */
		lNeeded = ( int32_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 800dd62:	f240 43c6 	movw	r3, #1222	; 0x4c6
 800dd66:	61bb      	str	r3, [r7, #24]
		/* and therefore, the buffer won't be too small.
		Only ask for a new network buffer in case none was supplied. */
		xResize = ( pxNetworkBuffer == NULL );
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	bf0c      	ite	eq
 800dd6e:	2301      	moveq	r3, #1
 800dd70:	2300      	movne	r3, #0
 800dd72:	b2db      	uxtb	r3, r3
 800dd74:	617b      	str	r3, [r7, #20]
 800dd76:	e014      	b.n	800dda2 <prvTCPBufferResize+0x56>
	else
	{
		/* Network buffers are created with a variable size. See if it must
		grow. */
		lNeeded = FreeRTOS_max_int32( ( int32_t ) sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ),
			( int32_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + lDataLen );
 800dd78:	687a      	ldr	r2, [r7, #4]
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	4413      	add	r3, r2
 800dd7e:	3336      	adds	r3, #54	; 0x36
		lNeeded = FreeRTOS_max_int32( ( int32_t ) sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ),
 800dd80:	4619      	mov	r1, r3
 800dd82:	2046      	movs	r0, #70	; 0x46
 800dd84:	f7fe fffa 	bl	800cd7c <FreeRTOS_max_int32>
 800dd88:	61b8      	str	r0, [r7, #24]
		/* In case we were called from a TCP timer event, a buffer must be
		created.  Otherwise, test 'xDataLength' of the provided buffer. */
		xResize = ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < (size_t)lNeeded );
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d004      	beq.n	800dd9a <prvTCPBufferResize+0x4e>
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	69da      	ldr	r2, [r3, #28]
 800dd94:	69bb      	ldr	r3, [r7, #24]
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d201      	bcs.n	800dd9e <prvTCPBufferResize+0x52>
 800dd9a:	2301      	movs	r3, #1
 800dd9c:	e000      	b.n	800dda0 <prvTCPBufferResize+0x54>
 800dd9e:	2300      	movs	r3, #0
 800dda0:	617b      	str	r3, [r7, #20]
	}

	if( xResize != pdFALSE )
 800dda2:	697b      	ldr	r3, [r7, #20]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d024      	beq.n	800ddf2 <prvTCPBufferResize+0xa6>
	{
		/* The caller didn't provide a network buffer or the provided buffer is
		too small.  As we must send-out a data packet, a buffer will be created
		here. */
		pxReturn = pxGetNetworkBufferWithDescriptor( ( uint32_t ) lNeeded, 0u );
 800dda8:	69bb      	ldr	r3, [r7, #24]
 800ddaa:	2100      	movs	r1, #0
 800ddac:	4618      	mov	r0, r3
 800ddae:	f002 fc49 	bl	8010644 <pxGetNetworkBufferWithDescriptor>
 800ddb2:	61f8      	str	r0, [r7, #28]

		if( pxReturn != NULL )
 800ddb4:	69fb      	ldr	r3, [r7, #28]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d024      	beq.n	800de04 <prvTCPBufferResize+0xb8>
		{
            /* Set the actual packet size, in case the returned buffer is larger. */
            pxReturn->xDataLength = lNeeded;
 800ddba:	69ba      	ldr	r2, [r7, #24]
 800ddbc:	69fb      	ldr	r3, [r7, #28]
 800ddbe:	61da      	str	r2, [r3, #28]

			/* Copy the existing data to the new created buffer. */
			if( pxNetworkBuffer )
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d00c      	beq.n	800dde0 <prvTCPBufferResize+0x94>
			{
				/* Either from the previous buffer... */
				memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 800ddc6:	69fb      	ldr	r3, [r7, #28]
 800ddc8:	6998      	ldr	r0, [r3, #24]
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	6999      	ldr	r1, [r3, #24]
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	69db      	ldr	r3, [r3, #28]
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	f002 ffc3 	bl	8010d5e <memcpy>

				/* ...and release it. */
				vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800ddd8:	68b8      	ldr	r0, [r7, #8]
 800ddda:	f002 fcab 	bl	8010734 <vReleaseNetworkBufferAndDescriptor>
 800ddde:	e011      	b.n	800de04 <prvTCPBufferResize+0xb8>
			}
			else
			{
				/* Or from the socket field 'xTCP.xPacket'. */
				memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800dde0:	69fb      	ldr	r3, [r7, #28]
 800dde2:	6998      	ldr	r0, [r3, #24]
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	3382      	adds	r3, #130	; 0x82
 800dde8:	2246      	movs	r2, #70	; 0x46
 800ddea:	4619      	mov	r1, r3
 800ddec:	f002 ffb7 	bl	8010d5e <memcpy>
 800ddf0:	e008      	b.n	800de04 <prvTCPBufferResize+0xb8>
		}
	}
	else
	{
		/* xResize is false, the network buffer provided was big enough. */
		pxReturn = pxNetworkBuffer;
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	61fb      	str	r3, [r7, #28]

		/* Thanks to Andrey Ivanov from swissEmbedded for reporting that the
		xDataLength member must get the correct length too! */
		pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 800ddf6:	687a      	ldr	r2, [r7, #4]
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	4413      	add	r3, r2
 800ddfc:	f103 0236 	add.w	r2, r3, #54	; 0x36
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	61da      	str	r2, [r3, #28]
	}

	return pxReturn;
 800de04:	69fb      	ldr	r3, [r7, #28]
}
 800de06:	4618      	mov	r0, r3
 800de08:	3720      	adds	r7, #32
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}
 800de0e:	bf00      	nop
 800de10:	0801125c 	.word	0x0801125c

0800de14 <prvTCPPrepareSend>:

/*
 * Prepare an outgoing message, in case anything has to be sent.
 */
static int32_t prvTCPPrepareSend( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer, UBaseType_t uxOptionsLength )
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b092      	sub	sp, #72	; 0x48
 800de18:	af02      	add	r7, sp, #8
 800de1a:	60f8      	str	r0, [r7, #12]
 800de1c:	60b9      	str	r1, [r7, #8]
 800de1e:	607a      	str	r2, [r7, #4]
uint32_t ulDataGot, ulDistance;
TCPWindow_t *pxTCPWindow;
NetworkBufferDescriptor_t *pxNewBuffer;
int32_t lStreamPos;

	if( ( *ppxNetworkBuffer ) != NULL )
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d004      	beq.n	800de32 <prvTCPPrepareSend+0x1e>
	{
		/* A network buffer descriptor was already supplied */
		pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	699b      	ldr	r3, [r3, #24]
 800de2e:	63bb      	str	r3, [r7, #56]	; 0x38
 800de30:	e002      	b.n	800de38 <prvTCPPrepareSend+0x24>
	}
	else
	{
		/* For now let it point to the last packet header */
		pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	3382      	adds	r3, #130	; 0x82
 800de36:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	pxTCPPacket = ( TCPPacket_t * ) ( pucEthernetBuffer );
 800de38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de3a:	637b      	str	r3, [r7, #52]	; 0x34
	pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	33dc      	adds	r3, #220	; 0xdc
 800de40:	62fb      	str	r3, [r7, #44]	; 0x2c
	lDataLen = 0;
 800de42:	2300      	movs	r3, #0
 800de44:	63fb      	str	r3, [r7, #60]	; 0x3c
	lStreamPos = 0;
 800de46:	2300      	movs	r3, #0
 800de48:	613b      	str	r3, [r7, #16]
	pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_ACK;
 800de4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de4c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800de50:	f043 0310 	orr.w	r3, r3, #16
 800de54:	b2da      	uxtb	r2, r3
 800de56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de58:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	if( pxSocket->u.xTCP.txStream != NULL )
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de60:	2b00      	cmp	r3, #0
 800de62:	d078      	beq.n	800df56 <prvTCPPrepareSend+0x142>
	{
		/* ulTCPWindowTxGet will return the amount of data which may be sent
		along with the position in the txStream.
		Why check for MSS > 1 ?
		Because some TCP-stacks (like uIP) use it for flow-control. */
		if( pxSocket->u.xTCP.usCurMSS > 1u )
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800de6a:	2b01      	cmp	r3, #1
 800de6c:	d90a      	bls.n	800de84 <prvTCPPrepareSend+0x70>
		{
			lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800de74:	f107 0210 	add.w	r2, r7, #16
 800de78:	4619      	mov	r1, r3
 800de7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de7c:	f001 ffd2 	bl	800fe24 <ulTCPWindowTxGet>
 800de80:	4603      	mov	r3, r0
 800de82:	63fb      	str	r3, [r7, #60]	; 0x3c
		}

		if( lDataLen > 0 )
 800de84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de86:	2b00      	cmp	r3, #0
 800de88:	dd65      	ble.n	800df56 <prvTCPPrepareSend+0x142>
		{
			/* Check if the current network buffer is big enough, if not,
			resize it. */
			pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	6819      	ldr	r1, [r3, #0]
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800de92:	68f8      	ldr	r0, [r7, #12]
 800de94:	f7ff ff5a 	bl	800dd4c <prvTCPBufferResize>
 800de98:	62b8      	str	r0, [r7, #40]	; 0x28

			if( pxNewBuffer != NULL )
 800de9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d057      	beq.n	800df50 <prvTCPPrepareSend+0x13c>
			{
				*ppxNetworkBuffer = pxNewBuffer;
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dea4:	601a      	str	r2, [r3, #0]
				pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 800dea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea8:	699b      	ldr	r3, [r3, #24]
 800deaa:	63bb      	str	r3, [r7, #56]	; 0x38
				pxTCPPacket = ( TCPPacket_t * ) ( pucEthernetBuffer );
 800deac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deae:	637b      	str	r3, [r7, #52]	; 0x34

				pucSendData = pucEthernetBuffer + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	3336      	adds	r3, #54	; 0x36
 800deb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800deb6:	4413      	add	r3, r2
 800deb8:	627b      	str	r3, [r7, #36]	; 0x24

				/* Translate the position in txStream to an offset from the tail
				marker. */
				uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	693a      	ldr	r2, [r7, #16]
 800dec6:	4619      	mov	r1, r3
 800dec8:	f7fe ffa7 	bl	800ce1a <uxStreamBufferDistance>
 800decc:	6238      	str	r0, [r7, #32]

				/* Here data is copied from the txStream in 'peek' mode.  Only
				when the packets are acked, the tail marker will be updated. */
				ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ded2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ded4:	2301      	movs	r3, #1
 800ded6:	9300      	str	r3, [sp, #0]
 800ded8:	4613      	mov	r3, r2
 800deda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dedc:	6a39      	ldr	r1, [r7, #32]
 800dede:	f7fe fed9 	bl	800cc94 <uxStreamBufferGet>
 800dee2:	61f8      	str	r0, [r7, #28]
				}
				#endif

				/* If the owner of the socket requests a closure, add the FIN
				flag to the last packet. */
				if( ( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) )
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800deea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800deee:	b2db      	uxtb	r3, r3
 800def0:	2b00      	cmp	r3, #0
 800def2:	d030      	beq.n	800df56 <prvTCPPrepareSend+0x142>
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800defa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800defe:	b2db      	uxtb	r3, r3
 800df00:	2b00      	cmp	r3, #0
 800df02:	d128      	bne.n	800df56 <prvTCPPrepareSend+0x142>
				{
					ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800df08:	693b      	ldr	r3, [r7, #16]
 800df0a:	4619      	mov	r1, r3
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df10:	689b      	ldr	r3, [r3, #8]
 800df12:	461a      	mov	r2, r3
 800df14:	f7fe ff81 	bl	800ce1a <uxStreamBufferDistance>
 800df18:	61b8      	str	r0, [r7, #24]

					if( ulDistance == ulDataGot )
 800df1a:	69ba      	ldr	r2, [r7, #24]
 800df1c:	69fb      	ldr	r3, [r7, #28]
 800df1e:	429a      	cmp	r2, r3
 800df20:	d119      	bne.n	800df56 <prvTCPPrepareSend+0x142>
						}
						#endif
						/* Although the socket sends a FIN, it will stay in
						ESTABLISHED until all current data has been received or
						delivered. */
						pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_FIN;
 800df22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df24:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800df28:	f043 0301 	orr.w	r3, r3, #1
 800df2c:	b2da      	uxtb	r2, r3
 800df2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df30:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 800df34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df3a:	441a      	add	r2, r3
 800df3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df3e:	625a      	str	r2, [r3, #36]	; 0x24
						pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800df40:	68fa      	ldr	r2, [r7, #12]
 800df42:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800df46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df4a:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
 800df4e:	e002      	b.n	800df56 <prvTCPPrepareSend+0x142>
					}
				}
			}
			else
			{
				lDataLen = -1;
 800df50:	f04f 33ff 	mov.w	r3, #4294967295
 800df54:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}
	}

	if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) )
 800df56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df58:	2b00      	cmp	r3, #0
 800df5a:	db7e      	blt.n	800e05a <prvTCPPrepareSend+0x246>
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800df62:	2b05      	cmp	r3, #5
 800df64:	d179      	bne.n	800e05a <prvTCPPrepareSend+0x246>
	{
		/* See if the socket owner wants to shutdown this connection. */
		if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800df6c:	f003 0320 	and.w	r3, r3, #32
 800df70:	b2db      	uxtb	r3, r3
 800df72:	2b00      	cmp	r3, #0
 800df74:	d02b      	beq.n	800dfce <prvTCPPrepareSend+0x1ba>
			( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 800df76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df78:	f001 fe9c 	bl	800fcb4 <xTCPWindowTxDone>
 800df7c:	4603      	mov	r3, r0
		if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d025      	beq.n	800dfce <prvTCPPrepareSend+0x1ba>
		{
			pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 800df82:	68fa      	ldr	r2, [r7, #12]
 800df84:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800df88:	f36f 1345 	bfc	r3, #5, #1
 800df8c:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
			pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_FIN;
 800df90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df92:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800df96:	f043 0301 	orr.w	r3, r3, #1
 800df9a:	b2da      	uxtb	r2, r3
 800df9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df9e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
			pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800dfa2:	68fa      	ldr	r2, [r7, #12]
 800dfa4:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800dfa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfac:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
			pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800dfb0:	68fa      	ldr	r2, [r7, #12]
 800dfb2:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800dfb6:	f043 0301 	orr.w	r3, r3, #1
 800dfba:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
			pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800dfbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc0:	6a1a      	ldr	r2, [r3, #32]
 800dfc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc4:	625a      	str	r2, [r3, #36]	; 0x24
			vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 800dfc6:	2106      	movs	r1, #6
 800dfc8:	68f8      	ldr	r0, [r7, #12]
 800dfca:	f7ff fde4 	bl	800db96 <vTCPStateChange>
		}

		#if( ipconfigTCP_KEEP_ALIVE != 0 )
		{
			if( pxSocket->u.xTCP.ucKeepRepCount > 3u )
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800dfd4:	2b03      	cmp	r3, #3
 800dfd6:	d906      	bls.n	800dfe6 <prvTCPPrepareSend+0x1d2>
			{
				FreeRTOS_debug_printf( ( "keep-alive: giving up %lxip:%u\n",
					pxSocket->u.xTCP.ulRemoteIP,			/* IP address of remote machine. */
					pxSocket->u.xTCP.usRemotePort ) );	/* Port on remote machine. */
				vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800dfd8:	2108      	movs	r1, #8
 800dfda:	68f8      	ldr	r0, [r7, #12]
 800dfdc:	f7ff fddb 	bl	800db96 <vTCPStateChange>
				lDataLen = -1;
 800dfe0:	f04f 33ff 	mov.w	r3, #4294967295
 800dfe4:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 800dfe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d136      	bne.n	800e05a <prvTCPPrepareSend+0x246>
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dff2:	f003 0301 	and.w	r3, r3, #1
 800dff6:	b2db      	uxtb	r3, r3
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d12e      	bne.n	800e05a <prvTCPPrepareSend+0x246>
			{
				/* If there is no data to be sent, and no window-update message,
				we might want to send a keep-alive message. */
				TickType_t xAge = xTaskGetTickCount( ) - pxSocket->u.xTCP.xLastAliveTime;
 800dffc:	f7fb f8aa 	bl	8009154 <xTaskGetTickCount>
 800e000:	4602      	mov	r2, r0
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e006:	1ad3      	subs	r3, r2, r3
 800e008:	617b      	str	r3, [r7, #20]
				TickType_t xMax;
				xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * configTICK_RATE_HZ );
 800e00a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e00e:	633b      	str	r3, [r7, #48]	; 0x30
				if( pxSocket->u.xTCP.ucKeepRepCount )
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800e016:	2b00      	cmp	r3, #0
 800e018:	d002      	beq.n	800e020 <prvTCPPrepareSend+0x20c>
				{
					xMax = ( 3u * configTICK_RATE_HZ );
 800e01a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800e01e:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if( xAge > xMax )
 800e020:	697a      	ldr	r2, [r7, #20]
 800e022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e024:	429a      	cmp	r2, r3
 800e026:	d918      	bls.n	800e05a <prvTCPPrepareSend+0x246>
				{
					pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount( );
 800e028:	f7fb f894 	bl	8009154 <xTaskGetTickCount>
 800e02c:	4602      	mov	r2, r0
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	65da      	str	r2, [r3, #92]	; 0x5c
					if( xTCPWindowLoggingLevel )
						FreeRTOS_debug_printf( ( "keep-alive: %lxip:%u count %u\n",
							pxSocket->u.xTCP.ulRemoteIP,
							pxSocket->u.xTCP.usRemotePort,
							pxSocket->u.xTCP.ucKeepRepCount ) );
					pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 800e032:	68fa      	ldr	r2, [r7, #12]
 800e034:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800e038:	f043 0302 	orr.w	r3, r3, #2
 800e03c:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
					pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500 ) );
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800e046:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
					pxSocket->u.xTCP.ucKeepRepCount++;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800e050:	3301      	adds	r3, #1
 800e052:	b2da      	uxtb	r2, r3
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		#endif /* ipconfigTCP_KEEP_ALIVE */
	}

	/* Anything to send, a change of the advertised window size, or maybe send a
	keep-alive message? */
	if( ( lDataLen > 0 ) ||
 800e05a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	dc0f      	bgt.n	800e080 <prvTCPPrepareSend+0x26c>
		( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e066:	f003 0301 	and.w	r3, r3, #1
 800e06a:	b2db      	uxtb	r3, r3
	if( ( lDataLen > 0 ) ||
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d107      	bne.n	800e080 <prvTCPPrepareSend+0x26c>
		( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e076:	f003 0302 	and.w	r3, r3, #2
 800e07a:	b2db      	uxtb	r3, r3
		( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d02b      	beq.n	800e0d8 <prvTCPPrepareSend+0x2c4>
	{
		pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_PSH );
 800e080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e082:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e086:	f023 0308 	bic.w	r3, r3, #8
 800e08a:	b2da      	uxtb	r2, r3
 800e08c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e08e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	b2db      	uxtb	r3, r3
 800e096:	3314      	adds	r3, #20
 800e098:	b2db      	uxtb	r3, r3
 800e09a:	009b      	lsls	r3, r3, #2
 800e09c:	b2da      	uxtb	r2, r3
 800e09e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0a0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

		pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_ACK;
 800e0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0a6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e0aa:	f043 0310 	orr.w	r3, r3, #16
 800e0ae:	b2da      	uxtb	r2, r3
 800e0b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0b2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

		if( lDataLen != 0l )
 800e0b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d008      	beq.n	800e0ce <prvTCPPrepareSend+0x2ba>
		{
			pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_PSH;
 800e0bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0be:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e0c2:	f043 0308 	orr.w	r3, r3, #8
 800e0c6:	b2da      	uxtb	r2, r3
 800e0c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0ca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		}

		lDataLen += ( int32_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800e0ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	4413      	add	r3, r2
 800e0d4:	3328      	adds	r3, #40	; 0x28
 800e0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	return lDataLen;
 800e0d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	3740      	adds	r7, #64	; 0x40
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}
	...

0800e0e4 <prvTCPNextTimeout>:

/*
 * Calculate after how much time this socket needs to be checked again.
 */
static TickType_t prvTCPNextTimeout ( FreeRTOS_Socket_t *pxSocket )
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b084      	sub	sp, #16
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 800e0ec:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e0f0:	60bb      	str	r3, [r7, #8]

	if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e0f8:	2b02      	cmp	r3, #2
 800e0fa:	d135      	bne.n	800e168 <prvTCPNextTimeout+0x84>
	{
		/* The socket is actively connecting to a peer. */
		if( pxSocket->u.xTCP.bits.bConnPrepared )
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e102:	f003 0308 	and.w	r3, r3, #8
 800e106:	b2db      	uxtb	r3, r3
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d012      	beq.n	800e132 <prvTCPNextTimeout+0x4e>
		{
			/* Ethernet address has been found, use progressive timeout for
			active connect(). */
			if( pxSocket->u.xTCP.ucRepCount < 3u )
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e112:	2b02      	cmp	r3, #2
 800e114:	d809      	bhi.n	800e12a <prvTCPNextTimeout+0x46>
			{
				ulDelayMs = ( 3000UL << ( pxSocket->u.xTCP.ucRepCount - 1u ) );
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e11c:	3b01      	subs	r3, #1
 800e11e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800e122:	fa02 f303 	lsl.w	r3, r2, r3
 800e126:	60bb      	str	r3, [r7, #8]
 800e128:	e006      	b.n	800e138 <prvTCPNextTimeout+0x54>
			}
			else
			{
				ulDelayMs = 11000UL;
 800e12a:	f642 23f8 	movw	r3, #11000	; 0x2af8
 800e12e:	60bb      	str	r3, [r7, #8]
 800e130:	e002      	b.n	800e138 <prvTCPNextTimeout+0x54>
			}
		}
		else
		{
			/* Still in the ARP phase: check every half second. */
			ulDelayMs = 500UL;
 800e132:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800e136:	60bb      	str	r3, [r7, #8]
		}

		FreeRTOS_debug_printf( ( "Connect[%lxip:%u]: next timeout %u: %lu ms\n",
			pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort,
			pxSocket->u.xTCP.ucRepCount, ulDelayMs ) );
		pxSocket->u.xTCP.usTimeout = ( uint16_t )pdMS_TO_MIN_TICKS( ulDelayMs );
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e13e:	fb02 f303 	mul.w	r3, r2, r3
 800e142:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e146:	d30a      	bcc.n	800e15e <prvTCPNextTimeout+0x7a>
 800e148:	68bb      	ldr	r3, [r7, #8]
 800e14a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e14e:	fb02 f303 	mul.w	r3, r2, r3
 800e152:	4a23      	ldr	r2, [pc, #140]	; (800e1e0 <prvTCPNextTimeout+0xfc>)
 800e154:	fba2 2303 	umull	r2, r3, r2, r3
 800e158:	099b      	lsrs	r3, r3, #6
 800e15a:	b29a      	uxth	r2, r3
 800e15c:	e000      	b.n	800e160 <prvTCPNextTimeout+0x7c>
 800e15e:	2201      	movs	r2, #1
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e166:	e033      	b.n	800e1d0 <prvTCPNextTimeout+0xec>
	}
	else if( pxSocket->u.xTCP.usTimeout == 0u )
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d12e      	bne.n	800e1d0 <prvTCPNextTimeout+0xec>
	{
		/* Let the sliding window mechanism decide what time-out is appropriate. */
		BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e17e:	f107 0208 	add.w	r2, r7, #8
 800e182:	4619      	mov	r1, r3
 800e184:	f001 fdee 	bl	800fd64 <xTCPWindowTxHasData>
 800e188:	60f8      	str	r0, [r7, #12]
		if( ulDelayMs == 0u )
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d108      	bne.n	800e1a2 <prvTCPNextTimeout+0xbe>
		{
			if( xResult != ( BaseType_t )0 )
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d002      	beq.n	800e19c <prvTCPNextTimeout+0xb8>
			{
				ulDelayMs = 1UL;
 800e196:	2301      	movs	r3, #1
 800e198:	60bb      	str	r3, [r7, #8]
 800e19a:	e002      	b.n	800e1a2 <prvTCPNextTimeout+0xbe>
			}
			else
			{
				ulDelayMs = tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 800e19c:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e1a0:	60bb      	str	r3, [r7, #8]
		}
		else
		{
			/* ulDelayMs contains the time to wait before a re-transmission. */
		}
		pxSocket->u.xTCP.usTimeout = ( uint16_t )pdMS_TO_MIN_TICKS( ulDelayMs );
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e1a8:	fb02 f303 	mul.w	r3, r2, r3
 800e1ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e1b0:	d30a      	bcc.n	800e1c8 <prvTCPNextTimeout+0xe4>
 800e1b2:	68bb      	ldr	r3, [r7, #8]
 800e1b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e1b8:	fb02 f303 	mul.w	r3, r2, r3
 800e1bc:	4a08      	ldr	r2, [pc, #32]	; (800e1e0 <prvTCPNextTimeout+0xfc>)
 800e1be:	fba2 2303 	umull	r2, r3, r2, r3
 800e1c2:	099b      	lsrs	r3, r3, #6
 800e1c4:	b29a      	uxth	r2, r3
 800e1c6:	e000      	b.n	800e1ca <prvTCPNextTimeout+0xe6>
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		/* field '.usTimeout' has already been set (by the
		keep-alive/delayed-ACK mechanism). */
	}

	/* Return the number of clock ticks before the timer expires. */
	return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	3710      	adds	r7, #16
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}
 800e1de:	bf00      	nop
 800e1e0:	10624dd3 	.word	0x10624dd3

0800e1e4 <prvTCPAddTxData>:
/*-----------------------------------------------------------*/

static void prvTCPAddTxData( FreeRTOS_Socket_t *pxSocket )
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b084      	sub	sp, #16
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
	the sliding window.

	uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It contains new
	Tx data which has not been passed to the sliding window yet.  The oldest
	data not-yet-confirmed can be found at rxTail. */
	lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f7fe fe58 	bl	800cea6 <uxStreamBufferMidSpace>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	60fb      	str	r3, [r7, #12]

	if( lLength > 0 )
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	dd17      	ble.n	800e230 <prvTCPAddTxData+0x4c>
		window manager, so it can start transmitting them.

		Hand over the new data to the sliding window handler.  It will be
		split-up in chunks of 1460 bytes each (or less, depending on
		ipconfigTCP_MSS). */
		lCount = lTCPWindowTxAdd(	&pxSocket->u.xTCP.xTCPWindow,
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
 800e206:	68f9      	ldr	r1, [r7, #12]
								( uint32_t ) lLength,
								( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e20c:	685b      	ldr	r3, [r3, #4]
		lCount = lTCPWindowTxAdd(	&pxSocket->u.xTCP.xTCPWindow,
 800e20e:	461a      	mov	r2, r3
								( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e214:	691b      	ldr	r3, [r3, #16]
		lCount = lTCPWindowTxAdd(	&pxSocket->u.xTCP.xTCPWindow,
 800e216:	f001 fc99 	bl	800fb4c <lTCPWindowTxAdd>
 800e21a:	60b8      	str	r0, [r7, #8]

		/* Move the rxMid pointer forward up to rxHead. */
		if( lCount > 0 )
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	dd06      	ble.n	800e230 <prvTCPAddTxData+0x4c>
		{
			vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e226:	68ba      	ldr	r2, [r7, #8]
 800e228:	4611      	mov	r1, r2
 800e22a:	4618      	mov	r0, r3
 800e22c:	f7fe fe4f 	bl	800cece <vStreamBufferMoveMid>
		}
	}
}
 800e230:	bf00      	nop
 800e232:	3710      	adds	r7, #16
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}

0800e238 <prvTCPHandleFin>:
 * Or when the socket has sent a FIN flag to the peer
 * Before being called, it has been checked that both reception and transmission
 * are complete.
 */
static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b088      	sub	sp, #32
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	6039      	str	r1, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	699b      	ldr	r3, [r3, #24]
 800e246:	61bb      	str	r3, [r7, #24]
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800e248:	69bb      	ldr	r3, [r7, #24]
 800e24a:	3322      	adds	r3, #34	; 0x22
 800e24c:	617b      	str	r3, [r7, #20]
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	7b5b      	ldrb	r3, [r3, #13]
 800e252:	74fb      	strb	r3, [r7, #19]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	33dc      	adds	r3, #220	; 0xdc
 800e258:	60fb      	str	r3, [r7, #12]
BaseType_t xSendLength = 0;
 800e25a:	2300      	movs	r3, #0
 800e25c:	61fb      	str	r3, [r7, #28]
uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	689b      	ldr	r3, [r3, #8]
 800e262:	061a      	lsls	r2, r3, #24
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	689b      	ldr	r3, [r3, #8]
 800e268:	021b      	lsls	r3, r3, #8
 800e26a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e26e:	431a      	orrs	r2, r3
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	689b      	ldr	r3, [r3, #8]
 800e274:	0a1b      	lsrs	r3, r3, #8
 800e276:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e27a:	431a      	orrs	r2, r3
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	689b      	ldr	r3, [r3, #8]
 800e280:	0e1b      	lsrs	r3, r3, #24
 800e282:	4313      	orrs	r3, r2
 800e284:	60bb      	str	r3, [r7, #8]

	if( ( ucTCPFlags & ipTCP_FLAG_FIN ) != 0u )
 800e286:	7cfb      	ldrb	r3, [r7, #19]
 800e288:	f003 0301 	and.w	r3, r3, #1
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d004      	beq.n	800e29a <prvTCPHandleFin+0x62>
	{
		pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1u;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	695b      	ldr	r3, [r3, #20]
 800e294:	1c5a      	adds	r2, r3, #1
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	611a      	str	r2, [r3, #16]
	}
	if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e2a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2a4:	b2db      	uxtb	r3, r3
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d10b      	bne.n	800e2c2 <prvTCPHandleFin+0x8a>
	{
		/* We haven't yet replied with a FIN, do so now. */
		pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	6a1a      	ldr	r2, [r3, #32]
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	625a      	str	r2, [r3, #36]	; 0x24
		pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800e2b2:	687a      	ldr	r2, [r7, #4]
 800e2b4:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800e2b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2bc:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
 800e2c0:	e00c      	b.n	800e2dc <prvTCPHandleFin+0xa4>
	}
	else
	{
		/* We did send a FIN already, see if it's ACK'd. */
		if( ulAckNr == pxTCPWindow->tx.ulFINSequenceNumber + 1u )
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2c6:	1c5a      	adds	r2, r3, #1
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d106      	bne.n	800e2dc <prvTCPHandleFin+0xa4>
		{
			pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 800e2ce:	687a      	ldr	r2, [r7, #4]
 800e2d0:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800e2d4:	f043 0301 	orr.w	r3, r3, #1
 800e2d8:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
		}
	}

	if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e2e2:	f003 0301 	and.w	r3, r3, #1
 800e2e6:	b2db      	uxtb	r3, r3
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d10b      	bne.n	800e304 <prvTCPHandleFin+0xcc>
	{
		pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	621a      	str	r2, [r3, #32]
		pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK | ipTCP_FLAG_FIN;
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	2211      	movs	r2, #17
 800e2f8:	735a      	strb	r2, [r3, #13]

		/* And wait for the final ACK. */
		vTCPStateChange( pxSocket, eLAST_ACK );
 800e2fa:	210a      	movs	r1, #10
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f7ff fc4a 	bl	800db96 <vTCPStateChange>
 800e302:	e023      	b.n	800e34c <prvTCPHandleFin+0x114>
	}
	else
	{
		/* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
		pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1u;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e308:	1c5a      	adds	r2, r3, #1
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	621a      	str	r2, [r3, #32]
		if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e314:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e318:	b2db      	uxtb	r3, r3
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d103      	bne.n	800e326 <prvTCPHandleFin+0xee>
		{
			/* We have sent out a FIN but the peer hasn't replied with a FIN
			yet. Do nothing for the moment. */
			pxTCPHeader->ucTCPFlags = 0u;
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	2200      	movs	r2, #0
 800e322:	735a      	strb	r2, [r3, #13]
 800e324:	e012      	b.n	800e34c <prvTCPHandleFin+0x114>
		}
		else
		{
			if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e32c:	f003 0302 	and.w	r3, r3, #2
 800e330:	b2db      	uxtb	r3, r3
 800e332:	2b00      	cmp	r3, #0
 800e334:	d103      	bne.n	800e33e <prvTCPHandleFin+0x106>
			{
				/* This is the third of the three-way hand shake: the last
				ACK. */
				pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 800e336:	697b      	ldr	r3, [r7, #20]
 800e338:	2210      	movs	r2, #16
 800e33a:	735a      	strb	r2, [r3, #13]
 800e33c:	e002      	b.n	800e344 <prvTCPHandleFin+0x10c>
			}
			else
			{
				/* The other party started the closure, so we just wait for the
				last ACK. */
				pxTCPHeader->ucTCPFlags = 0u;
 800e33e:	697b      	ldr	r3, [r7, #20]
 800e340:	2200      	movs	r2, #0
 800e342:	735a      	strb	r2, [r3, #13]
			}

			/* And wait for the user to close this socket. */
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800e344:	2108      	movs	r1, #8
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f7ff fc25 	bl	800db96 <vTCPStateChange>
		}
	}

	pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	6a1a      	ldr	r2, [r3, #32]
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	62da      	str	r2, [r3, #44]	; 0x2c

	if( pxTCPHeader->ucTCPFlags != 0u )
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	7b5b      	ldrb	r3, [r3, #13]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d004      	beq.n	800e366 <prvTCPHandleFin+0x12e>
	{
		xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength );
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e362:	3328      	adds	r3, #40	; 0x28
 800e364:	61fb      	str	r3, [r7, #28]
	}

	pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e36c:	3314      	adds	r3, #20
 800e36e:	b2db      	uxtb	r3, r3
 800e370:	009b      	lsls	r3, r3, #2
 800e372:	b2da      	uxtb	r2, r3
 800e374:	697b      	ldr	r3, [r7, #20]
 800e376:	731a      	strb	r2, [r3, #12]
			pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
			pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
			pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );
	}

	return xSendLength;
 800e378:	69fb      	ldr	r3, [r7, #28]
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3720      	adds	r7, #32
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}

0800e382 <prvCheckRxData>:
 *
 * The first thing that will be done is find the TCP payload data
 * and check the length of this data.
 */
static BaseType_t prvCheckRxData( NetworkBufferDescriptor_t *pxNetworkBuffer, uint8_t **ppucRecvData )
{
 800e382:	b580      	push	{r7, lr}
 800e384:	b088      	sub	sp, #32
 800e386:	af00      	add	r7, sp, #0
 800e388:	6078      	str	r0, [r7, #4]
 800e38a:	6039      	str	r1, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	699b      	ldr	r3, [r3, #24]
 800e390:	61bb      	str	r3, [r7, #24]
TCPHeader_t *pxTCPHeader = &( pxTCPPacket->xTCPHeader );
 800e392:	69bb      	ldr	r3, [r7, #24]
 800e394:	3322      	adds	r3, #34	; 0x22
 800e396:	617b      	str	r3, [r7, #20]
	node.

	The size of the TCP header is given in a multiple of 4-byte words (single
	byte, needs no ntoh() translation).  A shift-right 2: is the same as
	(offset >> 4) * 4. */
    lTCPHeaderLength = ( BaseType_t ) ( ( pxTCPHeader->ucTCPOffset & VALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2 );
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	7b1b      	ldrb	r3, [r3, #12]
 800e39c:	089b      	lsrs	r3, r3, #2
 800e39e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800e3a2:	613b      	str	r3, [r7, #16]

	/* Let pucRecvData point to the first byte received. */
	*ppucRecvData = pxNetworkBuffer->pucEthernetBuffer + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + lTCPHeaderLength;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	699a      	ldr	r2, [r3, #24]
 800e3a8:	693b      	ldr	r3, [r7, #16]
 800e3aa:	3322      	adds	r3, #34	; 0x22
 800e3ac:	441a      	add	r2, r3
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	601a      	str	r2, [r3, #0]

	/* Calculate lReceiveLength - the length of the TCP data received.  This is
	equal to the total packet length minus:
	( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
	lReceiveLength = ( ( int32_t ) pxNetworkBuffer->xDataLength ) - ( int32_t ) ipSIZE_OF_ETH_HEADER;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	69db      	ldr	r3, [r3, #28]
 800e3b6:	3b0e      	subs	r3, #14
 800e3b8:	61fb      	str	r3, [r7, #28]
	lLength =  ( int32_t )FreeRTOS_htons( pxTCPPacket->xIPHeader.usLength );
 800e3ba:	69bb      	ldr	r3, [r7, #24]
 800e3bc:	8a1b      	ldrh	r3, [r3, #16]
 800e3be:	b29b      	uxth	r3, r3
 800e3c0:	021b      	lsls	r3, r3, #8
 800e3c2:	b21a      	sxth	r2, r3
 800e3c4:	69bb      	ldr	r3, [r7, #24]
 800e3c6:	8a1b      	ldrh	r3, [r3, #16]
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	0a1b      	lsrs	r3, r3, #8
 800e3cc:	b29b      	uxth	r3, r3
 800e3ce:	b21b      	sxth	r3, r3
 800e3d0:	4313      	orrs	r3, r2
 800e3d2:	b21b      	sxth	r3, r3
 800e3d4:	b29b      	uxth	r3, r3
 800e3d6:	60fb      	str	r3, [r7, #12]

	if( lReceiveLength > lLength )
 800e3d8:	69fa      	ldr	r2, [r7, #28]
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	dd01      	ble.n	800e3e4 <prvCheckRxData+0x62>
	{
		/* More bytes were received than the reported length, often because of
		padding bytes at the end. */
		lReceiveLength = lLength;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	61fb      	str	r3, [r7, #28]
	}

	/* Subtract the size of the TCP and IP headers and the actual data size is
	known. */
	if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) ipSIZE_OF_IPv4_HEADER ) )
 800e3e4:	693b      	ldr	r3, [r7, #16]
 800e3e6:	f103 0214 	add.w	r2, r3, #20
 800e3ea:	69fb      	ldr	r3, [r7, #28]
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	da05      	bge.n	800e3fc <prvCheckRxData+0x7a>
	{
		lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) ipSIZE_OF_IPv4_HEADER );
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	3314      	adds	r3, #20
 800e3f4:	69fa      	ldr	r2, [r7, #28]
 800e3f6:	1ad3      	subs	r3, r2, r3
 800e3f8:	61fb      	str	r3, [r7, #28]
 800e3fa:	e001      	b.n	800e400 <prvCheckRxData+0x7e>
	}
	else
	{
		lReceiveLength = 0;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	61fb      	str	r3, [r7, #28]
	This field communicates the current value of the urgent pointer as a
	positive offset from the sequence number in this segment.  The urgent
	pointer points to the sequence number of the octet following the urgent
	data.  This field is only be interpreted in segments with the URG control
	bit set. */
	if( ( pxTCPHeader->ucTCPFlags & ipTCP_FLAG_URG ) != 0u )
 800e400:	697b      	ldr	r3, [r7, #20]
 800e402:	7b5b      	ldrb	r3, [r3, #13]
 800e404:	f003 0320 	and.w	r3, r3, #32
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d01c      	beq.n	800e446 <prvCheckRxData+0xc4>
	{
		/* Although we ignore the urgent data, we have to skip it. */
		lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 800e40c:	697b      	ldr	r3, [r7, #20]
 800e40e:	8a5b      	ldrh	r3, [r3, #18]
 800e410:	b29b      	uxth	r3, r3
 800e412:	021b      	lsls	r3, r3, #8
 800e414:	b21a      	sxth	r2, r3
 800e416:	697b      	ldr	r3, [r7, #20]
 800e418:	8a5b      	ldrh	r3, [r3, #18]
 800e41a:	b29b      	uxth	r3, r3
 800e41c:	0a1b      	lsrs	r3, r3, #8
 800e41e:	b29b      	uxth	r3, r3
 800e420:	b21b      	sxth	r3, r3
 800e422:	4313      	orrs	r3, r2
 800e424:	b21b      	sxth	r3, r3
 800e426:	b29b      	uxth	r3, r3
 800e428:	60bb      	str	r3, [r7, #8]
		*ppucRecvData += lUrgentLength;
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	681a      	ldr	r2, [r3, #0]
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	441a      	add	r2, r3
 800e432:	683b      	ldr	r3, [r7, #0]
 800e434:	601a      	str	r2, [r3, #0]
		lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 800e436:	68b9      	ldr	r1, [r7, #8]
 800e438:	69f8      	ldr	r0, [r7, #28]
 800e43a:	f7fe fcaf 	bl	800cd9c <FreeRTOS_min_int32>
 800e43e:	4602      	mov	r2, r0
 800e440:	69fb      	ldr	r3, [r7, #28]
 800e442:	1a9b      	subs	r3, r3, r2
 800e444:	61fb      	str	r3, [r7, #28]
	}

	return ( BaseType_t ) lReceiveLength;
 800e446:	69fb      	ldr	r3, [r7, #28]
}
 800e448:	4618      	mov	r0, r3
 800e44a:	3720      	adds	r7, #32
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}

0800e450 <prvStoreRxData>:
 * The second thing is to do is check if the payload data may be accepted
 * If so, they will be added to the reception queue.
 */
static BaseType_t prvStoreRxData( FreeRTOS_Socket_t *pxSocket, uint8_t *pucRecvData,
	NetworkBufferDescriptor_t *pxNetworkBuffer, uint32_t ulReceiveLength )
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b08c      	sub	sp, #48	; 0x30
 800e454:	af00      	add	r7, sp, #0
 800e456:	60f8      	str	r0, [r7, #12]
 800e458:	60b9      	str	r1, [r7, #8]
 800e45a:	607a      	str	r2, [r7, #4]
 800e45c:	603b      	str	r3, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	699b      	ldr	r3, [r3, #24]
 800e462:	627b      	str	r3, [r7, #36]	; 0x24
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800e464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e466:	3322      	adds	r3, #34	; 0x22
 800e468:	623b      	str	r3, [r7, #32]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	33dc      	adds	r3, #220	; 0xdc
 800e46e:	61fb      	str	r3, [r7, #28]
uint32_t ulSequenceNumber, ulSpace;
int32_t lOffset, lStored;
BaseType_t xResult = 0;
 800e470:	2300      	movs	r3, #0
 800e472:	62bb      	str	r3, [r7, #40]	; 0x28

	ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800e474:	6a3b      	ldr	r3, [r7, #32]
 800e476:	685b      	ldr	r3, [r3, #4]
 800e478:	061a      	lsls	r2, r3, #24
 800e47a:	6a3b      	ldr	r3, [r7, #32]
 800e47c:	685b      	ldr	r3, [r3, #4]
 800e47e:	021b      	lsls	r3, r3, #8
 800e480:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e484:	431a      	orrs	r2, r3
 800e486:	6a3b      	ldr	r3, [r7, #32]
 800e488:	685b      	ldr	r3, [r3, #4]
 800e48a:	0a1b      	lsrs	r3, r3, #8
 800e48c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e490:	431a      	orrs	r2, r3
 800e492:	6a3b      	ldr	r3, [r7, #32]
 800e494:	685b      	ldr	r3, [r3, #4]
 800e496:	0e1b      	lsrs	r3, r3, #24
 800e498:	4313      	orrs	r3, r2
 800e49a:	61bb      	str	r3, [r7, #24]

	if( ( ulReceiveLength > 0u ) && ( pxSocket->u.xTCP.ucTCPState >= eSYN_RECEIVED ) )
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d03f      	beq.n	800e522 <prvStoreRxData+0xd2>
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e4a8:	2b03      	cmp	r3, #3
 800e4aa:	d93a      	bls.n	800e522 <prvStoreRxData+0xd2>

		If it can't be "accept"ed it may have to be stored and send a selective
		ack (SACK) option to confirm it.  In that case, xTCPWindowRxStore() will be
		called later to store an out-of-order packet (in case lOffset is
		negative). */
		if ( pxSocket->u.xTCP.rxStream )
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d006      	beq.n	800e4c2 <prvStoreRxData+0x72>
		{
			ulSpace = ( uint32_t )uxStreamBufferGetSpace ( pxSocket->u.xTCP.rxStream );
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f7fe fccc 	bl	800ce56 <uxStreamBufferGetSpace>
 800e4be:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e4c0:	e002      	b.n	800e4c8 <prvStoreRxData+0x78>
		}
		else
		{
			ulSpace = ( uint32_t )pxSocket->u.xTCP.uxRxStreamSize;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4c6:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulReceiveLength, ulSpace );
 800e4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ca:	683a      	ldr	r2, [r7, #0]
 800e4cc:	69b9      	ldr	r1, [r7, #24]
 800e4ce:	69f8      	ldr	r0, [r7, #28]
 800e4d0:	f001 fa46 	bl	800f960 <lTCPWindowRxCheck>
 800e4d4:	6178      	str	r0, [r7, #20]

		if( lOffset >= 0 )
 800e4d6:	697b      	ldr	r3, [r7, #20]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	db10      	blt.n	800e4fe <prvStoreRxData+0xae>
		{
			/* New data has arrived and may be made available to the user.  See
			if the head marker in rxStream may be advanced,	only if lOffset == 0.
			In case the low-water mark is reached, bLowWater will be set
			"low-water" here stands for "little space". */
			lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRecvData, ulReceiveLength );
 800e4dc:	6979      	ldr	r1, [r7, #20]
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	68ba      	ldr	r2, [r7, #8]
 800e4e2:	68f8      	ldr	r0, [r7, #12]
 800e4e4:	f7fe f8e8 	bl	800c6b8 <lTCPAddRxdata>
 800e4e8:	6138      	str	r0, [r7, #16]

			if( lStored != ( int32_t ) ulReceiveLength )
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	693a      	ldr	r2, [r7, #16]
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	d005      	beq.n	800e4fe <prvStoreRxData+0xae>
				FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %ld / %lu bytes??\n", lStored, ulReceiveLength ) );

				/* Received data could not be stored.  The socket's flag
				bMallocError has been set.  The socket now has the status
				eCLOSE_WAIT and a RST packet will be sent back. */
				prvTCPSendReset( pxNetworkBuffer );
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f000 fc24 	bl	800ed40 <prvTCPSendReset>
				xResult = -1;
 800e4f8:	f04f 33ff 	mov.w	r3, #4294967295
 800e4fc:	62bb      	str	r3, [r7, #40]	; 0x28
		#if( ipconfigUSE_TCP_WIN == 1 )
		{
			/* Now lTCPAddRxdata() will move the rxHead pointer forward
			so data becomes available to the user immediately
			In case the low-water mark is reached, bLowWater will be set. */
			if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0 ) )
 800e4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e500:	2b00      	cmp	r3, #0
 800e502:	d113      	bne.n	800e52c <prvStoreRxData+0xdc>
 800e504:	69fb      	ldr	r3, [r7, #28]
 800e506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d00f      	beq.n	800e52c <prvStoreRxData+0xdc>
			{
				lTCPAddRxdata( pxSocket, 0ul, NULL, pxTCPWindow->ulUserDataLength );
 800e50c:	69fb      	ldr	r3, [r7, #28]
 800e50e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e510:	2200      	movs	r2, #0
 800e512:	2100      	movs	r1, #0
 800e514:	68f8      	ldr	r0, [r7, #12]
 800e516:	f7fe f8cf 	bl	800c6b8 <lTCPAddRxdata>
				pxTCPWindow->ulUserDataLength = 0;
 800e51a:	69fb      	ldr	r3, [r7, #28]
 800e51c:	2200      	movs	r2, #0
 800e51e:	631a      	str	r2, [r3, #48]	; 0x30
			if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0 ) )
 800e520:	e004      	b.n	800e52c <prvStoreRxData+0xdc>
		}
		#endif /* ipconfigUSE_TCP_WIN */
	}
	else
	{
		pxTCPWindow->ucOptionLength = 0u;
 800e522:	69fb      	ldr	r3, [r7, #28]
 800e524:	2200      	movs	r2, #0
 800e526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800e52a:	e000      	b.n	800e52e <prvStoreRxData+0xde>
			if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0 ) )
 800e52c:	bf00      	nop
	}

	return xResult;
 800e52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800e530:	4618      	mov	r0, r3
 800e532:	3730      	adds	r7, #48	; 0x30
 800e534:	46bd      	mov	sp, r7
 800e536:	bd80      	pop	{r7, pc}

0800e538 <prvSetOptions>:
/*-----------------------------------------------------------*/

/* Set the TCP options (if any) for the outgoing packet. */
static UBaseType_t prvSetOptions( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b086      	sub	sp, #24
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
 800e540:	6039      	str	r1, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	699b      	ldr	r3, [r3, #24]
 800e546:	613b      	str	r3, [r7, #16]
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800e548:	693b      	ldr	r3, [r7, #16]
 800e54a:	3322      	adds	r3, #34	; 0x22
 800e54c:	60fb      	str	r3, [r7, #12]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	33dc      	adds	r3, #220	; 0xdc
 800e552:	60bb      	str	r3, [r7, #8]
UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e55a:	617b      	str	r3, [r7, #20]

	#if(	ipconfigUSE_TCP_WIN == 1 )
		if( uxOptionsLength != 0u )
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d011      	beq.n	800e586 <prvSetOptions+0x4e>
					pxSocket->usLocalPort,
					pxSocket->u.xTCP.usRemotePort,
					uxOptionsLength,
					FreeRTOS_ntohl( pxTCPWindow->ulOptionsData[ 1 ] ) - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber,
					FreeRTOS_ntohl( pxTCPWindow->ulOptionsData[ 2 ] ) - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ) );
			memcpy( pxTCPHeader->ucOptdata, pxTCPWindow->ulOptionsData, ( size_t ) uxOptionsLength );
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	f103 0014 	add.w	r0, r3, #20
 800e568:	68bb      	ldr	r3, [r7, #8]
 800e56a:	3380      	adds	r3, #128	; 0x80
 800e56c:	697a      	ldr	r2, [r7, #20]
 800e56e:	4619      	mov	r1, r3
 800e570:	f002 fbf5 	bl	8010d5e <memcpy>

			/* The header length divided by 4, goes into the higher nibble,
			effectively a shift-left 2. */
			pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800e574:	697b      	ldr	r3, [r7, #20]
 800e576:	b2db      	uxtb	r3, r3
 800e578:	3314      	adds	r3, #20
 800e57a:	b2db      	uxtb	r3, r3
 800e57c:	009b      	lsls	r3, r3, #2
 800e57e:	b2da      	uxtb	r2, r3
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	731a      	strb	r2, [r3, #12]
 800e584:	e031      	b.n	800e5ea <prvSetOptions+0xb2>
		}
		else
	#endif	/* ipconfigUSE_TCP_WIN */
	if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e58c:	2b04      	cmp	r3, #4
 800e58e:	d92c      	bls.n	800e5ea <prvSetOptions+0xb2>
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e596:	f003 0301 	and.w	r3, r3, #1
 800e59a:	b2db      	uxtb	r3, r3
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d024      	beq.n	800e5ea <prvSetOptions+0xb2>
	{
		/* TCP options must be sent because the MSS has changed. */
		pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 800e5a0:	687a      	ldr	r2, [r7, #4]
 800e5a2:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800e5a6:	f36f 0300 	bfc	r3, #0, #1
 800e5aa:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
		if( xTCPWindowLoggingLevel >= 0 )
		{
			FreeRTOS_debug_printf( ( "MSS: sending %d\n", pxSocket->u.xTCP.usCurMSS ) );
		}

		pxTCPHeader->ucOptdata[ 0 ] = TCP_OPT_MSS;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	2202      	movs	r2, #2
 800e5b2:	751a      	strb	r2, [r3, #20]
		pxTCPHeader->ucOptdata[ 1 ] = TCP_OPT_MSS_LEN;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	2204      	movs	r2, #4
 800e5b8:	755a      	strb	r2, [r3, #21]
		pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) >> 8 );
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e5c0:	0a1b      	lsrs	r3, r3, #8
 800e5c2:	b29b      	uxth	r3, r3
 800e5c4:	b2da      	uxtb	r2, r3
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	759a      	strb	r2, [r3, #22]
		pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) & 0xffu );
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e5d0:	b2da      	uxtb	r2, r3
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	75da      	strb	r2, [r3, #23]
		uxOptionsLength = 4u;
 800e5d6:	2304      	movs	r3, #4
 800e5d8:	617b      	str	r3, [r7, #20]
		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800e5da:	697b      	ldr	r3, [r7, #20]
 800e5dc:	b2db      	uxtb	r3, r3
 800e5de:	3314      	adds	r3, #20
 800e5e0:	b2db      	uxtb	r3, r3
 800e5e2:	009b      	lsls	r3, r3, #2
 800e5e4:	b2da      	uxtb	r2, r3
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	731a      	strb	r2, [r3, #12]
	}

	return uxOptionsLength;
 800e5ea:	697b      	ldr	r3, [r7, #20]
}
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	3718      	adds	r7, #24
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <prvHandleSynReceived>:
 * Called from the states: eSYN_RECEIVED and eCONNECT_SYN
 * If the flags received are correct, the socket will move to eESTABLISHED.
 */
static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer,
	uint32_t ulReceiveLength, UBaseType_t uxOptionsLength )
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b08c      	sub	sp, #48	; 0x30
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	60f8      	str	r0, [r7, #12]
 800e5fc:	60b9      	str	r1, [r7, #8]
 800e5fe:	607a      	str	r2, [r7, #4]
 800e600:	603b      	str	r3, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800e602:	68bb      	ldr	r3, [r7, #8]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	699b      	ldr	r3, [r3, #24]
 800e608:	627b      	str	r3, [r7, #36]	; 0x24
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800e60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e60c:	3322      	adds	r3, #34	; 0x22
 800e60e:	623b      	str	r3, [r7, #32]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	33dc      	adds	r3, #220	; 0xdc
 800e614:	61fb      	str	r3, [r7, #28]
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800e616:	6a3b      	ldr	r3, [r7, #32]
 800e618:	7b5b      	ldrb	r3, [r3, #13]
 800e61a:	76fb      	strb	r3, [r7, #27]
uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800e61c:	6a3b      	ldr	r3, [r7, #32]
 800e61e:	685b      	ldr	r3, [r3, #4]
 800e620:	061a      	lsls	r2, r3, #24
 800e622:	6a3b      	ldr	r3, [r7, #32]
 800e624:	685b      	ldr	r3, [r3, #4]
 800e626:	021b      	lsls	r3, r3, #8
 800e628:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e62c:	431a      	orrs	r2, r3
 800e62e:	6a3b      	ldr	r3, [r7, #32]
 800e630:	685b      	ldr	r3, [r3, #4]
 800e632:	0a1b      	lsrs	r3, r3, #8
 800e634:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e638:	431a      	orrs	r2, r3
 800e63a:	6a3b      	ldr	r3, [r7, #32]
 800e63c:	685b      	ldr	r3, [r3, #4]
 800e63e:	0e1b      	lsrs	r3, r3, #24
 800e640:	4313      	orrs	r3, r2
 800e642:	617b      	str	r3, [r7, #20]
BaseType_t xSendLength = 0;
 800e644:	2300      	movs	r3, #0
 800e646:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Either expect a ACK or a SYN+ACK. */
	uint16_t usExpect = ( uint16_t ) ipTCP_FLAG_ACK;
 800e648:	2310      	movs	r3, #16
 800e64a:	857b      	strh	r3, [r7, #42]	; 0x2a
	if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e652:	2b02      	cmp	r3, #2
 800e654:	d103      	bne.n	800e65e <prvHandleSynReceived+0x6a>
	{
		usExpect |= ( uint16_t ) ipTCP_FLAG_SYN;
 800e656:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e658:	f043 0302 	orr.w	r3, r3, #2
 800e65c:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	if( ( ucTCPFlags & 0x17u ) != usExpect )
 800e65e:	7efb      	ldrb	r3, [r7, #27]
 800e660:	f003 0217 	and.w	r2, r3, #23
 800e664:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e666:	429a      	cmp	r2, r3
 800e668:	d016      	beq.n	800e698 <prvHandleSynReceived+0xa4>
		/* eSYN_RECEIVED: flags 0010 expected, not 0002. */
		/* eSYN_RECEIVED: flags ACK  expected, not SYN. */
		FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X\n",
			pxSocket->u.xTCP.ucTCPState == eSYN_RECEIVED ? "eSYN_RECEIVED" : "eCONNECT_SYN",
			usExpect, ucTCPFlags ) );
		vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800e66a:	2108      	movs	r1, #8
 800e66c:	68f8      	ldr	r0, [r7, #12]
 800e66e:	f7ff fa92 	bl	800db96 <vTCPStateChange>
		pxTCPHeader->ucTCPFlags |= ipTCP_FLAG_RST;
 800e672:	6a3b      	ldr	r3, [r7, #32]
 800e674:	7b5b      	ldrb	r3, [r3, #13]
 800e676:	f043 0304 	orr.w	r3, r3, #4
 800e67a:	b2da      	uxtb	r2, r3
 800e67c:	6a3b      	ldr	r3, [r7, #32]
 800e67e:	735a      	strb	r2, [r3, #13]
		xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	3328      	adds	r3, #40	; 0x28
 800e684:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	b2db      	uxtb	r3, r3
 800e68a:	3314      	adds	r3, #20
 800e68c:	b2db      	uxtb	r3, r3
 800e68e:	009b      	lsls	r3, r3, #2
 800e690:	b2da      	uxtb	r2, r3
 800e692:	6a3b      	ldr	r3, [r7, #32]
 800e694:	731a      	strb	r2, [r3, #12]
 800e696:	e069      	b.n	800e76c <prvHandleSynReceived+0x178>
	}
	else
	{
		pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800e69c:	69fb      	ldr	r3, [r7, #28]
 800e69e:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800e6a6:	69fb      	ldr	r3, [r7, #28]
 800e6a8:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8

		if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e6b2:	2b02      	cmp	r3, #2
 800e6b4:	d125      	bne.n	800e702 <prvHandleSynReceived+0x10e>
		{
			TCPPacket_t *pxLastTCPPacket = ( TCPPacket_t * ) ( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	3382      	adds	r3, #130	; 0x82
 800e6ba:	613b      	str	r3, [r7, #16]

			/* Clear the SYN flag in lastPacket. */
			pxLastTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_ACK;
 800e6bc:	693b      	ldr	r3, [r7, #16]
 800e6be:	2210      	movs	r2, #16
 800e6c0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

			/* This socket was the one connecting actively so now perofmr the
			synchronisation. */
			vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
				ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTCP.usCurMSS );
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
			vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800e6d6:	6979      	ldr	r1, [r7, #20]
 800e6d8:	f001 f89c 	bl	800f814 <vTCPWindowInit>
			pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1u;
 800e6dc:	697b      	ldr	r3, [r7, #20]
 800e6de:	1c5a      	adds	r2, r3, #1
 800e6e0:	69fb      	ldr	r3, [r7, #28]
 800e6e2:	619a      	str	r2, [r3, #24]
 800e6e4:	69fb      	ldr	r3, [r7, #28]
 800e6e6:	699a      	ldr	r2, [r3, #24]
 800e6e8:	69fb      	ldr	r3, [r7, #28]
 800e6ea:	611a      	str	r2, [r3, #16]
			pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 800e6ec:	69fb      	ldr	r3, [r7, #28]
 800e6ee:	6a1b      	ldr	r3, [r3, #32]
 800e6f0:	1c5a      	adds	r2, r3, #1
 800e6f2:	69fb      	ldr	r3, [r7, #28]
 800e6f4:	621a      	str	r2, [r3, #32]
			pxTCPWindow->ulNextTxSequenceNumber++;
 800e6f6:	69fb      	ldr	r3, [r7, #28]
 800e6f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6fa:	1c5a      	adds	r2, r3, #1
 800e6fc:	69fb      	ldr	r3, [r7, #28]
 800e6fe:	635a      	str	r2, [r3, #52]	; 0x34
 800e700:	e005      	b.n	800e70e <prvHandleSynReceived+0x11a>
		}
		else if( ulReceiveLength == 0u )
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d102      	bne.n	800e70e <prvHandleSynReceived+0x11a>
		{
			pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 800e708:	69fb      	ldr	r3, [r7, #28]
 800e70a:	697a      	ldr	r2, [r7, #20]
 800e70c:	611a      	str	r2, [r3, #16]
		}

		/* The SYN+ACK has been confirmed, increase the next sequence number by
		1. */
		pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1u;
 800e70e:	69fb      	ldr	r3, [r7, #28]
 800e710:	69db      	ldr	r3, [r3, #28]
 800e712:	1c5a      	adds	r2, r3, #1
 800e714:	69fb      	ldr	r3, [r7, #28]
 800e716:	62da      	str	r2, [r3, #44]	; 0x2c
				pxSocket->u.xTCP.usRemotePort,
				( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
		}
		#endif /* ipconfigUSE_TCP_WIN */

		if( ( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN ) || ( ulReceiveLength != 0u ) )
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e71e:	2b02      	cmp	r3, #2
 800e720:	d002      	beq.n	800e728 <prvHandleSynReceived+0x134>
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d00d      	beq.n	800e744 <prvHandleSynReceived+0x150>
		{
			pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 800e728:	6a3b      	ldr	r3, [r7, #32]
 800e72a:	2210      	movs	r2, #16
 800e72c:	735a      	strb	r2, [r3, #13]
			xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	3328      	adds	r3, #40	; 0x28
 800e732:	62fb      	str	r3, [r7, #44]	; 0x2c
			pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	b2db      	uxtb	r3, r3
 800e738:	3314      	adds	r3, #20
 800e73a:	b2db      	uxtb	r3, r3
 800e73c:	009b      	lsls	r3, r3, #2
 800e73e:	b2da      	uxtb	r2, r3
 800e740:	6a3b      	ldr	r3, [r7, #32]
 800e742:	731a      	strb	r2, [r3, #12]
		}
		#if( ipconfigUSE_TCP_WIN != 0 )
		{
			if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e74a:	f003 0310 	and.w	r3, r3, #16
 800e74e:	b2db      	uxtb	r3, r3
 800e750:	2b00      	cmp	r3, #0
 800e752:	d107      	bne.n	800e764 <prvHandleSynReceived+0x170>
			{
				/* The other party did not send a scaling factor.
				A shifting factor in this side must be canceled. */
				pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	2200      	movs	r2, #0
 800e758:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
				pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	2200      	movs	r2, #0
 800e760:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
			}
		}
		#endif /* ipconfigUSE_TCP_WIN */
		/* This was the third step of connecting: SYN, SYN+ACK, ACK	so now the
		connection is established. */
		vTCPStateChange( pxSocket, eESTABLISHED );
 800e764:	2105      	movs	r1, #5
 800e766:	68f8      	ldr	r0, [r7, #12]
 800e768:	f7ff fa15 	bl	800db96 <vTCPStateChange>
	}

	return xSendLength;
 800e76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3730      	adds	r7, #48	; 0x30
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}

0800e776 <prvHandleEstablished>:
 * the code will check if it may be accepted, i.e. if all expected data has been
 * completely received.
 */
static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer,
	uint32_t ulReceiveLength, UBaseType_t uxOptionsLength )
{
 800e776:	b580      	push	{r7, lr}
 800e778:	b092      	sub	sp, #72	; 0x48
 800e77a:	af02      	add	r7, sp, #8
 800e77c:	60f8      	str	r0, [r7, #12]
 800e77e:	60b9      	str	r1, [r7, #8]
 800e780:	607a      	str	r2, [r7, #4]
 800e782:	603b      	str	r3, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	699b      	ldr	r3, [r3, #24]
 800e78a:	637b      	str	r3, [r7, #52]	; 0x34
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800e78c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e78e:	3322      	adds	r3, #34	; 0x22
 800e790:	633b      	str	r3, [r7, #48]	; 0x30
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	33dc      	adds	r3, #220	; 0xdc
 800e796:	62fb      	str	r3, [r7, #44]	; 0x2c
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800e798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e79a:	7b5b      	ldrb	r3, [r3, #13]
 800e79c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount;
 800e7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a2:	685b      	ldr	r3, [r3, #4]
 800e7a4:	061a      	lsls	r2, r3, #24
 800e7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a8:	685b      	ldr	r3, [r3, #4]
 800e7aa:	021b      	lsls	r3, r3, #8
 800e7ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e7b0:	431a      	orrs	r2, r3
 800e7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b4:	685b      	ldr	r3, [r3, #4]
 800e7b6:	0a1b      	lsrs	r3, r3, #8
 800e7b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e7bc:	431a      	orrs	r2, r3
 800e7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c0:	685b      	ldr	r3, [r3, #4]
 800e7c2:	0e1b      	lsrs	r3, r3, #24
 800e7c4:	4313      	orrs	r3, r2
 800e7c6:	627b      	str	r3, [r7, #36]	; 0x24
BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	63bb      	str	r3, [r7, #56]	; 0x38
int32_t lDistance, lSendResult;

	/* Remember the window size the peer is advertising. */
	pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 800e7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d2:	89db      	ldrh	r3, [r3, #14]
 800e7d4:	b29b      	uxth	r3, r3
 800e7d6:	021b      	lsls	r3, r3, #8
 800e7d8:	b21a      	sxth	r2, r3
 800e7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7dc:	89db      	ldrh	r3, [r3, #14]
 800e7de:	b29b      	uxth	r3, r3
 800e7e0:	0a1b      	lsrs	r3, r3, #8
 800e7e2:	b29b      	uxth	r3, r3
 800e7e4:	b21b      	sxth	r3, r3
 800e7e6:	4313      	orrs	r3, r2
 800e7e8:	b21b      	sxth	r3, r3
 800e7ea:	b29b      	uxth	r3, r3
 800e7ec:	461a      	mov	r2, r3
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	#if( ipconfigUSE_TCP_WIN != 0 )
	{
		pxSocket->u.xTCP.ulWindowSize =
			( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e7fa:	68fa      	ldr	r2, [r7, #12]
 800e7fc:	f892 20ca 	ldrb.w	r2, [r2, #202]	; 0xca
 800e800:	fa03 f202 	lsl.w	r2, r3, r2
		pxSocket->u.xTCP.ulWindowSize =
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	}
	#endif

	if( ( ucTCPFlags & ( uint8_t ) ipTCP_FLAG_ACK ) != 0u )
 800e80a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e80e:	f003 0310 	and.w	r3, r3, #16
 800e812:	2b00      	cmp	r3, #0
 800e814:	d040      	beq.n	800e898 <prvHandleEstablished+0x122>
	{
		ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulAckNr ) );
 800e816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e818:	f8d3 302a 	ldr.w	r3, [r3, #42]	; 0x2a
 800e81c:	061a      	lsls	r2, r3, #24
 800e81e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e820:	f8d3 302a 	ldr.w	r3, [r3, #42]	; 0x2a
 800e824:	021b      	lsls	r3, r3, #8
 800e826:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e82a:	431a      	orrs	r2, r3
 800e82c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e82e:	f8d3 302a 	ldr.w	r3, [r3, #42]	; 0x2a
 800e832:	0a1b      	lsrs	r3, r3, #8
 800e834:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e838:	431a      	orrs	r2, r3
 800e83a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e83c:	f8d3 302a 	ldr.w	r3, [r3, #42]	; 0x2a
 800e840:	0e1b      	lsrs	r3, r3, #24
 800e842:	4313      	orrs	r3, r2
 800e844:	4619      	mov	r1, r3
 800e846:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e848:	f001 fcda 	bl	8010200 <ulTCPWindowTxAck>
 800e84c:	6238      	str	r0, [r7, #32]

		/* ulTCPWindowTxAck() returns the number of bytes which have been acked,
		starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
		txStream. */
		if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0u ) )
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e852:	2b00      	cmp	r3, #0
 800e854:	d020      	beq.n	800e898 <prvHandleEstablished+0x122>
 800e856:	6a3b      	ldr	r3, [r7, #32]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d01d      	beq.n	800e898 <prvHandleEstablished+0x122>
		{
			/* Just advancing the tail index, 'ulCount' bytes have been
			confirmed, and because there is new space in the txStream, the
			user/owner should be woken up. */
			/* _HT_ : only in case the socket's waiting? */
			if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0u, NULL, ( size_t ) ulCount, pdFALSE ) != 0u )
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800e860:	2300      	movs	r3, #0
 800e862:	9300      	str	r3, [sp, #0]
 800e864:	6a3b      	ldr	r3, [r7, #32]
 800e866:	2200      	movs	r2, #0
 800e868:	2100      	movs	r1, #0
 800e86a:	f7fe fa13 	bl	800cc94 <uxStreamBufferGet>
 800e86e:	4603      	mov	r3, r0
 800e870:	2b00      	cmp	r3, #0
 800e872:	d011      	beq.n	800e898 <prvHandleEstablished+0x122>
			{
				pxSocket->xEventBits |= eSOCKET_SEND;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	f043 0202 	orr.w	r2, r3, #2
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	601a      	str	r2, [r3, #0]

				#if ipconfigSUPPORT_SELECT_FUNCTION == 1
				{
					if( ( pxSocket->xSelectBits & eSELECT_WRITE ) != 0 )
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e884:	f003 0302 	and.w	r3, r3, #2
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d005      	beq.n	800e898 <prvHandleEstablished+0x122>
					{
						pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	601a      	str	r2, [r3, #0]
		}
	}

	/* If this socket has a stream for transmission, add the data to the
	outgoing segment(s). */
	if( pxSocket->u.xTCP.txStream != NULL )
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d002      	beq.n	800e8a6 <prvHandleEstablished+0x130>
	{
		prvTCPAddTxData( pxSocket );
 800e8a0:	68f8      	ldr	r0, [r7, #12]
 800e8a2:	f7ff fc9f 	bl	800e1e4 <prvTCPAddTxData>
	}

	pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800e8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a8:	6a1a      	ldr	r2, [r3, #32]
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) ipTCP_FLAG_FIN ) != 0u ) )
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e8b6:	f003 0320 	and.w	r3, r3, #32
 800e8ba:	b2db      	uxtb	r3, r3
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d105      	bne.n	800e8cc <prvHandleEstablished+0x156>
 800e8c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e8c4:	f003 0301 	and.w	r3, r3, #1
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d037      	beq.n	800e93c <prvHandleEstablished+0x1c6>
	{
		/* Peer is requesting to stop, see if we're really finished. */
		xMayClose = pdTRUE;
 800e8cc:	2301      	movs	r3, #1
 800e8ce:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Checks are only necessary if we haven't sent a FIN yet. */
		if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e8d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8da:	b2db      	uxtb	r3, r3
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d11c      	bne.n	800e91a <prvHandleEstablished+0x1a4>
		{
			/* xTCPWindowTxDone returns true when all Tx queues are empty. */
			bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 800e8e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e8e2:	f000 fea5 	bl	800f630 <xTCPWindowRxEmpty>
 800e8e6:	61f8      	str	r0, [r7, #28]
			bTxDone     = xTCPWindowTxDone( pxTCPWindow );
 800e8e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e8ea:	f001 f9e3 	bl	800fcb4 <xTCPWindowTxDone>
 800e8ee:	61b8      	str	r0, [r7, #24]

			if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 800e8f0:	69fb      	ldr	r3, [r7, #28]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d002      	beq.n	800e8fc <prvHandleEstablished+0x186>
 800e8f6:	69bb      	ldr	r3, [r7, #24]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d102      	bne.n	800e902 <prvHandleEstablished+0x18c>
				/* Refusing FIN: Rx incomp 1 optlen 4 tx done 1. */
				FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %lu tx done %ld\n",
					pxSocket->usLocalPort,
					pxSocket->u.xTCP.usRemotePort,
					bRxComplete, bTxDone ) );
				xMayClose = pdFALSE;
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	63bb      	str	r3, [r7, #56]	; 0x38
 800e900:	e00b      	b.n	800e91a <prvHandleEstablished+0x1a4>
			}
			else
			{
				lDistance = ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber );
 800e902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	441a      	add	r2, r3
 800e908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e90a:	691b      	ldr	r3, [r3, #16]
 800e90c:	1ad3      	subs	r3, r2, r3
 800e90e:	617b      	str	r3, [r7, #20]

				if( lDistance > 1 )
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	2b01      	cmp	r3, #1
 800e914:	dd01      	ble.n	800e91a <prvHandleEstablished+0x1a4>
				{
					FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %ld (cur %lu high %lu)\n",
						lDistance, pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber,
						pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );

					xMayClose = pdFALSE;
 800e916:	2300      	movs	r3, #0
 800e918:	63bb      	str	r3, [r7, #56]	; 0x38
			FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %ld (Rx %lu Len %ld, Tx %lu)\n",
				xMayClose, ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber, ulReceiveLength,
				pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ) );
		}

		if( xMayClose != pdFALSE )
 800e91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d00d      	beq.n	800e93c <prvHandleEstablished+0x1c6>
		{
			pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 800e920:	68fa      	ldr	r2, [r7, #12]
 800e922:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800e926:	f043 0320 	orr.w	r3, r3, #32
 800e92a:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
			xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	4619      	mov	r1, r3
 800e934:	68f8      	ldr	r0, [r7, #12]
 800e936:	f7ff fc7f 	bl	800e238 <prvTCPHandleFin>
 800e93a:	63f8      	str	r0, [r7, #60]	; 0x3c
		}
	}

	if( xMayClose == pdFALSE )
 800e93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d12a      	bne.n	800e998 <prvHandleEstablished+0x222>
	{
		pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 800e942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e944:	2210      	movs	r2, #16
 800e946:	735a      	strb	r2, [r3, #13]

		if( ulReceiveLength != 0u )
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d016      	beq.n	800e97c <prvHandleEstablished+0x206>
		{
			xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	3328      	adds	r3, #40	; 0x28
 800e952:	63fb      	str	r3, [r7, #60]	; 0x3c
			/* TCP-offsett equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
			pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	b2db      	uxtb	r3, r3
 800e958:	3314      	adds	r3, #20
 800e95a:	b2db      	uxtb	r3, r3
 800e95c:	009b      	lsls	r3, r3, #2
 800e95e:	b2da      	uxtb	r2, r3
 800e960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e962:	731a      	strb	r2, [r3, #12]

			if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e96a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e96e:	b2db      	uxtb	r3, r3
 800e970:	2b00      	cmp	r3, #0
 800e972:	d003      	beq.n	800e97c <prvHandleEstablished+0x206>
			{
				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800e974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e97a:	621a      	str	r2, [r3, #32]
		/* Now get data to be transmitted. */
		/* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
		can not	send-out both TCP options and also a full packet. Sending
		options (SACK) is always more urgent than sending data, which can be
		sent later. */
		if( uxOptionsLength == 0u )
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d10a      	bne.n	800e998 <prvHandleEstablished+0x222>
		{
			/* prvTCPPrepareSend might allocate a bigger network buffer, if
			necessary. */
			lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800e982:	683a      	ldr	r2, [r7, #0]
 800e984:	68b9      	ldr	r1, [r7, #8]
 800e986:	68f8      	ldr	r0, [r7, #12]
 800e988:	f7ff fa44 	bl	800de14 <prvTCPPrepareSend>
 800e98c:	6138      	str	r0, [r7, #16]
			if( lSendResult > 0 )
 800e98e:	693b      	ldr	r3, [r7, #16]
 800e990:	2b00      	cmp	r3, #0
 800e992:	dd01      	ble.n	800e998 <prvHandleEstablished+0x222>
			{
				xSendLength = ( BaseType_t ) lSendResult;
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}
	}

	return xSendLength;
 800e998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3740      	adds	r7, #64	; 0x40
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
	...

0800e9a4 <prvSendData>:
 * ipconfigUSE_TCP_WIN is defined, and if only an ACK must be sent, it will be
 * checked if it would better be postponed for efficiency.
 */
static BaseType_t prvSendData( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer,
	uint32_t ulReceiveLength, BaseType_t xSendLength )
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b08a      	sub	sp, #40	; 0x28
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	60f8      	str	r0, [r7, #12]
 800e9ac:	60b9      	str	r1, [r7, #8]
 800e9ae:	607a      	str	r2, [r7, #4]
 800e9b0:	603b      	str	r3, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	699b      	ldr	r3, [r3, #24]
 800e9b8:	623b      	str	r3, [r7, #32]
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800e9ba:	6a3b      	ldr	r3, [r7, #32]
 800e9bc:	3322      	adds	r3, #34	; 0x22
 800e9be:	61fb      	str	r3, [r7, #28]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	33dc      	adds	r3, #220	; 0xdc
 800e9c4:	61bb      	str	r3, [r7, #24]
		const int32_t lMinLength = 0;
	#else
		int32_t lMinLength;
	#endif
#endif
	pxSocket->u.xTCP.ulRxCurWinSize = pxTCPWindow->xSize.ulRxWindowLength -
 800e9c6:	69bb      	ldr	r3, [r7, #24]
 800e9c8:	685a      	ldr	r2, [r3, #4]
									 ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulCurrentSequenceNumber );
 800e9ca:	69bb      	ldr	r3, [r7, #24]
 800e9cc:	6919      	ldr	r1, [r3, #16]
 800e9ce:	69bb      	ldr	r3, [r7, #24]
 800e9d0:	699b      	ldr	r3, [r3, #24]
 800e9d2:	1acb      	subs	r3, r1, r3
	pxSocket->u.xTCP.ulRxCurWinSize = pxTCPWindow->xSize.ulRxWindowLength -
 800e9d4:	441a      	add	r2, r3
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	/* Free space in rxStream. */
	if( pxSocket->u.xTCP.rxStream != NULL )
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d006      	beq.n	800e9f2 <prvSendData+0x4e>
	{
		ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f7fe fa48 	bl	800ce7e <uxStreamBufferFrontSpace>
 800e9ee:	6278      	str	r0, [r7, #36]	; 0x24
 800e9f0:	e002      	b.n	800e9f8 <prvSendData+0x54>
	}
	else
	{
		ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9f6:	627b      	str	r3, [r7, #36]	; 0x24
	}

	pxSocket->u.xTCP.ulRxCurWinSize = FreeRTOS_min_uint32( ulFrontSpace, pxSocket->u.xTCP.ulRxCurWinSize );
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800e9fe:	4619      	mov	r1, r3
 800ea00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea02:	f7fe f9db 	bl	800cdbc <FreeRTOS_min_uint32>
 800ea06:	4602      	mov	r2, r0
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	/* Set the time-out field, so that we'll be called by the IP-task in case no
	next message will be received. */
	lRxSpace = (int32_t)( pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber );
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea12:	69bb      	ldr	r3, [r7, #24]
 800ea14:	691b      	ldr	r3, [r3, #16]
 800ea16:	1ad3      	subs	r3, r2, r3
 800ea18:	617b      	str	r3, [r7, #20]
	#if ipconfigUSE_TCP_WIN == 1
	{

		#if( ipconfigTCP_ACK_EARLIER_PACKET != 0 )
		{
			lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usCurMSS );
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ea20:	005b      	lsls	r3, r3, #1
 800ea22:	613b      	str	r3, [r7, #16]
		}
		#endif /* ipconfigTCP_ACK_EARLIER_PACKET */

		/* In case we're receiving data continuously, we might postpone sending
		an ACK to gain performance. */
		if( ( ulReceiveLength > 0 ) &&							/* Data was sent to this socket. */
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d04f      	beq.n	800eaca <prvSendData+0x126>
 800ea2a:	697a      	ldr	r2, [r7, #20]
 800ea2c:	693b      	ldr	r3, [r7, #16]
 800ea2e:	429a      	cmp	r2, r3
 800ea30:	db4b      	blt.n	800eaca <prvSendData+0x126>
			( lRxSpace >= lMinLength ) &&						/* There is Rx space for more data. */
			( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&	/* Not in a closure phase. */
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ea38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea3c:	b2db      	uxtb	r3, r3
			( lRxSpace >= lMinLength ) &&						/* There is Rx space for more data. */
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d143      	bne.n	800eaca <prvSendData+0x126>
			( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&	/* Not in a closure phase. */
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	2b28      	cmp	r3, #40	; 0x28
 800ea46:	d140      	bne.n	800eaca <prvSendData+0x126>
			( xSendLength == ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) ) && /* No Tx data or options to be sent. */
			( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) &&	/* Connection established. */
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
			( xSendLength == ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) ) && /* No Tx data or options to be sent. */
 800ea4e:	2b05      	cmp	r3, #5
 800ea50:	d13b      	bne.n	800eaca <prvSendData+0x126>
			( pxTCPHeader->ucTCPFlags == ipTCP_FLAG_ACK ) )		/* There are no other flags than an ACK. */
 800ea52:	69fb      	ldr	r3, [r7, #28]
 800ea54:	7b5b      	ldrb	r3, [r3, #13]
			( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) &&	/* Connection established. */
 800ea56:	2b10      	cmp	r3, #16
 800ea58:	d137      	bne.n	800eaca <prvSendData+0x126>
		{
			if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d00c      	beq.n	800ea80 <prvSendData+0xdc>
			{
				/* There was still a delayed in queue, delete it. */
				if( pxSocket->u.xTCP.pxAckMessage != 0 )
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d004      	beq.n	800ea78 <prvSendData+0xd4>
				{
					vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea72:	4618      	mov	r0, r3
 800ea74:	f001 fe5e 	bl	8010734 <vReleaseNetworkBufferAndDescriptor>
				}

				pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	681a      	ldr	r2, [r3, #0]
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	67da      	str	r2, [r3, #124]	; 0x7c
			}
			if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||	/* Received a small message. */
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ea86:	461a      	mov	r2, r3
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	d807      	bhi.n	800ea9e <prvSendData+0xfa>
				( lRxSpace < ( int32_t ) ( 2U * pxSocket->u.xTCP.usCurMSS ) ) )	/* There are less than 2 x MSS space in the Rx buffer. */
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ea94:	005b      	lsls	r3, r3, #1
 800ea96:	461a      	mov	r2, r3
			if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||	/* Received a small message. */
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	dd04      	ble.n	800eaa8 <prvSendData+0x104>
			{
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_MIN_TICKS( DELAYED_ACK_SHORT_DELAY_MS );
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	2202      	movs	r2, #2
 800eaa2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800eaa6:	e003      	b.n	800eab0 <prvSendData+0x10c>
			else
			{
				/* Normally a delayed ACK should wait 200 ms for a next incoming
				packet.  Only wait 20 ms here to gain performance.  A slow ACK
				for full-size message. */
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_MIN_TICKS( DELAYED_ACK_LONGER_DELAY_MS );
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	2214      	movs	r2, #20
 800eaac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			}

			if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) != pdFALSE ) )
 800eab0:	4b1a      	ldr	r3, [pc, #104]	; (800eb1c <prvSendData+0x178>)
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	2b01      	cmp	r3, #1
 800eab6:	dd02      	ble.n	800eabe <prvSendData+0x11a>
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800eabc:	2b17      	cmp	r3, #23
					pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
					xSendLength,
					pxSocket->u.xTCP.usTimeout, lRxSpace ) );
			}

			*ppxNetworkBuffer = NULL;
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	2200      	movs	r2, #0
 800eac2:	601a      	str	r2, [r3, #0]
			xSendLength = 0;
 800eac4:	2300      	movs	r3, #0
 800eac6:	603b      	str	r3, [r7, #0]
 800eac8:	e011      	b.n	800eaee <prvSendData+0x14a>
		}
		else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d00d      	beq.n	800eaee <prvSendData+0x14a>
		{
			/* As an ACK is not being delayed, remove any earlier delayed ACK
			message. */
			if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	429a      	cmp	r2, r3
 800eadc:	d004      	beq.n	800eae8 <prvSendData+0x144>
			{
				vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eae2:	4618      	mov	r0, r3
 800eae4:	f001 fe26 	bl	8010734 <vReleaseNetworkBufferAndDescriptor>
			}

			pxSocket->u.xTCP.pxAckMessage = NULL;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	2200      	movs	r2, #0
 800eaec:	67da      	str	r2, [r3, #124]	; 0x7c
		( void ) pxTCPHeader;
		( void ) lRxSpace;
	}
	#endif /* ipconfigUSE_TCP_WIN */

	if( xSendLength != 0 )
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d00d      	beq.n	800eb10 <prvSendData+0x16c>
	{
		if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) != pdFALSE ) )
 800eaf4:	4b09      	ldr	r3, [pc, #36]	; (800eb1c <prvSendData+0x178>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	2b01      	cmp	r3, #1
 800eafa:	dd02      	ble.n	800eb02 <prvSendData+0x15e>
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800eb00:	2b17      	cmp	r3, #23
				xSendLength ) );
		}

		/* Set the parameter 'xReleaseAfterSend' to the value of
		ipconfigZERO_COPY_TX_DRIVER. */
		prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	6819      	ldr	r1, [r3, #0]
 800eb06:	683a      	ldr	r2, [r7, #0]
 800eb08:	2300      	movs	r3, #0
 800eb0a:	68f8      	ldr	r0, [r7, #12]
 800eb0c:	f7fe fba2 	bl	800d254 <prvTCPReturnPacket>
			*ppxNetworkBuffer = NULL;
		}
		#endif
	}

	return xSendLength;
 800eb10:	683b      	ldr	r3, [r7, #0]
}
 800eb12:	4618      	mov	r0, r3
 800eb14:	3728      	adds	r7, #40	; 0x28
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}
 800eb1a:	bf00      	nop
 800eb1c:	20004ee0 	.word	0x20004ee0

0800eb20 <prvTCPHandleState>:
 *
 * As these functions are declared static, and they're called from one location
 * only, most compilers will inline them, thus avoiding a call and return.
 */
static BaseType_t prvTCPHandleState( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer )
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b08c      	sub	sp, #48	; 0x30
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	6039      	str	r1, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	699b      	ldr	r3, [r3, #24]
 800eb30:	62bb      	str	r3, [r7, #40]	; 0x28
TCPHeader_t *pxTCPHeader = &( pxTCPPacket->xTCPHeader );
 800eb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb34:	3322      	adds	r3, #34	; 0x22
 800eb36:	627b      	str	r3, [r7, #36]	; 0x24
BaseType_t xSendLength = 0;
 800eb38:	2300      	movs	r3, #0
 800eb3a:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t ulReceiveLength;	/* Number of bytes contained in the TCP message. */
uint8_t *pucRecvData;
uint32_t ulSequenceNumber = FreeRTOS_ntohl (pxTCPHeader->ulSequenceNumber);
 800eb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb3e:	685b      	ldr	r3, [r3, #4]
 800eb40:	061a      	lsls	r2, r3, #24
 800eb42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb44:	685b      	ldr	r3, [r3, #4]
 800eb46:	021b      	lsls	r3, r3, #8
 800eb48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eb4c:	431a      	orrs	r2, r3
 800eb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb50:	685b      	ldr	r3, [r3, #4]
 800eb52:	0a1b      	lsrs	r3, r3, #8
 800eb54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800eb58:	431a      	orrs	r2, r3
 800eb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb5c:	685b      	ldr	r3, [r3, #4]
 800eb5e:	0e1b      	lsrs	r3, r3, #24
 800eb60:	4313      	orrs	r3, r2
 800eb62:	623b      	str	r3, [r7, #32]
	/* uxOptionsLength: the size of the options to be sent (always a multiple of
	4 bytes)
	1. in the SYN phase, we shall communicate the MSS
	2. in case of a SACK, Selective ACK, ack a segment which comes in
	out-of-order. */
UBaseType_t uxOptionsLength = 0u;
 800eb64:	2300      	movs	r3, #0
 800eb66:	61fb      	str	r3, [r7, #28]
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800eb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb6a:	7b5b      	ldrb	r3, [r3, #13]
 800eb6c:	76fb      	strb	r3, [r7, #27]
TCPWindow_t *pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	33dc      	adds	r3, #220	; 0xdc
 800eb72:	617b      	str	r3, [r7, #20]

	/* First get the length and the position of the received data, if any.
	pucRecvData will point to the first byte of the TCP payload. */
	ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	f107 020c 	add.w	r2, r7, #12
 800eb7c:	4611      	mov	r1, r2
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f7ff fbff 	bl	800e382 <prvCheckRxData>
 800eb84:	4603      	mov	r3, r0
 800eb86:	613b      	str	r3, [r7, #16]

	if( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED )
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800eb8e:	2b04      	cmp	r3, #4
 800eb90:	d90c      	bls.n	800ebac <prvTCPHandleState+0x8c>
	{
		if ( pxTCPWindow->rx.ulCurrentSequenceNumber == ulSequenceNumber + 1u )
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	691a      	ldr	r2, [r3, #16]
 800eb96:	6a3b      	ldr	r3, [r7, #32]
 800eb98:	3301      	adds	r3, #1
 800eb9a:	429a      	cmp	r2, r3
 800eb9c:	d106      	bne.n	800ebac <prvTCPHandleState+0x8c>
		{
			/* This is most probably a keep-alive message from peer.  Setting
			'bWinChange' doesn't cause a window-size-change, the flag is used
			here to force sending an immediate ACK. */
			pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800eb9e:	687a      	ldr	r2, [r7, #4]
 800eba0:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800eba4:	f043 0301 	orr.w	r3, r3, #1
 800eba8:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
		}
	}

	/* Keep track of the highest sequence number that might be expected within
	this connection. */
	if( ( ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber ) ) > 0 )
 800ebac:	6a3a      	ldr	r2, [r7, #32]
 800ebae:	693b      	ldr	r3, [r7, #16]
 800ebb0:	441a      	add	r2, r3
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	699b      	ldr	r3, [r3, #24]
 800ebb6:	1ad3      	subs	r3, r2, r3
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	dd04      	ble.n	800ebc6 <prvTCPHandleState+0xa6>
	{
		pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800ebbc:	6a3a      	ldr	r2, [r7, #32]
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	441a      	add	r2, r3
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	619a      	str	r2, [r3, #24]
	}

	/* Storing data may result in a fatal error if malloc() fails. */
	if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 800ebc6:	68f9      	ldr	r1, [r7, #12]
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	681a      	ldr	r2, [r3, #0]
 800ebcc:	693b      	ldr	r3, [r7, #16]
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f7ff fc3e 	bl	800e450 <prvStoreRxData>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	da03      	bge.n	800ebe2 <prvTCPHandleState+0xc2>
	{
		xSendLength = -1;
 800ebda:	f04f 33ff 	mov.w	r3, #4294967295
 800ebde:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ebe0:	e09e      	b.n	800ed20 <prvTCPHandleState+0x200>
	}
	else
	{
		uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	4619      	mov	r1, r3
 800ebe8:	6878      	ldr	r0, [r7, #4]
 800ebea:	f7ff fca5 	bl	800e538 <prvSetOptions>
 800ebee:	61f8      	str	r0, [r7, #28]

		if( ( pxSocket->u.xTCP.ucTCPState == eSYN_RECEIVED ) && ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) == ipTCP_FLAG_SYN ) )
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800ebf6:	2b04      	cmp	r3, #4
 800ebf8:	d108      	bne.n	800ec0c <prvTCPHandleState+0xec>
 800ebfa:	7efb      	ldrb	r3, [r7, #27]
 800ebfc:	f003 031f 	and.w	r3, r3, #31
 800ec00:	2b02      	cmp	r3, #2
 800ec02:	d103      	bne.n	800ec0c <prvTCPHandleState+0xec>

			/* In eSYN_RECEIVED a simple ACK is expected, but apparently the
			'SYN+ACK' didn't arrive.  Step back to the previous state in which
			a first incoming SYN is handled.  The SYN was counted already so
			decrease it first. */
			vTCPStateChange( pxSocket, eSYN_FIRST );
 800ec04:	2103      	movs	r1, #3
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f7fe ffc5 	bl	800db96 <vTCPStateChange>
		}

		if( ( ( ucTCPFlags & ipTCP_FLAG_FIN ) != 0u ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 800ec0c:	7efb      	ldrb	r3, [r7, #27]
 800ec0e:	f003 0301 	and.w	r3, r3, #1
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d022      	beq.n	800ec5c <prvTCPHandleState+0x13c>
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ec1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ec20:	b2db      	uxtb	r3, r3
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d11a      	bne.n	800ec5c <prvTCPHandleState+0x13c>
		{
			/* It's the first time a FIN has been received, remember its
			sequence number. */
			pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800ec26:	6a3a      	ldr	r2, [r7, #32]
 800ec28:	693b      	ldr	r3, [r7, #16]
 800ec2a:	441a      	add	r2, r3
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	615a      	str	r2, [r3, #20]
			pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 800ec30:	687a      	ldr	r2, [r7, #4]
 800ec32:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800ec36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec3a:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

			/* Was peer the first one to send a FIN? */
			if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ec44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec48:	b2db      	uxtb	r3, r3
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d106      	bne.n	800ec5c <prvTCPHandleState+0x13c>
			{
				/* If so, don't send the-last-ACK. */
				pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 800ec4e:	687a      	ldr	r2, [r7, #4]
 800ec50:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800ec54:	f043 0302 	orr.w	r3, r3, #2
 800ec58:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
			}
		}

		switch (pxSocket->u.xTCP.ucTCPState)
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800ec62:	2b0b      	cmp	r3, #11
 800ec64:	d85b      	bhi.n	800ed1e <prvTCPHandleState+0x1fe>
 800ec66:	a201      	add	r2, pc, #4	; (adr r2, 800ec6c <prvTCPHandleState+0x14c>)
 800ec68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec6c:	0800ed1f 	.word	0x0800ed1f
 800ec70:	0800ed1f 	.word	0x0800ed1f
 800ec74:	0800ecef 	.word	0x0800ecef
 800ec78:	0800ec9d 	.word	0x0800ec9d
 800ec7c:	0800ecef 	.word	0x0800ecef
 800ec80:	0800ecff 	.word	0x0800ecff
 800ec84:	0800ed0f 	.word	0x0800ed0f
 800ec88:	0800ed0f 	.word	0x0800ed0f
 800ec8c:	0800ed1f 	.word	0x0800ed1f
 800ec90:	0800ed1f 	.word	0x0800ed1f
 800ec94:	0800ed0f 	.word	0x0800ed0f
 800ec98:	0800ed1f 	.word	0x0800ed1f
							socket. */
			{
				/* A new socket has been created, reply with a SYN+ACK.
				Acknowledge with seq+1 because the SYN is seen as pseudo data
				with len = 1. */
				uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPPacket );
 800ec9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ec9e:	6878      	ldr	r0, [r7, #4]
 800eca0:	f7fe ff01 	bl	800daa6 <prvSetSynAckOptions>
 800eca4:	61f8      	str	r0, [r7, #28]
				pxTCPHeader->ucTCPFlags = ipTCP_FLAG_SYN | ipTCP_FLAG_ACK;
 800eca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca8:	2212      	movs	r2, #18
 800ecaa:	735a      	strb	r2, [r3, #13]

				xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800ecac:	69fb      	ldr	r3, [r7, #28]
 800ecae:	3328      	adds	r3, #40	; 0x28
 800ecb0:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
				uxOptionsLength is a multiple of 4.  The complete expression is:
				ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
				pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800ecb2:	69fb      	ldr	r3, [r7, #28]
 800ecb4:	b2db      	uxtb	r3, r3
 800ecb6:	3314      	adds	r3, #20
 800ecb8:	b2db      	uxtb	r3, r3
 800ecba:	009b      	lsls	r3, r3, #2
 800ecbc:	b2da      	uxtb	r2, r3
 800ecbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc0:	731a      	strb	r2, [r3, #12]
				vTCPStateChange( pxSocket, eSYN_RECEIVED );
 800ecc2:	2104      	movs	r1, #4
 800ecc4:	6878      	ldr	r0, [r7, #4]
 800ecc6:	f7fe ff66 	bl	800db96 <vTCPStateChange>

				pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1u;
 800ecca:	6a3b      	ldr	r3, [r7, #32]
 800eccc:	1c5a      	adds	r2, r3, #1
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	619a      	str	r2, [r3, #24]
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	699a      	ldr	r2, [r3, #24]
 800ecd6:	697b      	ldr	r3, [r7, #20]
 800ecd8:	611a      	str	r2, [r3, #16]
				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1u; /* because we send a TCP_SYN. */
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	69db      	ldr	r3, [r3, #28]
 800ecde:	1c5a      	adds	r2, r3, #1
 800ece0:	697b      	ldr	r3, [r7, #20]
 800ece2:	635a      	str	r2, [r3, #52]	; 0x34
 800ece4:	697b      	ldr	r3, [r7, #20]
 800ece6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ece8:	697b      	ldr	r3, [r7, #20]
 800ecea:	621a      	str	r2, [r3, #32]
			}
			break;
 800ecec:	e018      	b.n	800ed20 <prvTCPHandleState+0x200>
		case eCONNECT_SYN:	/* (client) also called SYN_SENT: we've just send a
							SYN, expect	a SYN+ACK and send a ACK now. */
			/* Fall through */
		case eSYN_RECEIVED:	/* (server) we've had a SYN, replied with SYN+SCK
							expect a ACK and do nothing. */
			xSendLength = prvHandleSynReceived( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 800ecee:	69fb      	ldr	r3, [r7, #28]
 800ecf0:	693a      	ldr	r2, [r7, #16]
 800ecf2:	6839      	ldr	r1, [r7, #0]
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f7ff fc7d 	bl	800e5f4 <prvHandleSynReceived>
 800ecfa:	62f8      	str	r0, [r7, #44]	; 0x2c
			break;
 800ecfc:	e010      	b.n	800ed20 <prvTCPHandleState+0x200>
		case eESTABLISHED:	/* (server + client) an open connection, data
							received can be	delivered to the user. The normal
							state for the data transfer phase of the connection
							The closing states are also handled here with the
							use of some flags. */
			xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 800ecfe:	69fb      	ldr	r3, [r7, #28]
 800ed00:	693a      	ldr	r2, [r7, #16]
 800ed02:	6839      	ldr	r1, [r7, #0]
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f7ff fd36 	bl	800e776 <prvHandleEstablished>
 800ed0a:	62f8      	str	r0, [r7, #44]	; 0x2c
			break;
 800ed0c:	e008      	b.n	800ed20 <prvTCPHandleState+0x200>
			/* Fall through */
		case eFIN_WAIT_1:	/* (server + client) waiting for a connection termination request from the remote TCP,
							 * or an acknowledgement of the connection termination request previously sent. */
			/* Fall through */
		case eFIN_WAIT_2:	/* (server + client) waiting for a connection termination request from the remote TCP. */
			xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	4619      	mov	r1, r3
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f7ff fa8f 	bl	800e238 <prvTCPHandleFin>
 800ed1a:	62f8      	str	r0, [r7, #44]	; 0x2c
			break;
 800ed1c:	e000      	b.n	800ed20 <prvTCPHandleState+0x200>
							a MSL (maximum segment lifetime).]  These states are
							implemented implicitly by settings flags like
							'bFinSent', 'bFinRecv', and 'bFinAcked'. */
			break;
		default:
			break;
 800ed1e:	bf00      	nop
		}
	}

	if( xSendLength > 0 )
 800ed20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	dd06      	ble.n	800ed34 <prvTCPHandleState+0x214>
	{
		xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 800ed26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed28:	693a      	ldr	r2, [r7, #16]
 800ed2a:	6839      	ldr	r1, [r7, #0]
 800ed2c:	6878      	ldr	r0, [r7, #4]
 800ed2e:	f7ff fe39 	bl	800e9a4 <prvSendData>
 800ed32:	62f8      	str	r0, [r7, #44]	; 0x2c
	}

	return xSendLength;
 800ed34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	3730      	adds	r7, #48	; 0x30
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}
 800ed3e:	bf00      	nop

0800ed40 <prvTCPSendReset>:
/*-----------------------------------------------------------*/

static BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b084      	sub	sp, #16
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
	#if( ipconfigIGNORE_UNKNOWN_PACKETS == 0 )
	{
	TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	699b      	ldr	r3, [r3, #24]
 800ed4c:	60fb      	str	r3, [r7, #12]
	const BaseType_t xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + 0u );	/* Plus 0 options. */
 800ed4e:	2328      	movs	r3, #40	; 0x28
 800ed50:	60bb      	str	r3, [r7, #8]

		pxTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_ACK | ipTCP_FLAG_RST;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	2214      	movs	r2, #20
 800ed56:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER + 0u ) << 2;
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	2250      	movs	r2, #80	; 0x50
 800ed5e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

		prvTCPReturnPacket( NULL, pxNetworkBuffer, ( uint32_t ) xSendLength, pdFALSE );
 800ed62:	68ba      	ldr	r2, [r7, #8]
 800ed64:	2300      	movs	r3, #0
 800ed66:	6879      	ldr	r1, [r7, #4]
 800ed68:	2000      	movs	r0, #0
 800ed6a:	f7fe fa73 	bl	800d254 <prvTCPReturnPacket>

	/* Remove compiler warnings if ipconfigIGNORE_UNKNOWN_PACKETS == 1. */
	( void ) pxNetworkBuffer;

	/* The packet was not consumed. */
	return pdFAIL;
 800ed6e:	2300      	movs	r3, #0
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	3710      	adds	r7, #16
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}

0800ed78 <prvSocketSetMSS>:
/*-----------------------------------------------------------*/

static void prvSocketSetMSS( FreeRTOS_Socket_t *pxSocket )
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b084      	sub	sp, #16
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
uint32_t ulMSS = ipconfigTCP_MSS;
 800ed80:	f44f 6391 	mov.w	r3, #1160	; 0x488
 800ed84:	60fb      	str	r3, [r7, #12]

	if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.ulRemoteIP ) ^ *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) != 0ul )
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed8a:	061a      	lsls	r2, r3, #24
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed90:	021b      	lsls	r3, r3, #8
 800ed92:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ed96:	431a      	orrs	r2, r3
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed9c:	0a1b      	lsrs	r3, r3, #8
 800ed9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800eda2:	431a      	orrs	r2, r3
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eda8:	0e1b      	lsrs	r3, r3, #24
 800edaa:	431a      	orrs	r2, r3
 800edac:	4b0e      	ldr	r3, [pc, #56]	; (800ede8 <prvSocketSetMSS+0x70>)
 800edae:	695b      	ldr	r3, [r3, #20]
 800edb0:	405a      	eors	r2, r3
 800edb2:	4b0e      	ldr	r3, [pc, #56]	; (800edec <prvSocketSetMSS+0x74>)
 800edb4:	685b      	ldr	r3, [r3, #4]
 800edb6:	4013      	ands	r3, r2
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d005      	beq.n	800edc8 <prvSocketSetMSS+0x50>
	{
		/* Data for this peer will pass through a router, and maybe through
		the internet.  Limit the MSS to 1400 bytes or less. */
		ulMSS = FreeRTOS_min_uint32( ( uint32_t ) REDUCED_MSS_THROUGH_INTERNET, ulMSS );
 800edbc:	68f9      	ldr	r1, [r7, #12]
 800edbe:	f44f 60af 	mov.w	r0, #1400	; 0x578
 800edc2:	f7fd fffb 	bl	800cdbc <FreeRTOS_min_uint32>
 800edc6:	60f8      	str	r0, [r7, #12]
	}

	FreeRTOS_debug_printf( ( "prvSocketSetMSS: %lu bytes for %lxip:%u\n", ulMSS, pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort ) );

	pxSocket->u.xTCP.usInitMSS = pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ulMSS;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	b29a      	uxth	r2, r3
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800edde:	bf00      	nop
 800ede0:	3710      	adds	r7, #16
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}
 800ede6:	bf00      	nop
 800ede8:	200001b0 	.word	0x200001b0
 800edec:	20004e60 	.word	0x20004e60

0800edf0 <xProcessReceivedTCPPacket>:
 *		prvTCPSendRepeated()
 *			prvTCPReturnPacket()		// Prepare for returning
 *			xNetworkInterfaceOutput()	// Sends data to the NIC
*/
BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b08c      	sub	sp, #48	; 0x30
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
FreeRTOS_Socket_t *pxSocket;
TCPPacket_t * pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	699b      	ldr	r3, [r3, #24]
 800edfc:	627b      	str	r3, [r7, #36]	; 0x24
uint16_t ucTCPFlags;
uint32_t ulLocalIP;
uint16_t xLocalPort;
uint32_t ulRemoteIP;
uint16_t xRemotePort;
BaseType_t xResult = pdPASS;
 800edfe:	2301      	movs	r3, #1
 800ee00:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check for a minimum packet size. */
    if( pxNetworkBuffer->xDataLength >= 
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	69db      	ldr	r3, [r3, #28]
 800ee06:	2b35      	cmp	r3, #53	; 0x35
 800ee08:	d95a      	bls.n	800eec0 <xProcessReceivedTCPPacket+0xd0>
        ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER )
    {
        ucTCPFlags = pxTCPPacket->xTCPHeader.ucTCPFlags;
 800ee0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee0c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ee10:	847b      	strh	r3, [r7, #34]	; 0x22
        ulLocalIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulDestinationIPAddress );
 800ee12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee14:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800ee18:	061a      	lsls	r2, r3, #24
 800ee1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee1c:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800ee20:	021b      	lsls	r3, r3, #8
 800ee22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ee26:	431a      	orrs	r2, r3
 800ee28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee2a:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800ee2e:	0a1b      	lsrs	r3, r3, #8
 800ee30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ee34:	431a      	orrs	r2, r3
 800ee36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee38:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800ee3c:	0e1b      	lsrs	r3, r3, #24
 800ee3e:	4313      	orrs	r3, r2
 800ee40:	61fb      	str	r3, [r7, #28]
        xLocalPort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usDestinationPort );
 800ee42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee44:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ee46:	b29b      	uxth	r3, r3
 800ee48:	021b      	lsls	r3, r3, #8
 800ee4a:	b21a      	sxth	r2, r3
 800ee4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee4e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ee50:	b29b      	uxth	r3, r3
 800ee52:	0a1b      	lsrs	r3, r3, #8
 800ee54:	b29b      	uxth	r3, r3
 800ee56:	b21b      	sxth	r3, r3
 800ee58:	4313      	orrs	r3, r2
 800ee5a:	b21b      	sxth	r3, r3
 800ee5c:	837b      	strh	r3, [r7, #26]
        ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 800ee5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee60:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800ee64:	061a      	lsls	r2, r3, #24
 800ee66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee68:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800ee6c:	021b      	lsls	r3, r3, #8
 800ee6e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ee72:	431a      	orrs	r2, r3
 800ee74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee76:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800ee7a:	0a1b      	lsrs	r3, r3, #8
 800ee7c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ee80:	431a      	orrs	r2, r3
 800ee82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee84:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800ee88:	0e1b      	lsrs	r3, r3, #24
 800ee8a:	4313      	orrs	r3, r2
 800ee8c:	617b      	str	r3, [r7, #20]
        xRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 800ee8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee90:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ee92:	b29b      	uxth	r3, r3
 800ee94:	021b      	lsls	r3, r3, #8
 800ee96:	b21a      	sxth	r2, r3
 800ee98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee9a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ee9c:	b29b      	uxth	r3, r3
 800ee9e:	0a1b      	lsrs	r3, r3, #8
 800eea0:	b29b      	uxth	r3, r3
 800eea2:	b21b      	sxth	r3, r3
 800eea4:	4313      	orrs	r3, r2
 800eea6:	b21b      	sxth	r3, r3
 800eea8:	827b      	strh	r3, [r7, #18]

        /* Find the destination socket, and if not found: return a socket listing to
        the destination PORT. */
        pxSocket = ( FreeRTOS_Socket_t * )pxTCPSocketLookup( ulLocalIP, xLocalPort, ulRemoteIP, xRemotePort );
 800eeaa:	8b79      	ldrh	r1, [r7, #26]
 800eeac:	8a7b      	ldrh	r3, [r7, #18]
 800eeae:	697a      	ldr	r2, [r7, #20]
 800eeb0:	69f8      	ldr	r0, [r7, #28]
 800eeb2:	f7fd fb5d 	bl	800c570 <pxTCPSocketLookup>
 800eeb6:	62f8      	str	r0, [r7, #44]	; 0x2c
    else
    {
        return pdFAIL;
    }

	if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) == pdFALSE ) )
 800eeb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d00b      	beq.n	800eed6 <xProcessReceivedTCPPacket+0xe6>
 800eebe:	e001      	b.n	800eec4 <xProcessReceivedTCPPacket+0xd4>
        return pdFAIL;
 800eec0:	2300      	movs	r3, #0
 800eec2:	e0b2      	b.n	800f02a <xProcessReceivedTCPPacket+0x23a>
	if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) == pdFALSE ) )
 800eec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7fe f856 	bl	800cf7c <prvTCPSocketIsActive>
 800eed0:	4603      	mov	r3, r0
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d110      	bne.n	800eef8 <xProcessReceivedTCPPacket+0x108>
		the other party will get a ECONN error.  There are two exceptions:
		1) A packet that already has the RST flag set.
		2) A packet that only has the ACK flag set.
		A packet with only the ACK flag set might be the last ACK in
	 	a three-way hand-shake that closes a connection. */
		if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) != ipTCP_FLAG_ACK ) &&
 800eed6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eed8:	f003 031f 	and.w	r3, r3, #31
 800eedc:	2b10      	cmp	r3, #16
 800eede:	d008      	beq.n	800eef2 <xProcessReceivedTCPPacket+0x102>
			( ( ucTCPFlags & ipTCP_FLAG_RST ) == 0u ) )
 800eee0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eee2:	f003 0304 	and.w	r3, r3, #4
		if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) != ipTCP_FLAG_ACK ) &&
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d103      	bne.n	800eef2 <xProcessReceivedTCPPacket+0x102>
		{
			prvTCPSendReset( pxNetworkBuffer );
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	4618      	mov	r0, r3
 800eeee:	f7ff ff27 	bl	800ed40 <prvTCPSendReset>
		}

		/* The packet can't be handled. */
		xResult = pdFAIL;
 800eef2:	2300      	movs	r3, #0
 800eef4:	62bb      	str	r3, [r7, #40]	; 0x28
 800eef6:	e04d      	b.n	800ef94 <xProcessReceivedTCPPacket+0x1a4>
	}
	else
	{
		pxSocket->u.xTCP.ucRepCount = 0u;
 800eef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eefa:	2200      	movs	r2, #0
 800eefc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

		if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
 800ef00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef02:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800ef06:	2b01      	cmp	r3, #1
 800ef08:	d11c      	bne.n	800ef44 <xProcessReceivedTCPPacket+0x154>
		{
			/* The matching socket is in a listening state.  Test if the peer
			has set the SYN flag. */
			if( ( ucTCPFlags & ipTCP_FLAG_CTRL ) != ipTCP_FLAG_SYN )
 800ef0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ef0c:	f003 031f 	and.w	r3, r3, #31
 800ef10:	2b02      	cmp	r3, #2
 800ef12:	d00b      	beq.n	800ef2c <xProcessReceivedTCPPacket+0x13c>
				FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %lxip:%u to port %u\n",
					prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), ulRemoteIP, xRemotePort, xLocalPort ) );
				}
				#endif /* ipconfigHAS_DEBUG_PRINTF */

				if( ( ucTCPFlags & ipTCP_FLAG_RST ) == 0u )
 800ef14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ef16:	f003 0304 	and.w	r3, r3, #4
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d103      	bne.n	800ef26 <xProcessReceivedTCPPacket+0x136>
				{
					prvTCPSendReset( pxNetworkBuffer );
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	4618      	mov	r0, r3
 800ef22:	f7ff ff0d 	bl	800ed40 <prvTCPSendReset>
				}
				xResult = pdFAIL;
 800ef26:	2300      	movs	r3, #0
 800ef28:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef2a:	e033      	b.n	800ef94 <xProcessReceivedTCPPacket+0x1a4>
			else
			{
				/* prvHandleListen() will either return a newly created socket
				(if bReuseSocket is false), otherwise it returns the current
				socket which will later get connected. */
				pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	4619      	mov	r1, r3
 800ef30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef32:	f000 f87e 	bl	800f032 <prvHandleListen>
 800ef36:	62f8      	str	r0, [r7, #44]	; 0x2c

				if( pxSocket == NULL )
 800ef38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d12a      	bne.n	800ef94 <xProcessReceivedTCPPacket+0x1a4>
				{
					xResult = pdFAIL;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef42:	e027      	b.n	800ef94 <xProcessReceivedTCPPacket+0x1a4>
		}	/* if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN ). */
		else
		{
			/* This is not a socket in listening mode. Check for the RST
			flag. */
			if( ( ucTCPFlags & ipTCP_FLAG_RST ) != 0u )
 800ef44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ef46:	f003 0304 	and.w	r3, r3, #4
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d006      	beq.n	800ef5c <xProcessReceivedTCPPacket+0x16c>
			{
				/* The target socket is not in a listening state, any RST packet
				will cause the socket to be closed. */
				FreeRTOS_debug_printf( ( "TCP: RST received from %lxip:%u for %u\n", ulRemoteIP, xRemotePort, xLocalPort ) );
				/* _HT_: should indicate that 'ECONNRESET' must be returned to the used during next API. */
				vTCPStateChange( pxSocket, eCLOSED );
 800ef4e:	2100      	movs	r1, #0
 800ef50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef52:	f7fe fe20 	bl	800db96 <vTCPStateChange>

				/* The packet cannot be handled. */
				xResult = pdFAIL;
 800ef56:	2300      	movs	r3, #0
 800ef58:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef5a:	e01b      	b.n	800ef94 <xProcessReceivedTCPPacket+0x1a4>
			}
			else if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) == ipTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) )
 800ef5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ef5e:	f003 031f 	and.w	r3, r3, #31
 800ef62:	2b02      	cmp	r3, #2
 800ef64:	d107      	bne.n	800ef76 <xProcessReceivedTCPPacket+0x186>
 800ef66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef68:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800ef6c:	2b04      	cmp	r3, #4
 800ef6e:	d902      	bls.n	800ef76 <xProcessReceivedTCPPacket+0x186>
			{
				/* SYN flag while this socket is already connected. */
				FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %lxip:%u\n", ulRemoteIP, xRemotePort ) );

				/* The packet cannot be handled. */
				xResult = pdFAIL;
 800ef70:	2300      	movs	r3, #0
 800ef72:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef74:	e00e      	b.n	800ef94 <xProcessReceivedTCPPacket+0x1a4>
			else
			{
				/* Update the copy of the TCP header only (skipping eth and IP
				headers).  It might be used later on, whenever data must be sent
				to the peer. */
				const BaseType_t lOffset = ( BaseType_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER );
 800ef76:	2322      	movs	r3, #34	; 0x22
 800ef78:	60fb      	str	r3, [r7, #12]
				memcpy( pxSocket->u.xTCP.xPacket.u.ucLastPacket + lOffset, pxNetworkBuffer->pucEthernetBuffer + lOffset, ipSIZE_OF_TCP_HEADER );
 800ef7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef7c:	f103 0282 	add.w	r2, r3, #130	; 0x82
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	18d0      	adds	r0, r2, r3
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	699a      	ldr	r2, [r3, #24]
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	4413      	add	r3, r2
 800ef8c:	2214      	movs	r2, #20
 800ef8e:	4619      	mov	r1, r3
 800ef90:	f001 fee5 	bl	8010d5e <memcpy>
			}
		}
	}

	if( xResult != pdFAIL )
 800ef94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d046      	beq.n	800f028 <xProcessReceivedTCPPacket+0x238>
	{
		/* Touch the alive timers because we received a message	for this
		socket. */
		prvTCPTouchSocket( pxSocket );
 800ef9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef9c:	f7fe fdd7 	bl	800db4e <prvTCPTouchSocket>
		/* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
		then we MUST assume an MSS size of 536 bytes for backward compatibility. */

		/* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
		the number 5 (words) in the higher niblle of the TCP-offset byte. */
		if( ( pxTCPPacket->xTCPHeader.ucTCPOffset & TCP_OFFSET_LENGTH_BITS ) > TCP_OFFSET_STANDARD_LENGTH )
 800efa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800efa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800efaa:	2b50      	cmp	r3, #80	; 0x50
 800efac:	d904      	bls.n	800efb8 <xProcessReceivedTCPPacket+0x1c8>
		{
			prvCheckOptions( pxSocket, pxNetworkBuffer );
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	4619      	mov	r1, r3
 800efb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800efb4:	f7fe fc30 	bl	800d818 <prvCheckOptions>
		}


		#if( ipconfigUSE_TCP_WIN == 1 )
		{
			pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPPacket->xTCPHeader.usWindow );
 800efb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efba:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800efbc:	b29b      	uxth	r3, r3
 800efbe:	021b      	lsls	r3, r3, #8
 800efc0:	b21a      	sxth	r2, r3
 800efc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800efc6:	b29b      	uxth	r3, r3
 800efc8:	0a1b      	lsrs	r3, r3, #8
 800efca:	b29b      	uxth	r3, r3
 800efcc:	b21b      	sxth	r3, r3
 800efce:	4313      	orrs	r3, r2
 800efd0:	b21b      	sxth	r3, r3
 800efd2:	b29b      	uxth	r3, r3
 800efd4:	461a      	mov	r2, r3
 800efd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
			pxSocket->u.xTCP.ulWindowSize =
				( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800efdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efde:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800efe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800efe4:	f892 20ca 	ldrb.w	r2, [r2, #202]	; 0xca
 800efe8:	fa03 f202 	lsl.w	r2, r3, r2
			pxSocket->u.xTCP.ulWindowSize =
 800efec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efee:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		}
		#endif

		/* In prvTCPHandleState() the incoming messages will be handled
		depending on the current state of the connection. */
		if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 800eff2:	1d3b      	adds	r3, r7, #4
 800eff4:	4619      	mov	r1, r3
 800eff6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eff8:	f7ff fd92 	bl	800eb20 <prvTCPHandleState>
 800effc:	4603      	mov	r3, r0
 800effe:	2b00      	cmp	r3, #0
 800f000:	dd04      	ble.n	800f00c <xProcessReceivedTCPPacket+0x21c>
		{
			/* prvTCPHandleState() has sent a message, see if there are more to
			be transmitted. */
			#if( ipconfigUSE_TCP_WIN == 1 )
			{
				prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800f002:	1d3b      	adds	r3, r7, #4
 800f004:	4619      	mov	r1, r3
 800f006:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f008:	f7fe f8f7 	bl	800d1fa <prvTCPSendRepeated>
			}
			#endif /* ipconfigUSE_TCP_WIN */
		}

		if( pxNetworkBuffer != NULL )
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d005      	beq.n	800f01e <xProcessReceivedTCPPacket+0x22e>
		{
			/* We must check if the buffer is unequal to NULL, because the
			socket might keep a reference to it in case a delayed ACK must be
			sent. */
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	4618      	mov	r0, r3
 800f016:	f001 fb8d 	bl	8010734 <vReleaseNetworkBufferAndDescriptor>
			pxNetworkBuffer = NULL;
 800f01a:	2300      	movs	r3, #0
 800f01c:	607b      	str	r3, [r7, #4]
		}

		/* And finally, calculate when this socket wants to be woken up. */
		prvTCPNextTimeout ( pxSocket );
 800f01e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f020:	f7ff f860 	bl	800e0e4 <prvTCPNextTimeout>
		/* Return pdPASS to tell that the network buffer is 'consumed'. */
		xResult = pdPASS;
 800f024:	2301      	movs	r3, #1
 800f026:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	/* pdPASS being returned means the buffer has been consumed. */
	return xResult;
 800f028:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	3730      	adds	r7, #48	; 0x30
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}

0800f032 <prvHandleListen>:
/*-----------------------------------------------------------*/

static FreeRTOS_Socket_t *prvHandleListen( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800f032:	b580      	push	{r7, lr}
 800f034:	b086      	sub	sp, #24
 800f036:	af00      	add	r7, sp, #0
 800f038:	6078      	str	r0, [r7, #4]
 800f03a:	6039      	str	r1, [r7, #0]
TCPPacket_t * pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	699b      	ldr	r3, [r3, #24]
 800f040:	613b      	str	r3, [r7, #16]
FreeRTOS_Socket_t *pxReturn = NULL;
 800f042:	2300      	movs	r3, #0
 800f044:	617b      	str	r3, [r7, #20]
uint32_t ulInitialSequenceNumber;

    /* Assume that a new Initial Sequence Number will be required. Request 
    it now in order to fail out if necessary. */
    ulInitialSequenceNumber = ipconfigRAND32();
 800f046:	f001 ff63 	bl	8010f10 <rand>
 800f04a:	4603      	mov	r3, r0
 800f04c:	60fb      	str	r3, [r7, #12]

	/* A pure SYN (without ACK) has come in, create a new socket to answer
	it. */
    if( 0 != ulInitialSequenceNumber )
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d03c      	beq.n	800f0ce <prvHandleListen+0x9c>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f05a:	f003 0308 	and.w	r3, r3, #8
 800f05e:	b2db      	uxtb	r3, r3
 800f060:	2b00      	cmp	r3, #0
 800f062:	d00c      	beq.n	800f07e <prvHandleListen+0x4c>
        {
            /* The flag bReuseSocket indicates that the same instance of the
            listening socket should be used for the connection. */
            pxReturn = pxSocket;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	617b      	str	r3, [r7, #20]
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800f068:	687a      	ldr	r2, [r7, #4]
 800f06a:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800f06e:	f043 0304 	orr.w	r3, r3, #4
 800f072:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	687a      	ldr	r2, [r7, #4]
 800f07a:	655a      	str	r2, [r3, #84]	; 0x54
 800f07c:	e027      	b.n	800f0ce <prvHandleListen+0x9c>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
            new socket when a connection comes in. */
            pxReturn = NULL;
 800f07e:	2300      	movs	r3, #0
 800f080:	617b      	str	r3, [r7, #20]

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f08e:	429a      	cmp	r2, r3
 800f090:	d303      	bcc.n	800f09a <prvHandleListen+0x68>
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
                    pxSocket->usLocalPort,
                    pxSocket->u.xTCP.usChildCount,
                    pxSocket->u.xTCP.usBacklog,
                    pxSocket->u.xTCP.usChildCount == 1 ? "" : "ren" ) );
                prvTCPSendReset( pxNetworkBuffer );
 800f092:	6838      	ldr	r0, [r7, #0]
 800f094:	f7ff fe54 	bl	800ed40 <prvTCPSendReset>
 800f098:	e019      	b.n	800f0ce <prvHandleListen+0x9c>
            }
            else
            {
                FreeRTOS_Socket_t *pxNewSocket = ( FreeRTOS_Socket_t * )
 800f09a:	2206      	movs	r2, #6
 800f09c:	2101      	movs	r1, #1
 800f09e:	2002      	movs	r0, #2
 800f0a0:	f7fc ff18 	bl	800bed4 <FreeRTOS_socket>
 800f0a4:	60b8      	str	r0, [r7, #8]
                    FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );

                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 800f0a6:	68bb      	ldr	r3, [r7, #8]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d003      	beq.n	800f0b4 <prvHandleListen+0x82>
 800f0ac:	68bb      	ldr	r3, [r7, #8]
 800f0ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0b2:	d103      	bne.n	800f0bc <prvHandleListen+0x8a>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
                    prvTCPSendReset( pxNetworkBuffer );
 800f0b4:	6838      	ldr	r0, [r7, #0]
 800f0b6:	f7ff fe43 	bl	800ed40 <prvTCPSendReset>
 800f0ba:	e008      	b.n	800f0ce <prvHandleListen+0x9c>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 800f0bc:	6879      	ldr	r1, [r7, #4]
 800f0be:	68b8      	ldr	r0, [r7, #8]
 800f0c0:	f000 f86a 	bl	800f198 <prvTCPSocketCopy>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d001      	beq.n	800f0ce <prvHandleListen+0x9c>
                {
                    /* The socket will be connected immediately, no time for the
                    owner to setsockopt's, therefore copy properties of the server
                    socket to the new socket.  Only the binding might fail (due to
                    lack of resources). */
                    pxReturn = pxNewSocket;
 800f0ca:	68bb      	ldr	r3, [r7, #8]
 800f0cc:	617b      	str	r3, [r7, #20]
                }
            }
        }
    }

    if( 0 != ulInitialSequenceNumber && pxReturn != NULL )
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d05c      	beq.n	800f18e <prvHandleListen+0x15c>
 800f0d4:	697b      	ldr	r3, [r7, #20]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d059      	beq.n	800f18e <prvHandleListen+0x15c>
	{
		pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 800f0da:	693b      	ldr	r3, [r7, #16]
 800f0dc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f0de:	b29b      	uxth	r3, r3
 800f0e0:	021b      	lsls	r3, r3, #8
 800f0e2:	b21a      	sxth	r2, r3
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f0e8:	b29b      	uxth	r3, r3
 800f0ea:	0a1b      	lsrs	r3, r3, #8
 800f0ec:	b29b      	uxth	r3, r3
 800f0ee:	b21b      	sxth	r3, r3
 800f0f0:	4313      	orrs	r3, r2
 800f0f2:	b21b      	sxth	r3, r3
 800f0f4:	b29a      	uxth	r2, r3
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	879a      	strh	r2, [r3, #60]	; 0x3c
		pxReturn->u.xTCP.ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 800f0fa:	693b      	ldr	r3, [r7, #16]
 800f0fc:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800f100:	061a      	lsls	r2, r3, #24
 800f102:	693b      	ldr	r3, [r7, #16]
 800f104:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800f108:	021b      	lsls	r3, r3, #8
 800f10a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f10e:	431a      	orrs	r2, r3
 800f110:	693b      	ldr	r3, [r7, #16]
 800f112:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800f116:	0a1b      	lsrs	r3, r3, #8
 800f118:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f11c:	431a      	orrs	r2, r3
 800f11e:	693b      	ldr	r3, [r7, #16]
 800f120:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800f124:	0e1b      	lsrs	r3, r3, #24
 800f126:	431a      	orrs	r2, r3
 800f128:	697b      	ldr	r3, [r7, #20]
 800f12a:	639a      	str	r2, [r3, #56]	; 0x38
		pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 800f12c:	697b      	ldr	r3, [r7, #20]
 800f12e:	68fa      	ldr	r2, [r7, #12]
 800f130:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

		/* Here is the SYN action. */
		pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 800f134:	693b      	ldr	r3, [r7, #16]
 800f136:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800f13a:	061a      	lsls	r2, r3, #24
 800f13c:	693b      	ldr	r3, [r7, #16]
 800f13e:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800f142:	021b      	lsls	r3, r3, #8
 800f144:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f148:	431a      	orrs	r2, r3
 800f14a:	693b      	ldr	r3, [r7, #16]
 800f14c:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800f150:	0a1b      	lsrs	r3, r3, #8
 800f152:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f156:	431a      	orrs	r2, r3
 800f158:	693b      	ldr	r3, [r7, #16]
 800f15a:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800f15e:	0e1b      	lsrs	r3, r3, #24
 800f160:	431a      	orrs	r2, r3
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
		prvSocketSetMSS( pxReturn );
 800f168:	6978      	ldr	r0, [r7, #20]
 800f16a:	f7ff fe05 	bl	800ed78 <prvSocketSetMSS>

		prvTCPCreateWindow( pxReturn );
 800f16e:	6978      	ldr	r0, [r7, #20]
 800f170:	f7fe fa50 	bl	800d614 <prvTCPCreateWindow>

		vTCPStateChange( pxReturn, eSYN_FIRST );
 800f174:	2103      	movs	r1, #3
 800f176:	6978      	ldr	r0, [r7, #20]
 800f178:	f7fe fd0d 	bl	800db96 <vTCPStateChange>

		/* Make a copy of the header up to the TCP header.  It is needed later
		on, whenever data must be sent to the peer. */
		memcpy( pxReturn->u.xTCP.xPacket.u.ucLastPacket, pxNetworkBuffer->pucEthernetBuffer, sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) );
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	f103 0082 	add.w	r0, r3, #130	; 0x82
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	699b      	ldr	r3, [r3, #24]
 800f186:	2246      	movs	r2, #70	; 0x46
 800f188:	4619      	mov	r1, r3
 800f18a:	f001 fde8 	bl	8010d5e <memcpy>
	}
	return pxReturn;
 800f18e:	697b      	ldr	r3, [r7, #20]
}
 800f190:	4618      	mov	r0, r3
 800f192:	3718      	adds	r7, #24
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}

0800f198 <prvTCPSocketCopy>:

/*
 * Duplicates a socket after a listening socket receives a connection.
 */
static BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t *pxNewSocket, FreeRTOS_Socket_t *pxSocket )
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b084      	sub	sp, #16
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
 800f1a0:	6039      	str	r1, [r7, #0]
struct freertos_sockaddr xAddress;

	pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	69da      	ldr	r2, [r3, #28]
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	61da      	str	r2, [r3, #28]
	pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	6a1a      	ldr	r2, [r3, #32]
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	621a      	str	r2, [r3, #32]
	pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	66da      	str	r2, [r3, #108]	; 0x6c
	pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	671a      	str	r2, [r3, #112]	; 0x70
	pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	665a      	str	r2, [r3, #100]	; 0x64
	pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	669a      	str	r2, [r3, #104]	; 0x68
	pxNewSocket->u.xTCP.uxRxWinSize  = pxSocket->u.xTCP.uxRxWinSize;
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	pxNewSocket->u.xTCP.uxTxWinSize  = pxSocket->u.xTCP.uxTxWinSize;
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
	{
		/* Child socket of listening sockets will inherit the Socket Set
		Otherwise the owner has no chance of including it into the set. */
		if( pxSocket->pxSocketSet )
 800f1f6:	683b      	ldr	r3, [r7, #0]
 800f1f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d009      	beq.n	800f212 <prvTCPSocketCopy+0x7a>
		{
			pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	629a      	str	r2, [r3, #40]	; 0x28
			pxNewSocket->xSelectBits = pxSocket->xSelectBits | eSELECT_READ | eSELECT_EXCEPT;
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f20a:	f043 0205 	orr.w	r2, r3, #5
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */

	/* And bind it to the same local port as its parent. */
	xAddress.sin_addr = *ipLOCAL_IP_ADDRESS_POINTER;
 800f212:	4b1b      	ldr	r3, [pc, #108]	; (800f280 <prvTCPSocketCopy+0xe8>)
 800f214:	695b      	ldr	r3, [r3, #20]
 800f216:	60fb      	str	r3, [r7, #12]
	xAddress.sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f21c:	021b      	lsls	r3, r3, #8
 800f21e:	b21a      	sxth	r2, r3
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f224:	0a1b      	lsrs	r3, r3, #8
 800f226:	b29b      	uxth	r3, r3
 800f228:	b21b      	sxth	r3, r3
 800f22a:	4313      	orrs	r3, r2
 800f22c:	b21b      	sxth	r3, r3
 800f22e:	b29b      	uxth	r3, r3
 800f230:	817b      	strh	r3, [r7, #10]
		orphan temporarily.  Once this socket is really connected, the owner of
		the server socket will be notified. */

		/* When bPassQueued is true, the socket is an orphan until it gets
		connected. */
		pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800f232:	687a      	ldr	r2, [r7, #4]
 800f234:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800f238:	f043 0304 	orr.w	r3, r3, #4
 800f23c:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
		pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	683a      	ldr	r2, [r7, #0]
 800f244:	655a      	str	r2, [r3, #84]	; 0x54
			pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
		}
	}
	#endif

	pxSocket->u.xTCP.usChildCount++;
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800f24c:	3301      	adds	r3, #1
 800f24e:	b29a      	uxth	r2, r3
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		pxSocket->u.xTCP.usChildCount,
		pxSocket->u.xTCP.usBacklog,
		pxSocket->u.xTCP.usChildCount == 1u ? "" : "ren" ) );

	/* Now bind the child socket to the same port as the listening socket. */
	if( vSocketBind ( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 800f256:	f107 0108 	add.w	r1, r7, #8
 800f25a:	2301      	movs	r3, #1
 800f25c:	2208      	movs	r2, #8
 800f25e:	6878      	ldr	r0, [r7, #4]
 800f260:	f7fc fed0 	bl	800c004 <vSocketBind>
 800f264:	4603      	mov	r3, r0
 800f266:	2b00      	cmp	r3, #0
 800f268:	d004      	beq.n	800f274 <prvTCPSocketCopy+0xdc>
	{
		FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
		vSocketClose( pxNewSocket );
 800f26a:	6878      	ldr	r0, [r7, #4]
 800f26c:	f7fc ff88 	bl	800c180 <vSocketClose>
		return pdFALSE;
 800f270:	2300      	movs	r3, #0
 800f272:	e000      	b.n	800f276 <prvTCPSocketCopy+0xde>
	}

	return pdTRUE;
 800f274:	2301      	movs	r3, #1
}
 800f276:	4618      	mov	r0, r3
 800f278:	3710      	adds	r7, #16
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}
 800f27e:	bf00      	nop
 800f280:	200001b0 	.word	0x200001b0

0800f284 <xTCPCheckNewClient>:
/*
 * In the API accept(), the user asks is there is a new client?  As API's can
 * not walk through the xBoundTCPSocketsList the IP-task will do this.
 */
BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t *pxSocket )
{
 800f284:	b480      	push	{r7}
 800f286:	b087      	sub	sp, #28
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
TickType_t xLocalPort = FreeRTOS_htons( pxSocket->usLocalPort );
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f290:	021b      	lsls	r3, r3, #8
 800f292:	b21a      	sxth	r2, r3
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f298:	0a1b      	lsrs	r3, r3, #8
 800f29a:	b29b      	uxth	r3, r3
 800f29c:	b21b      	sxth	r3, r3
 800f29e:	4313      	orrs	r3, r2
 800f2a0:	b21b      	sxth	r3, r3
 800f2a2:	b29b      	uxth	r3, r3
 800f2a4:	60fb      	str	r3, [r7, #12]
ListItem_t *pxIterator;
FreeRTOS_Socket_t *pxFound;
BaseType_t xResult = pdFALSE;
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	613b      	str	r3, [r7, #16]

	/* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
	who has access. */
	for( pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800f2aa:	4b16      	ldr	r3, [pc, #88]	; (800f304 <xTCPCheckNewClient+0x80>)
 800f2ac:	68db      	ldr	r3, [r3, #12]
 800f2ae:	617b      	str	r3, [r7, #20]
 800f2b0:	e01d      	b.n	800f2ee <xTCPCheckNewClient+0x6a>
		pxIterator != ( ListItem_t * ) listGET_END_MARKER( &xBoundTCPSocketsList );
		pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
	{
		if( listGET_LIST_ITEM_VALUE( pxIterator ) == xLocalPort )
 800f2b2:	697b      	ldr	r3, [r7, #20]
 800f2b4:	681a      	ldr	r2, [r3, #0]
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	429a      	cmp	r2, r3
 800f2ba:	d115      	bne.n	800f2e8 <xTCPCheckNewClient+0x64>
		{
			pxFound = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800f2bc:	697b      	ldr	r3, [r7, #20]
 800f2be:	68db      	ldr	r3, [r3, #12]
 800f2c0:	60bb      	str	r3, [r7, #8]
			if( ( pxFound->ucProtocol == FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800f2c2:	68bb      	ldr	r3, [r7, #8]
 800f2c4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800f2c8:	2b06      	cmp	r3, #6
 800f2ca:	d10d      	bne.n	800f2e8 <xTCPCheckNewClient+0x64>
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f2d2:	f003 0302 	and.w	r3, r3, #2
 800f2d6:	b2db      	uxtb	r3, r3
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d005      	beq.n	800f2e8 <xTCPCheckNewClient+0x64>
			{
				pxSocket->u.xTCP.pxPeerSocket = pxFound;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	68ba      	ldr	r2, [r7, #8]
 800f2e0:	655a      	str	r2, [r3, #84]	; 0x54
				FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
				xResult = pdTRUE;
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	613b      	str	r3, [r7, #16]
				break;
 800f2e6:	e006      	b.n	800f2f6 <xTCPCheckNewClient+0x72>
		pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
 800f2e8:	697b      	ldr	r3, [r7, #20]
 800f2ea:	685b      	ldr	r3, [r3, #4]
 800f2ec:	617b      	str	r3, [r7, #20]
	for( pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800f2ee:	697b      	ldr	r3, [r7, #20]
 800f2f0:	4a05      	ldr	r2, [pc, #20]	; (800f308 <xTCPCheckNewClient+0x84>)
 800f2f2:	4293      	cmp	r3, r2
 800f2f4:	d1dd      	bne.n	800f2b2 <xTCPCheckNewClient+0x2e>
			}
		}
	}
	return xResult;
 800f2f6:	693b      	ldr	r3, [r7, #16]
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	371c      	adds	r7, #28
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f302:	4770      	bx	lr
 800f304:	20006990 	.word	0x20006990
 800f308:	20006998 	.word	0x20006998

0800f30c <FreeRTOS_min_int32>:
	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
 800f30c:	b480      	push	{r7}
 800f30e:	b083      	sub	sp, #12
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
 800f314:	6039      	str	r1, [r7, #0]
 800f316:	687a      	ldr	r2, [r7, #4]
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	4293      	cmp	r3, r2
 800f31c:	bfa8      	it	ge
 800f31e:	4613      	movge	r3, r2
 800f320:	4618      	mov	r0, r3
 800f322:	370c      	adds	r7, #12
 800f324:	46bd      	mov	sp, r7
 800f326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32a:	4770      	bx	lr

0800f32c <FreeRTOS_min_uint32>:
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
 800f32c:	b480      	push	{r7}
 800f32e:	b083      	sub	sp, #12
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
 800f334:	6039      	str	r1, [r7, #0]
 800f336:	687a      	ldr	r2, [r7, #4]
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	4293      	cmp	r3, r2
 800f33c:	bf28      	it	cs
 800f33e:	4613      	movcs	r3, r2
 800f340:	4618      	mov	r0, r3
 800f342:	370c      	adds	r7, #12
 800f344:	46bd      	mov	sp, r7
 800f346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34a:	4770      	bx	lr

0800f34c <xSequenceLessThanOrEqual>:

#if( ipconfigUSE_TCP_WIN == 1 )
	/* Some 32-bit arithmetic: comparing sequence numbers */
	static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a, uint32_t b );
	static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a, uint32_t b )
	{
 800f34c:	b480      	push	{r7}
 800f34e:	b083      	sub	sp, #12
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
 800f354:	6039      	str	r1, [r7, #0]
		/* Test if a <= b
		Return true if the unsigned subtraction of (b-a) doesn't generate an
		arithmetic overflow. */
		return ( ( b - a ) & 0x80000000UL ) == 0UL;
 800f356:	683a      	ldr	r2, [r7, #0]
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	1ad3      	subs	r3, r2, r3
 800f35c:	43db      	mvns	r3, r3
 800f35e:	0fdb      	lsrs	r3, r3, #31
 800f360:	b2db      	uxtb	r3, r3
	}
 800f362:	4618      	mov	r0, r3
 800f364:	370c      	adds	r7, #12
 800f366:	46bd      	mov	sp, r7
 800f368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36c:	4770      	bx	lr

0800f36e <xSequenceLessThan>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )
	static portINLINE BaseType_t xSequenceLessThan( uint32_t a, uint32_t b );
	static portINLINE BaseType_t xSequenceLessThan( uint32_t a, uint32_t b )
	{
 800f36e:	b480      	push	{r7}
 800f370:	b083      	sub	sp, #12
 800f372:	af00      	add	r7, sp, #0
 800f374:	6078      	str	r0, [r7, #4]
 800f376:	6039      	str	r1, [r7, #0]
		/* Test if a < b */
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
 800f378:	683a      	ldr	r2, [r7, #0]
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	1ad3      	subs	r3, r2, r3
 800f37e:	3b01      	subs	r3, #1
 800f380:	43db      	mvns	r3, r3
 800f382:	0fdb      	lsrs	r3, r3, #31
 800f384:	b2db      	uxtb	r3, r3
	}
 800f386:	4618      	mov	r0, r3
 800f388:	370c      	adds	r7, #12
 800f38a:	46bd      	mov	sp, r7
 800f38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f390:	4770      	bx	lr

0800f392 <xSequenceGreaterThan>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )
	static portINLINE BaseType_t xSequenceGreaterThan( uint32_t a, uint32_t b );
	static portINLINE BaseType_t xSequenceGreaterThan( uint32_t a, uint32_t b )
	{
 800f392:	b480      	push	{r7}
 800f394:	b083      	sub	sp, #12
 800f396:	af00      	add	r7, sp, #0
 800f398:	6078      	str	r0, [r7, #4]
 800f39a:	6039      	str	r1, [r7, #0]
		/* Test if a > b */
		return ( ( a - b - 1UL ) & 0x80000000UL ) == 0UL;
 800f39c:	687a      	ldr	r2, [r7, #4]
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	1ad3      	subs	r3, r2, r3
 800f3a2:	3b01      	subs	r3, #1
 800f3a4:	43db      	mvns	r3, r3
 800f3a6:	0fdb      	lsrs	r3, r3, #31
 800f3a8:	b2db      	uxtb	r3, r3
	}
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	370c      	adds	r7, #12
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b4:	4770      	bx	lr

0800f3b6 <xSequenceGreaterThanOrEqual>:
#endif /* ipconfigUSE_TCP_WIN */

/*-----------------------------------------------------------*/
static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a, uint32_t b );
static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a, uint32_t b )
{
 800f3b6:	b480      	push	{r7}
 800f3b8:	b083      	sub	sp, #12
 800f3ba:	af00      	add	r7, sp, #0
 800f3bc:	6078      	str	r0, [r7, #4]
 800f3be:	6039      	str	r1, [r7, #0]
	/* Test if a >= b */
	return ( ( a - b ) & 0x80000000UL ) == 0UL;
 800f3c0:	687a      	ldr	r2, [r7, #4]
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	1ad3      	subs	r3, r2, r3
 800f3c6:	43db      	mvns	r3, r3
 800f3c8:	0fdb      	lsrs	r3, r3, #31
 800f3ca:	b2db      	uxtb	r3, r3
}
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	370c      	adds	r7, #12
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d6:	4770      	bx	lr

0800f3d8 <vListInsertFifo>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )
	static portINLINE void vListInsertFifo( List_t * const pxList, ListItem_t * const pxNewListItem );
	static portINLINE void vListInsertFifo( List_t * const pxList, ListItem_t * const pxNewListItem )
	{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b082      	sub	sp, #8
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
 800f3e0:	6039      	str	r1, [r7, #0]
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	3308      	adds	r3, #8
 800f3e6:	461a      	mov	r2, r3
 800f3e8:	6839      	ldr	r1, [r7, #0]
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f000 f81f 	bl	800f42e <vListInsertGeneric>
	}
 800f3f0:	bf00      	nop
 800f3f2:	3708      	adds	r7, #8
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}

0800f3f8 <vTCPTimerSet>:
#endif
/*-----------------------------------------------------------*/

static portINLINE void vTCPTimerSet( TCPTimer_t *pxTimer );
static portINLINE void vTCPTimerSet( TCPTimer_t *pxTimer )
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b082      	sub	sp, #8
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
	pxTimer->ulBorn = xTaskGetTickCount ( );
 800f400:	f7f9 fea8 	bl	8009154 <xTaskGetTickCount>
 800f404:	4602      	mov	r2, r0
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	601a      	str	r2, [r3, #0]
}
 800f40a:	bf00      	nop
 800f40c:	3708      	adds	r7, #8
 800f40e:	46bd      	mov	sp, r7
 800f410:	bd80      	pop	{r7, pc}

0800f412 <ulTimerGetAge>:
/*-----------------------------------------------------------*/

static portINLINE uint32_t ulTimerGetAge( TCPTimer_t *pxTimer );
static portINLINE uint32_t ulTimerGetAge( TCPTimer_t *pxTimer )
{
 800f412:	b580      	push	{r7, lr}
 800f414:	b082      	sub	sp, #8
 800f416:	af00      	add	r7, sp, #0
 800f418:	6078      	str	r0, [r7, #4]
	return ( ( xTaskGetTickCount() - pxTimer->ulBorn ) * portTICK_PERIOD_MS );
 800f41a:	f7f9 fe9b 	bl	8009154 <xTaskGetTickCount>
 800f41e:	4602      	mov	r2, r0
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	1ad3      	subs	r3, r2, r3
}
 800f426:	4618      	mov	r0, r3
 800f428:	3708      	adds	r7, #8
 800f42a:	46bd      	mov	sp, r7
 800f42c:	bd80      	pop	{r7, pc}

0800f42e <vListInsertGeneric>:
preceded by a prototype. Later this prototype will be located in list.h? */

extern void vListInsertGeneric( List_t * const pxList, ListItem_t * const pxNewListItem, MiniListItem_t * const pxWhere );

void vListInsertGeneric( List_t * const pxList, ListItem_t * const pxNewListItem, MiniListItem_t * const pxWhere )
{
 800f42e:	b480      	push	{r7}
 800f430:	b085      	sub	sp, #20
 800f432:	af00      	add	r7, sp, #0
 800f434:	60f8      	str	r0, [r7, #12]
 800f436:	60b9      	str	r1, [r7, #8]
 800f438:	607a      	str	r2, [r7, #4]
	/* Insert a new list item into pxList, it does not sort the list,
	but it puts the item just before xListEnd, so it will be the last item
	returned by listGET_HEAD_ENTRY() */
	pxNewListItem->pxNext = (struct xLIST_ITEM * configLIST_VOLATILE)pxWhere;
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	687a      	ldr	r2, [r7, #4]
 800f43e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	689a      	ldr	r2, [r3, #8]
 800f444:	68bb      	ldr	r3, [r7, #8]
 800f446:	609a      	str	r2, [r3, #8]
	pxWhere->pxPrevious->pxNext = pxNewListItem;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	689b      	ldr	r3, [r3, #8]
 800f44c:	68ba      	ldr	r2, [r7, #8]
 800f44e:	605a      	str	r2, [r3, #4]
	pxWhere->pxPrevious = pxNewListItem;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	68ba      	ldr	r2, [r7, #8]
 800f454:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList; /* If this line fails to build then ensure configENABLE_BACKWARD_COMPATIBILITY is set to 1 in FreeRTOSConfig.h. */
 800f456:	68bb      	ldr	r3, [r7, #8]
 800f458:	68fa      	ldr	r2, [r7, #12]
 800f45a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	1c5a      	adds	r2, r3, #1
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	601a      	str	r2, [r3, #0]
}
 800f466:	bf00      	nop
 800f468:	3714      	adds	r7, #20
 800f46a:	46bd      	mov	sp, r7
 800f46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f470:	4770      	bx	lr
	...

0800f474 <prvCreateSectors>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static BaseType_t prvCreateSectors( void )
	{
 800f474:	b580      	push	{r7, lr}
 800f476:	b082      	sub	sp, #8
 800f478:	af00      	add	r7, sp, #0
	BaseType_t xIndex, xReturn;

		/* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */

		vListInitialise( &xSegmentList );
 800f47a:	4824      	ldr	r0, [pc, #144]	; (800f50c <prvCreateSectors+0x98>)
 800f47c:	f7f8 fa49 	bl	8007912 <vListInitialise>
		xTCPSegments = ( TCPSegment_t * ) pvPortMallocLarge( ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 800f480:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 800f484:	f7f8 fd0c 	bl	8007ea0 <pvPortMalloc>
 800f488:	4602      	mov	r2, r0
 800f48a:	4b21      	ldr	r3, [pc, #132]	; (800f510 <prvCreateSectors+0x9c>)
 800f48c:	601a      	str	r2, [r3, #0]

		if( xTCPSegments == NULL )
 800f48e:	4b20      	ldr	r3, [pc, #128]	; (800f510 <prvCreateSectors+0x9c>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d102      	bne.n	800f49c <prvCreateSectors+0x28>
		{
			FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %lu failed\n",
				ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );

			xReturn = pdFAIL;
 800f496:	2300      	movs	r3, #0
 800f498:	603b      	str	r3, [r7, #0]
 800f49a:	e032      	b.n	800f502 <prvCreateSectors+0x8e>
		}
		else
		{
			/* Clear the allocated space. */
			memset( xTCPSegments, '\0', ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 800f49c:	4b1c      	ldr	r3, [pc, #112]	; (800f510 <prvCreateSectors+0x9c>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800f4a4:	2100      	movs	r1, #0
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f001 fc7e 	bl	8010da8 <memset>

			for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	607b      	str	r3, [r7, #4]
 800f4b0:	e022      	b.n	800f4f8 <prvCreateSectors+0x84>
			{
				/* Could call vListInitialiseItem here but all data has been
				nulled already.  Set the owner to a segment descriptor. */
				listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xListItem ), ( void* ) &( xTCPSegments[ xIndex ] ) );
 800f4b2:	4b17      	ldr	r3, [pc, #92]	; (800f510 <prvCreateSectors+0x9c>)
 800f4b4:	681a      	ldr	r2, [r3, #0]
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	019b      	lsls	r3, r3, #6
 800f4ba:	4413      	add	r3, r2
 800f4bc:	4a14      	ldr	r2, [pc, #80]	; (800f510 <prvCreateSectors+0x9c>)
 800f4be:	6811      	ldr	r1, [r2, #0]
 800f4c0:	687a      	ldr	r2, [r7, #4]
 800f4c2:	0192      	lsls	r2, r2, #6
 800f4c4:	440a      	add	r2, r1
 800f4c6:	639a      	str	r2, [r3, #56]	; 0x38
				listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void* ) &( xTCPSegments[ xIndex ] ) );
 800f4c8:	4b11      	ldr	r3, [pc, #68]	; (800f510 <prvCreateSectors+0x9c>)
 800f4ca:	681a      	ldr	r2, [r3, #0]
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	019b      	lsls	r3, r3, #6
 800f4d0:	4413      	add	r3, r2
 800f4d2:	4a0f      	ldr	r2, [pc, #60]	; (800f510 <prvCreateSectors+0x9c>)
 800f4d4:	6811      	ldr	r1, [r2, #0]
 800f4d6:	687a      	ldr	r2, [r7, #4]
 800f4d8:	0192      	lsls	r2, r2, #6
 800f4da:	440a      	add	r2, r1
 800f4dc:	625a      	str	r2, [r3, #36]	; 0x24

				/* And add it to the pool of available segments */
				vListInsertFifo( &xSegmentList, &( xTCPSegments[xIndex].xListItem ) );
 800f4de:	4b0c      	ldr	r3, [pc, #48]	; (800f510 <prvCreateSectors+0x9c>)
 800f4e0:	681a      	ldr	r2, [r3, #0]
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	019b      	lsls	r3, r3, #6
 800f4e6:	4413      	add	r3, r2
 800f4e8:	332c      	adds	r3, #44	; 0x2c
 800f4ea:	4619      	mov	r1, r3
 800f4ec:	4807      	ldr	r0, [pc, #28]	; (800f50c <prvCreateSectors+0x98>)
 800f4ee:	f7ff ff73 	bl	800f3d8 <vListInsertFifo>
			for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	3301      	adds	r3, #1
 800f4f6:	607b      	str	r3, [r7, #4]
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2bef      	cmp	r3, #239	; 0xef
 800f4fc:	ddd9      	ble.n	800f4b2 <prvCreateSectors+0x3e>
			}

			xReturn = pdPASS;
 800f4fe:	2301      	movs	r3, #1
 800f500:	603b      	str	r3, [r7, #0]
		}

		return xReturn;
 800f502:	683b      	ldr	r3, [r7, #0]
	}
 800f504:	4618      	mov	r0, r3
 800f506:	3708      	adds	r7, #8
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}
 800f50c:	20004ecc 	.word	0x20004ecc
 800f510:	20004ec8 	.word	0x20004ec8

0800f514 <xTCPWindowRxFind>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowRxFind( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber )
	{
 800f514:	b480      	push	{r7}
 800f516:	b087      	sub	sp, #28
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
 800f51c:	6039      	str	r1, [r7, #0]
	const ListItem_t *pxIterator;
	const MiniListItem_t* pxEnd;
	TCPSegment_t *pxSegment, *pxReturn = NULL;
 800f51e:	2300      	movs	r3, #0
 800f520:	613b      	str	r3, [r7, #16]

		/* Find a segment with a given sequence number in the list of received
		segments. */

		pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &pxWindow->xRxSegments );
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	33ac      	adds	r3, #172	; 0xac
 800f526:	60fb      	str	r3, [r7, #12]

		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	685b      	ldr	r3, [r3, #4]
 800f52c:	617b      	str	r3, [r7, #20]
 800f52e:	e00d      	b.n	800f54c <xTCPWindowRxFind+0x38>
			 pxIterator != ( const ListItem_t * ) pxEnd;
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	68db      	ldr	r3, [r3, #12]
 800f534:	60bb      	str	r3, [r7, #8]

			if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	681a      	ldr	r2, [r3, #0]
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	429a      	cmp	r2, r3
 800f53e:	d102      	bne.n	800f546 <xTCPWindowRxFind+0x32>
			{
				pxReturn = pxSegment;
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	613b      	str	r3, [r7, #16]
				break;
 800f544:	e006      	b.n	800f554 <xTCPWindowRxFind+0x40>
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800f546:	697b      	ldr	r3, [r7, #20]
 800f548:	685b      	ldr	r3, [r3, #4]
 800f54a:	617b      	str	r3, [r7, #20]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800f54c:	697a      	ldr	r2, [r7, #20]
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	429a      	cmp	r2, r3
 800f552:	d1ed      	bne.n	800f530 <xTCPWindowRxFind+0x1c>
			}
		}

		return pxReturn;
 800f554:	693b      	ldr	r3, [r7, #16]
	}
 800f556:	4618      	mov	r0, r3
 800f558:	371c      	adds	r7, #28
 800f55a:	46bd      	mov	sp, r7
 800f55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f560:	4770      	bx	lr
	...

0800f564 <xTCPWindowNew>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowNew( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber, int32_t lCount, BaseType_t xIsForRx )
	{
 800f564:	b580      	push	{r7, lr}
 800f566:	b088      	sub	sp, #32
 800f568:	af00      	add	r7, sp, #0
 800f56a:	60f8      	str	r0, [r7, #12]
 800f56c:	60b9      	str	r1, [r7, #8]
 800f56e:	607a      	str	r2, [r7, #4]
 800f570:	603b      	str	r3, [r7, #0]
	TCPSegment_t *pxSegment;
	ListItem_t * pxItem;

		/* Allocate a new segment.  The socket will borrow all segments from a
		common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
		if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 800f572:	4b2e      	ldr	r3, [pc, #184]	; (800f62c <xTCPWindowNew+0xc8>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d101      	bne.n	800f57e <xTCPWindowNew+0x1a>
 800f57a:	2301      	movs	r3, #1
 800f57c:	e000      	b.n	800f580 <xTCPWindowNew+0x1c>
 800f57e:	2300      	movs	r3, #0
 800f580:	2b00      	cmp	r3, #0
 800f582:	d002      	beq.n	800f58a <xTCPWindowNew+0x26>
		{
			/* If the TCP-stack runs out of segments, you might consider
			increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
			FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", xIsForRx ? 'R' : 'T' ) );
			pxSegment = NULL;
 800f584:	2300      	movs	r3, #0
 800f586:	61fb      	str	r3, [r7, #28]
 800f588:	e04a      	b.n	800f620 <xTCPWindowNew+0xbc>
		}
		else
		{
			/* Pop the item at the head of the list.  Semaphore protection is
			not required as only the IP task will call these functions.  */
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 800f58a:	4b28      	ldr	r3, [pc, #160]	; (800f62c <xTCPWindowNew+0xc8>)
 800f58c:	68db      	ldr	r3, [r3, #12]
 800f58e:	61bb      	str	r3, [r7, #24]
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 800f590:	69bb      	ldr	r3, [r7, #24]
 800f592:	68db      	ldr	r3, [r3, #12]
 800f594:	61fb      	str	r3, [r7, #28]

			configASSERT( pxItem != NULL );
 800f596:	69bb      	ldr	r3, [r7, #24]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d109      	bne.n	800f5b0 <xTCPWindowNew+0x4c>
 800f59c:	f04f 0340 	mov.w	r3, #64	; 0x40
 800f5a0:	f383 8811 	msr	BASEPRI, r3
 800f5a4:	f3bf 8f6f 	isb	sy
 800f5a8:	f3bf 8f4f 	dsb	sy
 800f5ac:	617b      	str	r3, [r7, #20]
 800f5ae:	e7fe      	b.n	800f5ae <xTCPWindowNew+0x4a>
			configASSERT( pxSegment != NULL );
 800f5b0:	69fb      	ldr	r3, [r7, #28]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d109      	bne.n	800f5ca <xTCPWindowNew+0x66>
 800f5b6:	f04f 0340 	mov.w	r3, #64	; 0x40
 800f5ba:	f383 8811 	msr	BASEPRI, r3
 800f5be:	f3bf 8f6f 	isb	sy
 800f5c2:	f3bf 8f4f 	dsb	sy
 800f5c6:	613b      	str	r3, [r7, #16]
 800f5c8:	e7fe      	b.n	800f5c8 <xTCPWindowNew+0x64>

			/* Remove the item from xSegmentList. */
			uxListRemove( pxItem );
 800f5ca:	69b8      	ldr	r0, [r7, #24]
 800f5cc:	f7f8 fa2b 	bl	8007a26 <uxListRemove>

			/* Add it to either the connections' Rx or Tx queue. */
			vListInsertFifo( xIsForRx ? &pxWindow->xRxSegments : &pxWindow->xTxSegments, pxItem );
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d002      	beq.n	800f5dc <xTCPWindowNew+0x78>
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	33a4      	adds	r3, #164	; 0xa4
 800f5da:	e001      	b.n	800f5e0 <xTCPWindowNew+0x7c>
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	3390      	adds	r3, #144	; 0x90
 800f5e0:	69b9      	ldr	r1, [r7, #24]
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f7ff fef8 	bl	800f3d8 <vListInsertFifo>

			/* And set the segment's timer to zero */
			vTCPTimerSet( &pxSegment->xTransmitTimer );
 800f5e8:	69fb      	ldr	r3, [r7, #28]
 800f5ea:	3310      	adds	r3, #16
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f7ff ff03 	bl	800f3f8 <vTCPTimerSet>

			pxSegment->u.ulFlags = 0;
 800f5f2:	69fb      	ldr	r3, [r7, #28]
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	615a      	str	r2, [r3, #20]
			pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 );
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	bf14      	ite	ne
 800f5fe:	2301      	movne	r3, #1
 800f600:	2300      	moveq	r3, #0
 800f602:	b2d9      	uxtb	r1, r3
 800f604:	69fa      	ldr	r2, [r7, #28]
 800f606:	7d93      	ldrb	r3, [r2, #22]
 800f608:	f361 0382 	bfi	r3, r1, #2, #1
 800f60c:	7593      	strb	r3, [r2, #22]
			pxSegment->lMaxLength = lCount;
 800f60e:	69fb      	ldr	r3, [r7, #28]
 800f610:	687a      	ldr	r2, [r7, #4]
 800f612:	605a      	str	r2, [r3, #4]
			pxSegment->lDataLength = lCount;
 800f614:	69fb      	ldr	r3, [r7, #28]
 800f616:	687a      	ldr	r2, [r7, #4]
 800f618:	609a      	str	r2, [r3, #8]
			pxSegment->ulSequenceNumber = ulSequenceNumber;
 800f61a:	69fb      	ldr	r3, [r7, #28]
 800f61c:	68ba      	ldr	r2, [r7, #8]
 800f61e:	601a      	str	r2, [r3, #0]
				}
			}
			#endif /* ipconfigHAS_DEBUG_PRINTF */
		}

		return pxSegment;
 800f620:	69fb      	ldr	r3, [r7, #28]
	}
 800f622:	4618      	mov	r0, r3
 800f624:	3720      	adds	r7, #32
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}
 800f62a:	bf00      	nop
 800f62c:	20004ecc 	.word	0x20004ecc

0800f630 <xTCPWindowRxEmpty>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	BaseType_t xTCPWindowRxEmpty( TCPWindow_t *pxWindow )
	{
 800f630:	b580      	push	{r7, lr}
 800f632:	b084      	sub	sp, #16
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
		/* When the peer has a close request (FIN flag), the driver will check
		if there are missing packets in the Rx-queue.  It will accept the
		closure of the connection if both conditions are true:
		  - the Rx-queue is empty
		  - the highest Rx sequence number has been ACK'ed */
		if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d002      	beq.n	800f648 <xTCPWindowRxEmpty+0x18>
		{
			/* Rx data has been stored while earlier packets were missing. */
			xReturn = pdFALSE;
 800f642:	2300      	movs	r3, #0
 800f644:	60fb      	str	r3, [r7, #12]
 800f646:	e00f      	b.n	800f668 <xTCPWindowRxEmpty+0x38>
		}
		else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	691a      	ldr	r2, [r3, #16]
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	699b      	ldr	r3, [r3, #24]
 800f650:	4619      	mov	r1, r3
 800f652:	4610      	mov	r0, r2
 800f654:	f7ff feaf 	bl	800f3b6 <xSequenceGreaterThanOrEqual>
 800f658:	4603      	mov	r3, r0
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d002      	beq.n	800f664 <xTCPWindowRxEmpty+0x34>
		{
			/* No Rx packets are being stored and the highest sequence number
			that has been received has been ACKed. */
			xReturn = pdTRUE;
 800f65e:	2301      	movs	r3, #1
 800f660:	60fb      	str	r3, [r7, #12]
 800f662:	e001      	b.n	800f668 <xTCPWindowRxEmpty+0x38>
		else
		{
			FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %lu highest %lu (empty)\n",
				( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
				( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
			xReturn = pdFALSE;
 800f664:	2300      	movs	r3, #0
 800f666:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 800f668:	68fb      	ldr	r3, [r7, #12]
	}
 800f66a:	4618      	mov	r0, r3
 800f66c:	3710      	adds	r7, #16
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}

0800f672 <xTCPWindowGetHead>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowGetHead( List_t *pxList )
	{
 800f672:	b580      	push	{r7, lr}
 800f674:	b084      	sub	sp, #16
 800f676:	af00      	add	r7, sp, #0
 800f678:	6078      	str	r0, [r7, #4]
	TCPSegment_t *pxSegment;
	ListItem_t * pxItem;

		/* Detaches and returns the head of a queue. */
		if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d101      	bne.n	800f686 <xTCPWindowGetHead+0x14>
 800f682:	2301      	movs	r3, #1
 800f684:	e000      	b.n	800f688 <xTCPWindowGetHead+0x16>
 800f686:	2300      	movs	r3, #0
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d002      	beq.n	800f692 <xTCPWindowGetHead+0x20>
		{
			pxSegment = NULL;
 800f68c:	2300      	movs	r3, #0
 800f68e:	60fb      	str	r3, [r7, #12]
 800f690:	e008      	b.n	800f6a4 <xTCPWindowGetHead+0x32>
		}
		else
		{
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	68db      	ldr	r3, [r3, #12]
 800f696:	60bb      	str	r3, [r7, #8]
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	68db      	ldr	r3, [r3, #12]
 800f69c:	60fb      	str	r3, [r7, #12]

			uxListRemove( pxItem );
 800f69e:	68b8      	ldr	r0, [r7, #8]
 800f6a0:	f7f8 f9c1 	bl	8007a26 <uxListRemove>
		}

		return pxSegment;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
	}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	3710      	adds	r7, #16
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}

0800f6ae <xTCPWindowPeekHead>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowPeekHead( List_t *pxList )
	{
 800f6ae:	b480      	push	{r7}
 800f6b0:	b085      	sub	sp, #20
 800f6b2:	af00      	add	r7, sp, #0
 800f6b4:	6078      	str	r0, [r7, #4]
	ListItem_t *pxItem;
	TCPSegment_t *pxReturn;

		/* Returns the head of a queue but it won't be detached. */
		if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d101      	bne.n	800f6c2 <xTCPWindowPeekHead+0x14>
 800f6be:	2301      	movs	r3, #1
 800f6c0:	e000      	b.n	800f6c4 <xTCPWindowPeekHead+0x16>
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d002      	beq.n	800f6ce <xTCPWindowPeekHead+0x20>
		{
			pxReturn = NULL;
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	60fb      	str	r3, [r7, #12]
 800f6cc:	e005      	b.n	800f6da <xTCPWindowPeekHead+0x2c>
		}
		else
		{
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	68db      	ldr	r3, [r3, #12]
 800f6d2:	60bb      	str	r3, [r7, #8]
			pxReturn = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	68db      	ldr	r3, [r3, #12]
 800f6d8:	60fb      	str	r3, [r7, #12]
		}

		return pxReturn;
 800f6da:	68fb      	ldr	r3, [r7, #12]
	}
 800f6dc:	4618      	mov	r0, r3
 800f6de:	3714      	adds	r7, #20
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e6:	4770      	bx	lr

0800f6e8 <vTCPWindowFree>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static void vTCPWindowFree( TCPSegment_t *pxSegment )
	{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b082      	sub	sp, #8
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
		/*  Free entry pxSegment because it's not used any more.  The ownership
		will be passed back to the segment pool.

		Unlink it from one of the queues, if any. */
		if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d004      	beq.n	800f702 <vTCPWindowFree+0x1a>
		{
			uxListRemove( &( pxSegment->xQueueItem ) );
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	3318      	adds	r3, #24
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f7f8 f992 	bl	8007a26 <uxListRemove>
		}

		pxSegment->ulSequenceNumber = 0u;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	2200      	movs	r2, #0
 800f706:	601a      	str	r2, [r3, #0]
		pxSegment->lDataLength = 0l;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	2200      	movs	r2, #0
 800f70c:	609a      	str	r2, [r3, #8]
		pxSegment->u.ulFlags = 0u;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	2200      	movs	r2, #0
 800f712:	615a      	str	r2, [r3, #20]

		/* Take it out of xRxSegments/xTxSegments */
		if( listLIST_ITEM_CONTAINER( &( pxSegment->xListItem ) ) != NULL )
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d004      	beq.n	800f726 <vTCPWindowFree+0x3e>
		{
			uxListRemove( &( pxSegment->xListItem ) );
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	332c      	adds	r3, #44	; 0x2c
 800f720:	4618      	mov	r0, r3
 800f722:	f7f8 f980 	bl	8007a26 <uxListRemove>
		}

		/* Return it to xSegmentList */
		vListInsertFifo( &xSegmentList, &( pxSegment->xListItem ) );
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	332c      	adds	r3, #44	; 0x2c
 800f72a:	4619      	mov	r1, r3
 800f72c:	4803      	ldr	r0, [pc, #12]	; (800f73c <vTCPWindowFree+0x54>)
 800f72e:	f7ff fe53 	bl	800f3d8 <vListInsertFifo>
	}
 800f732:	bf00      	nop
 800f734:	3708      	adds	r7, #8
 800f736:	46bd      	mov	sp, r7
 800f738:	bd80      	pop	{r7, pc}
 800f73a:	bf00      	nop
 800f73c:	20004ecc 	.word	0x20004ecc

0800f740 <vTCPWindowDestroy>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	void vTCPWindowDestroy( TCPWindow_t *pxWindow )
	{
 800f740:	b580      	push	{r7, lr}
 800f742:	b086      	sub	sp, #24
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]

		/*  Destroy a window.  A TCP window doesn't serve any more.  Return all
		owned segments to the pool.  In order to save code, it will make 2 rounds,
		one to remove the segments from xRxSegments, and a second round to clear
		xTxSegments*/
		for( xRound = 0; xRound < 2; xRound++ )
 800f748:	2300      	movs	r3, #0
 800f74a:	613b      	str	r3, [r7, #16]
 800f74c:	e022      	b.n	800f794 <vTCPWindowDestroy+0x54>
		{
			if( xRound != 0 )
 800f74e:	693b      	ldr	r3, [r7, #16]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d003      	beq.n	800f75c <vTCPWindowDestroy+0x1c>
			{
				pxSegments = &( pxWindow->xRxSegments );
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	33a4      	adds	r3, #164	; 0xa4
 800f758:	617b      	str	r3, [r7, #20]
 800f75a:	e002      	b.n	800f762 <vTCPWindowDestroy+0x22>
			}
			else
			{
				pxSegments = &( pxWindow->xTxSegments );
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	3390      	adds	r3, #144	; 0x90
 800f760:	617b      	str	r3, [r7, #20]
			}

			if( listLIST_IS_INITIALISED( pxSegments ) != pdFALSE )
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	689b      	ldr	r3, [r3, #8]
 800f766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f76a:	d101      	bne.n	800f770 <vTCPWindowDestroy+0x30>
 800f76c:	2301      	movs	r3, #1
 800f76e:	e000      	b.n	800f772 <vTCPWindowDestroy+0x32>
 800f770:	2300      	movs	r3, #0
 800f772:	2b00      	cmp	r3, #0
 800f774:	d00b      	beq.n	800f78e <vTCPWindowDestroy+0x4e>
			{
				while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 800f776:	e006      	b.n	800f786 <vTCPWindowDestroy+0x46>
				{
					pxSegment = ( TCPSegment_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxSegments );
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	68db      	ldr	r3, [r3, #12]
 800f77c:	68db      	ldr	r3, [r3, #12]
 800f77e:	60fb      	str	r3, [r7, #12]
					vTCPWindowFree( pxSegment );
 800f780:	68f8      	ldr	r0, [r7, #12]
 800f782:	f7ff ffb1 	bl	800f6e8 <vTCPWindowFree>
				while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 800f786:	697b      	ldr	r3, [r7, #20]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d1f4      	bne.n	800f778 <vTCPWindowDestroy+0x38>
		for( xRound = 0; xRound < 2; xRound++ )
 800f78e:	693b      	ldr	r3, [r7, #16]
 800f790:	3301      	adds	r3, #1
 800f792:	613b      	str	r3, [r7, #16]
 800f794:	693b      	ldr	r3, [r7, #16]
 800f796:	2b01      	cmp	r3, #1
 800f798:	ddd9      	ble.n	800f74e <vTCPWindowDestroy+0xe>
				}
			}
		}
	}
 800f79a:	bf00      	nop
 800f79c:	3718      	adds	r7, #24
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}
	...

0800f7a4 <vTCPWindowCreate>:
#endif /* ipconfigUSE_TCP_WIN == 1 */
/*-----------------------------------------------------------*/

void vTCPWindowCreate( TCPWindow_t *pxWindow, uint32_t ulRxWindowLength,
	uint32_t ulTxWindowLength, uint32_t ulAckNumber, uint32_t ulSequenceNumber, uint32_t ulMSS )
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b084      	sub	sp, #16
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	60f8      	str	r0, [r7, #12]
 800f7ac:	60b9      	str	r1, [r7, #8]
 800f7ae:	607a      	str	r2, [r7, #4]
 800f7b0:	603b      	str	r3, [r7, #0]
	/* Create and initialize a window. */

	#if( ipconfigUSE_TCP_WIN == 1 )
	{
		if( xTCPSegments == NULL )
 800f7b2:	4b17      	ldr	r3, [pc, #92]	; (800f810 <vTCPWindowCreate+0x6c>)
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d101      	bne.n	800f7be <vTCPWindowCreate+0x1a>
		{
			prvCreateSectors();
 800f7ba:	f7ff fe5b 	bl	800f474 <prvCreateSectors>
		}

		vListInitialise( &pxWindow->xTxSegments );
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	3390      	adds	r3, #144	; 0x90
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f7f8 f8a5 	bl	8007912 <vListInitialise>
		vListInitialise( &pxWindow->xRxSegments );
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	33a4      	adds	r3, #164	; 0xa4
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f7f8 f8a0 	bl	8007912 <vListInitialise>

		vListInitialise( &pxWindow->xPriorityQueue );			/* Priority queue: segments which must be sent immediately */
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	3340      	adds	r3, #64	; 0x40
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f7f8 f89b 	bl	8007912 <vListInitialise>
		vListInitialise( &pxWindow->xTxQueue   );			/* Transmit queue: segments queued for transmission */
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	3354      	adds	r3, #84	; 0x54
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	f7f8 f896 	bl	8007912 <vListInitialise>
		vListInitialise( &pxWindow->xWaitQueue );			/* Waiting queue:  outstanding segments */
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	3368      	adds	r3, #104	; 0x68
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	f7f8 f891 	bl	8007912 <vListInitialise>
	{
		FreeRTOS_debug_printf( ( "vTCPWindowCreate: for WinLen = Rx/Tx: %lu/%lu\n",
			ulRxWindowLength, ulTxWindowLength ) );
	}

	pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	68ba      	ldr	r2, [r7, #8]
 800f7f4:	605a      	str	r2, [r3, #4]
	pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	687a      	ldr	r2, [r7, #4]
 800f7fa:	609a      	str	r2, [r3, #8]

	vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 800f7fc:	69fb      	ldr	r3, [r7, #28]
 800f7fe:	69ba      	ldr	r2, [r7, #24]
 800f800:	6839      	ldr	r1, [r7, #0]
 800f802:	68f8      	ldr	r0, [r7, #12]
 800f804:	f000 f806 	bl	800f814 <vTCPWindowInit>
}
 800f808:	bf00      	nop
 800f80a:	3710      	adds	r7, #16
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}
 800f810:	20004ec8 	.word	0x20004ec8

0800f814 <vTCPWindowInit>:
/*-----------------------------------------------------------*/

void vTCPWindowInit( TCPWindow_t *pxWindow, uint32_t ulAckNumber, uint32_t ulSequenceNumber, uint32_t ulMSS )
{
 800f814:	b480      	push	{r7}
 800f816:	b087      	sub	sp, #28
 800f818:	af00      	add	r7, sp, #0
 800f81a:	60f8      	str	r0, [r7, #12]
 800f81c:	60b9      	str	r1, [r7, #8]
 800f81e:	607a      	str	r2, [r7, #4]
 800f820:	603b      	str	r3, [r7, #0]
const int32_t l500ms = 500;
 800f822:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800f826:	617b      	str	r3, [r7, #20]

	pxWindow->u.ulFlags = 0ul;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	2200      	movs	r2, #0
 800f82c:	601a      	str	r2, [r3, #0]
	pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 800f82e:	68fa      	ldr	r2, [r7, #12]
 800f830:	7813      	ldrb	r3, [r2, #0]
 800f832:	f043 0301 	orr.w	r3, r3, #1
 800f836:	7013      	strb	r3, [r2, #0]

	if( ulMSS != 0ul )
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d024      	beq.n	800f888 <vTCPWindowInit+0x74>
	{
		if( pxWindow->usMSSInit != 0u )
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800f844:	2b00      	cmp	r3, #0
 800f846:	d004      	beq.n	800f852 <vTCPWindowInit+0x3e>
		{
			pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 800f848:	683b      	ldr	r3, [r7, #0]
 800f84a:	b29a      	uxth	r2, r3
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		}

		if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0u ) )
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800f858:	461a      	mov	r2, r3
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	429a      	cmp	r2, r3
 800f85e:	d804      	bhi.n	800f86a <vTCPWindowInit+0x56>
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800f866:	2b00      	cmp	r3, #0
 800f868:	d10e      	bne.n	800f888 <vTCPWindowInit+0x74>
		{
			pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	685a      	ldr	r2, [r3, #4]
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	fbb2 f3f3 	udiv	r3, r2, r3
 800f874:	683a      	ldr	r2, [r7, #0]
 800f876:	fb02 f203 	mul.w	r2, r2, r3
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	605a      	str	r2, [r3, #4]
			pxWindow->usMSS = ( uint16_t ) ulMSS;
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	b29a      	uxth	r2, r3
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
	}
	#endif /* ipconfigUSE_TCP_WIN == 1 */

	/*Start with a timeout of 2 * 500 ms (1 sec). */
	pxWindow->lSRTT = l500ms;
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	697a      	ldr	r2, [r7, #20]
 800f88c:	639a      	str	r2, [r3, #56]	; 0x38

	/* Just for logging, to print relative sequence numbers. */
	pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	68ba      	ldr	r2, [r7, #8]
 800f892:	60da      	str	r2, [r3, #12]

	/* The segment asked for in the next transmission. */
	pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	68ba      	ldr	r2, [r7, #8]
 800f898:	611a      	str	r2, [r3, #16]

	/* The right-hand side of the receive window. */
	pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	68ba      	ldr	r2, [r7, #8]
 800f89e:	619a      	str	r2, [r3, #24]

	pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	687a      	ldr	r2, [r7, #4]
 800f8a4:	61da      	str	r2, [r3, #28]

	/* The segment asked for in next transmission. */
	pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	687a      	ldr	r2, [r7, #4]
 800f8aa:	621a      	str	r2, [r3, #32]

	/* The sequence number given to the next outgoing byte to be added is
	maintained by lTCPWindowTxAdd(). */
	pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	687a      	ldr	r2, [r7, #4]
 800f8b0:	635a      	str	r2, [r3, #52]	; 0x34

	/* The right-hand side of the transmit window. */
	pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	687a      	ldr	r2, [r7, #4]
 800f8b6:	629a      	str	r2, [r3, #40]	; 0x28
	pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	687a      	ldr	r2, [r7, #4]
 800f8bc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800f8be:	bf00      	nop
 800f8c0:	371c      	adds	r7, #28
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c8:	4770      	bx	lr

0800f8ca <xTCPWindowRxConfirm>:
 *=============================================================================*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowRxConfirm( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber, uint32_t ulLength )
	{
 800f8ca:	b580      	push	{r7, lr}
 800f8cc:	b08a      	sub	sp, #40	; 0x28
 800f8ce:	af00      	add	r7, sp, #0
 800f8d0:	60f8      	str	r0, [r7, #12]
 800f8d2:	60b9      	str	r1, [r7, #8]
 800f8d4:	607a      	str	r2, [r7, #4]
	TCPSegment_t *pxBest = NULL;
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	627b      	str	r3, [r7, #36]	; 0x24
	const ListItem_t *pxIterator;
	uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 800f8da:	68ba      	ldr	r2, [r7, #8]
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	4413      	add	r3, r2
 800f8e0:	61fb      	str	r3, [r7, #28]
	const MiniListItem_t* pxEnd = ( const MiniListItem_t* ) listGET_END_MARKER( &pxWindow->xRxSegments );
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	33ac      	adds	r3, #172	; 0xac
 800f8e6:	61bb      	str	r3, [r7, #24]
		and (ulSequenceNumber+ulLength).  Normally none will be found, because
		the next RX segment should have a sequence number equal to
		'(ulSequenceNumber+ulLength)'. */

		/* Iterate through all RX segments that are stored: */
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800f8e8:	69bb      	ldr	r3, [r7, #24]
 800f8ea:	685b      	ldr	r3, [r3, #4]
 800f8ec:	623b      	str	r3, [r7, #32]
 800f8ee:	e027      	b.n	800f940 <xTCPWindowRxConfirm+0x76>
			 pxIterator != ( const ListItem_t * ) pxEnd;
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800f8f0:	6a3b      	ldr	r3, [r7, #32]
 800f8f2:	68db      	ldr	r3, [r3, #12]
 800f8f4:	617b      	str	r3, [r7, #20]
			/* And see if there is a segment for which:
			'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
			If there are more matching segments, the one with the lowest sequence number
			shall be taken */
			if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 800f8f6:	697b      	ldr	r3, [r7, #20]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	68b9      	ldr	r1, [r7, #8]
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	f7ff fd5a 	bl	800f3b6 <xSequenceGreaterThanOrEqual>
 800f902:	4603      	mov	r3, r0
 800f904:	2b00      	cmp	r3, #0
 800f906:	d018      	beq.n	800f93a <xTCPWindowRxConfirm+0x70>
				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	69f9      	ldr	r1, [r7, #28]
 800f90e:	4618      	mov	r0, r3
 800f910:	f7ff fd2d 	bl	800f36e <xSequenceLessThan>
 800f914:	4603      	mov	r3, r0
			if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 800f916:	2b00      	cmp	r3, #0
 800f918:	d00f      	beq.n	800f93a <xTCPWindowRxConfirm+0x70>
			{
				if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 800f91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d00a      	beq.n	800f936 <xTCPWindowRxConfirm+0x6c>
 800f920:	697b      	ldr	r3, [r7, #20]
 800f922:	681a      	ldr	r2, [r3, #0]
 800f924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	4619      	mov	r1, r3
 800f92a:	4610      	mov	r0, r2
 800f92c:	f7ff fd1f 	bl	800f36e <xSequenceLessThan>
 800f930:	4603      	mov	r3, r0
 800f932:	2b00      	cmp	r3, #0
 800f934:	d001      	beq.n	800f93a <xTCPWindowRxConfirm+0x70>
				{
					pxBest = pxSegment;
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	627b      	str	r3, [r7, #36]	; 0x24
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800f93a:	6a3b      	ldr	r3, [r7, #32]
 800f93c:	685b      	ldr	r3, [r3, #4]
 800f93e:	623b      	str	r3, [r7, #32]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800f940:	6a3a      	ldr	r2, [r7, #32]
 800f942:	69bb      	ldr	r3, [r7, #24]
 800f944:	429a      	cmp	r2, r3
 800f946:	d1d3      	bne.n	800f8f0 <xTCPWindowRxConfirm+0x26>
				}
			}
		}

		if( ( pxBest != NULL ) &&
 800f948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d003      	beq.n	800f956 <xTCPWindowRxConfirm+0x8c>
			( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 800f94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f950:	681a      	ldr	r2, [r3, #0]
		if( ( pxBest != NULL ) &&
 800f952:	68bb      	ldr	r3, [r7, #8]
 800f954:	429a      	cmp	r2, r3
				pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber,
				pxBest->lDataLength,
				pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceNumber ) );
		}

		return pxBest;
 800f956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800f958:	4618      	mov	r0, r3
 800f95a:	3728      	adds	r7, #40	; 0x28
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd80      	pop	{r7, pc}

0800f960 <lTCPWindowRxCheck>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	int32_t lTCPWindowRxCheck( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber, uint32_t ulLength, uint32_t ulSpace )
	{
 800f960:	b580      	push	{r7, lr}
 800f962:	b08a      	sub	sp, #40	; 0x28
 800f964:	af00      	add	r7, sp, #0
 800f966:	60f8      	str	r0, [r7, #12]
 800f968:	60b9      	str	r1, [r7, #8]
 800f96a:	607a      	str	r2, [r7, #4]
 800f96c:	603b      	str	r3, [r7, #0]
		or there is not enough space.

		As a side-effect, pxWindow->ulUserDataLength will get set to non-zero,
		if more Rx data may be passed to the user after this packet. */

		ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	691b      	ldr	r3, [r3, #16]
 800f972:	627b      	str	r3, [r7, #36]	; 0x24

		/* For Selective Ack (SACK), used when out-of-sequence data come in. */
		pxWindow->ucOptionLength = 0u;
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	2200      	movs	r2, #0
 800f978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		/* Non-zero if TCP-windows contains data which must be popped. */
		pxWindow->ulUserDataLength = 0ul;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	2200      	movs	r2, #0
 800f980:	631a      	str	r2, [r3, #48]	; 0x30

		if( ulCurrentSequenceNumber == ulSequenceNumber )
 800f982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	429a      	cmp	r2, r3
 800f988:	d142      	bne.n	800fa10 <lTCPWindowRxCheck+0xb0>
		{
			/* This is the packet with the lowest sequence number we're waiting
			for.  It can be passed directly to the rx stream. */
			if( ulLength > ulSpace )
 800f98a:	687a      	ldr	r2, [r7, #4]
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	429a      	cmp	r2, r3
 800f990:	d903      	bls.n	800f99a <lTCPWindowRxCheck+0x3a>
			{
				FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu bytes, due to lack of space (%lu)\n", ulLength, ulSpace ) );
				lReturn = -1;
 800f992:	f04f 33ff 	mov.w	r3, #4294967295
 800f996:	61fb      	str	r3, [r7, #28]
 800f998:	e0b6      	b.n	800fb08 <lTCPWindowRxCheck+0x1a8>
			}
			else
			{
				ulCurrentSequenceNumber += ulLength;
 800f99a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	4413      	add	r3, r2
 800f9a0:	627b      	str	r3, [r7, #36]	; 0x24

				if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0 )
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d02b      	beq.n	800fa04 <lTCPWindowRxCheck+0xa4>
				{
					ulSavedSequenceNumber = ulCurrentSequenceNumber;
 800f9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ae:	61bb      	str	r3, [r7, #24]
                    If the server is forced to retransmit packets several time in a row it might send a batch of concatenated packet for speed.
                    So we cannot rely on the packets between ulSequenceNumber and ulSequenceNumber + ulLength to be sequential and it is better to just
                    clean them out. */
                    do
                    {
                        pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 800f9b0:	687a      	ldr	r2, [r7, #4]
 800f9b2:	68b9      	ldr	r1, [r7, #8]
 800f9b4:	68f8      	ldr	r0, [r7, #12]
 800f9b6:	f7ff ff88 	bl	800f8ca <xTCPWindowRxConfirm>
 800f9ba:	6178      	str	r0, [r7, #20]

                        if ( pxFound != NULL )
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d002      	beq.n	800f9c8 <lTCPWindowRxCheck+0x68>
                        {
                            /* Remove it because it will be passed to user directly. */
                            vTCPWindowFree( pxFound );
 800f9c2:	6978      	ldr	r0, [r7, #20]
 800f9c4:	f7ff fe90 	bl	800f6e8 <vTCPWindowFree>
                        }
                    } while ( pxFound );
 800f9c8:	697b      	ldr	r3, [r7, #20]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d1f0      	bne.n	800f9b0 <lTCPWindowRxCheck+0x50>

					/*  Check for following segments that are already in the
					queue and increment ulCurrentSequenceNumber. */
					while( ( pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber ) ) != NULL )
 800f9ce:	e008      	b.n	800f9e2 <lTCPWindowRxCheck+0x82>
					{
						ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 800f9d0:	697b      	ldr	r3, [r7, #20]
 800f9d2:	689b      	ldr	r3, [r3, #8]
 800f9d4:	461a      	mov	r2, r3
 800f9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9d8:	4413      	add	r3, r2
 800f9da:	627b      	str	r3, [r7, #36]	; 0x24

						/* As all packet below this one have been passed to the
						user it can be discarded. */
						vTCPWindowFree( pxFound );
 800f9dc:	6978      	ldr	r0, [r7, #20]
 800f9de:	f7ff fe83 	bl	800f6e8 <vTCPWindowFree>
					while( ( pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber ) ) != NULL )
 800f9e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f9e4:	68f8      	ldr	r0, [r7, #12]
 800f9e6:	f7ff fd95 	bl	800f514 <xTCPWindowRxFind>
 800f9ea:	6178      	str	r0, [r7, #20]
 800f9ec:	697b      	ldr	r3, [r7, #20]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d1ee      	bne.n	800f9d0 <lTCPWindowRxCheck+0x70>
					}

					if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 800f9f2:	69ba      	ldr	r2, [r7, #24]
 800f9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9f6:	429a      	cmp	r2, r3
 800f9f8:	d004      	beq.n	800fa04 <lTCPWindowRxCheck+0xa4>
					{
						/*  After the current data-package, there is more data
						to be popped. */
						pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 800f9fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9fc:	69bb      	ldr	r3, [r7, #24]
 800f9fe:	1ad2      	subs	r2, r2, r3
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	631a      	str	r2, [r3, #48]	; 0x30
								listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
						}
					}
				}

				pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa08:	611a      	str	r2, [r3, #16]

				/* Packet was expected, may be passed directly to the socket
				buffer or application.  Store the packet at offset 0. */
				lReturn = 0;
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	61fb      	str	r3, [r7, #28]
 800fa0e:	e07b      	b.n	800fb08 <lTCPWindowRxCheck+0x1a8>
			}
		}
		else if( ulCurrentSequenceNumber == ( ulSequenceNumber + 1UL ) )
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	1c5a      	adds	r2, r3, #1
 800fa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa16:	429a      	cmp	r2, r3
 800fa18:	d103      	bne.n	800fa22 <lTCPWindowRxCheck+0xc2>
		{
			/* Looks like a TCP keep-alive message.  Do not accept/store Rx data
			ulUserDataLength = 0. Not packet out-of-sync.  Just reply to it. */
			lReturn = -1;
 800fa1a:	f04f 33ff 	mov.w	r3, #4294967295
 800fa1e:	61fb      	str	r3, [r7, #28]
 800fa20:	e072      	b.n	800fb08 <lTCPWindowRxCheck+0x1a8>
			/* The packet is not the one expected.  See if it falls within the Rx
			window so it can be stored. */

			/*  An "out-of-sequence" segment was received, must have missed one.
			Prepare a SACK (Selective ACK). */
			ulLast = ulSequenceNumber + ulLength;
 800fa22:	68ba      	ldr	r2, [r7, #8]
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	4413      	add	r3, r2
 800fa28:	623b      	str	r3, [r7, #32]
			lDistance = ( int32_t ) ( ulLast - ulCurrentSequenceNumber );
 800fa2a:	6a3a      	ldr	r2, [r7, #32]
 800fa2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa2e:	1ad3      	subs	r3, r2, r3
 800fa30:	613b      	str	r3, [r7, #16]

			if( lDistance <= 0 )
 800fa32:	693b      	ldr	r3, [r7, #16]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	dc03      	bgt.n	800fa40 <lTCPWindowRxCheck+0xe0>
			{
				/* An earlier has been received, must be a retransmission of a
				packet that has been accepted already.  No need to send out a
				Selective ACK (SACK). */
				lReturn = -1;
 800fa38:	f04f 33ff 	mov.w	r3, #4294967295
 800fa3c:	61fb      	str	r3, [r7, #28]
 800fa3e:	e063      	b.n	800fb08 <lTCPWindowRxCheck+0x1a8>
			}
			else if( lDistance > ( int32_t ) ulSpace )
 800fa40:	683b      	ldr	r3, [r7, #0]
 800fa42:	693a      	ldr	r2, [r7, #16]
 800fa44:	429a      	cmp	r2, r3
 800fa46:	dd09      	ble.n	800fa5c <lTCPWindowRxCheck+0xfc>
			{
				/* The new segment is ahead of rx.ulCurrentSequenceNumber.  The
				sequence number of this packet is too far ahead, ignore it. */
				FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu+%lu bytes, due to lack of space (%lu)\n", lDistance, ulLength, ulSpace ) );
				lReturn = -1;
 800fa48:	f04f 33ff 	mov.w	r3, #4294967295
 800fa4c:	61fb      	str	r3, [r7, #28]
 800fa4e:	e05b      	b.n	800fb08 <lTCPWindowRxCheck+0x1a8>
				 * This is useful because subsequent packets will be SACK'd with
				 * single one message
				 */
				while( ( pxFound = xTCPWindowRxFind( pxWindow, ulLast ) ) != NULL )
				{
					ulLast += ( uint32_t ) pxFound->lDataLength;
 800fa50:	697b      	ldr	r3, [r7, #20]
 800fa52:	689b      	ldr	r3, [r3, #8]
 800fa54:	461a      	mov	r2, r3
 800fa56:	6a3b      	ldr	r3, [r7, #32]
 800fa58:	4413      	add	r3, r2
 800fa5a:	623b      	str	r3, [r7, #32]
				while( ( pxFound = xTCPWindowRxFind( pxWindow, ulLast ) ) != NULL )
 800fa5c:	6a39      	ldr	r1, [r7, #32]
 800fa5e:	68f8      	ldr	r0, [r7, #12]
 800fa60:	f7ff fd58 	bl	800f514 <xTCPWindowRxFind>
 800fa64:	6178      	str	r0, [r7, #20]
 800fa66:	697b      	ldr	r3, [r7, #20]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d1f1      	bne.n	800fa50 <lTCPWindowRxCheck+0xf0>
						ulLast - pxWindow->rx.ulFirstSequenceNumber ) );
				}

				/* Now prepare the SACK message.
				Code OPTION_CODE_SINGLE_SACK already in network byte order. */
				pxWindow->ulOptionsData[0] = OPTION_CODE_SINGLE_SACK;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	4a29      	ldr	r2, [pc, #164]	; (800fb14 <lTCPWindowRxCheck+0x1b4>)
 800fa70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

				/* First sequence number that we received. */
				pxWindow->ulOptionsData[1] = FreeRTOS_htonl( ulSequenceNumber );
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	061a      	lsls	r2, r3, #24
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	021b      	lsls	r3, r3, #8
 800fa7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fa80:	431a      	orrs	r2, r3
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	0a1b      	lsrs	r3, r3, #8
 800fa86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800fa8a:	431a      	orrs	r2, r3
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	0e1b      	lsrs	r3, r3, #24
 800fa90:	431a      	orrs	r2, r3
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

				/* Last + 1 */
				pxWindow->ulOptionsData[2] = FreeRTOS_htonl( ulLast );
 800fa98:	6a3b      	ldr	r3, [r7, #32]
 800fa9a:	061a      	lsls	r2, r3, #24
 800fa9c:	6a3b      	ldr	r3, [r7, #32]
 800fa9e:	021b      	lsls	r3, r3, #8
 800faa0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800faa4:	431a      	orrs	r2, r3
 800faa6:	6a3b      	ldr	r3, [r7, #32]
 800faa8:	0a1b      	lsrs	r3, r3, #8
 800faaa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800faae:	431a      	orrs	r2, r3
 800fab0:	6a3b      	ldr	r3, [r7, #32]
 800fab2:	0e1b      	lsrs	r3, r3, #24
 800fab4:	431a      	orrs	r2, r3
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

				/* Which make 12 (3*4) option bytes. */
				pxWindow->ucOptionLength = 3 * sizeof( pxWindow->ulOptionsData[ 0 ] );
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	220c      	movs	r2, #12
 800fac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

				pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 800fac4:	68b9      	ldr	r1, [r7, #8]
 800fac6:	68f8      	ldr	r0, [r7, #12]
 800fac8:	f7ff fd24 	bl	800f514 <xTCPWindowRxFind>
 800facc:	6178      	str	r0, [r7, #20]

				if( pxFound != NULL )
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d003      	beq.n	800fadc <lTCPWindowRxCheck+0x17c>
				{
					/* This out-of-sequence packet has been received for a
					second time.  It is already stored but do send a SACK
					again. */
					lReturn = -1;
 800fad4:	f04f 33ff 	mov.w	r3, #4294967295
 800fad8:	61fb      	str	r3, [r7, #28]
 800fada:	e015      	b.n	800fb08 <lTCPWindowRxCheck+0x1a8>
				}
				else
				{
					pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 800fadc:	687a      	ldr	r2, [r7, #4]
 800fade:	2301      	movs	r3, #1
 800fae0:	68b9      	ldr	r1, [r7, #8]
 800fae2:	68f8      	ldr	r0, [r7, #12]
 800fae4:	f7ff fd3e 	bl	800f564 <xTCPWindowNew>
 800fae8:	6178      	str	r0, [r7, #20]

					if( pxFound == NULL )
 800faea:	697b      	ldr	r3, [r7, #20]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d107      	bne.n	800fb00 <lTCPWindowRxCheck+0x1a0>
					{
						/* Can not send a SACK, because the segment cannot be
						stored. */
						pxWindow->ucOptionLength = 0u;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	2200      	movs	r2, #0
 800faf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

						/* Needs to be stored but there is no segment
						available. */
						lReturn = -1;
 800faf8:	f04f 33ff 	mov.w	r3, #4294967295
 800fafc:	61fb      	str	r3, [r7, #28]
 800fafe:	e003      	b.n	800fb08 <lTCPWindowRxCheck+0x1a8>
							FreeRTOS_flush_logging( );
						}

						/* Return a positive value.  The packet may be accepted
						and stored but an earlier packet is still missing. */
						lReturn = ( int32_t ) ( ulSequenceNumber - ulCurrentSequenceNumber );
 800fb00:	68ba      	ldr	r2, [r7, #8]
 800fb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb04:	1ad3      	subs	r3, r2, r3
 800fb06:	61fb      	str	r3, [r7, #28]
					}
				}
			}
		}

		return lReturn;
 800fb08:	69fb      	ldr	r3, [r7, #28]
	}
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	3728      	adds	r7, #40	; 0x28
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	bd80      	pop	{r7, pc}
 800fb12:	bf00      	nop
 800fb14:	0a050101 	.word	0x0a050101

0800fb18 <lTCPIncrementTxPosition>:
 *=============================================================================*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static int32_t lTCPIncrementTxPosition( int32_t lPosition, int32_t lMax, int32_t lCount )
	{
 800fb18:	b480      	push	{r7}
 800fb1a:	b085      	sub	sp, #20
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	60f8      	str	r0, [r7, #12]
 800fb20:	60b9      	str	r1, [r7, #8]
 800fb22:	607a      	str	r2, [r7, #4]
		/* +TCP stores data in circular buffers.  Calculate the next position to
		store. */
		lPosition += lCount;
 800fb24:	68fa      	ldr	r2, [r7, #12]
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	4413      	add	r3, r2
 800fb2a:	60fb      	str	r3, [r7, #12]
		if( lPosition >= lMax )
 800fb2c:	68fa      	ldr	r2, [r7, #12]
 800fb2e:	68bb      	ldr	r3, [r7, #8]
 800fb30:	429a      	cmp	r2, r3
 800fb32:	db03      	blt.n	800fb3c <lTCPIncrementTxPosition+0x24>
		{
			lPosition -= lMax;
 800fb34:	68fa      	ldr	r2, [r7, #12]
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	1ad3      	subs	r3, r2, r3
 800fb3a:	60fb      	str	r3, [r7, #12]
		}

		return lPosition;
 800fb3c:	68fb      	ldr	r3, [r7, #12]
	}
 800fb3e:	4618      	mov	r0, r3
 800fb40:	3714      	adds	r7, #20
 800fb42:	46bd      	mov	sp, r7
 800fb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb48:	4770      	bx	lr
	...

0800fb4c <lTCPWindowTxAdd>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	int32_t lTCPWindowTxAdd( TCPWindow_t *pxWindow, uint32_t ulLength, int32_t lPosition, int32_t lMax )
	{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b088      	sub	sp, #32
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	60f8      	str	r0, [r7, #12]
 800fb54:	60b9      	str	r1, [r7, #8]
 800fb56:	607a      	str	r2, [r7, #4]
 800fb58:	603b      	str	r3, [r7, #0]
	int32_t lBytesLeft = ( int32_t ) ulLength, lToWrite;
 800fb5a:	68bb      	ldr	r3, [r7, #8]
 800fb5c:	61fb      	str	r3, [r7, #28]
	int32_t lDone = 0;
 800fb5e:	2300      	movs	r3, #0
 800fb60:	61bb      	str	r3, [r7, #24]
	TCPSegment_t *pxSegment = pxWindow->pxHeadSegment;
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb66:	617b      	str	r3, [r7, #20]

		/* Puts a message in the Tx-window (after buffer size has been
		verified). */
		if( pxSegment != NULL )
 800fb68:	697b      	ldr	r3, [r7, #20]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	f000 8096 	beq.w	800fc9c <lTCPWindowTxAdd+0x150>
		{
			if( pxSegment->lDataLength < pxSegment->lMaxLength )
 800fb70:	697b      	ldr	r3, [r7, #20]
 800fb72:	689a      	ldr	r2, [r3, #8]
 800fb74:	697b      	ldr	r3, [r7, #20]
 800fb76:	685b      	ldr	r3, [r3, #4]
 800fb78:	429a      	cmp	r2, r3
 800fb7a:	f280 808f 	bge.w	800fc9c <lTCPWindowTxAdd+0x150>
			{
				if( ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength != 0 ) )
 800fb7e:	697b      	ldr	r3, [r7, #20]
 800fb80:	7d9b      	ldrb	r3, [r3, #22]
 800fb82:	f003 0301 	and.w	r3, r3, #1
 800fb86:	b2db      	uxtb	r3, r3
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	f040 8087 	bne.w	800fc9c <lTCPWindowTxAdd+0x150>
 800fb8e:	697b      	ldr	r3, [r7, #20]
 800fb90:	689b      	ldr	r3, [r3, #8]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	f000 8082 	beq.w	800fc9c <lTCPWindowTxAdd+0x150>
				{
					/* Adding data to a segment that was already in the TX queue.  It
					will be filled-up to a maximum of MSS (maximum segment size). */
					lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 800fb98:	697b      	ldr	r3, [r7, #20]
 800fb9a:	685a      	ldr	r2, [r3, #4]
 800fb9c:	697b      	ldr	r3, [r7, #20]
 800fb9e:	689b      	ldr	r3, [r3, #8]
 800fba0:	1ad3      	subs	r3, r2, r3
 800fba2:	4619      	mov	r1, r3
 800fba4:	69f8      	ldr	r0, [r7, #28]
 800fba6:	f7ff fbb1 	bl	800f30c <FreeRTOS_min_int32>
 800fbaa:	6138      	str	r0, [r7, #16]

					pxSegment->lDataLength += lToWrite;
 800fbac:	697b      	ldr	r3, [r7, #20]
 800fbae:	689a      	ldr	r2, [r3, #8]
 800fbb0:	693b      	ldr	r3, [r7, #16]
 800fbb2:	441a      	add	r2, r3
 800fbb4:	697b      	ldr	r3, [r7, #20]
 800fbb6:	609a      	str	r2, [r3, #8]

					if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 800fbb8:	697b      	ldr	r3, [r7, #20]
 800fbba:	689a      	ldr	r2, [r3, #8]
 800fbbc:	697b      	ldr	r3, [r7, #20]
 800fbbe:	685b      	ldr	r3, [r3, #4]
 800fbc0:	429a      	cmp	r2, r3
 800fbc2:	db02      	blt.n	800fbca <lTCPWindowTxAdd+0x7e>
					{
						/* This segment is full, don't add more bytes. */
						pxWindow->pxHeadSegment = NULL;
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	67da      	str	r2, [r3, #124]	; 0x7c
					}

					lBytesLeft -= lToWrite;
 800fbca:	69fa      	ldr	r2, [r7, #28]
 800fbcc:	693b      	ldr	r3, [r7, #16]
 800fbce:	1ad3      	subs	r3, r2, r3
 800fbd0:	61fb      	str	r3, [r7, #28]

					/* ulNextTxSequenceNumber is the sequence number of the next byte to
					be stored for transmission. */
					pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fbd6:	693b      	ldr	r3, [r7, #16]
 800fbd8:	441a      	add	r2, r3
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	635a      	str	r2, [r3, #52]	; 0x34

					/* Increased the return value. */
					lDone += lToWrite;
 800fbde:	69ba      	ldr	r2, [r7, #24]
 800fbe0:	693b      	ldr	r3, [r7, #16]
 800fbe2:	4413      	add	r3, r2
 800fbe4:	61bb      	str	r3, [r7, #24]

					/* Some detailed logging, for those who're interested. */
					if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != 0 ) )
 800fbe6:	4b32      	ldr	r3, [pc, #200]	; (800fcb0 <lTCPWindowTxAdd+0x164>)
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	2b01      	cmp	r3, #1
						FreeRTOS_flush_logging( );
					}

					/* Calculate the next position in the circular data buffer, knowing
					its maximum length 'lMax'. */
					lPosition = lTCPIncrementTxPosition( lPosition, lMax, lToWrite );
 800fbec:	693a      	ldr	r2, [r7, #16]
 800fbee:	6839      	ldr	r1, [r7, #0]
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	f7ff ff91 	bl	800fb18 <lTCPIncrementTxPosition>
 800fbf6:	6078      	str	r0, [r7, #4]
				}
			}
		}

		while( lBytesLeft > 0 )
 800fbf8:	e050      	b.n	800fc9c <lTCPWindowTxAdd+0x150>
		{
			/* The current transmission segment is full, create new segments as
			needed. */
			pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, pxWindow->usMSS );
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800fc04:	461a      	mov	r2, r3
 800fc06:	2300      	movs	r3, #0
 800fc08:	68f8      	ldr	r0, [r7, #12]
 800fc0a:	f7ff fcab 	bl	800f564 <xTCPWindowNew>
 800fc0e:	6178      	str	r0, [r7, #20]

			if( pxSegment != NULL )
 800fc10:	697b      	ldr	r3, [r7, #20]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d046      	beq.n	800fca4 <lTCPWindowTxAdd+0x158>
			{
				/* Store as many as needed, but no more than the maximum
				(MSS). */
				lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 800fc16:	697b      	ldr	r3, [r7, #20]
 800fc18:	685b      	ldr	r3, [r3, #4]
 800fc1a:	4619      	mov	r1, r3
 800fc1c:	69f8      	ldr	r0, [r7, #28]
 800fc1e:	f7ff fb75 	bl	800f30c <FreeRTOS_min_int32>
 800fc22:	6138      	str	r0, [r7, #16]

				pxSegment->lDataLength = lToWrite;
 800fc24:	697b      	ldr	r3, [r7, #20]
 800fc26:	693a      	ldr	r2, [r7, #16]
 800fc28:	609a      	str	r2, [r3, #8]
				pxSegment->lStreamPos = lPosition;
 800fc2a:	697b      	ldr	r3, [r7, #20]
 800fc2c:	687a      	ldr	r2, [r7, #4]
 800fc2e:	60da      	str	r2, [r3, #12]
				lBytesLeft -= lToWrite;
 800fc30:	69fa      	ldr	r2, [r7, #28]
 800fc32:	693b      	ldr	r3, [r7, #16]
 800fc34:	1ad3      	subs	r3, r2, r3
 800fc36:	61fb      	str	r3, [r7, #28]
				lPosition = lTCPIncrementTxPosition( lPosition, lMax, lToWrite );
 800fc38:	693a      	ldr	r2, [r7, #16]
 800fc3a:	6839      	ldr	r1, [r7, #0]
 800fc3c:	6878      	ldr	r0, [r7, #4]
 800fc3e:	f7ff ff6b 	bl	800fb18 <lTCPIncrementTxPosition>
 800fc42:	6078      	str	r0, [r7, #4]
				pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fc48:	693b      	ldr	r3, [r7, #16]
 800fc4a:	441a      	add	r2, r3
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	635a      	str	r2, [r3, #52]	; 0x34
				lDone += lToWrite;
 800fc50:	69ba      	ldr	r2, [r7, #24]
 800fc52:	693b      	ldr	r3, [r7, #16]
 800fc54:	4413      	add	r3, r2
 800fc56:	61bb      	str	r3, [r7, #24]

				/* Link this segment in the Tx-Queue. */
				vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800fc5e:	697b      	ldr	r3, [r7, #20]
 800fc60:	3318      	adds	r3, #24
 800fc62:	4619      	mov	r1, r3
 800fc64:	4610      	mov	r0, r2
 800fc66:	f7ff fbb7 	bl	800f3d8 <vListInsertFifo>

				/* Let 'pxHeadSegment' point to this segment if there is still
				space. */
				if( pxSegment->lDataLength < pxSegment->lMaxLength )
 800fc6a:	697b      	ldr	r3, [r7, #20]
 800fc6c:	689a      	ldr	r2, [r3, #8]
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	685b      	ldr	r3, [r3, #4]
 800fc72:	429a      	cmp	r2, r3
 800fc74:	da03      	bge.n	800fc7e <lTCPWindowTxAdd+0x132>
				{
					pxWindow->pxHeadSegment = pxSegment;
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	697a      	ldr	r2, [r7, #20]
 800fc7a:	67da      	str	r2, [r3, #124]	; 0x7c
 800fc7c:	e002      	b.n	800fc84 <lTCPWindowTxAdd+0x138>
				}
				else
				{
					pxWindow->pxHeadSegment = NULL;
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	2200      	movs	r2, #0
 800fc82:	67da      	str	r2, [r3, #124]	; 0x7c
				}

				if( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != 0 )
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800fc8a:	2b17      	cmp	r3, #23
 800fc8c:	d006      	beq.n	800fc9c <lTCPWindowTxAdd+0x150>
				{
					if( ( xTCPWindowLoggingLevel >= 3 ) ||
 800fc8e:	4b08      	ldr	r3, [pc, #32]	; (800fcb0 <lTCPWindowTxAdd+0x164>)
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	2b02      	cmp	r3, #2
 800fc94:	dc02      	bgt.n	800fc9c <lTCPWindowTxAdd+0x150>
						( ( xTCPWindowLoggingLevel >= 2 ) && ( pxWindow->pxHeadSegment != NULL ) ) )
 800fc96:	4b06      	ldr	r3, [pc, #24]	; (800fcb0 <lTCPWindowTxAdd+0x164>)
 800fc98:	681b      	ldr	r3, [r3, #0]
					if( ( xTCPWindowLoggingLevel >= 3 ) ||
 800fc9a:	2b01      	cmp	r3, #1
		while( lBytesLeft > 0 )
 800fc9c:	69fb      	ldr	r3, [r7, #28]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	dcab      	bgt.n	800fbfa <lTCPWindowTxAdd+0xae>
 800fca2:	e000      	b.n	800fca6 <lTCPWindowTxAdd+0x15a>
				No more data can be sent at the moment. */
				if( lDone != 0 )
				{
					FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %ld bytes)\n", lBytesLeft ) );
				}
				break;
 800fca4:	bf00      	nop
			}
		}

		return lDone;
 800fca6:	69bb      	ldr	r3, [r7, #24]
	}
 800fca8:	4618      	mov	r0, r3
 800fcaa:	3720      	adds	r7, #32
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}
 800fcb0:	20004ee0 	.word	0x20004ee0

0800fcb4 <xTCPWindowTxDone>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	BaseType_t xTCPWindowTxDone( TCPWindow_t *pxWindow )
	{
 800fcb4:	b480      	push	{r7}
 800fcb6:	b083      	sub	sp, #12
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
		return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments) );
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	bf0c      	ite	eq
 800fcc6:	2301      	moveq	r3, #1
 800fcc8:	2300      	movne	r3, #0
 800fcca:	b2db      	uxtb	r3, r3
	}
 800fccc:	4618      	mov	r0, r3
 800fcce:	370c      	adds	r7, #12
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd6:	4770      	bx	lr

0800fcd8 <prvTCPWindowTxHasSpace>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t *pxWindow, uint32_t ulWindowSize )
	{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b086      	sub	sp, #24
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
 800fce0:	6039      	str	r1, [r7, #0]
	TCPSegment_t *pxSegment;

		/* This function will look if there is new transmission data.  It will
		return true if there is data to be sent. */

		pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	3354      	adds	r3, #84	; 0x54
 800fce6:	4618      	mov	r0, r3
 800fce8:	f7ff fce1 	bl	800f6ae <xTCPWindowPeekHead>
 800fcec:	60f8      	str	r0, [r7, #12]

		if( pxSegment == NULL )
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d102      	bne.n	800fcfa <prvTCPWindowTxHasSpace+0x22>
		{
			xHasSpace = pdFALSE;
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	613b      	str	r3, [r7, #16]
 800fcf8:	e02f      	b.n	800fd5a <prvTCPWindowTxHasSpace+0x82>
		}
		else
		{
			/* How much data is outstanding, i.e. how much data has been sent
			but not yet acknowledged ? */
			if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	6a1b      	ldr	r3, [r3, #32]
 800fd02:	429a      	cmp	r2, r3
 800fd04:	d306      	bcc.n	800fd14 <prvTCPWindowTxHasSpace+0x3c>
			{
				ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	6a1b      	ldr	r3, [r3, #32]
 800fd0e:	1ad3      	subs	r3, r2, r3
 800fd10:	617b      	str	r3, [r7, #20]
 800fd12:	e001      	b.n	800fd18 <prvTCPWindowTxHasSpace+0x40>
			}
			else
			{
				ulTxOutstanding = 0UL;
 800fd14:	2300      	movs	r3, #0
 800fd16:	617b      	str	r3, [r7, #20]
			}

			/* Subtract this from the peer's space. */
			ulWindowSize -= FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 800fd18:	6979      	ldr	r1, [r7, #20]
 800fd1a:	6838      	ldr	r0, [r7, #0]
 800fd1c:	f7ff fb06 	bl	800f32c <FreeRTOS_min_uint32>
 800fd20:	4602      	mov	r2, r0
 800fd22:	683b      	ldr	r3, [r7, #0]
 800fd24:	1a9b      	subs	r3, r3, r2
 800fd26:	603b      	str	r3, [r7, #0]

			/* See if the next segment may be sent. */
			if( ulWindowSize >= ( uint32_t ) pxSegment->lDataLength )
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	689b      	ldr	r3, [r3, #8]
 800fd2c:	461a      	mov	r2, r3
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	429a      	cmp	r2, r3
 800fd32:	d802      	bhi.n	800fd3a <prvTCPWindowTxHasSpace+0x62>
			{
				xHasSpace = pdTRUE;
 800fd34:	2301      	movs	r3, #1
 800fd36:	613b      	str	r3, [r7, #16]
 800fd38:	e001      	b.n	800fd3e <prvTCPWindowTxHasSpace+0x66>
			}
			else
			{
				xHasSpace = pdFALSE;
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	613b      	str	r3, [r7, #16]

			/* If 'xHasSpace', it looks like the peer has at least space for 1
			more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
			limitation of the transmission window (in case of many resends it
			may be decreased). */
			if( ( ulTxOutstanding != 0UL ) && ( pxWindow->xSize.ulTxWindowLength < ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) )
 800fd3e:	697b      	ldr	r3, [r7, #20]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d00a      	beq.n	800fd5a <prvTCPWindowTxHasSpace+0x82>
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	689a      	ldr	r2, [r3, #8]
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	689b      	ldr	r3, [r3, #8]
 800fd4c:	4619      	mov	r1, r3
 800fd4e:	697b      	ldr	r3, [r7, #20]
 800fd50:	440b      	add	r3, r1
 800fd52:	429a      	cmp	r2, r3
 800fd54:	d201      	bcs.n	800fd5a <prvTCPWindowTxHasSpace+0x82>
			{
				xHasSpace = pdFALSE;
 800fd56:	2300      	movs	r3, #0
 800fd58:	613b      	str	r3, [r7, #16]
			}
		}

		return xHasSpace;
 800fd5a:	693b      	ldr	r3, [r7, #16]
	}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	3718      	adds	r7, #24
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd80      	pop	{r7, pc}

0800fd64 <xTCPWindowTxHasData>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	BaseType_t xTCPWindowTxHasData( TCPWindow_t *pxWindow, uint32_t ulWindowSize, TickType_t *pulDelay )
	{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b088      	sub	sp, #32
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	60f8      	str	r0, [r7, #12]
 800fd6c:	60b9      	str	r1, [r7, #8]
 800fd6e:	607a      	str	r2, [r7, #4]
	TCPSegment_t *pxSegment;
	BaseType_t xReturn;
	TickType_t ulAge, ulMaxAge;

		*pulDelay = 0u;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	2200      	movs	r2, #0
 800fd74:	601a      	str	r2, [r3, #0]

		if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d002      	beq.n	800fd84 <xTCPWindowTxHasData+0x20>
		{
			/* No need to look at retransmissions or new transmission as long as
			there are priority segments.  *pulDelay equals zero, meaning it must
			be sent out immediately. */
			xReturn = pdTRUE;
 800fd7e:	2301      	movs	r3, #1
 800fd80:	61fb      	str	r3, [r7, #28]
 800fd82:	e04a      	b.n	800fe1a <xTCPWindowTxHasData+0xb6>
		}
		else
		{
			pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	3368      	adds	r3, #104	; 0x68
 800fd88:	4618      	mov	r0, r3
 800fd8a:	f7ff fc90 	bl	800f6ae <xTCPWindowPeekHead>
 800fd8e:	61b8      	str	r0, [r7, #24]

			if( pxSegment != NULL )
 800fd90:	69bb      	ldr	r3, [r7, #24]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d019      	beq.n	800fdca <xTCPWindowTxHasData+0x66>
			{
				/* There is an outstanding segment, see if it is time to resend
				it. */
				ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 800fd96:	69bb      	ldr	r3, [r7, #24]
 800fd98:	3310      	adds	r3, #16
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	f7ff fb39 	bl	800f412 <ulTimerGetAge>
 800fda0:	6178      	str	r0, [r7, #20]

				/* After a packet has been sent for the first time, it will wait
				'1 * lSRTT' ms for an ACK. A second time it will wait '2 * lSRTT' ms,
				each time doubling the time-out */
				ulMaxAge = ( 1u << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fda6:	461a      	mov	r2, r3
 800fda8:	69bb      	ldr	r3, [r7, #24]
 800fdaa:	7d1b      	ldrb	r3, [r3, #20]
 800fdac:	fa02 f303 	lsl.w	r3, r2, r3
 800fdb0:	613b      	str	r3, [r7, #16]

				if( ulMaxAge > ulAge )
 800fdb2:	693a      	ldr	r2, [r7, #16]
 800fdb4:	697b      	ldr	r3, [r7, #20]
 800fdb6:	429a      	cmp	r2, r3
 800fdb8:	d904      	bls.n	800fdc4 <xTCPWindowTxHasData+0x60>
				{
					/* A segment must be sent after this amount of msecs */
					*pulDelay = ulMaxAge - ulAge;
 800fdba:	693a      	ldr	r2, [r7, #16]
 800fdbc:	697b      	ldr	r3, [r7, #20]
 800fdbe:	1ad2      	subs	r2, r2, r3
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	601a      	str	r2, [r3, #0]
				}

				xReturn = pdTRUE;
 800fdc4:	2301      	movs	r3, #1
 800fdc6:	61fb      	str	r3, [r7, #28]
 800fdc8:	e027      	b.n	800fe1a <xTCPWindowTxHasData+0xb6>
			}
			else
			{
				/* No priority segment, no outstanding data, see if there is new
				transmission data. */
				pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	3354      	adds	r3, #84	; 0x54
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f7ff fc6d 	bl	800f6ae <xTCPWindowPeekHead>
 800fdd4:	61b8      	str	r0, [r7, #24]

				/* See if it fits in the peer's reception window. */
				if( pxSegment == NULL )
 800fdd6:	69bb      	ldr	r3, [r7, #24]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d102      	bne.n	800fde2 <xTCPWindowTxHasData+0x7e>
				{
					xReturn = pdFALSE;
 800fddc:	2300      	movs	r3, #0
 800fdde:	61fb      	str	r3, [r7, #28]
 800fde0:	e01b      	b.n	800fe1a <xTCPWindowTxHasData+0xb6>
				}
				else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 800fde2:	68b9      	ldr	r1, [r7, #8]
 800fde4:	68f8      	ldr	r0, [r7, #12]
 800fde6:	f7ff ff77 	bl	800fcd8 <prvTCPWindowTxHasSpace>
 800fdea:	4603      	mov	r3, r0
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d102      	bne.n	800fdf6 <xTCPWindowTxHasData+0x92>
				{
					/* Too many outstanding messages. */
					xReturn = pdFALSE;
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	61fb      	str	r3, [r7, #28]
 800fdf4:	e011      	b.n	800fe1a <xTCPWindowTxHasData+0xb6>
				}
				else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	781b      	ldrb	r3, [r3, #0]
 800fdfa:	f003 0302 	and.w	r3, r3, #2
 800fdfe:	b2db      	uxtb	r3, r3
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d008      	beq.n	800fe16 <xTCPWindowTxHasData+0xb2>
 800fe04:	69bb      	ldr	r3, [r7, #24]
 800fe06:	689a      	ldr	r2, [r3, #8]
 800fe08:	69bb      	ldr	r3, [r7, #24]
 800fe0a:	685b      	ldr	r3, [r3, #4]
 800fe0c:	429a      	cmp	r2, r3
 800fe0e:	da02      	bge.n	800fe16 <xTCPWindowTxHasData+0xb2>
				{
					/* 'bSendFullSize' is a special optimisation.  If true, the
					driver will only sent completely filled packets (of MSS
					bytes). */
					xReturn = pdFALSE;
 800fe10:	2300      	movs	r3, #0
 800fe12:	61fb      	str	r3, [r7, #28]
 800fe14:	e001      	b.n	800fe1a <xTCPWindowTxHasData+0xb6>
				}
				else
				{
					xReturn = pdTRUE;
 800fe16:	2301      	movs	r3, #1
 800fe18:	61fb      	str	r3, [r7, #28]
				}
			}
		}

		return xReturn;
 800fe1a:	69fb      	ldr	r3, [r7, #28]
	}
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	3720      	adds	r7, #32
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd80      	pop	{r7, pc}

0800fe24 <ulTCPWindowTxGet>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	uint32_t ulTCPWindowTxGet( TCPWindow_t *pxWindow, uint32_t ulWindowSize, int32_t *plPosition )
	{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b088      	sub	sp, #32
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	60f8      	str	r0, [r7, #12]
 800fe2c:	60b9      	str	r1, [r7, #8]
 800fe2e:	607a      	str	r2, [r7, #4]
	TCPSegment_t *pxSegment;
	uint32_t ulMaxTime;
	uint32_t ulReturn  = ~0UL;
 800fe30:	f04f 33ff 	mov.w	r3, #4294967295
 800fe34:	61bb      	str	r3, [r7, #24]

		/* Fetches data to be sent-out now.

		Priority messages: segments with a resend need no check current sliding
		window size. */
		pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	3340      	adds	r3, #64	; 0x40
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	f7ff fc19 	bl	800f672 <xTCPWindowGetHead>
 800fe40:	61f8      	str	r0, [r7, #28]
		pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	62da      	str	r2, [r3, #44]	; 0x2c

		if( pxSegment == NULL )
 800fe4a:	69fb      	ldr	r3, [r7, #28]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d16e      	bne.n	800ff2e <ulTCPWindowTxGet+0x10a>
		{
			/* Waiting messages: outstanding messages with a running timer
			neither check peer's reception window size because these packets
			have been sent earlier. */
			pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	3368      	adds	r3, #104	; 0x68
 800fe54:	4618      	mov	r0, r3
 800fe56:	f7ff fc2a 	bl	800f6ae <xTCPWindowPeekHead>
 800fe5a:	61f8      	str	r0, [r7, #28]

			if( pxSegment != NULL )
 800fe5c:	69fb      	ldr	r3, [r7, #28]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d01f      	beq.n	800fea2 <ulTCPWindowTxGet+0x7e>
			{
				/* Do check the timing. */
				ulMaxTime = ( 1u << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe66:	461a      	mov	r2, r3
 800fe68:	69fb      	ldr	r3, [r7, #28]
 800fe6a:	7d1b      	ldrb	r3, [r3, #20]
 800fe6c:	fa02 f303 	lsl.w	r3, r2, r3
 800fe70:	617b      	str	r3, [r7, #20]

				if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 800fe72:	69fb      	ldr	r3, [r7, #28]
 800fe74:	3310      	adds	r3, #16
 800fe76:	4618      	mov	r0, r3
 800fe78:	f7ff facb 	bl	800f412 <ulTimerGetAge>
 800fe7c:	4602      	mov	r2, r0
 800fe7e:	697b      	ldr	r3, [r7, #20]
 800fe80:	429a      	cmp	r2, r3
 800fe82:	d90c      	bls.n	800fe9e <ulTCPWindowTxGet+0x7a>
				{
					/* A normal (non-fast) retransmission.  Move it from the
					head of the waiting queue. */
					pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	3368      	adds	r3, #104	; 0x68
 800fe88:	4618      	mov	r0, r3
 800fe8a:	f7ff fbf2 	bl	800f672 <xTCPWindowGetHead>
 800fe8e:	61f8      	str	r0, [r7, #28]
					pxSegment->u.bits.ucDupAckCount = pdFALSE_UNSIGNED;
 800fe90:	69fb      	ldr	r3, [r7, #28]
 800fe92:	2200      	movs	r2, #0
 800fe94:	755a      	strb	r2, [r3, #21]

					/* Some detailed logging. */
					if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != 0 ) )
 800fe96:	4b4c      	ldr	r3, [pc, #304]	; (800ffc8 <ulTCPWindowTxGet+0x1a4>)
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	e001      	b.n	800fea2 <ulTCPWindowTxGet+0x7e>
						FreeRTOS_flush_logging( );
					}
				}
				else
				{
					pxSegment = NULL;
 800fe9e:	2300      	movs	r3, #0
 800fea0:	61fb      	str	r3, [r7, #28]
				}
			}

			if( pxSegment == NULL )
 800fea2:	69fb      	ldr	r3, [r7, #28]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d142      	bne.n	800ff2e <ulTCPWindowTxGet+0x10a>
			{
				/* New messages: sent-out for the first time.  Check current
				sliding window size of peer. */
				pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	3354      	adds	r3, #84	; 0x54
 800feac:	4618      	mov	r0, r3
 800feae:	f7ff fbfe 	bl	800f6ae <xTCPWindowPeekHead>
 800feb2:	61f8      	str	r0, [r7, #28]

				if( pxSegment == NULL )
 800feb4:	69fb      	ldr	r3, [r7, #28]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d102      	bne.n	800fec0 <ulTCPWindowTxGet+0x9c>
				{
					/* No segments queued. */
					ulReturn = 0UL;
 800feba:	2300      	movs	r3, #0
 800febc:	61bb      	str	r3, [r7, #24]
 800febe:	e036      	b.n	800ff2e <ulTCPWindowTxGet+0x10a>
				}
				else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	781b      	ldrb	r3, [r3, #0]
 800fec4:	f003 0302 	and.w	r3, r3, #2
 800fec8:	b2db      	uxtb	r3, r3
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d008      	beq.n	800fee0 <ulTCPWindowTxGet+0xbc>
 800fece:	69fb      	ldr	r3, [r7, #28]
 800fed0:	689a      	ldr	r2, [r3, #8]
 800fed2:	69fb      	ldr	r3, [r7, #28]
 800fed4:	685b      	ldr	r3, [r3, #4]
 800fed6:	429a      	cmp	r2, r3
 800fed8:	da02      	bge.n	800fee0 <ulTCPWindowTxGet+0xbc>
				{
					/* A segment has been queued but the driver waits until it
					has a full size of MSS. */
					ulReturn = 0;
 800feda:	2300      	movs	r3, #0
 800fedc:	61bb      	str	r3, [r7, #24]
 800fede:	e026      	b.n	800ff2e <ulTCPWindowTxGet+0x10a>
				}
				else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 800fee0:	68b9      	ldr	r1, [r7, #8]
 800fee2:	68f8      	ldr	r0, [r7, #12]
 800fee4:	f7ff fef8 	bl	800fcd8 <prvTCPWindowTxHasSpace>
 800fee8:	4603      	mov	r3, r0
 800feea:	2b00      	cmp	r3, #0
 800feec:	d102      	bne.n	800fef4 <ulTCPWindowTxGet+0xd0>
				{
					/* Peer has no more space at this moment. */
					ulReturn = 0;
 800feee:	2300      	movs	r3, #0
 800fef0:	61bb      	str	r3, [r7, #24]
 800fef2:	e01c      	b.n	800ff2e <ulTCPWindowTxGet+0x10a>
				}
				else
				{
					/* Move it out of the Tx queue. */
					pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	3354      	adds	r3, #84	; 0x54
 800fef8:	4618      	mov	r0, r3
 800fefa:	f7ff fbba 	bl	800f672 <xTCPWindowGetHead>
 800fefe:	61f8      	str	r0, [r7, #28]

					/* Don't let pxHeadSegment point to this segment any more,
					so no more data will be added. */
					if( pxWindow->pxHeadSegment == pxSegment )
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ff04:	69fb      	ldr	r3, [r7, #28]
 800ff06:	429a      	cmp	r2, r3
 800ff08:	d102      	bne.n	800ff10 <ulTCPWindowTxGet+0xec>
					{
						pxWindow->pxHeadSegment = NULL;
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	67da      	str	r2, [r3, #124]	; 0x7c
					}

					/* pxWindow->tx.highest registers the highest sequence
					number in our transmission window. */
					pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 800ff10:	69fb      	ldr	r3, [r7, #28]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	69fa      	ldr	r2, [r7, #28]
 800ff16:	6892      	ldr	r2, [r2, #8]
 800ff18:	441a      	add	r2, r3
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	629a      	str	r2, [r3, #40]	; 0x28

					/* ...and more detailed logging */
					if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != pdFALSE ) )
 800ff1e:	4b2a      	ldr	r3, [pc, #168]	; (800ffc8 <ulTCPWindowTxGet+0x1a4>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	2b01      	cmp	r3, #1
 800ff24:	dd03      	ble.n	800ff2e <ulTCPWindowTxGet+0x10a>
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800ff2c:	2b17      	cmp	r3, #23
				FreeRTOS_flush_logging( );
			}
		}

		/* See if it has already been determined to return 0. */
		if( ulReturn != 0UL )
 800ff2e:	69bb      	ldr	r3, [r7, #24]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d043      	beq.n	800ffbc <ulTCPWindowTxGet+0x198>
		{
			configASSERT( listLIST_ITEM_CONTAINER( &(pxSegment->xQueueItem ) ) == NULL );
 800ff34:	69fb      	ldr	r3, [r7, #28]
 800ff36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d009      	beq.n	800ff50 <ulTCPWindowTxGet+0x12c>
 800ff3c:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ff40:	f383 8811 	msr	BASEPRI, r3
 800ff44:	f3bf 8f6f 	isb	sy
 800ff48:	f3bf 8f4f 	dsb	sy
 800ff4c:	613b      	str	r3, [r7, #16]
 800ff4e:	e7fe      	b.n	800ff4e <ulTCPWindowTxGet+0x12a>

			/* Now that the segment will be transmitted, add it to the tail of
			the waiting queue. */
			vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ff56:	69fb      	ldr	r3, [r7, #28]
 800ff58:	3318      	adds	r3, #24
 800ff5a:	4619      	mov	r1, r3
 800ff5c:	4610      	mov	r0, r2
 800ff5e:	f7ff fa3b 	bl	800f3d8 <vListInsertFifo>

			/* And mark it as outstanding. */
			pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 800ff62:	69fa      	ldr	r2, [r7, #28]
 800ff64:	7d93      	ldrb	r3, [r2, #22]
 800ff66:	f043 0301 	orr.w	r3, r3, #1
 800ff6a:	7593      	strb	r3, [r2, #22]

			/* Administer the transmit count, needed for fast
			retransmissions. */
			( pxSegment->u.bits.ucTransmitCount )++;
 800ff6c:	69fb      	ldr	r3, [r7, #28]
 800ff6e:	7d1b      	ldrb	r3, [r3, #20]
 800ff70:	3301      	adds	r3, #1
 800ff72:	b2da      	uxtb	r2, r3
 800ff74:	69fb      	ldr	r3, [r7, #28]
 800ff76:	751a      	strb	r2, [r3, #20]

			/* If there have been several retransmissions (4), decrease the
			size of the transmission window to at most 2 times MSS. */
			if( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW )
 800ff78:	69fb      	ldr	r3, [r7, #28]
 800ff7a:	7d1b      	ldrb	r3, [r3, #20]
 800ff7c:	2b04      	cmp	r3, #4
 800ff7e:	d10d      	bne.n	800ff9c <ulTCPWindowTxGet+0x178>
			{
				if( pxWindow->xSize.ulTxWindowLength > ( 2U * pxWindow->usMSS ) )
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	689a      	ldr	r2, [r3, #8]
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800ff8a:	005b      	lsls	r3, r3, #1
 800ff8c:	429a      	cmp	r2, r3
 800ff8e:	d905      	bls.n	800ff9c <ulTCPWindowTxGet+0x178>
				{
					FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %d]: Change Tx window: %lu -> %u\n",
						pxWindow->usPeerPortNumber, pxWindow->usOurPortNumber,
						pxWindow->xSize.ulTxWindowLength, 2 * pxWindow->usMSS ) );
					pxWindow->xSize.ulTxWindowLength = ( 2UL * pxWindow->usMSS );
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800ff96:	005a      	lsls	r2, r3, #1
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	609a      	str	r2, [r3, #8]
				}
			}

			/* Clear the transmit timer. */
			vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 800ff9c:	69fb      	ldr	r3, [r7, #28]
 800ff9e:	3310      	adds	r3, #16
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	f7ff fa29 	bl	800f3f8 <vTCPTimerSet>

			pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 800ffa6:	69fb      	ldr	r3, [r7, #28]
 800ffa8:	681a      	ldr	r2, [r3, #0]
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	62da      	str	r2, [r3, #44]	; 0x2c

			/* Inform the caller where to find the data within the queue. */
			*plPosition = pxSegment->lStreamPos;
 800ffae:	69fb      	ldr	r3, [r7, #28]
 800ffb0:	68da      	ldr	r2, [r3, #12]
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	601a      	str	r2, [r3, #0]

			/* And return the length of the data segment */
			ulReturn = ( uint32_t ) pxSegment->lDataLength;
 800ffb6:	69fb      	ldr	r3, [r7, #28]
 800ffb8:	689b      	ldr	r3, [r3, #8]
 800ffba:	61bb      	str	r3, [r7, #24]
		}

		return ulReturn;
 800ffbc:	69bb      	ldr	r3, [r7, #24]
	}
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	3720      	adds	r7, #32
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}
 800ffc6:	bf00      	nop
 800ffc8:	20004ee0 	.word	0x20004ee0

0800ffcc <prvTCPWindowTxCheckAck>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t *pxWindow, uint32_t ulFirst, uint32_t ulLast )
	{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b08c      	sub	sp, #48	; 0x30
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	60f8      	str	r0, [r7, #12]
 800ffd4:	60b9      	str	r1, [r7, #8]
 800ffd6:	607a      	str	r2, [r7, #4]
	uint32_t ulBytesConfirmed = 0u;
 800ffd8:	2300      	movs	r3, #0
 800ffda:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t ulSequenceNumber = ulFirst, ulDataLength;
 800ffdc:	68bb      	ldr	r3, [r7, #8]
 800ffde:	62bb      	str	r3, [r7, #40]	; 0x28
	const ListItem_t *pxIterator;
	const MiniListItem_t *pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &pxWindow->xTxSegments );
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	3398      	adds	r3, #152	; 0x98
 800ffe4:	61fb      	str	r3, [r7, #28]

		 A Smoothed RTT will increase quickly, but it is conservative when
		 becoming smaller. */

		for(
				pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800ffe6:	69fb      	ldr	r3, [r7, #28]
 800ffe8:	685b      	ldr	r3, [r3, #4]
 800ffea:	627b      	str	r3, [r7, #36]	; 0x24
		for(
 800ffec:	e09b      	b.n	8010126 <prvTCPWindowTxCheckAck+0x15a>
				( pxIterator != ( const ListItem_t * ) pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 );
			)
		{
			xDoUnlink = pdFALSE;
 800ffee:	2300      	movs	r3, #0
 800fff0:	623b      	str	r3, [r7, #32]
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800fff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fff4:	68db      	ldr	r3, [r3, #12]
 800fff6:	61bb      	str	r3, [r7, #24]

			/* Move to the next item because the current item might get
			removed. */
			pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800fff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fffa:	685b      	ldr	r3, [r3, #4]
 800fffc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Continue if this segment does not fall within the ACK'd range. */
			if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 800fffe:	69bb      	ldr	r3, [r7, #24]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	4619      	mov	r1, r3
 8010004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010006:	f7ff f9c4 	bl	800f392 <xSequenceGreaterThan>
 801000a:	4603      	mov	r3, r0
 801000c:	2b00      	cmp	r3, #0
 801000e:	d000      	beq.n	8010012 <prvTCPWindowTxCheckAck+0x46>
			{
				continue;
 8010010:	e089      	b.n	8010126 <prvTCPWindowTxCheckAck+0x15a>
			}

			/* Is it ready? */
			if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 8010012:	69bb      	ldr	r3, [r7, #24]
 8010014:	681a      	ldr	r2, [r3, #0]
 8010016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010018:	429a      	cmp	r2, r3
 801001a:	f040 8091 	bne.w	8010140 <prvTCPWindowTxCheckAck+0x174>
			{
				break;
			}

			ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 801001e:	69bb      	ldr	r3, [r7, #24]
 8010020:	689b      	ldr	r3, [r3, #8]
 8010022:	617b      	str	r3, [r7, #20]

			if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8010024:	69bb      	ldr	r3, [r7, #24]
 8010026:	7d9b      	ldrb	r3, [r3, #22]
 8010028:	f003 0302 	and.w	r3, r3, #2
 801002c:	b2db      	uxtb	r3, r3
 801002e:	2b00      	cmp	r3, #0
 8010030:	d14d      	bne.n	80100ce <prvTCPWindowTxCheckAck+0x102>
			{
				if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t )ulDataLength, ulLast ) != pdFALSE )
 8010032:	69bb      	ldr	r3, [r7, #24]
 8010034:	681a      	ldr	r2, [r3, #0]
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	4413      	add	r3, r2
 801003a:	6879      	ldr	r1, [r7, #4]
 801003c:	4618      	mov	r0, r3
 801003e:	f7ff f9a8 	bl	800f392 <xSequenceGreaterThan>
 8010042:	4603      	mov	r3, r0
 8010044:	2b00      	cmp	r3, #0
 8010046:	d17d      	bne.n	8010144 <prvTCPWindowTxCheckAck+0x178>
					#endif /* ipconfigHAS_DEBUG_PRINTF */
					break;
				}

				/* This segment is fully ACK'd, set the flag. */
				pxSegment->u.bits.bAcked = pdTRUE_UNSIGNED;
 8010048:	69ba      	ldr	r2, [r7, #24]
 801004a:	7d93      	ldrb	r3, [r2, #22]
 801004c:	f043 0302 	orr.w	r3, r3, #2
 8010050:	7593      	strb	r3, [r2, #22]

				/* Calculate the RTT only if the segment was sent-out for the
				first time and if this is the last ACK'd segment in a range. */
				if( ( pxSegment->u.bits.ucTransmitCount == 1 ) && ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 8010052:	69bb      	ldr	r3, [r7, #24]
 8010054:	7d1b      	ldrb	r3, [r3, #20]
 8010056:	2b01      	cmp	r3, #1
 8010058:	d137      	bne.n	80100ca <prvTCPWindowTxCheckAck+0xfe>
 801005a:	69bb      	ldr	r3, [r7, #24]
 801005c:	681a      	ldr	r2, [r3, #0]
 801005e:	697b      	ldr	r3, [r7, #20]
 8010060:	441a      	add	r2, r3
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	429a      	cmp	r2, r3
 8010066:	d130      	bne.n	80100ca <prvTCPWindowTxCheckAck+0xfe>
				{
					int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 8010068:	69bb      	ldr	r3, [r7, #24]
 801006a:	3310      	adds	r3, #16
 801006c:	4618      	mov	r0, r3
 801006e:	f7ff f9d0 	bl	800f412 <ulTimerGetAge>
 8010072:	4603      	mov	r3, r0
 8010074:	613b      	str	r3, [r7, #16]

					if( pxWindow->lSRTT >= mS )
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801007a:	693b      	ldr	r3, [r7, #16]
 801007c:	429a      	cmp	r2, r3
 801007e:	db0e      	blt.n	801009e <prvTCPWindowTxCheckAck+0xd2>
					{
						/* RTT becomes smaller: adapt slowly. */
						pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010084:	4613      	mov	r3, r2
 8010086:	00db      	lsls	r3, r3, #3
 8010088:	1a9a      	subs	r2, r3, r2
 801008a:	693b      	ldr	r3, [r7, #16]
 801008c:	4413      	add	r3, r2
 801008e:	2b00      	cmp	r3, #0
 8010090:	da00      	bge.n	8010094 <prvTCPWindowTxCheckAck+0xc8>
 8010092:	3307      	adds	r3, #7
 8010094:	10db      	asrs	r3, r3, #3
 8010096:	461a      	mov	r2, r3
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	639a      	str	r2, [r3, #56]	; 0x38
 801009c:	e00e      	b.n	80100bc <prvTCPWindowTxCheckAck+0xf0>
					}
					else
					{
						/* RTT becomes larger: adapt quicker */
						pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80100a2:	4613      	mov	r3, r2
 80100a4:	005b      	lsls	r3, r3, #1
 80100a6:	441a      	add	r2, r3
 80100a8:	693b      	ldr	r3, [r7, #16]
 80100aa:	4413      	add	r3, r2
 80100ac:	005b      	lsls	r3, r3, #1
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	da00      	bge.n	80100b4 <prvTCPWindowTxCheckAck+0xe8>
 80100b2:	3307      	adds	r3, #7
 80100b4:	10db      	asrs	r3, r3, #3
 80100b6:	461a      	mov	r2, r3
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	639a      	str	r2, [r3, #56]	; 0x38
					}

					/* Cap to the minimum of 50ms. */
					if( pxWindow->lSRTT < winSRTT_CAP_mS )
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100c0:	2b31      	cmp	r3, #49	; 0x31
 80100c2:	dc02      	bgt.n	80100ca <prvTCPWindowTxCheckAck+0xfe>
					{
						pxWindow->lSRTT = winSRTT_CAP_mS;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	2232      	movs	r2, #50	; 0x32
 80100c8:	639a      	str	r2, [r3, #56]	; 0x38
					}
				}

				/* Unlink it from the 3 queues, but do not destroy it (yet). */
				xDoUnlink = pdTRUE;
 80100ca:	2301      	movs	r3, #1
 80100cc:	623b      	str	r3, [r7, #32]
			}

			/* pxSegment->u.bits.bAcked is now true.  Is it located at the left
			side of the transmission queue?  If so, it may be freed. */
			if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	6a1a      	ldr	r2, [r3, #32]
 80100d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100d4:	429a      	cmp	r2, r3
 80100d6:	d116      	bne.n	8010106 <prvTCPWindowTxCheckAck+0x13a>
			{
				if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != pdFALSE ) )
 80100d8:	4b1d      	ldr	r3, [pc, #116]	; (8010150 <prvTCPWindowTxCheckAck+0x184>)
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	2b01      	cmp	r3, #1
 80100de:	dd03      	ble.n	80100e8 <prvTCPWindowTxCheckAck+0x11c>
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 80100e6:	2b17      	cmp	r3, #23
						ulLast - pxWindow->tx.ulFirstSequenceNumber,
						pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
				}

				/* Increase the left-hand value of the transmission window. */
				pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	6a1a      	ldr	r2, [r3, #32]
 80100ec:	697b      	ldr	r3, [r7, #20]
 80100ee:	441a      	add	r2, r3
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	621a      	str	r2, [r3, #32]

				/* This function will return the number of bytes that the tail
				of txStream may be advanced. */
				ulBytesConfirmed += ulDataLength;
 80100f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80100f6:	697b      	ldr	r3, [r7, #20]
 80100f8:	4413      	add	r3, r2
 80100fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* All segments below tx.ulCurrentSequenceNumber may be freed. */
				vTCPWindowFree( pxSegment );
 80100fc:	69b8      	ldr	r0, [r7, #24]
 80100fe:	f7ff faf3 	bl	800f6e8 <vTCPWindowFree>

				/* No need to unlink it any more. */
				xDoUnlink = pdFALSE;
 8010102:	2300      	movs	r3, #0
 8010104:	623b      	str	r3, [r7, #32]
			}

			if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 8010106:	6a3b      	ldr	r3, [r7, #32]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d008      	beq.n	801011e <prvTCPWindowTxCheckAck+0x152>
 801010c:	69bb      	ldr	r3, [r7, #24]
 801010e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010110:	2b00      	cmp	r3, #0
 8010112:	d004      	beq.n	801011e <prvTCPWindowTxCheckAck+0x152>
			{
				/* Remove item from its queues. */
				uxListRemove( &pxSegment->xQueueItem );
 8010114:	69bb      	ldr	r3, [r7, #24]
 8010116:	3318      	adds	r3, #24
 8010118:	4618      	mov	r0, r3
 801011a:	f7f7 fc84 	bl	8007a26 <uxListRemove>
			}

			ulSequenceNumber += ulDataLength;
 801011e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	4413      	add	r3, r2
 8010124:	62bb      	str	r3, [r7, #40]	; 0x28
		for(
 8010126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010128:	69fb      	ldr	r3, [r7, #28]
 801012a:	429a      	cmp	r2, r3
 801012c:	d00b      	beq.n	8010146 <prvTCPWindowTxCheckAck+0x17a>
				( pxIterator != ( const ListItem_t * ) pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 );
 801012e:	6879      	ldr	r1, [r7, #4]
 8010130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010132:	f7ff f91c 	bl	800f36e <xSequenceLessThan>
 8010136:	4603      	mov	r3, r0
 8010138:	2b00      	cmp	r3, #0
 801013a:	f47f af58 	bne.w	800ffee <prvTCPWindowTxCheckAck+0x22>
 801013e:	e002      	b.n	8010146 <prvTCPWindowTxCheckAck+0x17a>
				break;
 8010140:	bf00      	nop
 8010142:	e000      	b.n	8010146 <prvTCPWindowTxCheckAck+0x17a>
					break;
 8010144:	bf00      	nop
		}

		return ulBytesConfirmed;
 8010146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010148:	4618      	mov	r0, r3
 801014a:	3730      	adds	r7, #48	; 0x30
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}
 8010150:	20004ee0 	.word	0x20004ee0

08010154 <prvTCPWindowFastRetransmit>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t *pxWindow, uint32_t ulFirst )
	{
 8010154:	b580      	push	{r7, lr}
 8010156:	b086      	sub	sp, #24
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
 801015c:	6039      	str	r1, [r7, #0]
	const ListItem_t *pxIterator;
	const MiniListItem_t* pxEnd;
	TCPSegment_t *pxSegment;
	uint32_t ulCount = 0UL;
 801015e:	2300      	movs	r3, #0
 8010160:	613b      	str	r3, [r7, #16]

		/* A higher Tx block has been acknowledged.  Now iterate through the
		 xWaitQueue to find a possible condition for a FAST retransmission. */

		pxEnd = ( const MiniListItem_t* ) listGET_END_MARKER( &( pxWindow->xWaitQueue ) );
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	3370      	adds	r3, #112	; 0x70
 8010166:	60fb      	str	r3, [r7, #12]

		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	685b      	ldr	r3, [r3, #4]
 801016c:	617b      	str	r3, [r7, #20]
 801016e:	e03b      	b.n	80101e8 <prvTCPWindowFastRetransmit+0x94>
			 pxIterator != ( const ListItem_t * ) pxEnd; )
		{
			/* Get the owner, which is a TCP segment. */
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	68db      	ldr	r3, [r3, #12]
 8010174:	60bb      	str	r3, [r7, #8]

			/* Hop to the next item before the current gets unlinked. */
			pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8010176:	697b      	ldr	r3, [r7, #20]
 8010178:	685b      	ldr	r3, [r3, #4]
 801017a:	617b      	str	r3, [r7, #20]

			/* Fast retransmission:
			When 3 packets with a higher sequence number have been acknowledged
			by the peer, it is very unlikely a current packet will ever arrive.
			It will be retransmitted far before the RTO. */
			if( ( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED ) &&
 801017c:	68bb      	ldr	r3, [r7, #8]
 801017e:	7d9b      	ldrb	r3, [r3, #22]
 8010180:	f003 0302 	and.w	r3, r3, #2
 8010184:	b2db      	uxtb	r3, r3
 8010186:	2b00      	cmp	r3, #0
 8010188:	d12e      	bne.n	80101e8 <prvTCPWindowFastRetransmit+0x94>
				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE ) &&
 801018a:	68bb      	ldr	r3, [r7, #8]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	6839      	ldr	r1, [r7, #0]
 8010190:	4618      	mov	r0, r3
 8010192:	f7ff f8ec 	bl	800f36e <xSequenceLessThan>
 8010196:	4603      	mov	r3, r0
			if( ( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED ) &&
 8010198:	2b00      	cmp	r3, #0
 801019a:	d025      	beq.n	80101e8 <prvTCPWindowFastRetransmit+0x94>
				( ++( pxSegment->u.bits.ucDupAckCount ) == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT ) )
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	7d5b      	ldrb	r3, [r3, #21]
 80101a0:	3301      	adds	r3, #1
 80101a2:	b2da      	uxtb	r2, r3
				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE ) &&
 80101a4:	68bb      	ldr	r3, [r7, #8]
 80101a6:	755a      	strb	r2, [r3, #21]
				( ++( pxSegment->u.bits.ucDupAckCount ) == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT ) )
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	7d5b      	ldrb	r3, [r3, #21]
				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE ) &&
 80101ac:	2b03      	cmp	r3, #3
 80101ae:	d11b      	bne.n	80101e8 <prvTCPWindowFastRetransmit+0x94>
			{
				pxSegment->u.bits.ucTransmitCount = pdFALSE_UNSIGNED;
 80101b0:	68bb      	ldr	r3, [r7, #8]
 80101b2:	2200      	movs	r2, #0
 80101b4:	751a      	strb	r2, [r3, #20]

				/* Not clearing 'ucDupAckCount' yet as more SACK's might come in
				which might lead to a second fast rexmit. */
				if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != pdFALSE ) )
 80101b6:	4b11      	ldr	r3, [pc, #68]	; (80101fc <prvTCPWindowFastRetransmit+0xa8>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	db03      	blt.n	80101c6 <prvTCPWindowFastRetransmit+0x72>
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 80101c4:	2b17      	cmp	r3, #23
						ulFirst - pxWindow->tx.ulFirstSequenceNumber ) );
					FreeRTOS_flush_logging( );
				}

				/* Remove it from xWaitQueue. */
				uxListRemove( &pxSegment->xQueueItem );
 80101c6:	68bb      	ldr	r3, [r7, #8]
 80101c8:	3318      	adds	r3, #24
 80101ca:	4618      	mov	r0, r3
 80101cc:	f7f7 fc2b 	bl	8007a26 <uxListRemove>

				/* Add this segment to the priority queue so it gets
				retransmitted immediately. */
				vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80101d6:	68bb      	ldr	r3, [r7, #8]
 80101d8:	3318      	adds	r3, #24
 80101da:	4619      	mov	r1, r3
 80101dc:	4610      	mov	r0, r2
 80101de:	f7ff f8fb 	bl	800f3d8 <vListInsertFifo>
				ulCount++;
 80101e2:	693b      	ldr	r3, [r7, #16]
 80101e4:	3301      	adds	r3, #1
 80101e6:	613b      	str	r3, [r7, #16]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 80101e8:	697a      	ldr	r2, [r7, #20]
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	429a      	cmp	r2, r3
 80101ee:	d1bf      	bne.n	8010170 <prvTCPWindowFastRetransmit+0x1c>
			}
		}

		return ulCount;
 80101f0:	693b      	ldr	r3, [r7, #16]
	}
 80101f2:	4618      	mov	r0, r3
 80101f4:	3718      	adds	r7, #24
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd80      	pop	{r7, pc}
 80101fa:	bf00      	nop
 80101fc:	20004ee0 	.word	0x20004ee0

08010200 <ulTCPWindowTxAck>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	uint32_t ulTCPWindowTxAck( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber )
	{
 8010200:	b580      	push	{r7, lr}
 8010202:	b084      	sub	sp, #16
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
 8010208:	6039      	str	r1, [r7, #0]
	uint32_t ulFirstSequence, ulReturn;

		/* Receive a normal ACK. */

		ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	6a1b      	ldr	r3, [r3, #32]
 801020e:	60bb      	str	r3, [r7, #8]

		if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 8010210:	68b9      	ldr	r1, [r7, #8]
 8010212:	6838      	ldr	r0, [r7, #0]
 8010214:	f7ff f89a 	bl	800f34c <xSequenceLessThanOrEqual>
 8010218:	4603      	mov	r3, r0
 801021a:	2b00      	cmp	r3, #0
 801021c:	d002      	beq.n	8010224 <ulTCPWindowTxAck+0x24>
		{
			ulReturn = 0UL;
 801021e:	2300      	movs	r3, #0
 8010220:	60fb      	str	r3, [r7, #12]
 8010222:	e005      	b.n	8010230 <ulTCPWindowTxAck+0x30>
		}
		else
		{
			ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 8010224:	683a      	ldr	r2, [r7, #0]
 8010226:	68b9      	ldr	r1, [r7, #8]
 8010228:	6878      	ldr	r0, [r7, #4]
 801022a:	f7ff fecf 	bl	800ffcc <prvTCPWindowTxCheckAck>
 801022e:	60f8      	str	r0, [r7, #12]
		}

		return ulReturn;
 8010230:	68fb      	ldr	r3, [r7, #12]
	}
 8010232:	4618      	mov	r0, r3
 8010234:	3710      	adds	r7, #16
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}
	...

0801023c <ulTCPWindowTxSack>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	uint32_t ulTCPWindowTxSack( TCPWindow_t *pxWindow, uint32_t ulFirst, uint32_t ulLast )
	{
 801023c:	b580      	push	{r7, lr}
 801023e:	b086      	sub	sp, #24
 8010240:	af00      	add	r7, sp, #0
 8010242:	60f8      	str	r0, [r7, #12]
 8010244:	60b9      	str	r1, [r7, #8]
 8010246:	607a      	str	r2, [r7, #4]
	uint32_t ulAckCount = 0UL;
 8010248:	2300      	movs	r3, #0
 801024a:	617b      	str	r3, [r7, #20]
	uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	6a1b      	ldr	r3, [r3, #32]
 8010250:	613b      	str	r3, [r7, #16]

		/* Receive a SACK option. */
		ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 8010252:	687a      	ldr	r2, [r7, #4]
 8010254:	68b9      	ldr	r1, [r7, #8]
 8010256:	68f8      	ldr	r0, [r7, #12]
 8010258:	f7ff feb8 	bl	800ffcc <prvTCPWindowTxCheckAck>
 801025c:	6178      	str	r0, [r7, #20]
		prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 801025e:	68b9      	ldr	r1, [r7, #8]
 8010260:	68f8      	ldr	r0, [r7, #12]
 8010262:	f7ff ff77 	bl	8010154 <prvTCPWindowFastRetransmit>

		if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 8010266:	4b06      	ldr	r3, [pc, #24]	; (8010280 <ulTCPWindowTxSack+0x44>)
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	2b00      	cmp	r3, #0
 801026c:	dd03      	ble.n	8010276 <ulTCPWindowTxSack+0x3a>
 801026e:	6939      	ldr	r1, [r7, #16]
 8010270:	68b8      	ldr	r0, [r7, #8]
 8010272:	f7ff f88e 	bl	800f392 <xSequenceGreaterThan>
				ulLast - pxWindow->tx.ulFirstSequenceNumber,
				pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
			FreeRTOS_flush_logging( );
		}

		return ulAckCount;
 8010276:	697b      	ldr	r3, [r7, #20]
	}
 8010278:	4618      	mov	r0, r3
 801027a:	3718      	adds	r7, #24
 801027c:	46bd      	mov	sp, r7
 801027e:	bd80      	pop	{r7, pc}
 8010280:	20004ee0 	.word	0x20004ee0

08010284 <vProcessGeneratedUDPPacket>:
	}
};
/*-----------------------------------------------------------*/

void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8010284:	b5b0      	push	{r4, r5, r7, lr}
 8010286:	b08a      	sub	sp, #40	; 0x28
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
UDPPacket_t *pxUDPPacket;
IPHeader_t *pxIPHeader;
eARPLookupResult_t eReturned;
uint32_t ulIPAddress = pxNetworkBuffer->ulIPAddress;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	695b      	ldr	r3, [r3, #20]
 8010290:	60fb      	str	r3, [r7, #12]

	/* Map the UDP packet onto the start of the frame. */
	pxUDPPacket = ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	699b      	ldr	r3, [r3, #24]
 8010296:	623b      	str	r3, [r7, #32]

	/* Determine the ARP cache status for the requested IP address. */
	eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ) );
 8010298:	6a3a      	ldr	r2, [r7, #32]
 801029a:	f107 030c 	add.w	r3, r7, #12
 801029e:	4611      	mov	r1, r2
 80102a0:	4618      	mov	r0, r3
 80102a2:	f7f9 fed5 	bl	800a050 <eARPGetCacheEntry>
 80102a6:	4603      	mov	r3, r0
 80102a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if( eReturned != eCantSendPacket )
 80102ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80102b0:	2b02      	cmp	r3, #2
 80102b2:	f000 80b5 	beq.w	8010420 <vProcessGeneratedUDPPacket+0x19c>
	{
		if( eReturned == eARPCacheHit )
 80102b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80102ba:	2b01      	cmp	r3, #1
 80102bc:	f040 809d 	bne.w	80103fa <vProcessGeneratedUDPPacket+0x176>
				uint8_t ucSocketOptions;
			#endif
			iptraceSENDING_UDP_PACKET( pxNetworkBuffer->ulIPAddress );

			/* Create short cuts to the data within the packet. */
			pxIPHeader = &( pxUDPPacket->xIPHeader );
 80102c0:	6a3b      	ldr	r3, [r7, #32]
 80102c2:	330e      	adds	r3, #14
 80102c4:	61fb      	str	r3, [r7, #28]
			if( pxNetworkBuffer->usPort != ipPACKET_CONTAINS_ICMP_DATA )
		#endif /* ipconfigSUPPORT_OUTGOING_PINGS */
			{
			UDPHeader_t *pxUDPHeader;

				pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 80102c6:	6a3b      	ldr	r3, [r7, #32]
 80102c8:	3322      	adds	r3, #34	; 0x22
 80102ca:	61bb      	str	r3, [r7, #24]

				pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	8c1a      	ldrh	r2, [r3, #32]
 80102d0:	69bb      	ldr	r3, [r7, #24]
 80102d2:	805a      	strh	r2, [r3, #2]
				pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80102d8:	69bb      	ldr	r3, [r7, #24]
 80102da:	801a      	strh	r2, [r3, #0]
				pxUDPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( UDPHeader_t ) );
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	69db      	ldr	r3, [r3, #28]
 80102e0:	b29b      	uxth	r3, r3
 80102e2:	3308      	adds	r3, #8
 80102e4:	b29a      	uxth	r2, r3
 80102e6:	69bb      	ldr	r3, [r7, #24]
 80102e8:	809a      	strh	r2, [r3, #4]
				pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 80102ea:	69bb      	ldr	r3, [r7, #24]
 80102ec:	889b      	ldrh	r3, [r3, #4]
 80102ee:	b29b      	uxth	r3, r3
 80102f0:	021b      	lsls	r3, r3, #8
 80102f2:	b21a      	sxth	r2, r3
 80102f4:	69bb      	ldr	r3, [r7, #24]
 80102f6:	889b      	ldrh	r3, [r3, #4]
 80102f8:	b29b      	uxth	r3, r3
 80102fa:	0a1b      	lsrs	r3, r3, #8
 80102fc:	b29b      	uxth	r3, r3
 80102fe:	b21b      	sxth	r3, r3
 8010300:	4313      	orrs	r3, r2
 8010302:	b21b      	sxth	r3, r3
 8010304:	b29a      	uxth	r2, r3
 8010306:	69bb      	ldr	r3, [r7, #24]
 8010308:	809a      	strh	r2, [r3, #4]
				pxUDPHeader->usChecksum = 0u;
 801030a:	69bb      	ldr	r3, [r7, #24]
 801030c:	2200      	movs	r2, #0
 801030e:	719a      	strb	r2, [r3, #6]
 8010310:	2200      	movs	r2, #0
 8010312:	71da      	strb	r2, [r3, #7]
			and
				xIPHeader.usHeaderChecksum
			*/
			/* Save options now, as they will be overwritten by memcpy */
			#if( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
				ucSocketOptions = pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ];
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	699b      	ldr	r3, [r3, #24]
 8010318:	799b      	ldrb	r3, [r3, #6]
 801031a:	75fb      	strb	r3, [r7, #23]
			#endif
			/*
			 * Offset the memcpy by the size of a MAC address to start at the packet's
			 * Ethernet header 'source' MAC address; the preceding 'destination' should not be altered.
			 */
			char *pxUdpSrcAddrOffset = ( char *) pxUDPPacket + sizeof( MACAddress_t );
 801031c:	6a3b      	ldr	r3, [r7, #32]
 801031e:	3306      	adds	r3, #6
 8010320:	613b      	str	r3, [r7, #16]
			memcpy( pxUdpSrcAddrOffset, xDefaultPartUDPPacketHeader.ucBytes, sizeof( xDefaultPartUDPPacketHeader ) );
 8010322:	693b      	ldr	r3, [r7, #16]
 8010324:	4a46      	ldr	r2, [pc, #280]	; (8010440 <vProcessGeneratedUDPPacket+0x1bc>)
 8010326:	461d      	mov	r5, r3
 8010328:	4614      	mov	r4, r2
 801032a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801032c:	6028      	str	r0, [r5, #0]
 801032e:	6069      	str	r1, [r5, #4]
 8010330:	60aa      	str	r2, [r5, #8]
 8010332:	60eb      	str	r3, [r5, #12]
 8010334:	cc03      	ldmia	r4!, {r0, r1}
 8010336:	6128      	str	r0, [r5, #16]
 8010338:	6169      	str	r1, [r5, #20]
				pxIPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( IPHeader_t ) );
			}
			else
		#endif /* ipconfigSUPPORT_OUTGOING_PINGS */
			{
				pxIPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	69db      	ldr	r3, [r3, #28]
 801033e:	b29b      	uxth	r3, r3
 8010340:	331c      	adds	r3, #28
 8010342:	b29a      	uxth	r2, r3
 8010344:	69fb      	ldr	r3, [r7, #28]
 8010346:	805a      	strh	r2, [r3, #2]
			}

			/* The total transmit size adds on the Ethernet header. */
			pxNetworkBuffer->xDataLength = pxIPHeader->usLength + sizeof( EthernetHeader_t );
 8010348:	69fb      	ldr	r3, [r7, #28]
 801034a:	885b      	ldrh	r3, [r3, #2]
 801034c:	b29b      	uxth	r3, r3
 801034e:	f103 020e 	add.w	r2, r3, #14
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	61da      	str	r2, [r3, #28]
			pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 8010356:	69fb      	ldr	r3, [r7, #28]
 8010358:	885b      	ldrh	r3, [r3, #2]
 801035a:	b29b      	uxth	r3, r3
 801035c:	021b      	lsls	r3, r3, #8
 801035e:	b21a      	sxth	r2, r3
 8010360:	69fb      	ldr	r3, [r7, #28]
 8010362:	885b      	ldrh	r3, [r3, #2]
 8010364:	b29b      	uxth	r3, r3
 8010366:	0a1b      	lsrs	r3, r3, #8
 8010368:	b29b      	uxth	r3, r3
 801036a:	b21b      	sxth	r3, r3
 801036c:	4313      	orrs	r3, r2
 801036e:	b21b      	sxth	r3, r3
 8010370:	b29a      	uxth	r2, r3
 8010372:	69fb      	ldr	r3, [r7, #28]
 8010374:	805a      	strh	r2, [r3, #2]
			/* HT:endian: changed back to network endian */
			pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->ulIPAddress;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	695a      	ldr	r2, [r3, #20]
 801037a:	69fb      	ldr	r3, [r7, #28]
 801037c:	611a      	str	r2, [r3, #16]

			#if( ipconfigUSE_LLMNR == 1 )
			{
				/* LLMNR messages are typically used on a LAN and they're
				 * not supposed to cross routers */
				if( pxNetworkBuffer->ulIPAddress == ipLLMNR_IP_ADDR )
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	695b      	ldr	r3, [r3, #20]
 8010382:	4a30      	ldr	r2, [pc, #192]	; (8010444 <vProcessGeneratedUDPPacket+0x1c0>)
 8010384:	4293      	cmp	r3, r2
 8010386:	d102      	bne.n	801038e <vProcessGeneratedUDPPacket+0x10a>
				{
					pxIPHeader->ucTimeToLive = 0x01;
 8010388:	69fb      	ldr	r3, [r7, #28]
 801038a:	2201      	movs	r2, #1
 801038c:	721a      	strb	r2, [r3, #8]
			}
			#endif

			#if( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
			{
				pxIPHeader->usHeaderChecksum = 0u;
 801038e:	69fb      	ldr	r3, [r7, #28]
 8010390:	2200      	movs	r2, #0
 8010392:	729a      	strb	r2, [r3, #10]
 8010394:	2200      	movs	r2, #0
 8010396:	72da      	strb	r2, [r3, #11]
				pxIPHeader->usHeaderChecksum = usGenerateChecksum( 0UL, ( uint8_t * ) &( pxIPHeader->ucVersionHeaderLength ), ipSIZE_OF_IPv4_HEADER );
 8010398:	69fb      	ldr	r3, [r7, #28]
 801039a:	2214      	movs	r2, #20
 801039c:	4619      	mov	r1, r3
 801039e:	2000      	movs	r0, #0
 80103a0:	f7fb fb62 	bl	800ba68 <usGenerateChecksum>
 80103a4:	4603      	mov	r3, r0
 80103a6:	461a      	mov	r2, r3
 80103a8:	69fb      	ldr	r3, [r7, #28]
 80103aa:	815a      	strh	r2, [r3, #10]
				pxIPHeader->usHeaderChecksum = ~FreeRTOS_htons( pxIPHeader->usHeaderChecksum );
 80103ac:	69fb      	ldr	r3, [r7, #28]
 80103ae:	895b      	ldrh	r3, [r3, #10]
 80103b0:	b29b      	uxth	r3, r3
 80103b2:	021b      	lsls	r3, r3, #8
 80103b4:	b21a      	sxth	r2, r3
 80103b6:	69fb      	ldr	r3, [r7, #28]
 80103b8:	895b      	ldrh	r3, [r3, #10]
 80103ba:	b29b      	uxth	r3, r3
 80103bc:	0a1b      	lsrs	r3, r3, #8
 80103be:	b29b      	uxth	r3, r3
 80103c0:	b21b      	sxth	r3, r3
 80103c2:	4313      	orrs	r3, r2
 80103c4:	b21b      	sxth	r3, r3
 80103c6:	b29b      	uxth	r3, r3
 80103c8:	43db      	mvns	r3, r3
 80103ca:	b29a      	uxth	r2, r3
 80103cc:	69fb      	ldr	r3, [r7, #28]
 80103ce:	815a      	strh	r2, [r3, #10]

				if( ( ucSocketOptions & ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT ) != 0u )
 80103d0:	7dfb      	ldrb	r3, [r7, #23]
 80103d2:	f003 0302 	and.w	r3, r3, #2
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d007      	beq.n	80103ea <vProcessGeneratedUDPPacket+0x166>
				{
					usGenerateProtocolChecksum( (uint8_t*)pxUDPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	69db      	ldr	r3, [r3, #28]
 80103de:	2201      	movs	r2, #1
 80103e0:	4619      	mov	r1, r3
 80103e2:	6a38      	ldr	r0, [r7, #32]
 80103e4:	f7fb fa58 	bl	800b898 <usGenerateProtocolChecksum>
 80103e8:	e01a      	b.n	8010420 <vProcessGeneratedUDPPacket+0x19c>
				}
				else
				{
					pxUDPPacket->xUDPHeader.usChecksum = 0u;
 80103ea:	6a3b      	ldr	r3, [r7, #32]
 80103ec:	2200      	movs	r2, #0
 80103ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80103f2:	2200      	movs	r2, #0
 80103f4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80103f8:	e012      	b.n	8010420 <vProcessGeneratedUDPPacket+0x19c>
				}
			}
			#endif
		}
		else if( eReturned == eARPCacheMiss )
 80103fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d10b      	bne.n	801041a <vProcessGeneratedUDPPacket+0x196>
		{
			/* Add an entry to the ARP table with a null hardware address.
			This allows the ARP timer to know that an ARP reply is
			outstanding, and perform retransmissions if necessary. */
			vARPRefreshCacheEntry( NULL, ulIPAddress );
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	4619      	mov	r1, r3
 8010406:	2000      	movs	r0, #0
 8010408:	f7f9 fd28 	bl	8009e5c <vARPRefreshCacheEntry>

			/* Generate an ARP for the required IP address. */
			iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->ulIPAddress );
			pxNetworkBuffer->ulIPAddress = ulIPAddress;
 801040c:	68fa      	ldr	r2, [r7, #12]
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	615a      	str	r2, [r3, #20]
			vARPGenerateRequestPacket( pxNetworkBuffer );
 8010412:	6878      	ldr	r0, [r7, #4]
 8010414:	f7f9 ff72 	bl	800a2fc <vARPGenerateRequestPacket>
 8010418:	e002      	b.n	8010420 <vProcessGeneratedUDPPacket+0x19c>
		}
		else
		{
			/* The lookup indicated that an ARP request has already been
			sent out for the queried IP address. */
			eReturned = eCantSendPacket;
 801041a:	2302      	movs	r3, #2
 801041c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
	}

	if( eReturned != eCantSendPacket )
 8010420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010424:	2b02      	cmp	r3, #2
 8010426:	d004      	beq.n	8010432 <vProcessGeneratedUDPPacket+0x1ae>
				pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
			}
		}
		#endif

		xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 8010428:	2101      	movs	r1, #1
 801042a:	6878      	ldr	r0, [r7, #4]
 801042c:	f7f4 fe86 	bl	800513c <xNetworkInterfaceOutput>
	{
		/* The packet can't be sent (DHCP not completed?).  Just drop the
		packet. */
		vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
	}
}
 8010430:	e002      	b.n	8010438 <vProcessGeneratedUDPPacket+0x1b4>
		vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8010432:	6878      	ldr	r0, [r7, #4]
 8010434:	f000 f97e 	bl	8010734 <vReleaseNetworkBufferAndDescriptor>
}
 8010438:	bf00      	nop
 801043a:	3728      	adds	r7, #40	; 0x28
 801043c:	46bd      	mov	sp, r7
 801043e:	bdb0      	pop	{r4, r5, r7, pc}
 8010440:	200001b0 	.word	0x200001b0
 8010444:	fc0000e0 	.word	0xfc0000e0

08010448 <xProcessReceivedUDPPacket>:
/*-----------------------------------------------------------*/

BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t *pxNetworkBuffer, uint16_t usPort )
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b086      	sub	sp, #24
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	460b      	mov	r3, r1
 8010452:	807b      	strh	r3, [r7, #2]
BaseType_t xReturn = pdPASS;
 8010454:	2301      	movs	r3, #1
 8010456:	617b      	str	r3, [r7, #20]
FreeRTOS_Socket_t *pxSocket;

UDPPacket_t *pxUDPPacket = (UDPPacket_t *) pxNetworkBuffer->pucEthernetBuffer;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	699b      	ldr	r3, [r3, #24]
 801045c:	613b      	str	r3, [r7, #16]

	/* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 801045e:	887b      	ldrh	r3, [r7, #2]
 8010460:	4618      	mov	r0, r3
 8010462:	f7fb ffaf 	bl	800c3c4 <pxUDPSocketLookup>
 8010466:	60f8      	str	r0, [r7, #12]

	if( pxSocket )
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d039      	beq.n	80104e2 <xProcessReceivedUDPPacket+0x9a>
	{

		/* When refreshing the ARP cache with received UDP packets we must be
		careful;  hundreds of broadcast messages may pass and if we're not
		handling them, no use to fill the ARP cache with those IP addresses. */
		vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 801046e:	693b      	ldr	r3, [r7, #16]
 8010470:	1d9a      	adds	r2, r3, #6
 8010472:	693b      	ldr	r3, [r7, #16]
 8010474:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8010478:	4619      	mov	r1, r3
 801047a:	4610      	mov	r0, r2
 801047c:	f7f9 fcee 	bl	8009e5c <vARPRefreshCacheEntry>
				}
			}
		}
		#endif

		if( xReturn == pdPASS )
 8010480:	697b      	ldr	r3, [r7, #20]
 8010482:	2b01      	cmp	r3, #1
 8010484:	d14a      	bne.n	801051c <xProcessReceivedUDPPacket+0xd4>
		{
			vTaskSuspendAll();
 8010486:	f7f8 fdbb 	bl	8009000 <vTaskSuspendAll>
			{
				if( xReturn == pdPASS )
 801048a:	697b      	ldr	r3, [r7, #20]
 801048c:	2b01      	cmp	r3, #1
 801048e:	d10a      	bne.n	80104a6 <xProcessReceivedUDPPacket+0x5e>
				{
					taskENTER_CRITICAL();
 8010490:	f7f7 fbf6 	bl	8007c80 <vPortEnterCritical>
					{
						/* Add the network packet to the list of packets to be
						processed by the socket. */
						vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	3338      	adds	r3, #56	; 0x38
 8010498:	687a      	ldr	r2, [r7, #4]
 801049a:	4611      	mov	r1, r2
 801049c:	4618      	mov	r0, r3
 801049e:	f7f7 fa65 	bl	800796c <vListInsertEnd>
					}
					taskEXIT_CRITICAL();
 80104a2:	f7f7 fc1b 	bl	8007cdc <vPortExitCritical>
				}
			}
			xTaskResumeAll();
 80104a6:	f7f8 fdb9 	bl	800901c <xTaskResumeAll>

			/* Set the socket's receive event */
			if( pxSocket->xEventGroup != NULL )
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	685b      	ldr	r3, [r3, #4]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d005      	beq.n	80104be <xProcessReceivedUDPPacket+0x76>
			{
				xEventGroupSetBits( pxSocket->xEventGroup, eSOCKET_RECEIVE );
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	685b      	ldr	r3, [r3, #4]
 80104b6:	2101      	movs	r1, #1
 80104b8:	4618      	mov	r0, r3
 80104ba:	f7f7 f971 	bl	80077a0 <xEventGroupSetBits>
			}

			#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
			{
				if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 ) )
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d02a      	beq.n	801051c <xProcessReceivedUDPPacket+0xd4>
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104ca:	f003 0301 	and.w	r3, r3, #1
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d024      	beq.n	801051c <xProcessReceivedUDPPacket+0xd4>
				{
					xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, eSELECT_READ );
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	2101      	movs	r1, #1
 80104da:	4618      	mov	r0, r3
 80104dc:	f7f7 f960 	bl	80077a0 <xEventGroupSetBits>
 80104e0:	e01c      	b.n	801051c <xProcessReceivedUDPPacket+0xd4>
		/* There is no socket listening to the target port, but still it might
		be for this node. */

		#if( ipconfigUSE_LLMNR == 1 )
			/* a LLMNR request, check for the destination port. */
			if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 80104e2:	887b      	ldrh	r3, [r7, #2]
 80104e4:	f64e 3214 	movw	r2, #60180	; 0xeb14
 80104e8:	4293      	cmp	r3, r2
 80104ea:	d006      	beq.n	80104fa <xProcessReceivedUDPPacket+0xb2>
				( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) )
 80104ec:	693b      	ldr	r3, [r7, #16]
 80104ee:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80104f0:	b29b      	uxth	r3, r3
			if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 80104f2:	f64e 3214 	movw	r2, #60180	; 0xeb14
 80104f6:	4293      	cmp	r3, r2
 80104f8:	d10e      	bne.n	8010518 <xProcessReceivedUDPPacket+0xd0>
			{
				vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 80104fa:	693b      	ldr	r3, [r7, #16]
 80104fc:	1d9a      	adds	r2, r3, #6
 80104fe:	693b      	ldr	r3, [r7, #16]
 8010500:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8010504:	4619      	mov	r1, r3
 8010506:	4610      	mov	r0, r2
 8010508:	f7f9 fca8 	bl	8009e5c <vARPRefreshCacheEntry>
				xReturn = ( BaseType_t )ulDNSHandlePacket( pxNetworkBuffer );
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	f7fa f812 	bl	800a536 <ulDNSHandlePacket>
 8010512:	4603      	mov	r3, r0
 8010514:	617b      	str	r3, [r7, #20]
 8010516:	e001      	b.n	801051c <xProcessReceivedUDPPacket+0xd4>
				xReturn = ( BaseType_t )ulNBNSHandlePacket( pxNetworkBuffer );
			}
			else
		#endif /* ipconfigUSE_NBNS */
		{
			xReturn = pdFAIL;
 8010518:	2300      	movs	r3, #0
 801051a:	617b      	str	r3, [r7, #20]
		}
	}

	return xReturn;
 801051c:	697b      	ldr	r3, [r7, #20]
}
 801051e:	4618      	mov	r0, r3
 8010520:	3718      	adds	r7, #24
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}
	...

08010528 <xNetworkBuffersInitialise>:
static SemaphoreHandle_t xNetworkBufferSemaphore = NULL;

/*-----------------------------------------------------------*/

BaseType_t xNetworkBuffersInitialise( void )
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b084      	sub	sp, #16
 801052c:	af00      	add	r7, sp, #0
BaseType_t xReturn, x;

	/* Only initialise the buffers and their associated kernel objects if they
	have not been initialised before. */
	if( xNetworkBufferSemaphore == NULL )
 801052e:	4b37      	ldr	r3, [pc, #220]	; (801060c <xNetworkBuffersInitialise+0xe4>)
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d15c      	bne.n	80105f0 <xNetworkBuffersInitialise+0xc8>
	{
		xNetworkBufferSemaphore = xSemaphoreCreateCounting( ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 8010536:	213c      	movs	r1, #60	; 0x3c
 8010538:	203c      	movs	r0, #60	; 0x3c
 801053a:	f7f7 ff47 	bl	80083cc <xQueueCreateCountingSemaphore>
 801053e:	4602      	mov	r2, r0
 8010540:	4b32      	ldr	r3, [pc, #200]	; (801060c <xNetworkBuffersInitialise+0xe4>)
 8010542:	601a      	str	r2, [r3, #0]
		configASSERT( xNetworkBufferSemaphore );
 8010544:	4b31      	ldr	r3, [pc, #196]	; (801060c <xNetworkBuffersInitialise+0xe4>)
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d109      	bne.n	8010560 <xNetworkBuffersInitialise+0x38>
 801054c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8010550:	f383 8811 	msr	BASEPRI, r3
 8010554:	f3bf 8f6f 	isb	sy
 8010558:	f3bf 8f4f 	dsb	sy
 801055c:	607b      	str	r3, [r7, #4]
 801055e:	e7fe      	b.n	801055e <xNetworkBuffersInitialise+0x36>

		if( xNetworkBufferSemaphore != NULL )
 8010560:	4b2a      	ldr	r3, [pc, #168]	; (801060c <xNetworkBuffersInitialise+0xe4>)
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d043      	beq.n	80105f0 <xNetworkBuffersInitialise+0xc8>
		{
			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				vQueueAddToRegistry( xNetworkBufferSemaphore, "NetBufSem" );
 8010568:	4b28      	ldr	r3, [pc, #160]	; (801060c <xNetworkBuffersInitialise+0xe4>)
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	4928      	ldr	r1, [pc, #160]	; (8010610 <xNetworkBuffersInitialise+0xe8>)
 801056e:	4618      	mov	r0, r3
 8010570:	f7f8 fb48 	bl	8008c04 <vQueueAddToRegistry>
				vTraceSetQueueName( xNetworkEventQueue, "IPStackEvent" );
				vTraceSetQueueName( xNetworkBufferSemaphore, "NetworkBufferCount" );
			}
			#endif /*  ipconfigINCLUDE_EXAMPLE_FREERTOS_PLUS_TRACE_CALLS == 1 */

			vListInitialise( &xFreeBuffersList );
 8010574:	4827      	ldr	r0, [pc, #156]	; (8010614 <xNetworkBuffersInitialise+0xec>)
 8010576:	f7f7 f9cc 	bl	8007912 <vListInitialise>

			/* Initialise all the network buffers.  No storage is allocated to
			the buffers yet. */
			for( x = 0; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 801057a:	2300      	movs	r3, #0
 801057c:	60bb      	str	r3, [r7, #8]
 801057e:	e031      	b.n	80105e4 <xNetworkBuffersInitialise+0xbc>
			{
				/* Initialise and set the owner of the buffer list items. */
				xNetworkBufferDescriptors[ x ].pucEthernetBuffer = NULL;
 8010580:	4925      	ldr	r1, [pc, #148]	; (8010618 <xNetworkBuffersInitialise+0xf0>)
 8010582:	68ba      	ldr	r2, [r7, #8]
 8010584:	4613      	mov	r3, r2
 8010586:	00db      	lsls	r3, r3, #3
 8010588:	4413      	add	r3, r2
 801058a:	009b      	lsls	r3, r3, #2
 801058c:	440b      	add	r3, r1
 801058e:	3318      	adds	r3, #24
 8010590:	2200      	movs	r2, #0
 8010592:	601a      	str	r2, [r3, #0]
				vListInitialiseItem( &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 8010594:	68ba      	ldr	r2, [r7, #8]
 8010596:	4613      	mov	r3, r2
 8010598:	00db      	lsls	r3, r3, #3
 801059a:	4413      	add	r3, r2
 801059c:	009b      	lsls	r3, r3, #2
 801059e:	4a1e      	ldr	r2, [pc, #120]	; (8010618 <xNetworkBuffersInitialise+0xf0>)
 80105a0:	4413      	add	r3, r2
 80105a2:	4618      	mov	r0, r3
 80105a4:	f7f7 f9d5 	bl	8007952 <vListInitialiseItem>
				listSET_LIST_ITEM_OWNER( &( xNetworkBufferDescriptors[ x ].xBufferListItem ), &xNetworkBufferDescriptors[ x ] );
 80105a8:	68ba      	ldr	r2, [r7, #8]
 80105aa:	4613      	mov	r3, r2
 80105ac:	00db      	lsls	r3, r3, #3
 80105ae:	4413      	add	r3, r2
 80105b0:	009b      	lsls	r3, r3, #2
 80105b2:	4a19      	ldr	r2, [pc, #100]	; (8010618 <xNetworkBuffersInitialise+0xf0>)
 80105b4:	1899      	adds	r1, r3, r2
 80105b6:	4818      	ldr	r0, [pc, #96]	; (8010618 <xNetworkBuffersInitialise+0xf0>)
 80105b8:	68ba      	ldr	r2, [r7, #8]
 80105ba:	4613      	mov	r3, r2
 80105bc:	00db      	lsls	r3, r3, #3
 80105be:	4413      	add	r3, r2
 80105c0:	009b      	lsls	r3, r3, #2
 80105c2:	4403      	add	r3, r0
 80105c4:	330c      	adds	r3, #12
 80105c6:	6019      	str	r1, [r3, #0]

				/* Currently, all buffers are available for use. */
				vListInsert( &xFreeBuffersList, &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 80105c8:	68ba      	ldr	r2, [r7, #8]
 80105ca:	4613      	mov	r3, r2
 80105cc:	00db      	lsls	r3, r3, #3
 80105ce:	4413      	add	r3, r2
 80105d0:	009b      	lsls	r3, r3, #2
 80105d2:	4a11      	ldr	r2, [pc, #68]	; (8010618 <xNetworkBuffersInitialise+0xf0>)
 80105d4:	4413      	add	r3, r2
 80105d6:	4619      	mov	r1, r3
 80105d8:	480e      	ldr	r0, [pc, #56]	; (8010614 <xNetworkBuffersInitialise+0xec>)
 80105da:	f7f7 f9eb 	bl	80079b4 <vListInsert>
			for( x = 0; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 80105de:	68bb      	ldr	r3, [r7, #8]
 80105e0:	3301      	adds	r3, #1
 80105e2:	60bb      	str	r3, [r7, #8]
 80105e4:	68bb      	ldr	r3, [r7, #8]
 80105e6:	2b3b      	cmp	r3, #59	; 0x3b
 80105e8:	ddca      	ble.n	8010580 <xNetworkBuffersInitialise+0x58>
			}

			uxMinimumFreeNetworkBuffers = ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 80105ea:	4b0c      	ldr	r3, [pc, #48]	; (801061c <xNetworkBuffersInitialise+0xf4>)
 80105ec:	223c      	movs	r2, #60	; 0x3c
 80105ee:	601a      	str	r2, [r3, #0]
		}
	}

	if( xNetworkBufferSemaphore == NULL )
 80105f0:	4b06      	ldr	r3, [pc, #24]	; (801060c <xNetworkBuffersInitialise+0xe4>)
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d102      	bne.n	80105fe <xNetworkBuffersInitialise+0xd6>
	{
		xReturn = pdFAIL;
 80105f8:	2300      	movs	r3, #0
 80105fa:	60fb      	str	r3, [r7, #12]
 80105fc:	e001      	b.n	8010602 <xNetworkBuffersInitialise+0xda>
	}
	else
	{
		xReturn = pdPASS;
 80105fe:	2301      	movs	r3, #1
 8010600:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8010602:	68fb      	ldr	r3, [r7, #12]
}
 8010604:	4618      	mov	r0, r3
 8010606:	3710      	adds	r7, #16
 8010608:	46bd      	mov	sp, r7
 801060a:	bd80      	pop	{r7, pc}
 801060c:	2000576c 	.word	0x2000576c
 8010610:	08011130 	.word	0x08011130
 8010614:	20004ee4 	.word	0x20004ee4
 8010618:	20004efc 	.word	0x20004efc
 801061c:	20004ef8 	.word	0x20004ef8

08010620 <vReleaseNetworkBuffer>:
	return pucEthernetBuffer;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBuffer( uint8_t *pucEthernetBuffer )
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b082      	sub	sp, #8
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
	/* There is space before the Ethernet buffer in which a pointer to the
	network buffer that references this Ethernet buffer is stored.  Remove the
	space before freeing the buffer. */
	if( pucEthernetBuffer != NULL )
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d005      	beq.n	801063a <vReleaseNetworkBuffer+0x1a>
	{
		pucEthernetBuffer -= ipBUFFER_PADDING;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	3b0a      	subs	r3, #10
 8010632:	607b      	str	r3, [r7, #4]
		vPortFree( ( void * ) pucEthernetBuffer );
 8010634:	6878      	ldr	r0, [r7, #4]
 8010636:	f7f7 fcf5 	bl	8008024 <vPortFree>
	}
}
 801063a:	bf00      	nop
 801063c:	3708      	adds	r7, #8
 801063e:	46bd      	mov	sp, r7
 8010640:	bd80      	pop	{r7, pc}
	...

08010644 <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t *pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes, TickType_t xBlockTimeTicks )
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b086      	sub	sp, #24
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
 801064c:	6039      	str	r1, [r7, #0]
NetworkBufferDescriptor_t *pxReturn = NULL;
 801064e:	2300      	movs	r3, #0
 8010650:	617b      	str	r3, [r7, #20]
size_t uxCount;

	if( ( xRequestedSizeBytes != 0u ) && ( xRequestedSizeBytes < ( size_t ) baMINIMAL_BUFFER_SIZE ) )
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d004      	beq.n	8010662 <pxGetNetworkBufferWithDescriptor+0x1e>
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2b45      	cmp	r3, #69	; 0x45
 801065c:	d801      	bhi.n	8010662 <pxGetNetworkBufferWithDescriptor+0x1e>
	{
		/* ARP packets can replace application packets, so the storage must be
		at least large enough to hold an ARP. */
		xRequestedSizeBytes = baMINIMAL_BUFFER_SIZE;
 801065e:	2346      	movs	r3, #70	; 0x46
 8010660:	607b      	str	r3, [r7, #4]
	}

	/* Add 2 bytes to xRequestedSizeBytes and round up xRequestedSizeBytes
	to the nearest multiple of N bytes, where N equals 'sizeof( size_t )'. */
	xRequestedSizeBytes += 2u;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	3302      	adds	r3, #2
 8010666:	607b      	str	r3, [r7, #4]
	if( ( xRequestedSizeBytes & ( sizeof( size_t ) - 1u ) ) != 0u )
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	f003 0303 	and.w	r3, r3, #3
 801066e:	2b00      	cmp	r3, #0
 8010670:	d004      	beq.n	801067c <pxGetNetworkBufferWithDescriptor+0x38>
	{
		xRequestedSizeBytes = ( xRequestedSizeBytes | ( sizeof( size_t ) - 1u ) ) + 1u;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	f043 0303 	orr.w	r3, r3, #3
 8010678:	3301      	adds	r3, #1
 801067a:	607b      	str	r3, [r7, #4]
	}

	/* If there is a semaphore available, there is a network buffer available. */
	if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 801067c:	4b2a      	ldr	r3, [pc, #168]	; (8010728 <pxGetNetworkBufferWithDescriptor+0xe4>)
 801067e:	6818      	ldr	r0, [r3, #0]
 8010680:	2300      	movs	r3, #0
 8010682:	683a      	ldr	r2, [r7, #0]
 8010684:	2100      	movs	r1, #0
 8010686:	f7f8 f861 	bl	800874c <xQueueGenericReceive>
 801068a:	4603      	mov	r3, r0
 801068c:	2b01      	cmp	r3, #1
 801068e:	d146      	bne.n	801071e <pxGetNetworkBufferWithDescriptor+0xda>
	{
		/* Protect the structure as it is accessed from tasks and interrupts. */
		taskENTER_CRITICAL();
 8010690:	f7f7 faf6 	bl	8007c80 <vPortEnterCritical>
		{
			pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 8010694:	4b25      	ldr	r3, [pc, #148]	; (801072c <pxGetNetworkBufferWithDescriptor+0xe8>)
 8010696:	68db      	ldr	r3, [r3, #12]
 8010698:	68db      	ldr	r3, [r3, #12]
 801069a:	617b      	str	r3, [r7, #20]
			uxListRemove( &( pxReturn->xBufferListItem ) );
 801069c:	697b      	ldr	r3, [r7, #20]
 801069e:	4618      	mov	r0, r3
 80106a0:	f7f7 f9c1 	bl	8007a26 <uxListRemove>
		}
		taskEXIT_CRITICAL();
 80106a4:	f7f7 fb1a 	bl	8007cdc <vPortExitCritical>

		/* Reading UBaseType_t, no critical section needed. */
		uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 80106a8:	4b20      	ldr	r3, [pc, #128]	; (801072c <pxGetNetworkBufferWithDescriptor+0xe8>)
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	613b      	str	r3, [r7, #16]

		if( uxMinimumFreeNetworkBuffers > uxCount )
 80106ae:	4b20      	ldr	r3, [pc, #128]	; (8010730 <pxGetNetworkBufferWithDescriptor+0xec>)
 80106b0:	681a      	ldr	r2, [r3, #0]
 80106b2:	693b      	ldr	r3, [r7, #16]
 80106b4:	429a      	cmp	r2, r3
 80106b6:	d902      	bls.n	80106be <pxGetNetworkBufferWithDescriptor+0x7a>
		{
			uxMinimumFreeNetworkBuffers = uxCount;
 80106b8:	4a1d      	ldr	r2, [pc, #116]	; (8010730 <pxGetNetworkBufferWithDescriptor+0xec>)
 80106ba:	693b      	ldr	r3, [r7, #16]
 80106bc:	6013      	str	r3, [r2, #0]
		}

		/* Allocate storage of exactly the requested size to the buffer. */
		configASSERT( pxReturn->pucEthernetBuffer == NULL );
 80106be:	697b      	ldr	r3, [r7, #20]
 80106c0:	699b      	ldr	r3, [r3, #24]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d009      	beq.n	80106da <pxGetNetworkBufferWithDescriptor+0x96>
 80106c6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80106ca:	f383 8811 	msr	BASEPRI, r3
 80106ce:	f3bf 8f6f 	isb	sy
 80106d2:	f3bf 8f4f 	dsb	sy
 80106d6:	60fb      	str	r3, [r7, #12]
 80106d8:	e7fe      	b.n	80106d8 <pxGetNetworkBufferWithDescriptor+0x94>
		if( xRequestedSizeBytes > 0 )
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d01e      	beq.n	801071e <pxGetNetworkBufferWithDescriptor+0xda>
		{
			/* Extra space is obtained so a pointer to the network buffer can
			be stored at the beginning of the buffer. */
			pxReturn->pucEthernetBuffer = ( uint8_t * ) pvPortMalloc( xRequestedSizeBytes + ipBUFFER_PADDING );
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	330a      	adds	r3, #10
 80106e4:	4618      	mov	r0, r3
 80106e6:	f7f7 fbdb 	bl	8007ea0 <pvPortMalloc>
 80106ea:	4602      	mov	r2, r0
 80106ec:	697b      	ldr	r3, [r7, #20]
 80106ee:	619a      	str	r2, [r3, #24]

			if( pxReturn->pucEthernetBuffer == NULL )
 80106f0:	697b      	ldr	r3, [r7, #20]
 80106f2:	699b      	ldr	r3, [r3, #24]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d105      	bne.n	8010704 <pxGetNetworkBufferWithDescriptor+0xc0>
			{
				/* The attempt to allocate storage for the buffer payload failed,
				so the network buffer structure cannot be used and must be
				released. */
				vReleaseNetworkBufferAndDescriptor( pxReturn );
 80106f8:	6978      	ldr	r0, [r7, #20]
 80106fa:	f000 f81b 	bl	8010734 <vReleaseNetworkBufferAndDescriptor>
				pxReturn = NULL;
 80106fe:	2300      	movs	r3, #0
 8010700:	617b      	str	r3, [r7, #20]
 8010702:	e00c      	b.n	801071e <pxGetNetworkBufferWithDescriptor+0xda>
			{
				/* Store a pointer to the network buffer structure in the
				buffer storage area, then move the buffer pointer on past the
				stored pointer so the pointer value is not overwritten by the
				application when the buffer is used. */
				*( ( NetworkBufferDescriptor_t ** ) ( pxReturn->pucEthernetBuffer ) ) = pxReturn;
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	699b      	ldr	r3, [r3, #24]
 8010708:	697a      	ldr	r2, [r7, #20]
 801070a:	601a      	str	r2, [r3, #0]
				pxReturn->pucEthernetBuffer += ipBUFFER_PADDING;
 801070c:	697b      	ldr	r3, [r7, #20]
 801070e:	699b      	ldr	r3, [r3, #24]
 8010710:	f103 020a 	add.w	r2, r3, #10
 8010714:	697b      	ldr	r3, [r7, #20]
 8010716:	619a      	str	r2, [r3, #24]

				/* Store the actual size of the allocated buffer, which may be
				greater than the original requested size. */
				pxReturn->xDataLength = xRequestedSizeBytes;
 8010718:	697b      	ldr	r3, [r7, #20]
 801071a:	687a      	ldr	r2, [r7, #4]
 801071c:	61da      	str	r2, [r3, #28]
	else
	{
		iptraceNETWORK_BUFFER_OBTAINED( pxReturn );
	}

	return pxReturn;
 801071e:	697b      	ldr	r3, [r7, #20]
}
 8010720:	4618      	mov	r0, r3
 8010722:	3718      	adds	r7, #24
 8010724:	46bd      	mov	sp, r7
 8010726:	bd80      	pop	{r7, pc}
 8010728:	2000576c 	.word	0x2000576c
 801072c:	20004ee4 	.word	0x20004ee4
 8010730:	20004ef8 	.word	0x20004ef8

08010734 <vReleaseNetworkBufferAndDescriptor>:
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b084      	sub	sp, #16
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
	/* Ensure the buffer is returned to the list of free buffers before the
	counting semaphore is 'given' to say a buffer is available.  Release the
	storage allocated to the buffer payload.  THIS FILE SHOULD NOT BE USED
	IF THE PROJECT INCLUDES A MEMORY ALLOCATOR THAT WILL FRAGMENT THE HEAP
	MEMORY.  For example, heap_2 must not be used, heap_4 can be used. */
	vReleaseNetworkBuffer( pxNetworkBuffer->pucEthernetBuffer );
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	699b      	ldr	r3, [r3, #24]
 8010740:	4618      	mov	r0, r3
 8010742:	f7ff ff6d 	bl	8010620 <vReleaseNetworkBuffer>
	pxNetworkBuffer->pucEthernetBuffer = NULL;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	2200      	movs	r2, #0
 801074a:	619a      	str	r2, [r3, #24]

	taskENTER_CRITICAL();
 801074c:	f7f7 fa98 	bl	8007c80 <vPortEnterCritical>
	{
		xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	691b      	ldr	r3, [r3, #16]
 8010754:	4a0f      	ldr	r2, [pc, #60]	; (8010794 <vReleaseNetworkBufferAndDescriptor+0x60>)
 8010756:	4293      	cmp	r3, r2
 8010758:	bf0c      	ite	eq
 801075a:	2301      	moveq	r3, #1
 801075c:	2300      	movne	r3, #0
 801075e:	b2db      	uxtb	r3, r3
 8010760:	60fb      	str	r3, [r7, #12]

		if( xListItemAlreadyInFreeList == pdFALSE )
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d104      	bne.n	8010772 <vReleaseNetworkBufferAndDescriptor+0x3e>
		{
			vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	4619      	mov	r1, r3
 801076c:	4809      	ldr	r0, [pc, #36]	; (8010794 <vReleaseNetworkBufferAndDescriptor+0x60>)
 801076e:	f7f7 f8fd 	bl	800796c <vListInsertEnd>
		}
	}
	taskEXIT_CRITICAL();
 8010772:	f7f7 fab3 	bl	8007cdc <vPortExitCritical>

	/*
	 * Update the network state machine, unless the program fails to release its 'xNetworkBufferSemaphore'.
	 * The program should only try to release its semaphore if 'xListItemAlreadyInFreeList' is false.
	 */
	if( xListItemAlreadyInFreeList == pdFALSE )
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d106      	bne.n	801078a <vReleaseNetworkBufferAndDescriptor+0x56>
	{
		if ( xSemaphoreGive( xNetworkBufferSemaphore ) == pdTRUE )
 801077c:	4b06      	ldr	r3, [pc, #24]	; (8010798 <vReleaseNetworkBufferAndDescriptor+0x64>)
 801077e:	6818      	ldr	r0, [r3, #0]
 8010780:	2300      	movs	r3, #0
 8010782:	2200      	movs	r2, #0
 8010784:	2100      	movs	r1, #0
 8010786:	f7f7 fe53 	bl	8008430 <xQueueGenericSend>
	}
	else
	{
		iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
	}
}
 801078a:	bf00      	nop
 801078c:	3710      	adds	r7, #16
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}
 8010792:	bf00      	nop
 8010794:	20004ee4 	.word	0x20004ee4
 8010798:	2000576c 	.word	0x2000576c

0801079c <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 801079c:	b5b0      	push	{r4, r5, r7, lr}
 801079e:	b088      	sub	sp, #32
 80107a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80107a2:	f7ef feb7 	bl	8000514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80107a6:	f000 f82b 	bl	8010800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80107aa:	f000 f8a1 	bl	80108f0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
	FreeRTOS_IPInit( ucIPAddress,
 80107ae:	4b0d      	ldr	r3, [pc, #52]	; (80107e4 <main+0x48>)
 80107b0:	9300      	str	r3, [sp, #0]
 80107b2:	4b0d      	ldr	r3, [pc, #52]	; (80107e8 <main+0x4c>)
 80107b4:	4a0d      	ldr	r2, [pc, #52]	; (80107ec <main+0x50>)
 80107b6:	490e      	ldr	r1, [pc, #56]	; (80107f0 <main+0x54>)
 80107b8:	480e      	ldr	r0, [pc, #56]	; (80107f4 <main+0x58>)
 80107ba:	f7fa fcd7 	bl	800b16c <FreeRTOS_IPInit>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80107be:	4b0e      	ldr	r3, [pc, #56]	; (80107f8 <main+0x5c>)
 80107c0:	1d3c      	adds	r4, r7, #4
 80107c2:	461d      	mov	r5, r3
 80107c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80107c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80107c8:	682b      	ldr	r3, [r5, #0]
 80107ca:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80107cc:	1d3b      	adds	r3, r7, #4
 80107ce:	2100      	movs	r1, #0
 80107d0:	4618      	mov	r0, r3
 80107d2:	f7f6 ff52 	bl	800767a <osThreadCreate>
 80107d6:	4602      	mov	r2, r0
 80107d8:	4b08      	ldr	r3, [pc, #32]	; (80107fc <main+0x60>)
 80107da:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 80107dc:	f7f6 ff46 	bl	800766c <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80107e0:	e7fe      	b.n	80107e0 <main+0x44>
 80107e2:	bf00      	nop
 80107e4:	200001c8 	.word	0x200001c8
 80107e8:	0801126c 	.word	0x0801126c
 80107ec:	08011268 	.word	0x08011268
 80107f0:	08011264 	.word	0x08011264
 80107f4:	08011260 	.word	0x08011260
 80107f8:	08011148 	.word	0x08011148
 80107fc:	200069b8 	.word	0x200069b8

08010800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b094      	sub	sp, #80	; 0x50
 8010804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8010806:	2300      	movs	r3, #0
 8010808:	60bb      	str	r3, [r7, #8]
 801080a:	4a35      	ldr	r2, [pc, #212]	; (80108e0 <SystemClock_Config+0xe0>)
 801080c:	4b34      	ldr	r3, [pc, #208]	; (80108e0 <SystemClock_Config+0xe0>)
 801080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010814:	6413      	str	r3, [r2, #64]	; 0x40
 8010816:	4b32      	ldr	r3, [pc, #200]	; (80108e0 <SystemClock_Config+0xe0>)
 8010818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801081e:	60bb      	str	r3, [r7, #8]
 8010820:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8010822:	2300      	movs	r3, #0
 8010824:	607b      	str	r3, [r7, #4]
 8010826:	4a2f      	ldr	r2, [pc, #188]	; (80108e4 <SystemClock_Config+0xe4>)
 8010828:	4b2e      	ldr	r3, [pc, #184]	; (80108e4 <SystemClock_Config+0xe4>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010830:	6013      	str	r3, [r2, #0]
 8010832:	4b2c      	ldr	r3, [pc, #176]	; (80108e4 <SystemClock_Config+0xe4>)
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801083a:	607b      	str	r3, [r7, #4]
 801083c:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 801083e:	2303      	movs	r3, #3
 8010840:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8010842:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8010846:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8010848:	2301      	movs	r3, #1
 801084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 801084c:	2310      	movs	r3, #16
 801084e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010850:	2302      	movs	r3, #2
 8010852:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8010854:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010858:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 801085a:	2304      	movs	r3, #4
 801085c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 801085e:	2348      	movs	r3, #72	; 0x48
 8010860:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8010862:	2302      	movs	r3, #2
 8010864:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8010866:	2303      	movs	r3, #3
 8010868:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801086a:	f107 0320 	add.w	r3, r7, #32
 801086e:	4618      	mov	r0, r3
 8010870:	f7f1 fa40 	bl	8001cf4 <HAL_RCC_OscConfig>
 8010874:	4603      	mov	r3, r0
 8010876:	2b00      	cmp	r3, #0
 8010878:	d003      	beq.n	8010882 <SystemClock_Config+0x82>
  {
    _Error_Handler(__FILE__, __LINE__);
 801087a:	21d2      	movs	r1, #210	; 0xd2
 801087c:	481a      	ldr	r0, [pc, #104]	; (80108e8 <SystemClock_Config+0xe8>)
 801087e:	f000 f8f1 	bl	8010a64 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010882:	230f      	movs	r3, #15
 8010884:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8010886:	2300      	movs	r3, #0
 8010888:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801088a:	2300      	movs	r3, #0
 801088c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801088e:	2300      	movs	r3, #0
 8010890:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8010892:	2300      	movs	r3, #0
 8010894:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8010896:	f107 030c 	add.w	r3, r7, #12
 801089a:	2100      	movs	r1, #0
 801089c:	4618      	mov	r0, r3
 801089e:	f7f1 fc6b 	bl	8002178 <HAL_RCC_ClockConfig>
 80108a2:	4603      	mov	r3, r0
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d003      	beq.n	80108b0 <SystemClock_Config+0xb0>
  {
    _Error_Handler(__FILE__, __LINE__);
 80108a8:	21e0      	movs	r1, #224	; 0xe0
 80108aa:	480f      	ldr	r0, [pc, #60]	; (80108e8 <SystemClock_Config+0xe8>)
 80108ac:	f000 f8da 	bl	8010a64 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80108b0:	f7f1 fe1c 	bl	80024ec <HAL_RCC_GetHCLKFreq>
 80108b4:	4602      	mov	r2, r0
 80108b6:	4b0d      	ldr	r3, [pc, #52]	; (80108ec <SystemClock_Config+0xec>)
 80108b8:	fba3 2302 	umull	r2, r3, r3, r2
 80108bc:	099b      	lsrs	r3, r3, #6
 80108be:	4618      	mov	r0, r3
 80108c0:	f7ef ff8b 	bl	80007da <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80108c4:	2004      	movs	r0, #4
 80108c6:	f7ef ff95 	bl	80007f4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80108ca:	2200      	movs	r2, #0
 80108cc:	210f      	movs	r1, #15
 80108ce:	f04f 30ff 	mov.w	r0, #4294967295
 80108d2:	f7ef ff58 	bl	8000786 <HAL_NVIC_SetPriority>
}
 80108d6:	bf00      	nop
 80108d8:	3750      	adds	r7, #80	; 0x50
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}
 80108de:	bf00      	nop
 80108e0:	40023800 	.word	0x40023800
 80108e4:	40007000 	.word	0x40007000
 80108e8:	0801115c 	.word	0x0801115c
 80108ec:	10624dd3 	.word	0x10624dd3

080108f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b08a      	sub	sp, #40	; 0x28
 80108f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80108f6:	2300      	movs	r3, #0
 80108f8:	613b      	str	r3, [r7, #16]
 80108fa:	4a27      	ldr	r2, [pc, #156]	; (8010998 <MX_GPIO_Init+0xa8>)
 80108fc:	4b26      	ldr	r3, [pc, #152]	; (8010998 <MX_GPIO_Init+0xa8>)
 80108fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010900:	f043 0304 	orr.w	r3, r3, #4
 8010904:	6313      	str	r3, [r2, #48]	; 0x30
 8010906:	4b24      	ldr	r3, [pc, #144]	; (8010998 <MX_GPIO_Init+0xa8>)
 8010908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801090a:	f003 0304 	and.w	r3, r3, #4
 801090e:	613b      	str	r3, [r7, #16]
 8010910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8010912:	2300      	movs	r3, #0
 8010914:	60fb      	str	r3, [r7, #12]
 8010916:	4a20      	ldr	r2, [pc, #128]	; (8010998 <MX_GPIO_Init+0xa8>)
 8010918:	4b1f      	ldr	r3, [pc, #124]	; (8010998 <MX_GPIO_Init+0xa8>)
 801091a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801091c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010920:	6313      	str	r3, [r2, #48]	; 0x30
 8010922:	4b1d      	ldr	r3, [pc, #116]	; (8010998 <MX_GPIO_Init+0xa8>)
 8010924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801092a:	60fb      	str	r3, [r7, #12]
 801092c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801092e:	2300      	movs	r3, #0
 8010930:	60bb      	str	r3, [r7, #8]
 8010932:	4a19      	ldr	r2, [pc, #100]	; (8010998 <MX_GPIO_Init+0xa8>)
 8010934:	4b18      	ldr	r3, [pc, #96]	; (8010998 <MX_GPIO_Init+0xa8>)
 8010936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010938:	f043 0308 	orr.w	r3, r3, #8
 801093c:	6313      	str	r3, [r2, #48]	; 0x30
 801093e:	4b16      	ldr	r3, [pc, #88]	; (8010998 <MX_GPIO_Init+0xa8>)
 8010940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010942:	f003 0308 	and.w	r3, r3, #8
 8010946:	60bb      	str	r3, [r7, #8]
 8010948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801094a:	2300      	movs	r3, #0
 801094c:	607b      	str	r3, [r7, #4]
 801094e:	4a12      	ldr	r2, [pc, #72]	; (8010998 <MX_GPIO_Init+0xa8>)
 8010950:	4b11      	ldr	r3, [pc, #68]	; (8010998 <MX_GPIO_Init+0xa8>)
 8010952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010954:	f043 0301 	orr.w	r3, r3, #1
 8010958:	6313      	str	r3, [r2, #48]	; 0x30
 801095a:	4b0f      	ldr	r3, [pc, #60]	; (8010998 <MX_GPIO_Init+0xa8>)
 801095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801095e:	f003 0301 	and.w	r3, r3, #1
 8010962:	607b      	str	r3, [r7, #4]
 8010964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8010966:	2200      	movs	r2, #0
 8010968:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 801096c:	480b      	ldr	r0, [pc, #44]	; (801099c <MX_GPIO_Init+0xac>)
 801096e:	f7f0 f8df 	bl	8000b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8010972:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8010976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010978:	2301      	movs	r3, #1
 801097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801097c:	2300      	movs	r3, #0
 801097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010980:	2300      	movs	r3, #0
 8010982:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010984:	f107 0314 	add.w	r3, r7, #20
 8010988:	4619      	mov	r1, r3
 801098a:	4804      	ldr	r0, [pc, #16]	; (801099c <MX_GPIO_Init+0xac>)
 801098c:	f7ef ff4e 	bl	800082c <HAL_GPIO_Init>

}
 8010990:	bf00      	nop
 8010992:	3728      	adds	r7, #40	; 0x28
 8010994:	46bd      	mov	sp, r7
 8010996:	bd80      	pop	{r7, pc}
 8010998:	40023800 	.word	0x40023800
 801099c:	40020c00 	.word	0x40020c00

080109a0 <pcApplicationHostnameHook>:

/* USER CODE BEGIN 4 */
const char *pcApplicationHostnameHook( void )
{
 80109a0:	b480      	push	{r7}
 80109a2:	af00      	add	r7, sp, #0
	/* Assign the name "rtosdemo" to this network node.  This function will be
	called during the DHCP: the machine will be registered with an IP address
	plus this name. */
	return mainHOST_NAME;
 80109a4:	4b02      	ldr	r3, [pc, #8]	; (80109b0 <pcApplicationHostnameHook+0x10>)
}
 80109a6:	4618      	mov	r0, r3
 80109a8:	46bd      	mov	sp, r7
 80109aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ae:	4770      	bx	lr
 80109b0:	0801116c 	.word	0x0801116c

080109b4 <xApplicationDNSQueryHook>:

BaseType_t xApplicationDNSQueryHook( const char *pcName )
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b084      	sub	sp, #16
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	/* Determine if a name lookup is for this node.  Two names are given
	to this node: that returned by pcApplicationHostnameHook() and that set
	by mainDEVICE_NICK_NAME. */
	if( strcasecmp( pcName, pcApplicationHostnameHook() ) == 0 )
 80109bc:	f7ff fff0 	bl	80109a0 <pcApplicationHostnameHook>
 80109c0:	4603      	mov	r3, r0
 80109c2:	4619      	mov	r1, r3
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	f000 faed 	bl	8010fa4 <strcasecmp>
 80109ca:	4603      	mov	r3, r0
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d102      	bne.n	80109d6 <xApplicationDNSQueryHook+0x22>
	{
		xReturn = pdPASS;
 80109d0:	2301      	movs	r3, #1
 80109d2:	60fb      	str	r3, [r7, #12]
 80109d4:	e00b      	b.n	80109ee <xApplicationDNSQueryHook+0x3a>
	}
	else if( strcasecmp( pcName, mainDEVICE_NICK_NAME ) == 0 )
 80109d6:	4908      	ldr	r1, [pc, #32]	; (80109f8 <xApplicationDNSQueryHook+0x44>)
 80109d8:	6878      	ldr	r0, [r7, #4]
 80109da:	f000 fae3 	bl	8010fa4 <strcasecmp>
 80109de:	4603      	mov	r3, r0
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d102      	bne.n	80109ea <xApplicationDNSQueryHook+0x36>
	{
		xReturn = pdPASS;
 80109e4:	2301      	movs	r3, #1
 80109e6:	60fb      	str	r3, [r7, #12]
 80109e8:	e001      	b.n	80109ee <xApplicationDNSQueryHook+0x3a>
	}
	else
	{
		xReturn = pdFAIL;
 80109ea:	2300      	movs	r3, #0
 80109ec:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80109ee:	68fb      	ldr	r3, [r7, #12]
}
 80109f0:	4618      	mov	r0, r3
 80109f2:	3710      	adds	r7, #16
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}
 80109f8:	08011178 	.word	0x08011178

080109fc <vApplicationStackOverflowHook>:
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	ulMallocFailures++;
}

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 80109fc:	b480      	push	{r7}
 80109fe:	b085      	sub	sp, #20
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
 8010a04:	6039      	str	r1, [r7, #0]
 8010a06:	f04f 0340 	mov.w	r3, #64	; 0x40
 8010a0a:	f383 8811 	msr	BASEPRI, r3
 8010a0e:	f3bf 8f6f 	isb	sy
 8010a12:	f3bf 8f4f 	dsb	sy
 8010a16:	60fb      	str	r3, [r7, #12]

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
	for( ;; );
 8010a18:	e7fe      	b.n	8010a18 <vApplicationStackOverflowHook+0x1c>
	...

08010a1c <StartDefaultTask>:
}
/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b082      	sub	sp, #8
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8010a24:	f7f3 f9f0 	bl	8003e08 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8010a28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010a2c:	f7f6 fe4c 	bl	80076c8 <osDelay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8010a30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010a34:	4801      	ldr	r0, [pc, #4]	; (8010a3c <StartDefaultTask+0x20>)
 8010a36:	f7f0 f894 	bl	8000b62 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8010a3a:	e7f5      	b.n	8010a28 <StartDefaultTask+0xc>
 8010a3c:	40020c00 	.word	0x40020c00

08010a40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b082      	sub	sp, #8
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	4a04      	ldr	r2, [pc, #16]	; (8010a60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8010a4e:	4293      	cmp	r3, r2
 8010a50:	d101      	bne.n	8010a56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8010a52:	f7ef fd81 	bl	8000558 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8010a56:	bf00      	nop
 8010a58:	3708      	adds	r7, #8
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	bd80      	pop	{r7, pc}
 8010a5e:	bf00      	nop
 8010a60:	40014400 	.word	0x40014400

08010a64 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8010a64:	b480      	push	{r7}
 8010a66:	b083      	sub	sp, #12
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
 8010a6c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8010a6e:	e7fe      	b.n	8010a6e <_Error_Handler+0xa>

08010a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b082      	sub	sp, #8
 8010a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010a76:	2300      	movs	r3, #0
 8010a78:	607b      	str	r3, [r7, #4]
 8010a7a:	4a25      	ldr	r2, [pc, #148]	; (8010b10 <HAL_MspInit+0xa0>)
 8010a7c:	4b24      	ldr	r3, [pc, #144]	; (8010b10 <HAL_MspInit+0xa0>)
 8010a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010a84:	6453      	str	r3, [r2, #68]	; 0x44
 8010a86:	4b22      	ldr	r3, [pc, #136]	; (8010b10 <HAL_MspInit+0xa0>)
 8010a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010a8e:	607b      	str	r3, [r7, #4]
 8010a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8010a92:	2300      	movs	r3, #0
 8010a94:	603b      	str	r3, [r7, #0]
 8010a96:	4a1e      	ldr	r2, [pc, #120]	; (8010b10 <HAL_MspInit+0xa0>)
 8010a98:	4b1d      	ldr	r3, [pc, #116]	; (8010b10 <HAL_MspInit+0xa0>)
 8010a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8010aa2:	4b1b      	ldr	r3, [pc, #108]	; (8010b10 <HAL_MspInit+0xa0>)
 8010aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010aaa:	603b      	str	r3, [r7, #0]
 8010aac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010aae:	2003      	movs	r0, #3
 8010ab0:	f7ef fe5e 	bl	8000770 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	2100      	movs	r1, #0
 8010ab8:	f06f 000b 	mvn.w	r0, #11
 8010abc:	f7ef fe63 	bl	8000786 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	2100      	movs	r1, #0
 8010ac4:	f06f 000a 	mvn.w	r0, #10
 8010ac8:	f7ef fe5d 	bl	8000786 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8010acc:	2200      	movs	r2, #0
 8010ace:	2100      	movs	r1, #0
 8010ad0:	f06f 0009 	mvn.w	r0, #9
 8010ad4:	f7ef fe57 	bl	8000786 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8010ad8:	2200      	movs	r2, #0
 8010ada:	2100      	movs	r1, #0
 8010adc:	f06f 0004 	mvn.w	r0, #4
 8010ae0:	f7ef fe51 	bl	8000786 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	2100      	movs	r1, #0
 8010ae8:	f06f 0003 	mvn.w	r0, #3
 8010aec:	f7ef fe4b 	bl	8000786 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8010af0:	2200      	movs	r2, #0
 8010af2:	210f      	movs	r1, #15
 8010af4:	f06f 0001 	mvn.w	r0, #1
 8010af8:	f7ef fe45 	bl	8000786 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8010afc:	2200      	movs	r2, #0
 8010afe:	210f      	movs	r1, #15
 8010b00:	f04f 30ff 	mov.w	r0, #4294967295
 8010b04:	f7ef fe3f 	bl	8000786 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010b08:	bf00      	nop
 8010b0a:	3708      	adds	r7, #8
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd80      	pop	{r7, pc}
 8010b10:	40023800 	.word	0x40023800

08010b14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b08c      	sub	sp, #48	; 0x30
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8010b20:	2300      	movs	r3, #0
 8010b22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8010b24:	2200      	movs	r2, #0
 8010b26:	6879      	ldr	r1, [r7, #4]
 8010b28:	2019      	movs	r0, #25
 8010b2a:	f7ef fe2c 	bl	8000786 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8010b2e:	2019      	movs	r0, #25
 8010b30:	f7ef fe45 	bl	80007be <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8010b34:	2300      	movs	r3, #0
 8010b36:	60fb      	str	r3, [r7, #12]
 8010b38:	4a1e      	ldr	r2, [pc, #120]	; (8010bb4 <HAL_InitTick+0xa0>)
 8010b3a:	4b1e      	ldr	r3, [pc, #120]	; (8010bb4 <HAL_InitTick+0xa0>)
 8010b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010b42:	6453      	str	r3, [r2, #68]	; 0x44
 8010b44:	4b1b      	ldr	r3, [pc, #108]	; (8010bb4 <HAL_InitTick+0xa0>)
 8010b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010b4c:	60fb      	str	r3, [r7, #12]
 8010b4e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8010b50:	f107 0210 	add.w	r2, r7, #16
 8010b54:	f107 0314 	add.w	r3, r7, #20
 8010b58:	4611      	mov	r1, r2
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	f7f1 fce6 	bl	800252c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8010b60:	f7f1 fcd0 	bl	8002504 <HAL_RCC_GetPCLK2Freq>
 8010b64:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8010b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b68:	4a13      	ldr	r2, [pc, #76]	; (8010bb8 <HAL_InitTick+0xa4>)
 8010b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8010b6e:	0c9b      	lsrs	r3, r3, #18
 8010b70:	3b01      	subs	r3, #1
 8010b72:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8010b74:	4b11      	ldr	r3, [pc, #68]	; (8010bbc <HAL_InitTick+0xa8>)
 8010b76:	4a12      	ldr	r2, [pc, #72]	; (8010bc0 <HAL_InitTick+0xac>)
 8010b78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 8010b7a:	4b10      	ldr	r3, [pc, #64]	; (8010bbc <HAL_InitTick+0xa8>)
 8010b7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010b80:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8010b82:	4a0e      	ldr	r2, [pc, #56]	; (8010bbc <HAL_InitTick+0xa8>)
 8010b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b86:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8010b88:	4b0c      	ldr	r3, [pc, #48]	; (8010bbc <HAL_InitTick+0xa8>)
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010b8e:	4b0b      	ldr	r3, [pc, #44]	; (8010bbc <HAL_InitTick+0xa8>)
 8010b90:	2200      	movs	r2, #0
 8010b92:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8010b94:	4809      	ldr	r0, [pc, #36]	; (8010bbc <HAL_InitTick+0xa8>)
 8010b96:	f7f1 fcfb 	bl	8002590 <HAL_TIM_Base_Init>
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d104      	bne.n	8010baa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8010ba0:	4806      	ldr	r0, [pc, #24]	; (8010bbc <HAL_InitTick+0xa8>)
 8010ba2:	f7f1 fd2a 	bl	80025fa <HAL_TIM_Base_Start_IT>
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	e000      	b.n	8010bac <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8010baa:	2301      	movs	r3, #1
}
 8010bac:	4618      	mov	r0, r3
 8010bae:	3730      	adds	r7, #48	; 0x30
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	bd80      	pop	{r7, pc}
 8010bb4:	40023800 	.word	0x40023800
 8010bb8:	431bde83 	.word	0x431bde83
 8010bbc:	200069bc 	.word	0x200069bc
 8010bc0:	40014400 	.word	0x40014400

08010bc4 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8010bc4:	b480      	push	{r7}
 8010bc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8010bc8:	bf00      	nop
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd0:	4770      	bx	lr

08010bd2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8010bd2:	b480      	push	{r7}
 8010bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010bd6:	e7fe      	b.n	8010bd6 <HardFault_Handler+0x4>

08010bd8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8010bd8:	b480      	push	{r7}
 8010bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010bdc:	e7fe      	b.n	8010bdc <MemManage_Handler+0x4>

08010bde <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8010bde:	b480      	push	{r7}
 8010be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010be2:	e7fe      	b.n	8010be2 <BusFault_Handler+0x4>

08010be4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8010be4:	b480      	push	{r7}
 8010be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010be8:	e7fe      	b.n	8010be8 <UsageFault_Handler+0x4>

08010bea <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8010bea:	b480      	push	{r7}
 8010bec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010bee:	bf00      	nop
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf6:	4770      	bx	lr

08010bf8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8010bfc:	f7f6 fd78 	bl	80076f0 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010c00:	bf00      	nop
 8010c02:	bd80      	pop	{r7, pc}

08010c04 <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8010c08:	4802      	ldr	r0, [pc, #8]	; (8010c14 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8010c0a:	f7f1 fd11 	bl	8002630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8010c0e:	bf00      	nop
 8010c10:	bd80      	pop	{r7, pc}
 8010c12:	bf00      	nop
 8010c14:	200069bc 	.word	0x200069bc

08010c18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010c18:	b480      	push	{r7}
 8010c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010c1c:	4a16      	ldr	r2, [pc, #88]	; (8010c78 <SystemInit+0x60>)
 8010c1e:	4b16      	ldr	r3, [pc, #88]	; (8010c78 <SystemInit+0x60>)
 8010c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010c24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010c28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8010c2c:	4a13      	ldr	r2, [pc, #76]	; (8010c7c <SystemInit+0x64>)
 8010c2e:	4b13      	ldr	r3, [pc, #76]	; (8010c7c <SystemInit+0x64>)
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	f043 0301 	orr.w	r3, r3, #1
 8010c36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8010c38:	4b10      	ldr	r3, [pc, #64]	; (8010c7c <SystemInit+0x64>)
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8010c3e:	4a0f      	ldr	r2, [pc, #60]	; (8010c7c <SystemInit+0x64>)
 8010c40:	4b0e      	ldr	r3, [pc, #56]	; (8010c7c <SystemInit+0x64>)
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8010c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010c4c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8010c4e:	4b0b      	ldr	r3, [pc, #44]	; (8010c7c <SystemInit+0x64>)
 8010c50:	4a0b      	ldr	r2, [pc, #44]	; (8010c80 <SystemInit+0x68>)
 8010c52:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8010c54:	4a09      	ldr	r2, [pc, #36]	; (8010c7c <SystemInit+0x64>)
 8010c56:	4b09      	ldr	r3, [pc, #36]	; (8010c7c <SystemInit+0x64>)
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010c5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8010c60:	4b06      	ldr	r3, [pc, #24]	; (8010c7c <SystemInit+0x64>)
 8010c62:	2200      	movs	r2, #0
 8010c64:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8010c66:	4b04      	ldr	r3, [pc, #16]	; (8010c78 <SystemInit+0x60>)
 8010c68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010c6c:	609a      	str	r2, [r3, #8]
#endif
}
 8010c6e:	bf00      	nop
 8010c70:	46bd      	mov	sp, r7
 8010c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c76:	4770      	bx	lr
 8010c78:	e000ed00 	.word	0xe000ed00
 8010c7c:	40023800 	.word	0x40023800
 8010c80:	24003010 	.word	0x24003010

08010c84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8010c84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010cbc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8010c88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8010c8a:	e003      	b.n	8010c94 <LoopCopyDataInit>

08010c8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8010c8c:	4b0c      	ldr	r3, [pc, #48]	; (8010cc0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8010c8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010c90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8010c92:	3104      	adds	r1, #4

08010c94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8010c94:	480b      	ldr	r0, [pc, #44]	; (8010cc4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8010c96:	4b0c      	ldr	r3, [pc, #48]	; (8010cc8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8010c98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8010c9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010c9c:	d3f6      	bcc.n	8010c8c <CopyDataInit>
  ldr  r2, =_sbss
 8010c9e:	4a0b      	ldr	r2, [pc, #44]	; (8010ccc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010ca0:	e002      	b.n	8010ca8 <LoopFillZerobss>

08010ca2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8010ca2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8010ca4:	f842 3b04 	str.w	r3, [r2], #4

08010ca8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8010ca8:	4b09      	ldr	r3, [pc, #36]	; (8010cd0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8010caa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010cac:	d3f9      	bcc.n	8010ca2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8010cae:	f7ff ffb3 	bl	8010c18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010cb2:	f000 f811 	bl	8010cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010cb6:	f7ff fd71 	bl	801079c <main>
  bx  lr    
 8010cba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8010cbc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8010cc0:	080113a4 	.word	0x080113a4
  ldr  r0, =_sdata
 8010cc4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8010cc8:	200003a4 	.word	0x200003a4
  ldr  r2, =_sbss
 8010ccc:	200003a8 	.word	0x200003a8
  ldr  r3, = _ebss
 8010cd0:	200069fc 	.word	0x200069fc

08010cd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010cd4:	e7fe      	b.n	8010cd4 <ADC_IRQHandler>
	...

08010cd8 <__libc_init_array>:
 8010cd8:	b570      	push	{r4, r5, r6, lr}
 8010cda:	4e0d      	ldr	r6, [pc, #52]	; (8010d10 <__libc_init_array+0x38>)
 8010cdc:	4c0d      	ldr	r4, [pc, #52]	; (8010d14 <__libc_init_array+0x3c>)
 8010cde:	1ba4      	subs	r4, r4, r6
 8010ce0:	10a4      	asrs	r4, r4, #2
 8010ce2:	2500      	movs	r5, #0
 8010ce4:	42a5      	cmp	r5, r4
 8010ce6:	d109      	bne.n	8010cfc <__libc_init_array+0x24>
 8010ce8:	4e0b      	ldr	r6, [pc, #44]	; (8010d18 <__libc_init_array+0x40>)
 8010cea:	4c0c      	ldr	r4, [pc, #48]	; (8010d1c <__libc_init_array+0x44>)
 8010cec:	f000 f9be 	bl	801106c <_init>
 8010cf0:	1ba4      	subs	r4, r4, r6
 8010cf2:	10a4      	asrs	r4, r4, #2
 8010cf4:	2500      	movs	r5, #0
 8010cf6:	42a5      	cmp	r5, r4
 8010cf8:	d105      	bne.n	8010d06 <__libc_init_array+0x2e>
 8010cfa:	bd70      	pop	{r4, r5, r6, pc}
 8010cfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010d00:	4798      	blx	r3
 8010d02:	3501      	adds	r5, #1
 8010d04:	e7ee      	b.n	8010ce4 <__libc_init_array+0xc>
 8010d06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010d0a:	4798      	blx	r3
 8010d0c:	3501      	adds	r5, #1
 8010d0e:	e7f2      	b.n	8010cf6 <__libc_init_array+0x1e>
 8010d10:	0801139c 	.word	0x0801139c
 8010d14:	0801139c 	.word	0x0801139c
 8010d18:	0801139c 	.word	0x0801139c
 8010d1c:	080113a0 	.word	0x080113a0

08010d20 <malloc>:
 8010d20:	4b02      	ldr	r3, [pc, #8]	; (8010d2c <malloc+0xc>)
 8010d22:	4601      	mov	r1, r0
 8010d24:	6818      	ldr	r0, [r3, #0]
 8010d26:	f000 b895 	b.w	8010e54 <_malloc_r>
 8010d2a:	bf00      	nop
 8010d2c:	200001d4 	.word	0x200001d4

08010d30 <free>:
 8010d30:	4b02      	ldr	r3, [pc, #8]	; (8010d3c <free+0xc>)
 8010d32:	4601      	mov	r1, r0
 8010d34:	6818      	ldr	r0, [r3, #0]
 8010d36:	f000 b83f 	b.w	8010db8 <_free_r>
 8010d3a:	bf00      	nop
 8010d3c:	200001d4 	.word	0x200001d4

08010d40 <memcmp>:
 8010d40:	b510      	push	{r4, lr}
 8010d42:	3901      	subs	r1, #1
 8010d44:	4402      	add	r2, r0
 8010d46:	4290      	cmp	r0, r2
 8010d48:	d101      	bne.n	8010d4e <memcmp+0xe>
 8010d4a:	2000      	movs	r0, #0
 8010d4c:	bd10      	pop	{r4, pc}
 8010d4e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010d52:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010d56:	42a3      	cmp	r3, r4
 8010d58:	d0f5      	beq.n	8010d46 <memcmp+0x6>
 8010d5a:	1b18      	subs	r0, r3, r4
 8010d5c:	bd10      	pop	{r4, pc}

08010d5e <memcpy>:
 8010d5e:	b510      	push	{r4, lr}
 8010d60:	1e43      	subs	r3, r0, #1
 8010d62:	440a      	add	r2, r1
 8010d64:	4291      	cmp	r1, r2
 8010d66:	d100      	bne.n	8010d6a <memcpy+0xc>
 8010d68:	bd10      	pop	{r4, pc}
 8010d6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010d72:	e7f7      	b.n	8010d64 <memcpy+0x6>

08010d74 <memmove>:
 8010d74:	4288      	cmp	r0, r1
 8010d76:	b510      	push	{r4, lr}
 8010d78:	eb01 0302 	add.w	r3, r1, r2
 8010d7c:	d803      	bhi.n	8010d86 <memmove+0x12>
 8010d7e:	1e42      	subs	r2, r0, #1
 8010d80:	4299      	cmp	r1, r3
 8010d82:	d10c      	bne.n	8010d9e <memmove+0x2a>
 8010d84:	bd10      	pop	{r4, pc}
 8010d86:	4298      	cmp	r0, r3
 8010d88:	d2f9      	bcs.n	8010d7e <memmove+0xa>
 8010d8a:	1881      	adds	r1, r0, r2
 8010d8c:	1ad2      	subs	r2, r2, r3
 8010d8e:	42d3      	cmn	r3, r2
 8010d90:	d100      	bne.n	8010d94 <memmove+0x20>
 8010d92:	bd10      	pop	{r4, pc}
 8010d94:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010d98:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010d9c:	e7f7      	b.n	8010d8e <memmove+0x1a>
 8010d9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010da2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010da6:	e7eb      	b.n	8010d80 <memmove+0xc>

08010da8 <memset>:
 8010da8:	4402      	add	r2, r0
 8010daa:	4603      	mov	r3, r0
 8010dac:	4293      	cmp	r3, r2
 8010dae:	d100      	bne.n	8010db2 <memset+0xa>
 8010db0:	4770      	bx	lr
 8010db2:	f803 1b01 	strb.w	r1, [r3], #1
 8010db6:	e7f9      	b.n	8010dac <memset+0x4>

08010db8 <_free_r>:
 8010db8:	b538      	push	{r3, r4, r5, lr}
 8010dba:	4605      	mov	r5, r0
 8010dbc:	2900      	cmp	r1, #0
 8010dbe:	d045      	beq.n	8010e4c <_free_r+0x94>
 8010dc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010dc4:	1f0c      	subs	r4, r1, #4
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	bfb8      	it	lt
 8010dca:	18e4      	addlt	r4, r4, r3
 8010dcc:	f000 f930 	bl	8011030 <__malloc_lock>
 8010dd0:	4a1f      	ldr	r2, [pc, #124]	; (8010e50 <_free_r+0x98>)
 8010dd2:	6813      	ldr	r3, [r2, #0]
 8010dd4:	4610      	mov	r0, r2
 8010dd6:	b933      	cbnz	r3, 8010de6 <_free_r+0x2e>
 8010dd8:	6063      	str	r3, [r4, #4]
 8010dda:	6014      	str	r4, [r2, #0]
 8010ddc:	4628      	mov	r0, r5
 8010dde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010de2:	f000 b926 	b.w	8011032 <__malloc_unlock>
 8010de6:	42a3      	cmp	r3, r4
 8010de8:	d90c      	bls.n	8010e04 <_free_r+0x4c>
 8010dea:	6821      	ldr	r1, [r4, #0]
 8010dec:	1862      	adds	r2, r4, r1
 8010dee:	4293      	cmp	r3, r2
 8010df0:	bf04      	itt	eq
 8010df2:	681a      	ldreq	r2, [r3, #0]
 8010df4:	685b      	ldreq	r3, [r3, #4]
 8010df6:	6063      	str	r3, [r4, #4]
 8010df8:	bf04      	itt	eq
 8010dfa:	1852      	addeq	r2, r2, r1
 8010dfc:	6022      	streq	r2, [r4, #0]
 8010dfe:	6004      	str	r4, [r0, #0]
 8010e00:	e7ec      	b.n	8010ddc <_free_r+0x24>
 8010e02:	4613      	mov	r3, r2
 8010e04:	685a      	ldr	r2, [r3, #4]
 8010e06:	b10a      	cbz	r2, 8010e0c <_free_r+0x54>
 8010e08:	42a2      	cmp	r2, r4
 8010e0a:	d9fa      	bls.n	8010e02 <_free_r+0x4a>
 8010e0c:	6819      	ldr	r1, [r3, #0]
 8010e0e:	1858      	adds	r0, r3, r1
 8010e10:	42a0      	cmp	r0, r4
 8010e12:	d10b      	bne.n	8010e2c <_free_r+0x74>
 8010e14:	6820      	ldr	r0, [r4, #0]
 8010e16:	4401      	add	r1, r0
 8010e18:	1858      	adds	r0, r3, r1
 8010e1a:	4282      	cmp	r2, r0
 8010e1c:	6019      	str	r1, [r3, #0]
 8010e1e:	d1dd      	bne.n	8010ddc <_free_r+0x24>
 8010e20:	6810      	ldr	r0, [r2, #0]
 8010e22:	6852      	ldr	r2, [r2, #4]
 8010e24:	605a      	str	r2, [r3, #4]
 8010e26:	4401      	add	r1, r0
 8010e28:	6019      	str	r1, [r3, #0]
 8010e2a:	e7d7      	b.n	8010ddc <_free_r+0x24>
 8010e2c:	d902      	bls.n	8010e34 <_free_r+0x7c>
 8010e2e:	230c      	movs	r3, #12
 8010e30:	602b      	str	r3, [r5, #0]
 8010e32:	e7d3      	b.n	8010ddc <_free_r+0x24>
 8010e34:	6820      	ldr	r0, [r4, #0]
 8010e36:	1821      	adds	r1, r4, r0
 8010e38:	428a      	cmp	r2, r1
 8010e3a:	bf04      	itt	eq
 8010e3c:	6811      	ldreq	r1, [r2, #0]
 8010e3e:	6852      	ldreq	r2, [r2, #4]
 8010e40:	6062      	str	r2, [r4, #4]
 8010e42:	bf04      	itt	eq
 8010e44:	1809      	addeq	r1, r1, r0
 8010e46:	6021      	streq	r1, [r4, #0]
 8010e48:	605c      	str	r4, [r3, #4]
 8010e4a:	e7c7      	b.n	8010ddc <_free_r+0x24>
 8010e4c:	bd38      	pop	{r3, r4, r5, pc}
 8010e4e:	bf00      	nop
 8010e50:	20005770 	.word	0x20005770

08010e54 <_malloc_r>:
 8010e54:	b570      	push	{r4, r5, r6, lr}
 8010e56:	1ccd      	adds	r5, r1, #3
 8010e58:	f025 0503 	bic.w	r5, r5, #3
 8010e5c:	3508      	adds	r5, #8
 8010e5e:	2d0c      	cmp	r5, #12
 8010e60:	bf38      	it	cc
 8010e62:	250c      	movcc	r5, #12
 8010e64:	2d00      	cmp	r5, #0
 8010e66:	4606      	mov	r6, r0
 8010e68:	db01      	blt.n	8010e6e <_malloc_r+0x1a>
 8010e6a:	42a9      	cmp	r1, r5
 8010e6c:	d903      	bls.n	8010e76 <_malloc_r+0x22>
 8010e6e:	230c      	movs	r3, #12
 8010e70:	6033      	str	r3, [r6, #0]
 8010e72:	2000      	movs	r0, #0
 8010e74:	bd70      	pop	{r4, r5, r6, pc}
 8010e76:	f000 f8db 	bl	8011030 <__malloc_lock>
 8010e7a:	4a23      	ldr	r2, [pc, #140]	; (8010f08 <_malloc_r+0xb4>)
 8010e7c:	6814      	ldr	r4, [r2, #0]
 8010e7e:	4621      	mov	r1, r4
 8010e80:	b991      	cbnz	r1, 8010ea8 <_malloc_r+0x54>
 8010e82:	4c22      	ldr	r4, [pc, #136]	; (8010f0c <_malloc_r+0xb8>)
 8010e84:	6823      	ldr	r3, [r4, #0]
 8010e86:	b91b      	cbnz	r3, 8010e90 <_malloc_r+0x3c>
 8010e88:	4630      	mov	r0, r6
 8010e8a:	f000 f87b 	bl	8010f84 <_sbrk_r>
 8010e8e:	6020      	str	r0, [r4, #0]
 8010e90:	4629      	mov	r1, r5
 8010e92:	4630      	mov	r0, r6
 8010e94:	f000 f876 	bl	8010f84 <_sbrk_r>
 8010e98:	1c43      	adds	r3, r0, #1
 8010e9a:	d126      	bne.n	8010eea <_malloc_r+0x96>
 8010e9c:	230c      	movs	r3, #12
 8010e9e:	6033      	str	r3, [r6, #0]
 8010ea0:	4630      	mov	r0, r6
 8010ea2:	f000 f8c6 	bl	8011032 <__malloc_unlock>
 8010ea6:	e7e4      	b.n	8010e72 <_malloc_r+0x1e>
 8010ea8:	680b      	ldr	r3, [r1, #0]
 8010eaa:	1b5b      	subs	r3, r3, r5
 8010eac:	d41a      	bmi.n	8010ee4 <_malloc_r+0x90>
 8010eae:	2b0b      	cmp	r3, #11
 8010eb0:	d90f      	bls.n	8010ed2 <_malloc_r+0x7e>
 8010eb2:	600b      	str	r3, [r1, #0]
 8010eb4:	50cd      	str	r5, [r1, r3]
 8010eb6:	18cc      	adds	r4, r1, r3
 8010eb8:	4630      	mov	r0, r6
 8010eba:	f000 f8ba 	bl	8011032 <__malloc_unlock>
 8010ebe:	f104 000b 	add.w	r0, r4, #11
 8010ec2:	1d23      	adds	r3, r4, #4
 8010ec4:	f020 0007 	bic.w	r0, r0, #7
 8010ec8:	1ac3      	subs	r3, r0, r3
 8010eca:	d01b      	beq.n	8010f04 <_malloc_r+0xb0>
 8010ecc:	425a      	negs	r2, r3
 8010ece:	50e2      	str	r2, [r4, r3]
 8010ed0:	bd70      	pop	{r4, r5, r6, pc}
 8010ed2:	428c      	cmp	r4, r1
 8010ed4:	bf0d      	iteet	eq
 8010ed6:	6863      	ldreq	r3, [r4, #4]
 8010ed8:	684b      	ldrne	r3, [r1, #4]
 8010eda:	6063      	strne	r3, [r4, #4]
 8010edc:	6013      	streq	r3, [r2, #0]
 8010ede:	bf18      	it	ne
 8010ee0:	460c      	movne	r4, r1
 8010ee2:	e7e9      	b.n	8010eb8 <_malloc_r+0x64>
 8010ee4:	460c      	mov	r4, r1
 8010ee6:	6849      	ldr	r1, [r1, #4]
 8010ee8:	e7ca      	b.n	8010e80 <_malloc_r+0x2c>
 8010eea:	1cc4      	adds	r4, r0, #3
 8010eec:	f024 0403 	bic.w	r4, r4, #3
 8010ef0:	42a0      	cmp	r0, r4
 8010ef2:	d005      	beq.n	8010f00 <_malloc_r+0xac>
 8010ef4:	1a21      	subs	r1, r4, r0
 8010ef6:	4630      	mov	r0, r6
 8010ef8:	f000 f844 	bl	8010f84 <_sbrk_r>
 8010efc:	3001      	adds	r0, #1
 8010efe:	d0cd      	beq.n	8010e9c <_malloc_r+0x48>
 8010f00:	6025      	str	r5, [r4, #0]
 8010f02:	e7d9      	b.n	8010eb8 <_malloc_r+0x64>
 8010f04:	bd70      	pop	{r4, r5, r6, pc}
 8010f06:	bf00      	nop
 8010f08:	20005770 	.word	0x20005770
 8010f0c:	20005774 	.word	0x20005774

08010f10 <rand>:
 8010f10:	4b19      	ldr	r3, [pc, #100]	; (8010f78 <rand+0x68>)
 8010f12:	b510      	push	{r4, lr}
 8010f14:	681c      	ldr	r4, [r3, #0]
 8010f16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010f18:	b9d3      	cbnz	r3, 8010f50 <rand+0x40>
 8010f1a:	2018      	movs	r0, #24
 8010f1c:	f7ff ff00 	bl	8010d20 <malloc>
 8010f20:	f243 330e 	movw	r3, #13070	; 0x330e
 8010f24:	63a0      	str	r0, [r4, #56]	; 0x38
 8010f26:	8003      	strh	r3, [r0, #0]
 8010f28:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8010f2c:	8043      	strh	r3, [r0, #2]
 8010f2e:	f241 2334 	movw	r3, #4660	; 0x1234
 8010f32:	8083      	strh	r3, [r0, #4]
 8010f34:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8010f38:	80c3      	strh	r3, [r0, #6]
 8010f3a:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8010f3e:	8103      	strh	r3, [r0, #8]
 8010f40:	2305      	movs	r3, #5
 8010f42:	8143      	strh	r3, [r0, #10]
 8010f44:	230b      	movs	r3, #11
 8010f46:	8183      	strh	r3, [r0, #12]
 8010f48:	2201      	movs	r2, #1
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8010f50:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010f52:	480a      	ldr	r0, [pc, #40]	; (8010f7c <rand+0x6c>)
 8010f54:	690a      	ldr	r2, [r1, #16]
 8010f56:	694b      	ldr	r3, [r1, #20]
 8010f58:	4c09      	ldr	r4, [pc, #36]	; (8010f80 <rand+0x70>)
 8010f5a:	4350      	muls	r0, r2
 8010f5c:	fb04 0003 	mla	r0, r4, r3, r0
 8010f60:	fba2 2304 	umull	r2, r3, r2, r4
 8010f64:	3201      	adds	r2, #1
 8010f66:	4403      	add	r3, r0
 8010f68:	f143 0300 	adc.w	r3, r3, #0
 8010f6c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8010f70:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8010f74:	bd10      	pop	{r4, pc}
 8010f76:	bf00      	nop
 8010f78:	200001d4 	.word	0x200001d4
 8010f7c:	5851f42d 	.word	0x5851f42d
 8010f80:	4c957f2d 	.word	0x4c957f2d

08010f84 <_sbrk_r>:
 8010f84:	b538      	push	{r3, r4, r5, lr}
 8010f86:	4c06      	ldr	r4, [pc, #24]	; (8010fa0 <_sbrk_r+0x1c>)
 8010f88:	2300      	movs	r3, #0
 8010f8a:	4605      	mov	r5, r0
 8010f8c:	4608      	mov	r0, r1
 8010f8e:	6023      	str	r3, [r4, #0]
 8010f90:	f000 f85e 	bl	8011050 <_sbrk>
 8010f94:	1c43      	adds	r3, r0, #1
 8010f96:	d102      	bne.n	8010f9e <_sbrk_r+0x1a>
 8010f98:	6823      	ldr	r3, [r4, #0]
 8010f9a:	b103      	cbz	r3, 8010f9e <_sbrk_r+0x1a>
 8010f9c:	602b      	str	r3, [r5, #0]
 8010f9e:	bd38      	pop	{r3, r4, r5, pc}
 8010fa0:	200069f8 	.word	0x200069f8

08010fa4 <strcasecmp>:
 8010fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fa6:	4606      	mov	r6, r0
 8010fa8:	460f      	mov	r7, r1
 8010faa:	f816 4b01 	ldrb.w	r4, [r6], #1
 8010fae:	f000 f81f 	bl	8010ff0 <__locale_ctype_ptr>
 8010fb2:	4420      	add	r0, r4
 8010fb4:	f817 5b01 	ldrb.w	r5, [r7], #1
 8010fb8:	7843      	ldrb	r3, [r0, #1]
 8010fba:	f003 0303 	and.w	r3, r3, #3
 8010fbe:	2b01      	cmp	r3, #1
 8010fc0:	bf08      	it	eq
 8010fc2:	3420      	addeq	r4, #32
 8010fc4:	f000 f814 	bl	8010ff0 <__locale_ctype_ptr>
 8010fc8:	4428      	add	r0, r5
 8010fca:	7843      	ldrb	r3, [r0, #1]
 8010fcc:	f003 0303 	and.w	r3, r3, #3
 8010fd0:	2b01      	cmp	r3, #1
 8010fd2:	bf08      	it	eq
 8010fd4:	3520      	addeq	r5, #32
 8010fd6:	1b60      	subs	r0, r4, r5
 8010fd8:	d101      	bne.n	8010fde <strcasecmp+0x3a>
 8010fda:	2d00      	cmp	r5, #0
 8010fdc:	d1e5      	bne.n	8010faa <strcasecmp+0x6>
 8010fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010fe0 <strcpy>:
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010fe6:	f803 2b01 	strb.w	r2, [r3], #1
 8010fea:	2a00      	cmp	r2, #0
 8010fec:	d1f9      	bne.n	8010fe2 <strcpy+0x2>
 8010fee:	4770      	bx	lr

08010ff0 <__locale_ctype_ptr>:
 8010ff0:	4b04      	ldr	r3, [pc, #16]	; (8011004 <__locale_ctype_ptr+0x14>)
 8010ff2:	4a05      	ldr	r2, [pc, #20]	; (8011008 <__locale_ctype_ptr+0x18>)
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	6a1b      	ldr	r3, [r3, #32]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	bf08      	it	eq
 8010ffc:	4613      	moveq	r3, r2
 8010ffe:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8011002:	4770      	bx	lr
 8011004:	200001d4 	.word	0x200001d4
 8011008:	20000238 	.word	0x20000238

0801100c <__ascii_mbtowc>:
 801100c:	b082      	sub	sp, #8
 801100e:	b901      	cbnz	r1, 8011012 <__ascii_mbtowc+0x6>
 8011010:	a901      	add	r1, sp, #4
 8011012:	b142      	cbz	r2, 8011026 <__ascii_mbtowc+0x1a>
 8011014:	b14b      	cbz	r3, 801102a <__ascii_mbtowc+0x1e>
 8011016:	7813      	ldrb	r3, [r2, #0]
 8011018:	600b      	str	r3, [r1, #0]
 801101a:	7812      	ldrb	r2, [r2, #0]
 801101c:	1c10      	adds	r0, r2, #0
 801101e:	bf18      	it	ne
 8011020:	2001      	movne	r0, #1
 8011022:	b002      	add	sp, #8
 8011024:	4770      	bx	lr
 8011026:	4610      	mov	r0, r2
 8011028:	e7fb      	b.n	8011022 <__ascii_mbtowc+0x16>
 801102a:	f06f 0001 	mvn.w	r0, #1
 801102e:	e7f8      	b.n	8011022 <__ascii_mbtowc+0x16>

08011030 <__malloc_lock>:
 8011030:	4770      	bx	lr

08011032 <__malloc_unlock>:
 8011032:	4770      	bx	lr

08011034 <__ascii_wctomb>:
 8011034:	b149      	cbz	r1, 801104a <__ascii_wctomb+0x16>
 8011036:	2aff      	cmp	r2, #255	; 0xff
 8011038:	bf85      	ittet	hi
 801103a:	238a      	movhi	r3, #138	; 0x8a
 801103c:	6003      	strhi	r3, [r0, #0]
 801103e:	700a      	strbls	r2, [r1, #0]
 8011040:	f04f 30ff 	movhi.w	r0, #4294967295
 8011044:	bf98      	it	ls
 8011046:	2001      	movls	r0, #1
 8011048:	4770      	bx	lr
 801104a:	4608      	mov	r0, r1
 801104c:	4770      	bx	lr
	...

08011050 <_sbrk>:
 8011050:	4b04      	ldr	r3, [pc, #16]	; (8011064 <_sbrk+0x14>)
 8011052:	6819      	ldr	r1, [r3, #0]
 8011054:	4602      	mov	r2, r0
 8011056:	b909      	cbnz	r1, 801105c <_sbrk+0xc>
 8011058:	4903      	ldr	r1, [pc, #12]	; (8011068 <_sbrk+0x18>)
 801105a:	6019      	str	r1, [r3, #0]
 801105c:	6818      	ldr	r0, [r3, #0]
 801105e:	4402      	add	r2, r0
 8011060:	601a      	str	r2, [r3, #0]
 8011062:	4770      	bx	lr
 8011064:	20005778 	.word	0x20005778
 8011068:	200069fc 	.word	0x200069fc

0801106c <_init>:
 801106c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801106e:	bf00      	nop
 8011070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011072:	bc08      	pop	{r3}
 8011074:	469e      	mov	lr, r3
 8011076:	4770      	bx	lr

08011078 <_fini>:
 8011078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801107a:	bf00      	nop
 801107c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801107e:	bc08      	pop	{r3}
 8011080:	469e      	mov	lr, r3
 8011082:	4770      	bx	lr
